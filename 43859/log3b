bb.0.entry:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $ecx, $edx, $rdi, $rsi, $r8
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, $r8 :: (store 8 into %stack.3)
  MOV32mr %stack.7, 1, $noreg, 0, $noreg, $ecx :: (store 4 into %stack.7)
  renamable $r14d = COPY $edx
  renamable $r15 = COPY $rsi
  renamable $r12 = COPY $rdi
  renamable $eax = COPY renamable $r14d
  CMP32ri8 renamable $r14d, -1, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags
  JMP_1 %bb.1

############
bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $r12, $r15, $r14d
  renamable $rdi = LEA64r renamable $r12, 1, $noreg, 24, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @_ZNK17CBaseRecordVector4SizeEv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

############
bb.2.if.end:
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x30000000), %bb.4(0x50000000); %bb.3(37.50%), %bb.4(62.50%)
  liveins: $eax, $r12, $r15, $r14d
  TEST32rr renamable $eax, renamable $eax, implicit-def $eflags
  JCC_1 %bb.4, 5, implicit $eflags

############
bb.3:
; predecessors: %bb.2
  successors: %bb.65(0x80000000); %bb.65(100.00%)

  renamable $r13d = MOV32r0 implicit-def dead $eflags
  JMP_1 %bb.65

############
bb.4.for.body.lr.ph:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)
  liveins: $eax, $r12, $r15, $r14d
  renamable $eax = MOV32rr killed renamable $eax, implicit-def $rax
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rax :: (store 8 into %stack.2)
  renamable $r12 = nuw ADD64ri8 killed renamable $r12(tied-def 0), 24, implicit-def dead $eflags
  renamable $ebp = MOV32r0 implicit-def dead $eflags, implicit-def $rbp
  renamable $ebx = MOV32r0 implicit-def dead $eflags, implicit-def $rbx

############
bb.5.for.body:
; predecessors: %bb.4, %bb.9
  successors: %bb.6(0x30000000), %bb.7(0x50000000); %bb.6(37.50%), %bb.7(62.50%)
  liveins: $rbp, $rbx, $r12, $r15, $r14d
  CMP32ri8 renamable $r14d, -1, implicit-def $eflags
  JCC_1 %bb.7, 5, implicit $eflags
  JMP_1 %bb.6

############
bb.6.for.body.cond.end_crit_edge:
; predecessors: %bb.5
  successors: %bb.8(0x80000000); %bb.8(100.00%)
  liveins: $rbp, $rbx, $r12, $r15, $r14d
  renamable $esi = COPY renamable $ebp
  JMP_1 %bb.8

############
bb.7.cond.false:
; predecessors: %bb.5
  successors: %bb.8(0x80000000); %bb.8(100.00%)
  liveins: $rbp, $rbx, $r12, $r15, $r14d
  renamable $esi = MOV32rm renamable $r15, 4, renamable $rbp, 0, $noreg :: (load 4 from %ir.scevgep248)

############
bb.8.cond.end:
; predecessors: %bb.7, %bb.6
  successors: %bb.9(0x7ffff800), %bb.10(0x00000800); %bb.9(100.00%), %bb.10(0.00%)
  liveins: $esi, $rbp, $rbx, $r12, $r15, $r14d
  EH_LABEL <mcsymbol .Ltmp81>
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY renamable $r12
  CALL64pcrel32 @_ZN13CObjectVectorIN8NArchive4NSwf4CTagEEixEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  EH_LABEL <mcsymbol .Ltmp82>
  JMP_1 %bb.9

############
bb.9.invoke.cont9:
; predecessors: %bb.8
  successors: %bb.13(0x04000000), %bb.5(0x7c000000); %bb.13(3.12%), %bb.5(96.88%)
  liveins: $rax, $rbp, $rbx, $r12, $r15, $r14d
  renamable $rax = nuw ADD64ri8 killed renamable $rax(tied-def 0), 8, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed renamable $rax
  CALL64pcrel32 @_ZNK7CBufferIhE11GetCapacityEv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $rbx = ADD64rr killed renamable $rbx(tied-def 0), killed renamable $rax, implicit-def dead $eflags
  renamable $rbp = nuw nsw ADD64ri8 killed renamable $rbp(tied-def 0), 1, implicit-def dead $eflags
  CMP64mr %stack.2, 1, $noreg, 0, $noreg, renamable $rbp, implicit-def $eflags :: (load 8 from %stack.2)
  JCC_1 %bb.13, 4, implicit $eflags
  JMP_1 %bb.5

############
bb.10.lpad8.loopexit (landing-pad):
; predecessors: %bb.8
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $rax, $rdx
  EH_LABEL <mcsymbol .Ltmp83>
  renamable $rbx = COPY $rdx
  renamable $rbp = COPY $rax
  JMP_1 %bb.12

############
bb.11.lpad8.loopexit.split-lp (landing-pad):
; predecessors: %bb.13
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $rax, $rdx
  EH_LABEL <mcsymbol .Ltmp86>
  renamable $rbx = COPY $rdx
  renamable $rbp = COPY $rax

############
bb.12.lpad8:
; predecessors: %bb.10, %bb.11
  successors: %bb.61(0x80000000); %bb.61(100.00%)
  liveins: $rbp, $rbx
  JMP_1 %bb.61

############
bb.13.for.end:
; predecessors: %bb.9
  successors: %bb.14(0x7ffff800), %bb.11(0x00000800); %bb.14(100.00%), %bb.11(0.00%)
  liveins: $rbx, $r12, $r15, $r14d
  renamable $rdi = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load 8 from %stack.3)
  renamable $rax = MOV64rm renamable $rdi, 1, $noreg, 0, $noreg :: (load 8 from %ir.7)
  EH_LABEL <mcsymbol .Ltmp84>
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rsi = COPY killed renamable $rbx
  CALL64m killed renamable $rax, 1, $noreg, 40, $noreg, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax :: (load 8 from %ir.vfn)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  EH_LABEL <mcsymbol .Ltmp85>
  JMP_1 %bb.14

############
bb.14.invoke.cont13:
; predecessors: %bb.13
  successors: %bb.15(0x7ffff800), %bb.23(0x00000800); %bb.15(100.00%), %bb.23(0.00%)
  liveins: $r12, $r15, $r14d
  EH_LABEL <mcsymbol .Ltmp87>
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 72
  CALL64pcrel32 @_Znwm, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $rbp = COPY $rax
  EH_LABEL <mcsymbol .Ltmp88>
  JMP_1 %bb.15

############
bb.15.invoke.cont16:
; predecessors: %bb.14
  successors: %bb.16(0x7ffff800), %bb.24(0x00000800); %bb.16(100.00%), %bb.24(0.00%)
  liveins: $rbp, $r12, $r15, $r14d
  EH_LABEL <mcsymbol .Ltmp90>
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY renamable $rbp
  CALL64pcrel32 @_ZN14CLocalProgressC1Ev, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  EH_LABEL <mcsymbol .Ltmp91>
  JMP_1 %bb.16

############
bb.16.invoke.cont19:
; predecessors: %bb.15
  successors: %bb.17(0x7ffff800), %bb.25(0x00000800); %bb.17(100.00%), %bb.25(0.00%)
  liveins: $rbp, $r12, $r15, $r14d
  EH_LABEL <mcsymbol .Ltmp93>
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = LEA64r %stack.0.progress, 1, $noreg, 0, $noreg
  $rsi = COPY renamable $rbp
  CALL64pcrel32 @_ZN9CMyComPtrI21ICompressProgressInfoEC2EPS0_, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  EH_LABEL <mcsymbol .Ltmp94>
  JMP_1 %bb.17

############
bb.17.invoke.cont21:
; predecessors: %bb.16
  successors: %bb.18(0x7ffff800), %bb.26(0x00000800); %bb.18(100.00%), %bb.26(0.00%)
  liveins: $rbp, $r12, $r15, $r14d
  EH_LABEL <mcsymbol .Ltmp96>
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $r13d = MOV32r0 implicit-def dead $eflags
  MOV64mr %stack.4, 1, $noreg, 0, $noreg, renamable $rbp :: (store 8 into %stack.4)
  $rdi = COPY killed renamable $rbp
  $rsi = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load 8 from %stack.3)
  $edx = MOV32r0 implicit-def dead $eflags
  CALL64pcrel32 @_ZN14CLocalProgress4InitEP9IProgressb, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $edx, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  EH_LABEL <mcsymbol .Ltmp97>
  JMP_1 %bb.18

############
bb.18.for.cond24.preheader:
; predecessors: %bb.17
  successors: %bb.58(0x30000000), %bb.19(0x50000000); %bb.58(37.50%), %bb.19(62.50%)
  liveins: $r12, $r15, $r13d, $r14d
  CMP32mi8 %stack.2, 1, $noreg, 0, $noreg, target-flags(x86-plt) 0, implicit-def $eflags :: (load 4 from %stack.2, align 8)
  JCC_1 %bb.58, 4, implicit $eflags
  JMP_1 %bb.19

############
bb.19.for.body26.lr.ph:
; predecessors: %bb.18
  successors: %bb.20(0x80000000); %bb.20(100.00%)
  liveins: $r12, $r15, $r14d
  MOV64mr %stack.9, 1, $noreg, 0, $noreg, killed renamable $r12 :: (store 8 into %stack.9)
  MOV64mr %stack.10, 1, $noreg, 0, $noreg, killed renamable $r15 :: (store 8 into %stack.10)
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, killed renamable $r14d :: (store 4 into %stack.8)
  renamable $eax = MOV32r0 implicit-def dead $eflags
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load 4 from %stack.7)
  renamable $al = SETCCr 5, implicit $eflags, implicit killed $eax, implicit-def $eax
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %stack.5)
  renamable $ebx = MOV32r0 implicit-def dead $eflags, implicit-def $rbx
  renamable $r12d = MOV32r0 implicit-def dead $eflags, implicit-def $r12
  renamable $r14 = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (load 8 from %stack.4)

############
bb.20.for.body26:
; predecessors: %bb.19, %bb.54
  successors: %bb.21(0x7ffff800), %bb.27(0x00000800); %bb.21(100.00%), %bb.27(0.00%)
  liveins: $rbx, $r12, $r14
  MOV64mr renamable $r14, 1, $noreg, 56, $noreg, renamable $r12 :: (store 8 into %ir.16, !tbaa !43)
  MOV64mr renamable $r14, 1, $noreg, 48, $noreg, renamable $r12 :: (store 8 into %ir.17, !tbaa !47)
  EH_LABEL <mcsymbol .Ltmp99>
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY renamable $r14
  CALL64pcrel32 @_ZN14CLocalProgress6SetCurEv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $r13d = COPY $eax
  EH_LABEL <mcsymbol .Ltmp100>
  JMP_1 %bb.21

############
bb.21.invoke.cont28:
; predecessors: %bb.20
  successors: %bb.28(0x7c000000), %bb.22(0x04000000); %bb.28(96.88%), %bb.22(3.12%)
  liveins: $rbx, $r12, $r14, $r13d
  TEST32rr renamable $r13d, renamable $r13d, implicit-def $eflags
  JCC_1 %bb.28, 4, implicit $eflags

############
bb.22:
; predecessors: %bb.21
  successors: %bb.58(0x80000000); %bb.58(100.00%)
  liveins: $r13d
  JMP_1 %bb.58

############
bb.23.lpad15 (landing-pad):
; predecessors: %bb.14
  successors: %bb.61(0x80000000); %bb.61(100.00%)
  liveins: $rax, $rdx
  EH_LABEL <mcsymbol .Ltmp89>
  renamable $rbx = COPY $rdx
  renamable $rbp = COPY $rax
  JMP_1 %bb.61

############
bb.24.lpad18 (landing-pad):
; predecessors: %bb.15
  successors: %bb.61(0x80000000); %bb.61(100.00%)
  liveins: $rax, $rbp, $rdx
  EH_LABEL <mcsymbol .Ltmp92>
  renamable $rbx = COPY $rdx
  renamable $rdi = COPY killed renamable $rbp
  renamable $rbp = COPY $rax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @_ZdlPv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.61

############
bb.25.lpad20 (landing-pad):
; predecessors: %bb.16
  successors: %bb.60(0x80000000); %bb.60(100.00%)
  liveins: $rax, $rdx
  EH_LABEL <mcsymbol .Ltmp95>
  renamable $rbx = COPY $rdx
  renamable $rbp = COPY $rax
  JMP_1 %bb.60

############
bb.26.lpad22 (landing-pad):
; predecessors: %bb.17
  successors: %bb.59(0x80000000); %bb.59(100.00%)
  liveins: $rax, $rdx
  EH_LABEL <mcsymbol .Ltmp98>
  renamable $rbx = COPY $rdx
  renamable $rbp = COPY $rax
  JMP_1 %bb.59

############
bb.27.lpad27 (landing-pad):
; predecessors: %bb.20
  successors: %bb.59(0x80000000); %bb.59(100.00%)
  liveins: $rax, $rdx
  EH_LABEL <mcsymbol .Ltmp101>
  renamable $rbx = COPY $rdx
  renamable $rbp = COPY $rax
  JMP_1 %bb.59

############
bb.28.cleanup.cont:
; predecessors: %bb.21
  successors: %bb.29(0x30000000), %bb.30(0x50000000); %bb.29(37.50%), %bb.30(62.50%)
  liveins: $rbx, $r12, $r14
  CMP32mi8 %stack.8, 1, $noreg, 0, $noreg, -1, implicit-def $eflags :: (load 4 from %stack.8)
  MOV64mr %stack.4, 1, $noreg, 0, $noreg, renamable $rbx :: (store 8 into %stack.4)
  JCC_1 %bb.30, 5, implicit $eflags
  JMP_1 %bb.29

############
bb.29.cleanup.cont.cond.end40_crit_edge:
; predecessors: %bb.28
  successors: %bb.31(0x80000000); %bb.31(100.00%)
  liveins: $rbx, $r12, $r14
  renamable $ebx = KILL renamable $ebx, implicit killed $rbx
  JMP_1 %bb.31

############
bb.30.cond.false37:
; predecessors: %bb.28
  successors: %bb.31(0x80000000); %bb.31(100.00%)
  liveins: $rbx, $r12, $r14
  renamable $rax = MOV64rm %stack.10, 1, $noreg, 0, $noreg :: (load 8 from %stack.10)
  renamable $ebx = MOV32rm killed renamable $rax, 4, killed renamable $rbx, 0, $noreg :: (load 4 from %ir.scevgep)

############
bb.31.cond.end40:
; predecessors: %bb.30, %bb.29
  successors: %bb.32(0x7ffff800), %bb.35(0x00000800); %bb.32(100.00%), %bb.35(0.00%)
  liveins: $ebx, $r12, $r14
  EH_LABEL <mcsymbol .Ltmp102>
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV64rm %stack.9, 1, $noreg, 0, $noreg :: (load 8 from %stack.9)
  $esi = COPY renamable $ebx
  CALL64pcrel32 @_ZN13CObjectVectorIN8NArchive4NSwf4CTagEEixEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $r15 = COPY $rax
  EH_LABEL <mcsymbol .Ltmp103>
  JMP_1 %bb.32

############
bb.32.invoke.cont44:
; predecessors: %bb.31
  successors: %bb.33(0x7ffff800), %bb.36(0x00000800); %bb.33(100.00%), %bb.36(0.00%)
  liveins: $ebx, $r12, $r14, $r15
  renamable $r15 = nuw ADD64ri8 killed renamable $r15(tied-def 0), 8, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY renamable $r15
  CALL64pcrel32 @_ZNK7CBufferIhE11GetCapacityEv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.6, 1, $noreg, 0, $noreg, $rax :: (store 8 into %stack.6)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $rbp = LEA64r %stack.1.outStream, 1, $noreg, 0, $noreg
  $rdi = COPY renamable $rbp
  CALL64pcrel32 @_ZN9CMyComPtrI20ISequentialOutStreamEC2Ev, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed renamable $rbp
  CALL64pcrel32 @_ZN9CMyComPtrI20ISequentialOutStreamEadEv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load 8 from %stack.3)
  renamable $rbp = MOV64rm renamable $rdi, 1, $noreg, 0, $noreg :: (load 8 from %ir.35)
  EH_LABEL <mcsymbol .Ltmp105>
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $esi = COPY killed renamable $ebx
  $rdx = COPY killed renamable $rax
  $ecx = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %stack.5)
  CALL64m killed renamable $rbp, 1, $noreg, 56, $noreg, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx, implicit $ecx, implicit-def $rsp, implicit-def $ssp, implicit-def $eax :: (load 8 from %ir.vfn57)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $r13d = COPY $eax
  EH_LABEL <mcsymbol .Ltmp106>
  JMP_1 %bb.33

############
bb.33.invoke.cont58:
; predecessors: %bb.32
  successors: %bb.37(0x7c000000), %bb.34(0x04000000); %bb.37(96.88%), %bb.34(3.12%)
  liveins: $r12, $r14, $r15, $r13d
  TEST32rr renamable $r13d, renamable $r13d, implicit-def $eflags
  renamable $rbx = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (load 8 from %stack.4)
  JCC_1 %bb.37, 4, implicit $eflags

############
bb.34:
; predecessors: %bb.33
  successors: %bb.56(0x80000000); %bb.56(100.00%)
  liveins: $r13d
  JMP_1 %bb.56

############
bb.35.lpad43 (landing-pad):
; predecessors: %bb.31
  successors: %bb.59(0x80000000); %bb.59(100.00%)
  liveins: $rax, $rdx
  EH_LABEL <mcsymbol .Ltmp104>
  renamable $rbx = COPY $rdx
  renamable $rbp = COPY $rax
  JMP_1 %bb.59

############
bb.36.lpad53 (landing-pad):
; predecessors: %bb.32
  successors: %bb.57(0x80000000); %bb.57(100.00%)
  liveins: $rax, $rdx
  EH_LABEL <mcsymbol .Ltmp107>
  renamable $rbx = COPY $rdx
  renamable $rbp = COPY $rax
  JMP_1 %bb.57

############
bb.37.cleanup.cont65:
; predecessors: %bb.33
  successors: %bb.40(0x50000000), %bb.38(0x30000000); %bb.40(62.50%), %bb.38(37.50%)
  liveins: $rbx, $r12, $r14, $r15
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load 4 from %stack.7)
  JCC_1 %bb.40, 5, implicit $eflags
  JMP_1 %bb.38

############
bb.38.land.lhs.true:
; predecessors: %bb.37
  successors: %bb.54(0x40000000), %bb.40(0x40000000); %bb.54(50.00%), %bb.40(50.00%)
  liveins: $rbx, $r12, $r14, $r15
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = LEA64r %stack.1.outStream, 1, $noreg, 0, $noreg
  CALL64pcrel32 @_ZNK9CMyComPtrI20ISequentialOutStreamEntEv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $al
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  TEST8rr killed renamable $al, renamable $al, implicit-def $eflags
  JCC_1 %bb.54, 5, implicit $eflags
  JMP_1 %bb.40

############
bb.39.lpad67 (landing-pad):
; predecessors: %bb.49
  successors: %bb.57(0x80000000); %bb.57(100.00%)
  liveins: $rax, $rdx
  EH_LABEL <mcsymbol .Ltmp116>
  renamable $rbx = COPY $rdx
  renamable $rbp = COPY $rax
  JMP_1 %bb.57

############
bb.40.if.end71:
; predecessors: %bb.37, %bb.38
  successors: %bb.41(0x7ffff800), %bb.43(0x00000800); %bb.41(100.00%), %bb.43(0.00%)
  liveins: $rbx, $r12, $r14, $r15
  renamable $rdi = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load 8 from %stack.3)
  renamable $rax = MOV64rm renamable $rdi, 1, $noreg, 0, $noreg :: (load 8 from %ir.44)
  EH_LABEL <mcsymbol .Ltmp108>
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $esi = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %stack.5)
  CALL64m killed renamable $rax, 1, $noreg, 64, $noreg, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax :: (load 8 from %ir.vfn74)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $r13d = COPY $eax
  EH_LABEL <mcsymbol .Ltmp109>
  JMP_1 %bb.41

############
bb.41.invoke.cont76:
; predecessors: %bb.40
  successors: %bb.44(0x7c000000), %bb.42(0x04000000); %bb.44(96.88%), %bb.42(3.12%)
  liveins: $rbx, $r12, $r14, $r15, $r13d
  TEST32rr renamable $r13d, renamable $r13d, implicit-def $eflags
  JCC_1 %bb.44, 4, implicit $eflags

############
bb.42:
; predecessors: %bb.41
  successors: %bb.56(0x80000000); %bb.56(100.00%)
  liveins: $r13d
  JMP_1 %bb.56

############
bb.43.lpad75 (landing-pad):
; predecessors: %bb.40
  successors: %bb.57(0x80000000); %bb.57(100.00%)
  liveins: $rax, $rdx
  EH_LABEL <mcsymbol .Ltmp110>
  renamable $rbx = COPY $rdx
  renamable $rbp = COPY $rax
  JMP_1 %bb.57

############
bb.44.cleanup.cont83:
; predecessors: %bb.41
  successors: %bb.49(0x30000000), %bb.45(0x50000000); %bb.49(37.50%), %bb.45(62.50%)
  liveins: $rbx, $r12, $r14, $r15
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $rbp = LEA64r %stack.1.outStream, 1, $noreg, 0, $noreg
  $rdi = COPY renamable $rbp
  CALL64pcrel32 @_ZNK9CMyComPtrI20ISequentialOutStreamEcvPS0_Ev, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  TEST64rr killed renamable $rax, renamable $rax, implicit-def $eflags
  JCC_1 %bb.49, 4, implicit $eflags
  JMP_1 %bb.45

############
bb.45.if.then87:
; predecessors: %bb.44
  successors: %bb.46(0x7ffff800), %bb.48(0x00000800); %bb.46(100.00%), %bb.48(0.00%)
  liveins: $rbp, $r12, $r14, $r15
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed renamable $rbp
  CALL64pcrel32 @_ZNK9CMyComPtrI20ISequentialOutStreamEcvPS0_Ev, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $r13 = COPY $rax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY renamable $r15
  CALL64pcrel32 @_ZNK7CBufferIhEcvPKhEv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $rbx = COPY $rax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed renamable $r15
  CALL64pcrel32 @_ZNK7CBufferIhE11GetCapacityEv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  EH_LABEL <mcsymbol .Ltmp111>
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed renamable $r13
  $rsi = COPY killed renamable $rbx
  $rdx = COPY killed renamable $rax
  CALL64pcrel32 @_Z11WriteStreamP20ISequentialOutStreamPKvm, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $r13d = COPY $eax
  EH_LABEL <mcsymbol .Ltmp112>
  JMP_1 %bb.46

############
bb.46.invoke.cont96:
; predecessors: %bb.45
  successors: %bb.49(0x7c000000), %bb.47(0x04000000); %bb.49(96.88%), %bb.47(3.12%)
  liveins: $r12, $r14, $r13d
  TEST32rr renamable $r13d, renamable $r13d, implicit-def $eflags
  renamable $rbx = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (load 8 from %stack.4)
  renamable $rbp = LEA64r %stack.1.outStream, 1, $noreg, 0, $noreg
  JCC_1 %bb.49, 4, implicit $eflags

############
bb.47:
; predecessors: %bb.46
  successors: %bb.56(0x80000000); %bb.56(100.00%)
  liveins: $r13d
  JMP_1 %bb.56

############
bb.48.lpad89 (landing-pad):
; predecessors: %bb.45
  successors: %bb.57(0x80000000); %bb.57(100.00%)
  liveins: $rax, $rdx
  EH_LABEL <mcsymbol .Ltmp113>
  renamable $rbx = COPY $rdx
  renamable $rbp = COPY $rax
  JMP_1 %bb.57

############
bb.49.if.end104:
; predecessors: %bb.44, %bb.46
  successors: %bb.50(0x7ffff800), %bb.39(0x00000800); %bb.50(100.00%), %bb.39(0.00%)
  liveins: $rbp, $rbx, $r12, $r14
  EH_LABEL <mcsymbol .Ltmp114>
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed renamable $rbp
  CALL64pcrel32 @_ZN9CMyComPtrI20ISequentialOutStreamE7ReleaseEv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  EH_LABEL <mcsymbol .Ltmp115>
  JMP_1 %bb.50

############
bb.50.invoke.cont105:
; predecessors: %bb.49
  successors: %bb.51(0x7ffff800), %bb.53(0x00000800); %bb.51(100.00%), %bb.53(0.00%)
  liveins: $rbx, $r12, $r14
  renamable $rdi = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load 8 from %stack.3)
  renamable $rax = MOV64rm renamable $rdi, 1, $noreg, 0, $noreg :: (load 8 from %ir.48)
  EH_LABEL <mcsymbol .Ltmp117>
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $esi = MOV32r0 implicit-def dead $eflags
  CALL64m killed renamable $rax, 1, $noreg, 72, $noreg, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax :: (load 8 from %ir.vfn108)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $r13d = COPY $eax
  EH_LABEL <mcsymbol .Ltmp118>
  JMP_1 %bb.51

############
bb.51.invoke.cont110:
; predecessors: %bb.50
  successors: %bb.54(0x7c000000), %bb.52(0x04000000); %bb.54(96.88%), %bb.52(3.12%)
  liveins: $rbx, $r12, $r14, $r13d
  TEST32rr renamable $r13d, renamable $r13d, implicit-def $eflags
  JCC_1 %bb.54, 4, implicit $eflags

############
bb.52:
; predecessors: %bb.51
  successors: %bb.56(0x80000000); %bb.56(100.00%)
  liveins: $r13d
  JMP_1 %bb.56

############
bb.53.lpad109 (landing-pad):
; predecessors: %bb.50
  successors: %bb.57(0x80000000); %bb.57(100.00%)
  liveins: $rax, $rdx
  EH_LABEL <mcsymbol .Ltmp119>
  renamable $rbx = COPY $rdx
  renamable $rbp = COPY $rax
  JMP_1 %bb.57

############
bb.54.cleanup118.thread:
; predecessors: %bb.38, %bb.51
  successors: %bb.55(0x04000000), %bb.20(0x7c000000); %bb.55(3.12%), %bb.20(96.88%)
  liveins: $rbx, $r12, $r14
  renamable $r12 = ADD64rm killed renamable $r12(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 8 from %stack.6)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = LEA64r %stack.1.outStream, 1, $noreg, 0, $noreg
  CALL64pcrel32 @_ZN9CMyComPtrI20ISequentialOutStreamED2Ev, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $rbx = nuw nsw ADD64ri8 killed renamable $rbx(tied-def 0), 1, implicit-def dead $eflags
  CMP64mr %stack.2, 1, $noreg, 0, $noreg, renamable $rbx, implicit-def $eflags :: (load 8 from %stack.2)
  JCC_1 %bb.20, 5, implicit $eflags

############
bb.55:
; predecessors: %bb.54
  successors: %bb.58(0x80000000); %bb.58(100.00%)

  renamable $r13d = MOV32r0 implicit-def dead $eflags
  JMP_1 %bb.58

############
bb.56.cleanup118:
; predecessors: %bb.34, %bb.42, %bb.47, %bb.52
  successors: %bb.58(0x80000000); %bb.58(100.00%)
  liveins: $r13d
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = LEA64r %stack.1.outStream, 1, $noreg, 0, $noreg
  CALL64pcrel32 @_ZN9CMyComPtrI20ISequentialOutStreamED2Ev, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.58

############
bb.57.ehcleanup:
; predecessors: %bb.36, %bb.43, %bb.48, %bb.39, %bb.53
  successors: %bb.59(0x80000000); %bb.59(100.00%)
  liveins: $rbp, $rbx
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = LEA64r %stack.1.outStream, 1, $noreg, 0, $noreg
  CALL64pcrel32 @_ZN9CMyComPtrI20ISequentialOutStreamED2Ev, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.59

############
bb.58.cleanup132:
; predecessors: %bb.18, %bb.56, %bb.22, %bb.55
  successors: %bb.65(0x80000000); %bb.65(100.00%)
  liveins: $r13d
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = LEA64r %stack.0.progress, 1, $noreg, 0, $noreg
  CALL64pcrel32 @_ZN9CMyComPtrI21ICompressProgressInfoED2Ev, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.65

############
bb.59.ehcleanup133:
; predecessors: %bb.26, %bb.27, %bb.35, %bb.57
  successors: %bb.60(0x80000000); %bb.60(100.00%)
  liveins: $rbp, $rbx
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = LEA64r %stack.0.progress, 1, $noreg, 0, $noreg
  CALL64pcrel32 @_ZN9CMyComPtrI21ICompressProgressInfoED2Ev, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

############
bb.60.ehcleanup135:
; predecessors: %bb.25, %bb.59
  successors: %bb.61(0x80000000); %bb.61(100.00%)
  liveins: $rbp, $rbx

############
bb.61.ehcleanup139:
; predecessors: %bb.12, %bb.23, %bb.24, %bb.60
  successors: %bb.62(0x00000001), %bb.63(0x7fffffff); %bb.62(0.00%), %bb.63(100.00%)
  liveins: $rbp, $rbx
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed renamable $rbp
  CALL64pcrel32 @__cxa_begin_catch, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $rbp = COPY $rax
  CMP32ri8 renamable $ebx, 2, implicit-def $eflags, implicit killed $rbx
  JCC_1 %bb.63, 5, implicit $eflags
  JMP_1 %bb.62

############
bb.62.catch145:
; predecessors: %bb.61
  successors: %bb.66(0x7ffff800), %bb.64(0x00000800); %bb.66(100.00%), %bb.64(0.00%)
  liveins: $rbp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 8
  CALL64pcrel32 @__cxa_allocate_exception, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV64mr renamable $rax, 1, $noreg, 0, $noreg, killed renamable $rbp :: (store 8 into %ir.60, align 16)
  EH_LABEL <mcsymbol .Ltmp120>
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rsi = MOV32ri64 @_ZTIPKc
  $rdi = COPY killed renamable $rax
  dead $edx = MOV32r0 implicit-def dead $eflags, implicit-def $rdx
  CALL64pcrel32 @__cxa_throw, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  EH_LABEL <mcsymbol .Ltmp121>
  JMP_1 %bb.66

############
bb.63.catch:
; predecessors: %bb.61
  successors: %bb.65(0x80000000); %bb.65(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @__cxa_end_catch, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $r13d = MOV32ri -2147024882
  JMP_1 %bb.65

############
bb.64.lpad147 (landing-pad):
; predecessors: %bb.62
  liveins: $rax, $rdx
  EH_LABEL <mcsymbol .Ltmp122>
  renamable $rbx = COPY $rax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @__cxa_end_catch, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed renamable $rbx
  CALL64pcrel32 @_Unwind_Resume, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

############
bb.65.return:
; predecessors: %bb.63, %bb.58, %bb.3
  liveins: $r13d
  $eax = COPY killed renamable $r13d
  RET 0, $eax

############
bb.66.unreachable:
; predecessors: %bb.62

