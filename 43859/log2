--- |
  ; ModuleID = 'phi-dbg.ll'
  source_filename = "phi-dbg.ll"
  target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
  target triple = "x86_64"
  
  define i32 @func(i32 %a0) personality void ()* @personality {
  bb1:
    %v = icmp slt i32 %a0, 0
    br i1 %v, label %bb2, label %bb3
  
  bb2:                                              ; preds = %bb1
    br label %bb3
  
  bb3:                                              ; preds = %bb2, %bb1
    %0 = phi i32 [ 2, %bb2 ], [ 1, %bb1 ]
    call void @llvm.dbg.value(metadata i32 %0, metadata !8, metadata !DIExpression()), !dbg !13
    invoke void @foo()
            to label %end unwind label %lpad
  
  end:                                              ; preds = %bb3
    ret i32 %0
  
  lpad:                                             ; preds = %bb3
    %1 = landingpad { i8*, i32 }
            cleanup
    unreachable
  }
  
  ; Function Attrs: nounwind readnone speculatable willreturn
  declare void @llvm.dbg.declare(metadata, metadata, metadata) #0
  
  declare void @foo()
  
  declare void @personality()
  
  ; Function Attrs: nounwind readnone speculatable willreturn
  declare void @llvm.dbg.value(metadata, metadata, metadata) #0
  
  ; Function Attrs: nounwind
  declare void @llvm.stackprotector(i8*, i8**) #1
  
  attributes #0 = { nounwind readnone speculatable willreturn }
  attributes #1 = { nounwind }
  
  !llvm.dbg.cu = !{!0}
  !llvm.module.flags = !{!3, !4, !5, !6}
  !llvm.ident = !{!7}
  
  !0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2)
  !1 = !DIFile(filename: "a.c", directory: "/tmp")
  !2 = !{}
  !3 = !{i32 2, !"Dwarf Version", i32 4}
  !4 = !{i32 2, !"Debug Info Version", i32 3}
  !5 = !{i32 1, !"wchar_size", i32 4}
  !6 = !{i32 1, !"min_enum_size", i32 4}
  !7 = !{!"clang"}
  !8 = !DILocalVariable(name: "c", scope: !9, file: !1, line: 3, type: !12)
  !9 = distinct !DISubprogram(name: "func", scope: !1, file: !1, line: 1, type: !10, scopeLine: 2, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
  !10 = !DISubroutineType(types: !11)
  !11 = !{!12, !12}
  !12 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
  !13 = !DILocation(line: 3, column: 13, scope: !9)

...
---
name:            func
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
registers:
  - { id: 0, class: gr32, preferred-register: '' }
  - { id: 1, class: gr32, preferred-register: '' }
  - { id: 2, class: gr32, preferred-register: '' }
  - { id: 3, class: gr32, preferred-register: '' }
  - { id: 4, class: gr32, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr32, preferred-register: '' }
liveins:
  - { reg: '$edi', virtual-reg: '%1' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.bb1:
    successors: %bb.2(0x40000000), %bb.1(0x40000000)
    liveins: $edi
  
    %1:gr32 = COPY $edi
    %2:gr32 = COPY killed %1
    CMP32ri8 %2, 0, implicit-def $eflags
    %3:gr32 = MOV32ri 1
    %7:gr32 = COPY %3
    JCC_1 %bb.2, 13, implicit $eflags
  
  bb.1.bb2:
    successors: %bb.2(0x80000000)
  
    %4:gr32 = MOV32ri 2
    %7:gr32 = COPY %4
    JMP_1 %bb.2
  
  bb.2.bb3:
    successors: %bb.3(0x40000000), %bb.4(0x40000000)
  
    EH_LABEL <mcsymbol .Ltmp0>
    %0:gr32 = COPY %7
    DBG_VALUE %0, $noreg, !8, !DIExpression(), debug-location !13
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    CALL64pcrel32 @foo, csr_64, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    EH_LABEL <mcsymbol .Ltmp1>
    JMP_1 %bb.3
  
  bb.3.end:
    $eax = COPY %0
    RETQ implicit $eax
  
  bb.4.lpad (landing-pad):
    liveins: $rax, $rdx
  
    EH_LABEL <mcsymbol .Ltmp2>
    %6:gr64 = COPY killed $rdx
    %5:gr64 = COPY killed $rax

...
