# Generated with
#
# clang++ -g -w -O1 -S -emit-llvm test.cc
# llc -stop-before=branch-folder test.ll
#
# template <typename, typename = int> class e;
# class allocator {
# public:
#   ~allocator();
# };
# template <typename, typename> class e {
# public:
#   e(char *, allocator = allocator());
# };
# template <typename b, typename c, typename d> bool operator==(e<c, d>, b);
# class f {
# public:
#   f(int *, int *, int *, int, int, int, int);
#   e<char> g();
#   void j();
# };
# int h, i;
# class k {
#   void l();
#   bool m_fn4();
#   int m;
#   int n;
#   int q;
#   int fmap;
# };
# void k::l() {
#   e<char> o = "";
#   for (;;) {
#     int p = 0;
#     for (;;) {
#       if (m_fn4())
#         break;
#       f a(&q, &fmap, &m, n, h, i, 0);
#       if (a.g() == "")
#         a.j();
#     }
#   }
# }

# RUN: llc -o - %s -mtriple=x86_64-- -run-pass=branch-folder | FileCheck %s
--- |
  ; ModuleID = 'test.ll'
  source_filename = "test.cc"
  target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
  target triple = "x86_64-unknown-linux-gnu"
  
  
  ; Function Attrs: noreturn uwtable
  define dso_local void @l() {ret void} 
  
  ; Function Attrs: argmemonly nounwind willreturn
  declare dso_local void @_ZN1eIciEC1EPc9allocator() unnamed_addr #2
  
  
  ; Function Attrs: nounwind
  declare dso_local void @_ZN9allocatorD1Ev() unnamed_addr #3
  
  declare dso_local zeroext i1 @_ZN1k5m_fn4Ev() local_unnamed_addr #2
  
  declare dso_local void @_ZN1fC1EPiS0_S0_iiii(i32*, i32*, i32*, i32, i32, i32, i32) unnamed_addr #2
  
  declare dso_local zeroext i1 @_ZeqIPKcciEb1eIT0_T1_ET_(i8*) local_unnamed_addr #2
  
  declare dso_local void @_ZN1f1gEv() local_unnamed_addr #2
  
  declare dso_local void @_ZN1f1jEv() local_unnamed_addr #2
  
  ; Function Attrs: nounwind readnone speculatable willreturn
  
  declare void @_Unwind_Resume(i8*)
  
  
  !llvm.module.flags = !{!9, !10, !11}
  
  !0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
  !1 = distinct !DIGlobalVariable(name: "h", scope: !2, file: !3, line: 17, type: !8, isLocal: false, isDefinition: true)
  !2 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !3, producer: "clang version 10.0.0 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !5, nameTableKind: None)
  !3 = !DIFile(filename: "test.cc", directory: "")
  !4 = !{}
  !5 = !{!0, !6}
  !6 = !DIGlobalVariableExpression(var: !7, expr: !DIExpression())
  !7 = distinct !DIGlobalVariable(name: "i", scope: !2, file: !3, line: 17, type: !8, isLocal: false, isDefinition: true)
  !8 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
  !9 = !{i32 2, !"Dwarf Version", i32 4}
  !10 = !{i32 2, !"Debug Info Version", i32 3}
  !11 = !{i32 1, !"wchar_size", i32 4}
  !12 = !{!"clang version 10.0.0 "}
  !13 = distinct !DISubprogram(name: "l", linkageName: "_ZN1k1lEv", scope: !14, file: !3, line: 26, type: !21, scopeLine: 26, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, declaration: !20, retainedNodes: !28)
  !14 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "k", file: !3, line: 18, size: 128, flags: DIFlagTypePassByValue, elements: !15, identifier: "_ZTS1k")
  !15 = !{!16, !17, !18, !19, !20, !24}
  !16 = !DIDerivedType(tag: DW_TAG_member, name: "m", scope: !14, file: !3, line: 21, baseType: !8, size: 32)
  !17 = !DIDerivedType(tag: DW_TAG_member, name: "n", scope: !14, file: !3, line: 22, baseType: !8, size: 32, offset: 32)
  !18 = !DIDerivedType(tag: DW_TAG_member, name: "q", scope: !14, file: !3, line: 23, baseType: !8, size: 32, offset: 64)
  !19 = !DIDerivedType(tag: DW_TAG_member, name: "fmap", scope: !14, file: !3, line: 24, baseType: !8, size: 32, offset: 96)
  !20 = !DISubprogram(name: "l", linkageName: "_ZN1k1lEv", scope: !14, file: !3, line: 19, type: !21, scopeLine: 19, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized)
  !21 = !DISubroutineType(types: !22)
  !22 = !{null, !23}
  !23 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !14, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
  !24 = !DISubprogram(name: "m_fn4", linkageName: "_ZN1k5m_fn4Ev", scope: !14, file: !3, line: 20, type: !25, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized)
  !25 = !DISubroutineType(types: !26)
  !26 = !{!27, !23}
  !27 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
  !28 = !{!29, !31, !49, !53}
  !29 = !DILocalVariable(name: "this", arg: 1, scope: !13, type: !30, flags: DIFlagArtificial | DIFlagObjectPointer)
  !30 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !14, size: 64)
  !31 = !DILocalVariable(name: "o", scope: !13, file: !3, line: 27, type: !32)
  !32 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "e<char, int>", file: !3, line: 6, size: 8, flags: DIFlagTypePassByValue | DIFlagNonTrivial, elements: !33, templateParams: !46, identifier: "_ZTS1eIciE")
  !33 = !{!34}
  !34 = !DISubprogram(name: "e", scope: !32, file: !3, line: 8, type: !35, scopeLine: 8, flags: DIFlagPublic | DIFlagPrototyped, spFlags: DISPFlagOptimized)
  !35 = !DISubroutineType(types: !36)
  !36 = !{null, !37, !38, !40}
  !37 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !32, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
  !38 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !39, size: 64)
  !39 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
  !40 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "allocator", file: !3, line: 2, size: 8, flags: DIFlagTypePassByReference | DIFlagNonTrivial, elements: !41, identifier: "_ZTS9allocator")
  !41 = !{!42}
  !42 = !DISubprogram(name: "~allocator", scope: !40, file: !3, line: 4, type: !43, scopeLine: 4, flags: DIFlagPublic | DIFlagPrototyped, spFlags: DISPFlagOptimized)
  !43 = !DISubroutineType(types: !44)
  !44 = !{null, !45}
  !45 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !40, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
  !46 = !{!47, !48}
  !47 = !DITemplateTypeParameter(type: !39)
  !48 = !DITemplateTypeParameter(type: !8)
  !49 = !DILocalVariable(name: "p", scope: !50, file: !3, line: 29, type: !8)
  !50 = distinct !DILexicalBlock(scope: !51, file: !3, line: 28, column: 12)
  !51 = distinct !DILexicalBlock(scope: !52, file: !3, line: 28, column: 3)
  !52 = distinct !DILexicalBlock(scope: !13, file: !3, line: 28, column: 3)
  !53 = !DILocalVariable(name: "a", scope: !54, file: !3, line: 33, type: !57)
  !54 = distinct !DILexicalBlock(scope: !55, file: !3, line: 30, column: 14)
  !55 = distinct !DILexicalBlock(scope: !56, file: !3, line: 30, column: 5)
  !56 = distinct !DILexicalBlock(scope: !50, file: !3, line: 30, column: 5)
  !57 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "f", file: !3, line: 11, size: 8, flags: DIFlagTypePassByValue | DIFlagNonTrivial, elements: !58, identifier: "_ZTS1f")
  !58 = !{!59, !64, !67}
  !59 = !DISubprogram(name: "f", scope: !57, file: !3, line: 13, type: !60, scopeLine: 13, flags: DIFlagPublic | DIFlagPrototyped, spFlags: DISPFlagOptimized)
  !60 = !DISubroutineType(types: !61)
  !61 = !{null, !62, !63, !63, !63, !8, !8, !8, !8}
  !62 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !57, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
  !63 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8, size: 64)
  !64 = !DISubprogram(name: "g", linkageName: "_ZN1f1gEv", scope: !57, file: !3, line: 14, type: !65, scopeLine: 14, flags: DIFlagPublic | DIFlagPrototyped, spFlags: DISPFlagOptimized)
  !65 = !DISubroutineType(types: !66)
  !66 = !{!32, !62}
  !67 = !DISubprogram(name: "j", linkageName: "_ZN1f1jEv", scope: !57, file: !3, line: 15, type: !68, scopeLine: 15, flags: DIFlagPublic | DIFlagPrototyped, spFlags: DISPFlagOptimized)
  !68 = !DISubroutineType(types: !69)
  !69 = !{null, !62}
  !70 = !DILocation(line: 0, scope: !13)
  !71 = !DILocation(line: 27, column: 3, scope: !13)
  !72 = !DILocation(line: 27, column: 15, scope: !13)
  !73 = !DILocation(line: 27, column: 11, scope: !13)
  !74 = !DILocation(line: 0, scope: !54)
  !75 = !DILocation(line: 28, column: 3, scope: !13)
  !76 = !DILocation(line: 0, scope: !50)
  !77 = !DILocation(line: 31, column: 11, scope: !78)
  !78 = distinct !DILexicalBlock(scope: !54, file: !3, line: 31, column: 11)
  !79 = !DILocation(line: 31, column: 11, scope: !54)
  !80 = !DILocation(line: 30, column: 5, scope: !56)
  !81 = !DILocation(line: 38, column: 1, scope: !13)
  !82 = !DILocation(line: 33, column: 7, scope: !54)
  !83 = !DILocation(line: 33, column: 26, scope: !54)
  !84 = !{!85, !86, i64 4}
  !85 = !{!"_ZTS1k", !86, i64 0, !86, i64 4, !86, i64 8, !86, i64 12}
  !86 = !{!"int", !87, i64 0}
  !87 = !{!"omnipotent char", !88, i64 0}
  !88 = !{!"Simple C++ TBAA"}
  !89 = !DILocation(line: 33, column: 29, scope: !54)
  !90 = !{!86, !86, i64 0}
  !91 = !DILocation(line: 33, column: 32, scope: !54)
  !92 = !DILocation(line: 33, column: 9, scope: !54)
  !93 = !DILocation(line: 34, column: 13, scope: !94)
  !94 = distinct !DILexicalBlock(scope: !54, file: !3, line: 34, column: 11)
  !95 = !DILocation(line: 34, column: 17, scope: !94)
  !96 = !DILocation(line: 34, column: 11, scope: !54)
  !97 = !DILocation(line: 35, column: 11, scope: !94)
  !98 = !DILocation(line: 35, column: 9, scope: !94)
  !99 = !DILocation(line: 36, column: 5, scope: !55)
  !100 = distinct !{!100, !80, !101}
  !101 = !DILocation(line: 36, column: 5, scope: !56)

...
---
name:            l
body:             |
  bb.0:
    ; CHECK: successors: %bb.1(0x40000000), %bb.7(0x40000000)
    successors: %bb.1, %bb.3
  
  bb.1:
    $rdi = MOV64rr $rsp
  
  bb.2:
    ; CHECK: successors: %bb.3(0x80000000)
    DBG_VALUE
    CFI_INSTRUCTION def_cfa_offset 8
    ; CHECK: bb.3:
    ; CHECK: successors: %bb.2(0x40000000), %bb.4(0x40000000)
    TEST8rr killed renamable $al, renamable $al, implicit-def $eflags
    JCC_1 %bb.2, 5, implicit killed $eflags
    JMP_1 %bb.4
  
  ; CHECK: bb.4:
  ; CHECK: successors: %bb.5(0x40000000), %bb.6(0x40000000)
  bb.3 (landing-pad):
    successors: 
  
  bb.4:
    successors: %bb.5, %bb.6
    ; CHECK: JCC_1 %bb.6, 4, implicit $eflags
    JCC_1 %bb.6, 4, implicit killed $eflags
    JMP_1 %bb.5

  ; CHECK: bb.5:
  ; CHECK: successors: %bb.6(0x80000000)  
  bb.5:
    $rdi = COPY renamable $r12
 
  ; CHECK: bb.6:
  ; CHECK: successors: %bb.3(0x80000000)
  bb.6:
    ; CHECK: JMP_1 %bb.3
  ; CHECK: bb.7 (landing-pad):
    $rdi = COPY renamable $rbx
    TEST8rr killed renamable $al, renamable $al, implicit-def $eflags
    JCC_1 %bb.2, 5, implicit killed $eflags
    JMP_1 %bb.4

...
