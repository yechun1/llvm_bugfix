--- |
  ; ModuleID = 'a.ll'
  source_filename = "test.cc"
  target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
  target triple = "x86_64-unknown-linux-gnu"
  
  %class.k = type { i32, i32, i32, i32 }
  %class.e = type { i8 }
  %class.allocator = type { i8 }
  %class.f = type { i8 }
  
  @h = dso_local local_unnamed_addr global i32 0, align 4
  @i = dso_local local_unnamed_addr global i32 0, align 4
  @.str = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
  
  ; Function Attrs: noreturn uwtable
  define dso_local void @_ZN1k1lEv(%class.k* %0) local_unnamed_addr #0 align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
    %2 = alloca %class.e, align 1
    %3 = alloca %class.allocator, align 1
    %4 = alloca %class.f, align 1
    %5 = getelementptr inbounds %class.e, %class.e* %2, i64 0, i32 0
    call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %5) #4
    invoke void @_ZN1eIciEC1EPc9allocator(%class.e* nonnull %2, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0), %class.allocator* nonnull %3)
            to label %6 unwind label %15
  
  6:                                                ; preds = %1
    call void @_ZN9allocatorD1Ev(%class.allocator* nonnull %3) #4
    %7 = getelementptr inbounds %class.f, %class.f* %4, i64 0, i32 0
    %8 = getelementptr inbounds %class.k, %class.k* %0, i64 0, i32 2
    %9 = getelementptr inbounds %class.k, %class.k* %0, i64 0, i32 3
    %10 = getelementptr inbounds %class.k, %class.k* %0, i64 0, i32 0
    %11 = getelementptr inbounds %class.k, %class.k* %0, i64 0, i32 1
    br label %12
  
  12:                                               ; preds = %14, %6
    %13 = call zeroext i1 @_ZN1k5m_fn4Ev(%class.k* %0)
    br i1 %13, label %14, label %.preheader
  
  .preheader:                                       ; preds = %12
    br label %17
  
  .loopexit:                                        ; preds = %23
    br label %14
  
  14:                                               ; preds = %.loopexit, %12
    br label %12
  
  15:                                               ; preds = %1
    %16 = landingpad { i8*, i32 }
            cleanup
    call void @_ZN9allocatorD1Ev(%class.allocator* nonnull %3) #4
    call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %5) #4
    %exn.obj = extractvalue { i8*, i32 } %16, 0
    call void @_Unwind_Resume(i8* %exn.obj)
    unreachable
  
  17:                                               ; preds = %.preheader, %23
    call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %7) #4
    %18 = load i32, i32* %11, align 4, !tbaa !2
    %19 = load i32, i32* @h, align 4, !tbaa !7
    %20 = load i32, i32* @i, align 4, !tbaa !7
    call void @_ZN1fC1EPiS0_S0_iiii(%class.f* nonnull %4, i32* nonnull %8, i32* nonnull %9, i32* %10, i32 %18, i32 %19, i32 %20, i32 0)
    call void @_ZN1f1gEv(%class.f* nonnull %4)
    %21 = call zeroext i1 @_ZeqIPKcciEb1eIT0_T1_ET_(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0))
    br i1 %21, label %22, label %23
  
  22:                                               ; preds = %17
    call void @_ZN1f1jEv(%class.f* nonnull %4)
    br label %23
  
  23:                                               ; preds = %22, %17
    call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %7) #4
    %24 = call zeroext i1 @_ZN1k5m_fn4Ev(%class.k* nonnull %0)
    br i1 %24, label %.loopexit, label %17
  }
  
  ; Function Attrs: argmemonly nounwind willreturn
  declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1
  
  declare dso_local void @_ZN1eIciEC1EPc9allocator(%class.e*, i8*, %class.allocator*) unnamed_addr #2
  
  declare dso_local i32 @__gxx_personality_v0(...)
  
  ; Function Attrs: nounwind
  declare dso_local void @_ZN9allocatorD1Ev(%class.allocator*) unnamed_addr #3
  
  declare dso_local zeroext i1 @_ZN1k5m_fn4Ev(%class.k*) local_unnamed_addr #2
  
  declare dso_local void @_ZN1fC1EPiS0_S0_iiii(%class.f*, i32*, i32*, i32*, i32, i32, i32, i32) unnamed_addr #2
  
  declare dso_local zeroext i1 @_ZeqIPKcciEb1eIT0_T1_ET_(i8*) local_unnamed_addr #2
  
  declare dso_local void @_ZN1f1gEv(%class.f*) local_unnamed_addr #2
  
  declare dso_local void @_ZN1f1jEv(%class.f*) local_unnamed_addr #2
  
  ; Function Attrs: argmemonly nounwind willreturn
  declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1
  
  declare void @_Unwind_Resume(i8*)
  
  ; Function Attrs: nounwind
  declare void @llvm.stackprotector(i8*, i8**) #4
  
  attributes #0 = { noreturn uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #1 = { argmemonly nounwind willreturn }
  attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #4 = { nounwind }
  
  !llvm.module.flags = !{!0}
  !llvm.ident = !{!1}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{!"clang version 9.0.0 (https://github.com/llvm/llvm-project.git 15b89df9daf950431f213ee864e7989879802103)"}
  !2 = !{!3, !4, i64 4}
  !3 = !{!"_ZTS1k", !4, i64 0, !4, i64 4, !4, i64 8, !4, i64 12}
  !4 = !{!"int", !5, i64 0}
  !5 = !{!"omnipotent char", !6, i64 0}
  !6 = !{!"Simple C++ TBAA"}
  !7 = !{!4, !4, i64 0}

...
---
name:            _ZN1k1lEv
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
registers:       []
liveins:
  - { reg: '$rdi', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       72
  offsetAdjustment: -72
  maxAlignment:    8
  adjustsStack:    true
  hasCalls:        true
  stackProtector:  ''
  maxCallFrameSize: 16
  cvBytesOfCalleeSavedRegisters: 32
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:
  - { id: 0, type: spill-slot, offset: -40, size: 8, alignment: 8, stack-id: default, 
      callee-saved-register: '$rbx', callee-saved-restored: true, debug-info-variable: '', 
      debug-info-expression: '', debug-info-location: '' }
  - { id: 1, type: spill-slot, offset: -32, size: 8, alignment: 16, stack-id: default, 
      callee-saved-register: '$r12', callee-saved-restored: true, debug-info-variable: '', 
      debug-info-expression: '', debug-info-location: '' }
  - { id: 2, type: spill-slot, offset: -24, size: 8, alignment: 8, stack-id: default, 
      callee-saved-register: '$r14', callee-saved-restored: true, debug-info-variable: '', 
      debug-info-expression: '', debug-info-location: '' }
  - { id: 3, type: spill-slot, offset: -16, size: 8, alignment: 16, stack-id: default, 
      callee-saved-register: '$r15', callee-saved-restored: true, debug-info-variable: '', 
      debug-info-expression: '', debug-info-location: '' }
stack:
  - { id: 0, name: '<unnamed alloca>', type: default, offset: -48, size: 1, 
      alignment: 8, stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '<unnamed alloca>', type: default, offset: -56, size: 1, 
      alignment: 8, stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '<unnamed alloca>', type: default, offset: -64, size: 1, 
      alignment: 8, stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
callSites:       []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.1):
    successors: %bb.1(0x40000000), %bb.6(0x40000000)
    liveins: $rdi, $r15, $r14, $r12, $rbx
  
    frame-setup PUSH64r killed $r15, implicit-def $rsp, implicit $rsp
    CFI_INSTRUCTION def_cfa_offset 16
    frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
    CFI_INSTRUCTION def_cfa_offset 24
    frame-setup PUSH64r killed $r12, implicit-def $rsp, implicit $rsp
    CFI_INSTRUCTION def_cfa_offset 32
    frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
    CFI_INSTRUCTION def_cfa_offset 40
    $rsp = frame-setup SUB64ri8 $rsp, 40, implicit-def dead $eflags
    CFI_INSTRUCTION def_cfa_offset 80
    CFI_INSTRUCTION offset $rbx, -40
    CFI_INSTRUCTION offset $r12, -32
    CFI_INSTRUCTION offset $r14, -24
    CFI_INSTRUCTION offset $r15, -16
    renamable $rbx = COPY $rdi
    renamable $rdi = LEA64r $rsp, 1, $noreg, 32, $noreg
    EH_LABEL <mcsymbol .Ltmp0>
    renamable $rdx = LEA64r $rsp, 1, $noreg, 24, $noreg
    $rsi = MOV32ri64 @.str
    CALL64pcrel32 @_ZN1eIciEC1EPc9allocator, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp
    EH_LABEL <mcsymbol .Ltmp1>
    JMP_1 %bb.1
  
  bb.1 (%ir-block.6):
    successors: %bb.2(0x80000000)
    liveins: $rbx
  
    renamable $rdi = LEA64r $rsp, 1, $noreg, 24, $noreg
    CALL64pcrel32 @_ZN9allocatorD1Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    dead renamable $rax = LEA64r $rsp, 1, $noreg, 16, $noreg
    renamable $r14 = COPY renamable $rbx
    renamable $r14 = ADD64ri32 killed renamable $r14, 8, implicit-def dead $eflags
    renamable $r15 = COPY renamable $rbx
    renamable $r15 = ADD64ri32 killed renamable $r15, 12, implicit-def dead $eflags
    renamable $r12 = COPY renamable $rbx
    renamable $r12 = ADD64ri32 killed renamable $r12, 4, implicit-def dead $eflags
  
  bb.2 (%ir-block.12):
    successors: %bb.5(0x40000000), %bb.3(0x40000000)
    liveins: $rbx, $r12, $r14, $r15
  
    $rdi = COPY renamable $rbx
    CALL64pcrel32 @_ZN1k5m_fn4Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $al
    TEST8ri killed renamable $al, 1, implicit-def $eflags
    JCC_1 %bb.5, 5, implicit killed $eflags
  
  bb.3..preheader:
    successors: %bb.7(0x80000000)
    liveins: $rbx, $r12, $r14, $r15
  
    JMP_1 %bb.7
  
  bb.4..loopexit:
    successors: %bb.5(0x80000000)
    liveins: $rbx, $r12, $r14, $r15
  
    JMP_1 %bb.5
  
  bb.5 (%ir-block.14):
    successors: %bb.2(0x80000000)
    liveins: $rbx, $r12, $r14, $r15
  
    JMP_1 %bb.2
  
  bb.6 (%ir-block.15, landing-pad):
    successors: 
    liveins: $rax, $rdx
  
    EH_LABEL <mcsymbol .Ltmp2>
    KILL $rdx
    renamable $rbx = COPY $rax
    renamable $rdi = LEA64r $rsp, 1, $noreg, 24, $noreg
    CALL64pcrel32 @_ZN9allocatorD1Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    $rdi = COPY killed renamable $rbx
    CALL64pcrel32 @_Unwind_Resume, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
  
  bb.7 (%ir-block.17):
    successors: %bb.8(0x40000000), %bb.9(0x40000000)
    liveins: $rbx, $r12, $r14, $r15
  
    dead renamable $eax = MOV32r0 implicit-def dead $eflags
    renamable $r8d = MOV32rm renamable $r12, 1, $noreg, 0, $noreg :: (load 4 from %ir.11, !tbaa !2)
    renamable $r9d = MOV32rm $noreg, 1, $noreg, @h, $noreg :: (load 4 from @h, !tbaa !7)
    renamable $eax = MOV32rm $noreg, 1, $noreg, @i, $noreg :: (load 4 from @i, !tbaa !7)
    renamable $rdi = LEA64r $rsp, 1, $noreg, 16, $noreg
    $rsi = COPY renamable $r14
    $rdx = COPY renamable $r15
    $rcx = COPY renamable $rbx
    MOV32mr $rsp, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into stack)
    MOV32mi $rsp, 1, $noreg, 8, $noreg, 0 :: (store 4 into stack + 8)
    CALL64pcrel32 @_ZN1fC1EPiS0_S0_iiii, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit $rdx, implicit killed $rcx, implicit $r8d, implicit $r9d
    renamable $rdi = LEA64r $rsp, 1, $noreg, 16, $noreg
    CALL64pcrel32 @_ZN1f1gEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    renamable $rdi = MOV64ri @.str
    CALL64pcrel32 @_ZeqIPKcciEb1eIT0_T1_ET_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $al
    TEST8ri killed renamable $al, 1, implicit-def $eflags
    JCC_1 %bb.8, 5, implicit killed $eflags
    JMP_1 %bb.9
  
  bb.8 (%ir-block.22):
    successors: %bb.9(0x80000000)
    liveins: $rbx, $r12, $r14, $r15
  
    renamable $rdi = LEA64r $rsp, 1, $noreg, 16, $noreg
    CALL64pcrel32 @_ZN1f1jEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
  
  bb.9 (%ir-block.23):
    successors: %bb.4(0x40000000), %bb.7(0x40000000)
    liveins: $rbx, $r12, $r14, $r15
  
    $rdi = COPY renamable $rbx
    CALL64pcrel32 @_ZN1k5m_fn4Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $al
    TEST8ri killed renamable $al, 1, implicit-def $eflags
    JCC_1 %bb.4, 5, implicit killed $eflags
    JMP_1 %bb.7

...
