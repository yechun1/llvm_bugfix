Before post-MI-sched:
# Machine code for function test: IsSSA, NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=8, align=8, at location [SP-16]
  fi#2: size=8, align=8, at location [SP-24]
  fi#3: size=8, align=8, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-48]

bb.0.entry:
  liveins: $x23, $lr, $x21, $x22, $x19, $x20
  early-clobber $sp = frame-setup STPXpre killed $lr, killed $x23, $sp(tied-def 0), -6 :: (store 8 into %stack.5), (store 8 into %stack.4)
  frame-setup STPXi killed $x22, killed $x21, $sp, 2 :: (store 8 into %stack.3), (store 8 into %stack.2)
  frame-setup STPXi killed $x20, killed $x19, $sp, 4 :: (store 8 into %stack.1), (store 8 into %stack.0)
  renamable $x19 = ADRP target-flags(aarch64-page) @X1
  renamable $w8 = LDRWui renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (dereferenceable load 4 from @X1)
  renamable $w20 = ADDWri renamable $w8, 1, 0
  renamable $w21 = ADDWri renamable $w8, 2, 0
  renamable $w22 = ADDWri renamable $w8, 3, 0
  renamable $w23 = ADDWri killed renamable $w8, 4, 0
  BL @foo, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  STRWui killed renamable $w20, killed renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (store 4 into @X1)
  renamable $x8 = ADRP target-flags(aarch64-page) @X2
  renamable $x9 = ADRP target-flags(aarch64-page) @X3
  renamable $x10 = ADRP target-flags(aarch64-page) @X4
  STRWui killed renamable $w21, killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @X2 :: (store 4 into @X2)
  STRWui killed renamable $w22, killed renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @X3 :: (store 4 into @X3)
  STRWui killed renamable $w23, killed renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @X4 :: (store 4 into @X4)
  $x20, $x19 = frame-destroy LDPXi $sp, 4 :: (load 8 from %stack.1), (load 8 from %stack.0)
  $x22, $x21 = frame-destroy LDPXi $sp, 2 :: (load 8 from %stack.3), (load 8 from %stack.2)
  early-clobber $sp, $lr, $x23 = frame-destroy LDPXpost $sp(tied-def 0), 6 :: (load 8 from %stack.5), (load 8 from %stack.4)
  RET undef $lr

# End machine code for function test.

********** MI Scheduling **********
test:%bb.0 entry
  From: STRWui killed renamable $w20, killed renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (store 4 into @X1)
    To: early-clobber $sp, $lr, $x23 = frame-destroy LDPXpost $sp(tied-def 0), 6 :: (load 8 from %stack.5), (load 8 from %stack.4)
 RegionInstrs: 9
ScheduleDAGMI::schedule starting
SU(0):   STRWui renamable $w20, renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (store 4 into @X1)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
    SU(7): Anti Latency=0
    SU(7): Anti Latency=0
SU(1):   renamable $x8 = ADRP target-flags(aarch64-page) @X2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(4): Data Latency=1 Reg=$x8
SU(2):   renamable $x9 = ADRP target-flags(aarch64-page) @X3
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(5): Data Latency=1 Reg=$x9
SU(3):   renamable $x10 = ADRP target-flags(aarch64-page) @X4
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(6): Data Latency=1 Reg=$x10
SU(4):   STRWui renamable $w21, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @X2 :: (store 4 into @X2)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(1): Data Latency=1 Reg=$x8
  Successors:
    SU(8): Anti Latency=0
SU(5):   STRWui renamable $w22, renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @X3 :: (store 4 into @X3)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(2): Data Latency=1 Reg=$x9
  Successors:
    SU(8): Anti Latency=0
SU(6):   STRWui renamable $w23, renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @X4 :: (store 4 into @X4)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=$x10
SU(7):   $x20, $x19 = frame-destroy LDPXi $sp, 4 :: (load 8 from %stack.1), (load 8 from %stack.0)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Predecessors:
    SU(0): Anti Latency=0
    SU(0): Anti Latency=0
  Successors:
    ExitSU: Ord  Latency=3 Artificial
SU(8):   $x22, $x21 = frame-destroy LDPXi $sp, 2 :: (load 8 from %stack.3), (load 8 from %stack.2)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(5): Anti Latency=0
    SU(4): Anti Latency=0
  Successors:
    ExitSU: Ord  Latency=3 Artificial
ExitSU:   early-clobber $sp, $lr, $x23 = frame-destroy LDPXpost $sp(tied-def 0), 6 :: (load 8 from %stack.5), (load 8 from %stack.4)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(8): Ord  Latency=3 Artificial
    SU(7): Ord  Latency=3 Artificial
Disabled scoreboard hazard recognizer
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x8 = ADRP target-flags(aarch64-page) @X2
  Ready @0c
  TopQ.A BotLatency SU(1) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 3 2 4 
  TopQ.A RemainingLatency 0 + 1c > CritPath 4
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x9 = ADRP target-flags(aarch64-page) @X3
  Ready @1c
  TopQ.A BotLatency SU(2) 4c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 3 4 5 
  TopQ.A RemainingLatency 0 + 2c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) STRWui renamable $w20, renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (store 4 into @X1)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 3 4 7 
  TopQ.A RemainingLatency 0 + 3c > CritPath 4
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) STRWui renamable $w21, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @X2 :: (store 4 into @X2)
  Ready @3c
  TopQ.A TopLatency SU(4) 1c
  TopQ.A BotLatency SU(4) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 3 7 
  TopQ.A RemainingLatency 0 + 4c > CritPath 4
  Cand SU(5) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(5) STRWui renamable $w22, renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @X3 :: (store 4 into @X3)
  Ready @4c
  TopQ.A BotLatency SU(5) 3c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 3 8 
  TopQ.A RemainingLatency 0 + 5c > CritPath 4
  Cand SU(7) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(7) $x20, $x19 = frame-destroy LDPXi $sp, 4 :: (load 8 from %stack.1), (load 8 from %stack.0)
  Ready @5c
  TopQ.A BotLatency SU(7) 3c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 3 
  TopQ.A RemainingLatency 0 + 6c > CritPath 4
  Cand SU(8) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(8) $x22, $x21 = frame-destroy LDPXi $sp, 2 :: (load 8 from %stack.3), (load 8 from %stack.2)
  Ready @6c
  TopQ.A BotLatency SU(8) 3c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $x10 = ADRP target-flags(aarch64-page) @X4
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) STRWui renamable $w23, renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @X4 :: (store 4 into @X4)
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(1):   renamable $x8 = ADRP target-flags(aarch64-page) @X2
SU(2):   renamable $x9 = ADRP target-flags(aarch64-page) @X3
SU(0):   STRWui renamable $w20, renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (store 4 into @X1)
SU(4):   STRWui renamable $w21, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @X2 :: (store 4 into @X2)
SU(5):   STRWui renamable $w22, renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @X3 :: (store 4 into @X3)
SU(7):   $x20, $x19 = frame-destroy LDPXi $sp, 4 :: (load 8 from %stack.1), (load 8 from %stack.0)
SU(8):   $x22, $x21 = frame-destroy LDPXi $sp, 2 :: (load 8 from %stack.3), (load 8 from %stack.2)
SU(3):   renamable $x10 = ADRP target-flags(aarch64-page) @X4
SU(6):   STRWui renamable $w23, renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @X4 :: (store 4 into @X4)

********** MI Scheduling **********
test:%bb.0 entry
  From: frame-setup STPXi killed $x22, killed $x21, $sp, 2 :: (store 8 into %stack.3), (store 8 into %stack.2)
    To: BL @foo, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
 RegionInstrs: 8
ScheduleDAGMI::schedule starting
SU(0):   frame-setup STPXi $x22, $x21, $sp, 2 :: (store 8 into %stack.3), (store 8 into %stack.2)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Successors:
    SU(6): Anti Latency=0
    SU(5): Anti Latency=0
SU(1):   frame-setup STPXi $x20, $x19, $sp, 4 :: (store 8 into %stack.1), (store 8 into %stack.0)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Anti Latency=0
    SU(2): Anti Latency=0
SU(2):   renamable $x19 = ADRP target-flags(aarch64-page) @X1
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Predecessors:
    SU(1): Anti Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=$x19
SU(3):   renamable $w8 = LDRWui renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (dereferenceable load 4 from @X1)
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(2): Data Latency=1 Reg=$x19
  Successors:
    SU(7): Data Latency=4 Reg=$w8
    SU(6): Data Latency=4 Reg=$w8
    SU(5): Data Latency=4 Reg=$w8
    SU(4): Data Latency=4 Reg=$w8
SU(4):   renamable $w20 = ADDWri renamable $w8, 1, 0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Data Latency=4 Reg=$w8
    SU(1): Anti Latency=0
SU(5):   renamable $w21 = ADDWri renamable $w8, 2, 0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Data Latency=4 Reg=$w8
    SU(0): Anti Latency=0
SU(6):   renamable $w22 = ADDWri renamable $w8, 3, 0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Data Latency=4 Reg=$w8
    SU(0): Anti Latency=0
SU(7):   renamable $w23 = ADDWri renamable $w8, 4, 0
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Data Latency=4 Reg=$w8
ExitSU:   BL @foo, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) frame-setup STPXi $x20, $x19, $sp, 4 :: (store 8 into %stack.1), (store 8 into %stack.0)
  Ready @0c
  TopQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x19 = ADRP target-flags(aarch64-page) @X1
  Ready @1c
  TopQ.A BotLatency SU(2) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(3) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $w8 = LDRWui renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (dereferenceable load 4 from @X1)
  Ready @2c
  TopQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 4 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) frame-setup STPXi $x22, $x21, $sp, 2 :: (store 8 into %stack.3), (store 8 into %stack.2)
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 6 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 7 5 6 4 
  TopQ.A RemainingLatency 0 + 6c > CritPath 5
  Cand SU(7) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) renamable $w20 = ADDWri renamable $w8, 1, 0
  Ready @6c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 5 6 
  TopQ.A RemainingLatency 0 + 7c > CritPath 5
  Cand SU(7) ORDER                              
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) renamable $w21 = ADDWri renamable $w8, 2, 0
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 6 
  TopQ.A RemainingLatency 0 + 8c > CritPath 5
  Cand SU(7) ORDER                              
  Cand SU(6) ORDER                              
Pick Top ORDER     
Scheduling SU(6) renamable $w22 = ADDWri renamable $w8, 3, 0
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 7
  Executed: 9c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) renamable $w23 = ADDWri renamable $w8, 4, 0
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 8
  Executed: 10c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(1):   frame-setup STPXi $x20, $x19, $sp, 4 :: (store 8 into %stack.1), (store 8 into %stack.0)
SU(2):   renamable $x19 = ADRP target-flags(aarch64-page) @X1
SU(3):   renamable $w8 = LDRWui renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (dereferenceable load 4 from @X1)
SU(0):   frame-setup STPXi $x22, $x21, $sp, 2 :: (store 8 into %stack.3), (store 8 into %stack.2)
SU(4):   renamable $w20 = ADDWri renamable $w8, 1, 0
SU(5):   renamable $w21 = ADDWri renamable $w8, 2, 0
SU(6):   renamable $w22 = ADDWri renamable $w8, 3, 0
SU(7):   renamable $w23 = ADDWri renamable $w8, 4, 0

Fixup kills for %bb.0
--- |
  ; ModuleID = 'test2.mir'
  source_filename = "test.ll"
  target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
  target triple = "aarch64-linux-gnu"
  
  @X1 = global i32 0, align 4
  @X2 = global i32 0, align 4
  @X3 = global i32 0, align 4
  @X4 = global i32 0, align 4
  
  ; Function Attrs: nounwind
  define void @test(i32 %i) #0 {
  entry:
    %0 = load i32, i32* @X1, align 4
    %x1 = add i32 %0, 1
    %x2 = add i32 %0, 2
    %x3 = add i32 %0, 3
    %x4 = add i32 %0, 4
    tail call void @foo()
    store i32 %x1, i32* @X1, align 4
    store i32 %x2, i32* @X2, align 4
    store i32 %x3, i32* @X3, align 4
    store i32 %x4, i32* @X4, align 4
    ret void
  }
  
  declare void @foo()
  
  ; Function Attrs: nounwind
  declare void @llvm.stackprotector(i8*, i8**) #0
  
  attributes #0 = { nounwind }
  
  !llvm.module.flags = !{!0, !1, !2}
  
  !0 = !{i32 2, !"Dwarf Version", i32 4}
  !1 = !{i32 2, !"Debug Info Version", i32 3}
  !2 = !{i32 1, !"wchar_size", i32 4}

...
---
name:            test
alignment:       2
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
registers:       []
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       48
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    true
  hasCalls:        true
  stackProtector:  ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: spill-slot, offset: -8, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '$x19', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: spill-slot, offset: -16, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '$x20', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: spill-slot, offset: -24, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '$x21', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: spill-slot, offset: -32, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '$x22', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 4, name: '', type: spill-slot, offset: -40, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '$x23', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 5, name: '', type: spill-slot, offset: -48, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '$lr', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
callSites:       []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    liveins: $x23, $lr, $x21, $x22, $x19, $x20
  
    early-clobber $sp = frame-setup STPXpre killed $lr, killed $x23, $sp, -6 :: (store 8 into %stack.5), (store 8 into %stack.4)
    frame-setup STPXi killed $x20, killed $x19, $sp, 4 :: (store 8 into %stack.1), (store 8 into %stack.0)
    renamable $x19 = ADRP target-flags(aarch64-page) @X1
    renamable $w8 = LDRWui renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (dereferenceable load 4 from @X1)
    frame-setup STPXi killed $x22, killed $x21, $sp, 2 :: (store 8 into %stack.3), (store 8 into %stack.2)
    renamable $w20 = ADDWri renamable $w8, 1, 0
    renamable $w21 = ADDWri renamable $w8, 2, 0
    renamable $w22 = ADDWri renamable $w8, 3, 0
    renamable $w23 = ADDWri killed renamable $w8, 4, 0
    BL @foo, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit-def $sp
    renamable $x8 = ADRP target-flags(aarch64-page) @X2
    renamable $x9 = ADRP target-flags(aarch64-page) @X3
    STRWui killed renamable $w20, killed renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (store 4 into @X1)
    STRWui killed renamable $w21, killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @X2 :: (store 4 into @X2)
    STRWui killed renamable $w22, killed renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @X3 :: (store 4 into @X3)
    $x20, $x19 = frame-destroy LDPXi $sp, 4 :: (load 8 from %stack.1), (load 8 from %stack.0)
    $x22, $x21 = frame-destroy LDPXi $sp, 2 :: (load 8 from %stack.3), (load 8 from %stack.2)
    renamable $x10 = ADRP target-flags(aarch64-page) @X4
    STRWui killed renamable $w23, killed renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @X4 :: (store 4 into @X4)
    early-clobber $sp, $lr, $x23 = frame-destroy LDPXpost $sp, 6 :: (load 8 from %stack.5), (load 8 from %stack.4)
    RET undef $lr

...
