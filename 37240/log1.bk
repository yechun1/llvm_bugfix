chris_getSchedRegions: --RegionEnd 
 chris_getSchedRegions: --RegionEnd 
 chris_getSchedRegions: RegionEnd start early-clobber $sp, $lr, $x23 = frame-destroy LDPXpost $sp(tied-def 0), 6 :: (load 8 from %stack.5), (load 8 from %stack.4)

chris_getSchedRegions: *** I 1 = early-clobber $sp, $lr, $x23 = frame-destroy LDPXpost $sp(tied-def 0), 6 :: (load 8 from %stack.5), (load 8 from %stack.4)

chris_getSchedRegions: I = early-clobber $sp, $lr, $x23 = frame-destroy LDPXpost $sp(tied-def 0), 6 :: (load 8 from %stack.5), (load 8 from %stack.4)

chris_++NumRegionInstrs = 0
chris_getSchedRegions: I = $x22, $x21 = frame-destroy LDPXi $sp, 2 :: (load 8 from %stack.3), (load 8 from %stack.2)

chris_++NumRegionInstrs = 1
chris_getSchedRegions: I = $x20, $x19 = frame-destroy LDPXi $sp, 4 :: (load 8 from %stack.1), (load 8 from %stack.0)

chris_++NumRegionInstrs = 2
chris_getSchedRegions: I = STRWui killed renamable $w23, killed renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @X4 :: (store 4 into @X4)

chris_++NumRegionInstrs = 3
chris_getSchedRegions: I = STRWui killed renamable $w22, killed renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @X3 :: (store 4 into @X3)

chris_++NumRegionInstrs = 4
chris_getSchedRegions: I = STRWui killed renamable $w21, killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @X2 :: (store 4 into @X2)

chris_++NumRegionInstrs = 5
chris_getSchedRegions: I = renamable $x10 = ADRP target-flags(aarch64-page) @X4

chris_++NumRegionInstrs = 6
chris_getSchedRegions: I = renamable $x9 = ADRP target-flags(aarch64-page) @X3

chris_++NumRegionInstrs = 7
chris_getSchedRegions: I = renamable $x8 = ADRP target-flags(aarch64-page) @X2

chris_++NumRegionInstrs = 8
chris_getSchedRegions: I = STRWui killed renamable $w20, killed renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (store 4 into @X1)

chris_getSchedRegions: I break = STRWui killed renamable $w20, killed renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (store 4 into @X1)

chris_getSchedRegions: begin = STRWui killed renamable $w20, killed renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (store 4 into @X1)

chris_getSchedRegions: start1 RegionEnd = STRWui killed renamable $w20, killed renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (store 4 into @X1)

chris_getSchedRegions: start1-2 RegionEnd = BL @foo, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp

chris_getSchedRegions: RegionEnd start BL @foo, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp

chris_getSchedRegions: *** I 1 = BL @foo, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp

chris_getSchedRegions: I = BL @foo, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp

chris_++NumRegionInstrs = 0
chris_getSchedRegions: I = renamable $w23 = ADDWri killed renamable $w8, 4, 0

chris_++NumRegionInstrs = 1
chris_getSchedRegions: I = renamable $w22 = ADDWri renamable $w8, 3, 0

chris_++NumRegionInstrs = 2
chris_getSchedRegions: I = renamable $w21 = ADDWri renamable $w8, 2, 0

chris_++NumRegionInstrs = 3
chris_getSchedRegions: I = renamable $w20 = ADDWri renamable $w8, 1, 0

chris_++NumRegionInstrs = 4
chris_getSchedRegions: I = renamable $w8 = LDRWui renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (dereferenceable load 4 from @X1)

chris_++NumRegionInstrs = 5
chris_getSchedRegions: I = renamable $x19 = ADRP target-flags(aarch64-page) @X1

chris_getSchedRegions: I1 = renamable $x19 = ADRP target-flags(aarch64-page) @X1

chris-MI.isCFIInstruction begin: 
 ######
 bb.0.entry:
  liveins: $x23, $lr, $x21, $x22, $x19, $x20
  early-clobber $sp = frame-setup STPXpre killed $lr, killed $x23, $sp(tied-def 0), -6 :: (store 8 into %stack.5), (store 8 into %stack.4)
  frame-setup STPXi killed $x22, killed $x21, $sp, 2 :: (store 8 into %stack.3), (store 8 into %stack.2)
  frame-setup STPXi killed $x20, killed $x19, $sp, 4 :: (store 8 into %stack.1), (store 8 into %stack.0)
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  frame-setup CFI_INSTRUCTION offset $w19, -8
  frame-setup CFI_INSTRUCTION offset $w20, -16
  frame-setup CFI_INSTRUCTION offset $w21, -24
  frame-setup CFI_INSTRUCTION offset $w22, -32
  frame-setup CFI_INSTRUCTION offset $w23, -40
  frame-setup CFI_INSTRUCTION offset $w30, -48
  renamable $x19 = ADRP target-flags(aarch64-page) @X1
  renamable $w8 = LDRWui renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (dereferenceable load 4 from @X1)
  renamable $w20 = ADDWri renamable $w8, 1, 0
  renamable $w21 = ADDWri renamable $w8, 2, 0
  renamable $w22 = ADDWri renamable $w8, 3, 0
  renamable $w23 = ADDWri killed renamable $w8, 4, 0
  BL @foo, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  STRWui killed renamable $w20, killed renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (store 4 into @X1)
  renamable $x8 = ADRP target-flags(aarch64-page) @X2
  renamable $x9 = ADRP target-flags(aarch64-page) @X3
  renamable $x10 = ADRP target-flags(aarch64-page) @X4
  STRWui killed renamable $w21, killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @X2 :: (store 4 into @X2)
  STRWui killed renamable $w22, killed renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @X3 :: (store 4 into @X3)
  STRWui killed renamable $w23, killed renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @X4 :: (store 4 into @X4)
  $x20, $x19 = frame-destroy LDPXi $sp, 4 :: (load 8 from %stack.1), (load 8 from %stack.0)
  $x22, $x21 = frame-destroy LDPXi $sp, 2 :: (load 8 from %stack.3), (load 8 from %stack.2)
  early-clobber $sp, $lr, $x23 = frame-destroy LDPXpost $sp(tied-def 0), 6 :: (load 8 from %stack.5), (load 8 from %stack.4)
  RET undef $lr

######
chris-MI.isCFIInstruction end: 
 ######
 bb.0.entry:
  liveins: $x23, $lr, $x21, $x22, $x19, $x20
  early-clobber $sp = frame-setup STPXpre killed $lr, killed $x23, $sp(tied-def 0), -6 :: (store 8 into %stack.5), (store 8 into %stack.4)
  frame-setup STPXi killed $x22, killed $x21, $sp, 2 :: (store 8 into %stack.3), (store 8 into %stack.2)
  frame-setup STPXi killed $x20, killed $x19, $sp, 4 :: (store 8 into %stack.1), (store 8 into %stack.0)
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  frame-setup CFI_INSTRUCTION offset $w19, -8
  frame-setup CFI_INSTRUCTION offset $w20, -16
  frame-setup CFI_INSTRUCTION offset $w21, -24
  frame-setup CFI_INSTRUCTION offset $w22, -32
  frame-setup CFI_INSTRUCTION offset $w23, -40
  renamable $x19 = ADRP target-flags(aarch64-page) @X1
  renamable $w8 = LDRWui renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (dereferenceable load 4 from @X1)
  renamable $w20 = ADDWri renamable $w8, 1, 0
  renamable $w21 = ADDWri renamable $w8, 2, 0
  renamable $w22 = ADDWri renamable $w8, 3, 0
  renamable $w23 = ADDWri killed renamable $w8, 4, 0
  frame-setup CFI_INSTRUCTION offset $w30, -48
  BL @foo, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  STRWui killed renamable $w20, killed renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (store 4 into @X1)
  renamable $x8 = ADRP target-flags(aarch64-page) @X2
  renamable $x9 = ADRP target-flags(aarch64-page) @X3
  renamable $x10 = ADRP target-flags(aarch64-page) @X4
  STRWui killed renamable $w21, killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @X2 :: (store 4 into @X2)
  STRWui killed renamable $w22, killed renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @X3 :: (store 4 into @X3)
  STRWui killed renamable $w23, killed renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @X4 :: (store 4 into @X4)
  $x20, $x19 = frame-destroy LDPXi $sp, 4 :: (load 8 from %stack.1), (load 8 from %stack.0)
  $x22, $x21 = frame-destroy LDPXi $sp, 2 :: (load 8 from %stack.3), (load 8 from %stack.2)
  early-clobber $sp, $lr, $x23 = frame-destroy LDPXpost $sp(tied-def 0), 6 :: (load 8 from %stack.5), (load 8 from %stack.4)
  RET undef $lr

######
chris_getSchedRegions: new RegionEnd = frame-setup CFI_INSTRUCTION offset $w30, -48

chris_getSchedRegions: I = renamable $x19 = ADRP target-flags(aarch64-page) @X1

chris_getSchedRegions: I1 = renamable $x19 = ADRP target-flags(aarch64-page) @X1

chris-MI.isCFIInstruction begin: 
 ######
 bb.0.entry:
  liveins: $x23, $lr, $x21, $x22, $x19, $x20
  early-clobber $sp = frame-setup STPXpre killed $lr, killed $x23, $sp(tied-def 0), -6 :: (store 8 into %stack.5), (store 8 into %stack.4)
  frame-setup STPXi killed $x22, killed $x21, $sp, 2 :: (store 8 into %stack.3), (store 8 into %stack.2)
  frame-setup STPXi killed $x20, killed $x19, $sp, 4 :: (store 8 into %stack.1), (store 8 into %stack.0)
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  frame-setup CFI_INSTRUCTION offset $w19, -8
  frame-setup CFI_INSTRUCTION offset $w20, -16
  frame-setup CFI_INSTRUCTION offset $w21, -24
  frame-setup CFI_INSTRUCTION offset $w22, -32
  frame-setup CFI_INSTRUCTION offset $w23, -40
  renamable $x19 = ADRP target-flags(aarch64-page) @X1
  renamable $w8 = LDRWui renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (dereferenceable load 4 from @X1)
  renamable $w20 = ADDWri renamable $w8, 1, 0
  renamable $w21 = ADDWri renamable $w8, 2, 0
  renamable $w22 = ADDWri renamable $w8, 3, 0
  renamable $w23 = ADDWri killed renamable $w8, 4, 0
  frame-setup CFI_INSTRUCTION offset $w30, -48
  BL @foo, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  STRWui killed renamable $w20, killed renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (store 4 into @X1)
  renamable $x8 = ADRP target-flags(aarch64-page) @X2
  renamable $x9 = ADRP target-flags(aarch64-page) @X3
  renamable $x10 = ADRP target-flags(aarch64-page) @X4
  STRWui killed renamable $w21, killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @X2 :: (store 4 into @X2)
  STRWui killed renamable $w22, killed renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @X3 :: (store 4 into @X3)
  STRWui killed renamable $w23, killed renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @X4 :: (store 4 into @X4)
  $x20, $x19 = frame-destroy LDPXi $sp, 4 :: (load 8 from %stack.1), (load 8 from %stack.0)
  $x22, $x21 = frame-destroy LDPXi $sp, 2 :: (load 8 from %stack.3), (load 8 from %stack.2)
  early-clobber $sp, $lr, $x23 = frame-destroy LDPXpost $sp(tied-def 0), 6 :: (load 8 from %stack.5), (load 8 from %stack.4)
  RET undef $lr

######
chris-MI.isCFIInstruction end: 
 ######
 bb.0.entry:
  liveins: $x23, $lr, $x21, $x22, $x19, $x20
  early-clobber $sp = frame-setup STPXpre killed $lr, killed $x23, $sp(tied-def 0), -6 :: (store 8 into %stack.5), (store 8 into %stack.4)
  frame-setup STPXi killed $x22, killed $x21, $sp, 2 :: (store 8 into %stack.3), (store 8 into %stack.2)
  frame-setup STPXi killed $x20, killed $x19, $sp, 4 :: (store 8 into %stack.1), (store 8 into %stack.0)
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  frame-setup CFI_INSTRUCTION offset $w19, -8
  frame-setup CFI_INSTRUCTION offset $w20, -16
  frame-setup CFI_INSTRUCTION offset $w21, -24
  frame-setup CFI_INSTRUCTION offset $w22, -32
  renamable $x19 = ADRP target-flags(aarch64-page) @X1
  renamable $w8 = LDRWui renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (dereferenceable load 4 from @X1)
  renamable $w20 = ADDWri renamable $w8, 1, 0
  renamable $w21 = ADDWri renamable $w8, 2, 0
  renamable $w22 = ADDWri renamable $w8, 3, 0
  renamable $w23 = ADDWri killed renamable $w8, 4, 0
  frame-setup CFI_INSTRUCTION offset $w23, -40
  frame-setup CFI_INSTRUCTION offset $w30, -48
  BL @foo, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  STRWui killed renamable $w20, killed renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (store 4 into @X1)
  renamable $x8 = ADRP target-flags(aarch64-page) @X2
  renamable $x9 = ADRP target-flags(aarch64-page) @X3
  renamable $x10 = ADRP target-flags(aarch64-page) @X4
  STRWui killed renamable $w21, killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @X2 :: (store 4 into @X2)
  STRWui killed renamable $w22, killed renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @X3 :: (store 4 into @X3)
  STRWui killed renamable $w23, killed renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @X4 :: (store 4 into @X4)
  $x20, $x19 = frame-destroy LDPXi $sp, 4 :: (load 8 from %stack.1), (load 8 from %stack.0)
  $x22, $x21 = frame-destroy LDPXi $sp, 2 :: (load 8 from %stack.3), (load 8 from %stack.2)
  early-clobber $sp, $lr, $x23 = frame-destroy LDPXpost $sp(tied-def 0), 6 :: (load 8 from %stack.5), (load 8 from %stack.4)
  RET undef $lr

######
chris_getSchedRegions: new RegionEnd = frame-setup CFI_INSTRUCTION offset $w23, -40

chris_getSchedRegions: I = renamable $x19 = ADRP target-flags(aarch64-page) @X1

chris_getSchedRegions: I1 = renamable $x19 = ADRP target-flags(aarch64-page) @X1

chris-MI.isCFIInstruction begin: 
 ######
 bb.0.entry:
  liveins: $x23, $lr, $x21, $x22, $x19, $x20
  early-clobber $sp = frame-setup STPXpre killed $lr, killed $x23, $sp(tied-def 0), -6 :: (store 8 into %stack.5), (store 8 into %stack.4)
  frame-setup STPXi killed $x22, killed $x21, $sp, 2 :: (store 8 into %stack.3), (store 8 into %stack.2)
  frame-setup STPXi killed $x20, killed $x19, $sp, 4 :: (store 8 into %stack.1), (store 8 into %stack.0)
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  frame-setup CFI_INSTRUCTION offset $w19, -8
  frame-setup CFI_INSTRUCTION offset $w20, -16
  frame-setup CFI_INSTRUCTION offset $w21, -24
  frame-setup CFI_INSTRUCTION offset $w22, -32
  renamable $x19 = ADRP target-flags(aarch64-page) @X1
  renamable $w8 = LDRWui renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (dereferenceable load 4 from @X1)
  renamable $w20 = ADDWri renamable $w8, 1, 0
  renamable $w21 = ADDWri renamable $w8, 2, 0
  renamable $w22 = ADDWri renamable $w8, 3, 0
  renamable $w23 = ADDWri killed renamable $w8, 4, 0
  frame-setup CFI_INSTRUCTION offset $w23, -40
  frame-setup CFI_INSTRUCTION offset $w30, -48
  BL @foo, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  STRWui killed renamable $w20, killed renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (store 4 into @X1)
  renamable $x8 = ADRP target-flags(aarch64-page) @X2
  renamable $x9 = ADRP target-flags(aarch64-page) @X3
  renamable $x10 = ADRP target-flags(aarch64-page) @X4
  STRWui killed renamable $w21, killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @X2 :: (store 4 into @X2)
  STRWui killed renamable $w22, killed renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @X3 :: (store 4 into @X3)
  STRWui killed renamable $w23, killed renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @X4 :: (store 4 into @X4)
  $x20, $x19 = frame-destroy LDPXi $sp, 4 :: (load 8 from %stack.1), (load 8 from %stack.0)
  $x22, $x21 = frame-destroy LDPXi $sp, 2 :: (load 8 from %stack.3), (load 8 from %stack.2)
  early-clobber $sp, $lr, $x23 = frame-destroy LDPXpost $sp(tied-def 0), 6 :: (load 8 from %stack.5), (load 8 from %stack.4)
  RET undef $lr

######
chris-MI.isCFIInstruction end: 
 ######
 bb.0.entry:
  liveins: $x23, $lr, $x21, $x22, $x19, $x20
  early-clobber $sp = frame-setup STPXpre killed $lr, killed $x23, $sp(tied-def 0), -6 :: (store 8 into %stack.5), (store 8 into %stack.4)
  frame-setup STPXi killed $x22, killed $x21, $sp, 2 :: (store 8 into %stack.3), (store 8 into %stack.2)
  frame-setup STPXi killed $x20, killed $x19, $sp, 4 :: (store 8 into %stack.1), (store 8 into %stack.0)
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  frame-setup CFI_INSTRUCTION offset $w19, -8
  frame-setup CFI_INSTRUCTION offset $w20, -16
  frame-setup CFI_INSTRUCTION offset $w21, -24
  renamable $x19 = ADRP target-flags(aarch64-page) @X1
  renamable $w8 = LDRWui renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (dereferenceable load 4 from @X1)
  renamable $w20 = ADDWri renamable $w8, 1, 0
  renamable $w21 = ADDWri renamable $w8, 2, 0
  renamable $w22 = ADDWri renamable $w8, 3, 0
  renamable $w23 = ADDWri killed renamable $w8, 4, 0
  frame-setup CFI_INSTRUCTION offset $w22, -32
  frame-setup CFI_INSTRUCTION offset $w23, -40
  frame-setup CFI_INSTRUCTION offset $w30, -48
  BL @foo, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  STRWui killed renamable $w20, killed renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (store 4 into @X1)
  renamable $x8 = ADRP target-flags(aarch64-page) @X2
  renamable $x9 = ADRP target-flags(aarch64-page) @X3
  renamable $x10 = ADRP target-flags(aarch64-page) @X4
  STRWui killed renamable $w21, killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @X2 :: (store 4 into @X2)
  STRWui killed renamable $w22, killed renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @X3 :: (store 4 into @X3)
  STRWui killed renamable $w23, killed renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @X4 :: (store 4 into @X4)
  $x20, $x19 = frame-destroy LDPXi $sp, 4 :: (load 8 from %stack.1), (load 8 from %stack.0)
  $x22, $x21 = frame-destroy LDPXi $sp, 2 :: (load 8 from %stack.3), (load 8 from %stack.2)
  early-clobber $sp, $lr, $x23 = frame-destroy LDPXpost $sp(tied-def 0), 6 :: (load 8 from %stack.5), (load 8 from %stack.4)
  RET undef $lr

######
chris_getSchedRegions: new RegionEnd = frame-setup CFI_INSTRUCTION offset $w22, -32

chris_getSchedRegions: I = renamable $x19 = ADRP target-flags(aarch64-page) @X1

chris_getSchedRegions: I1 = renamable $x19 = ADRP target-flags(aarch64-page) @X1

chris-MI.isCFIInstruction begin: 
 ######
 bb.0.entry:
  liveins: $x23, $lr, $x21, $x22, $x19, $x20
  early-clobber $sp = frame-setup STPXpre killed $lr, killed $x23, $sp(tied-def 0), -6 :: (store 8 into %stack.5), (store 8 into %stack.4)
  frame-setup STPXi killed $x22, killed $x21, $sp, 2 :: (store 8 into %stack.3), (store 8 into %stack.2)
  frame-setup STPXi killed $x20, killed $x19, $sp, 4 :: (store 8 into %stack.1), (store 8 into %stack.0)
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  frame-setup CFI_INSTRUCTION offset $w19, -8
  frame-setup CFI_INSTRUCTION offset $w20, -16
  frame-setup CFI_INSTRUCTION offset $w21, -24
  renamable $x19 = ADRP target-flags(aarch64-page) @X1
  renamable $w8 = LDRWui renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (dereferenceable load 4 from @X1)
  renamable $w20 = ADDWri renamable $w8, 1, 0
  renamable $w21 = ADDWri renamable $w8, 2, 0
  renamable $w22 = ADDWri renamable $w8, 3, 0
  renamable $w23 = ADDWri killed renamable $w8, 4, 0
  frame-setup CFI_INSTRUCTION offset $w22, -32
  frame-setup CFI_INSTRUCTION offset $w23, -40
  frame-setup CFI_INSTRUCTION offset $w30, -48
  BL @foo, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  STRWui killed renamable $w20, killed renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (store 4 into @X1)
  renamable $x8 = ADRP target-flags(aarch64-page) @X2
  renamable $x9 = ADRP target-flags(aarch64-page) @X3
  renamable $x10 = ADRP target-flags(aarch64-page) @X4
  STRWui killed renamable $w21, killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @X2 :: (store 4 into @X2)
  STRWui killed renamable $w22, killed renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @X3 :: (store 4 into @X3)
  STRWui killed renamable $w23, killed renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @X4 :: (store 4 into @X4)
  $x20, $x19 = frame-destroy LDPXi $sp, 4 :: (load 8 from %stack.1), (load 8 from %stack.0)
  $x22, $x21 = frame-destroy LDPXi $sp, 2 :: (load 8 from %stack.3), (load 8 from %stack.2)
  early-clobber $sp, $lr, $x23 = frame-destroy LDPXpost $sp(tied-def 0), 6 :: (load 8 from %stack.5), (load 8 from %stack.4)
  RET undef $lr

######
chris-MI.isCFIInstruction end: 
 ######
 bb.0.entry:
  liveins: $x23, $lr, $x21, $x22, $x19, $x20
  early-clobber $sp = frame-setup STPXpre killed $lr, killed $x23, $sp(tied-def 0), -6 :: (store 8 into %stack.5), (store 8 into %stack.4)
  frame-setup STPXi killed $x22, killed $x21, $sp, 2 :: (store 8 into %stack.3), (store 8 into %stack.2)
  frame-setup STPXi killed $x20, killed $x19, $sp, 4 :: (store 8 into %stack.1), (store 8 into %stack.0)
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  frame-setup CFI_INSTRUCTION offset $w19, -8
  frame-setup CFI_INSTRUCTION offset $w20, -16
  renamable $x19 = ADRP target-flags(aarch64-page) @X1
  renamable $w8 = LDRWui renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (dereferenceable load 4 from @X1)
  renamable $w20 = ADDWri renamable $w8, 1, 0
  renamable $w21 = ADDWri renamable $w8, 2, 0
  renamable $w22 = ADDWri renamable $w8, 3, 0
  renamable $w23 = ADDWri killed renamable $w8, 4, 0
  frame-setup CFI_INSTRUCTION offset $w21, -24
  frame-setup CFI_INSTRUCTION offset $w22, -32
  frame-setup CFI_INSTRUCTION offset $w23, -40
  frame-setup CFI_INSTRUCTION offset $w30, -48
  BL @foo, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  STRWui killed renamable $w20, killed renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (store 4 into @X1)
  renamable $x8 = ADRP target-flags(aarch64-page) @X2
  renamable $x9 = ADRP target-flags(aarch64-page) @X3
  renamable $x10 = ADRP target-flags(aarch64-page) @X4
  STRWui killed renamable $w21, killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @X2 :: (store 4 into @X2)
  STRWui killed renamable $w22, killed renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @X3 :: (store 4 into @X3)
  STRWui killed renamable $w23, killed renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @X4 :: (store 4 into @X4)
  $x20, $x19 = frame-destroy LDPXi $sp, 4 :: (load 8 from %stack.1), (load 8 from %stack.0)
  $x22, $x21 = frame-destroy LDPXi $sp, 2 :: (load 8 from %stack.3), (load 8 from %stack.2)
  early-clobber $sp, $lr, $x23 = frame-destroy LDPXpost $sp(tied-def 0), 6 :: (load 8 from %stack.5), (load 8 from %stack.4)
  RET undef $lr

######
chris_getSchedRegions: new RegionEnd = frame-setup CFI_INSTRUCTION offset $w21, -24

chris_getSchedRegions: I = renamable $x19 = ADRP target-flags(aarch64-page) @X1

chris_getSchedRegions: I1 = renamable $x19 = ADRP target-flags(aarch64-page) @X1

chris-MI.isCFIInstruction begin: 
 ######
 bb.0.entry:
  liveins: $x23, $lr, $x21, $x22, $x19, $x20
  early-clobber $sp = frame-setup STPXpre killed $lr, killed $x23, $sp(tied-def 0), -6 :: (store 8 into %stack.5), (store 8 into %stack.4)
  frame-setup STPXi killed $x22, killed $x21, $sp, 2 :: (store 8 into %stack.3), (store 8 into %stack.2)
  frame-setup STPXi killed $x20, killed $x19, $sp, 4 :: (store 8 into %stack.1), (store 8 into %stack.0)
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  frame-setup CFI_INSTRUCTION offset $w19, -8
  frame-setup CFI_INSTRUCTION offset $w20, -16
  renamable $x19 = ADRP target-flags(aarch64-page) @X1
  renamable $w8 = LDRWui renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (dereferenceable load 4 from @X1)
  renamable $w20 = ADDWri renamable $w8, 1, 0
  renamable $w21 = ADDWri renamable $w8, 2, 0
  renamable $w22 = ADDWri renamable $w8, 3, 0
  renamable $w23 = ADDWri killed renamable $w8, 4, 0
  frame-setup CFI_INSTRUCTION offset $w21, -24
  frame-setup CFI_INSTRUCTION offset $w22, -32
  frame-setup CFI_INSTRUCTION offset $w23, -40
  frame-setup CFI_INSTRUCTION offset $w30, -48
  BL @foo, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  STRWui killed renamable $w20, killed renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (store 4 into @X1)
  renamable $x8 = ADRP target-flags(aarch64-page) @X2
  renamable $x9 = ADRP target-flags(aarch64-page) @X3
  renamable $x10 = ADRP target-flags(aarch64-page) @X4
  STRWui killed renamable $w21, killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @X2 :: (store 4 into @X2)
  STRWui killed renamable $w22, killed renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @X3 :: (store 4 into @X3)
  STRWui killed renamable $w23, killed renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @X4 :: (store 4 into @X4)
  $x20, $x19 = frame-destroy LDPXi $sp, 4 :: (load 8 from %stack.1), (load 8 from %stack.0)
  $x22, $x21 = frame-destroy LDPXi $sp, 2 :: (load 8 from %stack.3), (load 8 from %stack.2)
  early-clobber $sp, $lr, $x23 = frame-destroy LDPXpost $sp(tied-def 0), 6 :: (load 8 from %stack.5), (load 8 from %stack.4)
  RET undef $lr

######
chris-MI.isCFIInstruction end: 
 ######
 bb.0.entry:
  liveins: $x23, $lr, $x21, $x22, $x19, $x20
  early-clobber $sp = frame-setup STPXpre killed $lr, killed $x23, $sp(tied-def 0), -6 :: (store 8 into %stack.5), (store 8 into %stack.4)
  frame-setup STPXi killed $x22, killed $x21, $sp, 2 :: (store 8 into %stack.3), (store 8 into %stack.2)
  frame-setup STPXi killed $x20, killed $x19, $sp, 4 :: (store 8 into %stack.1), (store 8 into %stack.0)
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  frame-setup CFI_INSTRUCTION offset $w19, -8
  renamable $x19 = ADRP target-flags(aarch64-page) @X1
  renamable $w8 = LDRWui renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (dereferenceable load 4 from @X1)
  renamable $w20 = ADDWri renamable $w8, 1, 0
  renamable $w21 = ADDWri renamable $w8, 2, 0
  renamable $w22 = ADDWri renamable $w8, 3, 0
  renamable $w23 = ADDWri killed renamable $w8, 4, 0
  frame-setup CFI_INSTRUCTION offset $w20, -16
  frame-setup CFI_INSTRUCTION offset $w21, -24
  frame-setup CFI_INSTRUCTION offset $w22, -32
  frame-setup CFI_INSTRUCTION offset $w23, -40
  frame-setup CFI_INSTRUCTION offset $w30, -48
  BL @foo, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  STRWui killed renamable $w20, killed renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (store 4 into @X1)
  renamable $x8 = ADRP target-flags(aarch64-page) @X2
  renamable $x9 = ADRP target-flags(aarch64-page) @X3
  renamable $x10 = ADRP target-flags(aarch64-page) @X4
  STRWui killed renamable $w21, killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @X2 :: (store 4 into @X2)
  STRWui killed renamable $w22, killed renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @X3 :: (store 4 into @X3)
  STRWui killed renamable $w23, killed renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @X4 :: (store 4 into @X4)
  $x20, $x19 = frame-destroy LDPXi $sp, 4 :: (load 8 from %stack.1), (load 8 from %stack.0)
  $x22, $x21 = frame-destroy LDPXi $sp, 2 :: (load 8 from %stack.3), (load 8 from %stack.2)
  early-clobber $sp, $lr, $x23 = frame-destroy LDPXpost $sp(tied-def 0), 6 :: (load 8 from %stack.5), (load 8 from %stack.4)
  RET undef $lr

######
chris_getSchedRegions: new RegionEnd = frame-setup CFI_INSTRUCTION offset $w20, -16

chris_getSchedRegions: I = renamable $x19 = ADRP target-flags(aarch64-page) @X1

chris_getSchedRegions: I1 = renamable $x19 = ADRP target-flags(aarch64-page) @X1

chris-MI.isCFIInstruction begin: 
 ######
 bb.0.entry:
  liveins: $x23, $lr, $x21, $x22, $x19, $x20
  early-clobber $sp = frame-setup STPXpre killed $lr, killed $x23, $sp(tied-def 0), -6 :: (store 8 into %stack.5), (store 8 into %stack.4)
  frame-setup STPXi killed $x22, killed $x21, $sp, 2 :: (store 8 into %stack.3), (store 8 into %stack.2)
  frame-setup STPXi killed $x20, killed $x19, $sp, 4 :: (store 8 into %stack.1), (store 8 into %stack.0)
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  frame-setup CFI_INSTRUCTION offset $w19, -8
  renamable $x19 = ADRP target-flags(aarch64-page) @X1
  renamable $w8 = LDRWui renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (dereferenceable load 4 from @X1)
  renamable $w20 = ADDWri renamable $w8, 1, 0
  renamable $w21 = ADDWri renamable $w8, 2, 0
  renamable $w22 = ADDWri renamable $w8, 3, 0
  renamable $w23 = ADDWri killed renamable $w8, 4, 0
  frame-setup CFI_INSTRUCTION offset $w20, -16
  frame-setup CFI_INSTRUCTION offset $w21, -24
  frame-setup CFI_INSTRUCTION offset $w22, -32
  frame-setup CFI_INSTRUCTION offset $w23, -40
  frame-setup CFI_INSTRUCTION offset $w30, -48
  BL @foo, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  STRWui killed renamable $w20, killed renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (store 4 into @X1)
  renamable $x8 = ADRP target-flags(aarch64-page) @X2
  renamable $x9 = ADRP target-flags(aarch64-page) @X3
  renamable $x10 = ADRP target-flags(aarch64-page) @X4
  STRWui killed renamable $w21, killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @X2 :: (store 4 into @X2)
  STRWui killed renamable $w22, killed renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @X3 :: (store 4 into @X3)
  STRWui killed renamable $w23, killed renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @X4 :: (store 4 into @X4)
  $x20, $x19 = frame-destroy LDPXi $sp, 4 :: (load 8 from %stack.1), (load 8 from %stack.0)
  $x22, $x21 = frame-destroy LDPXi $sp, 2 :: (load 8 from %stack.3), (load 8 from %stack.2)
  early-clobber $sp, $lr, $x23 = frame-destroy LDPXpost $sp(tied-def 0), 6 :: (load 8 from %stack.5), (load 8 from %stack.4)
  RET undef $lr

######
chris-MI.isCFIInstruction end: 
 ######
 bb.0.entry:
  liveins: $x23, $lr, $x21, $x22, $x19, $x20
  early-clobber $sp = frame-setup STPXpre killed $lr, killed $x23, $sp(tied-def 0), -6 :: (store 8 into %stack.5), (store 8 into %stack.4)
  frame-setup STPXi killed $x22, killed $x21, $sp, 2 :: (store 8 into %stack.3), (store 8 into %stack.2)
  frame-setup STPXi killed $x20, killed $x19, $sp, 4 :: (store 8 into %stack.1), (store 8 into %stack.0)
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  renamable $x19 = ADRP target-flags(aarch64-page) @X1
  renamable $w8 = LDRWui renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (dereferenceable load 4 from @X1)
  renamable $w20 = ADDWri renamable $w8, 1, 0
  renamable $w21 = ADDWri renamable $w8, 2, 0
  renamable $w22 = ADDWri renamable $w8, 3, 0
  renamable $w23 = ADDWri killed renamable $w8, 4, 0
  frame-setup CFI_INSTRUCTION offset $w19, -8
  frame-setup CFI_INSTRUCTION offset $w20, -16
  frame-setup CFI_INSTRUCTION offset $w21, -24
  frame-setup CFI_INSTRUCTION offset $w22, -32
  frame-setup CFI_INSTRUCTION offset $w23, -40
  frame-setup CFI_INSTRUCTION offset $w30, -48
  BL @foo, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  STRWui killed renamable $w20, killed renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (store 4 into @X1)
  renamable $x8 = ADRP target-flags(aarch64-page) @X2
  renamable $x9 = ADRP target-flags(aarch64-page) @X3
  renamable $x10 = ADRP target-flags(aarch64-page) @X4
  STRWui killed renamable $w21, killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @X2 :: (store 4 into @X2)
  STRWui killed renamable $w22, killed renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @X3 :: (store 4 into @X3)
  STRWui killed renamable $w23, killed renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @X4 :: (store 4 into @X4)
  $x20, $x19 = frame-destroy LDPXi $sp, 4 :: (load 8 from %stack.1), (load 8 from %stack.0)
  $x22, $x21 = frame-destroy LDPXi $sp, 2 :: (load 8 from %stack.3), (load 8 from %stack.2)
  early-clobber $sp, $lr, $x23 = frame-destroy LDPXpost $sp(tied-def 0), 6 :: (load 8 from %stack.5), (load 8 from %stack.4)
  RET undef $lr

######
chris_getSchedRegions: new RegionEnd = frame-setup CFI_INSTRUCTION offset $w19, -8

chris_getSchedRegions: I = renamable $x19 = ADRP target-flags(aarch64-page) @X1

chris_getSchedRegions: I1 = renamable $x19 = ADRP target-flags(aarch64-page) @X1

chris-MI.isCFIInstruction begin: 
 ######
 bb.0.entry:
  liveins: $x23, $lr, $x21, $x22, $x19, $x20
  early-clobber $sp = frame-setup STPXpre killed $lr, killed $x23, $sp(tied-def 0), -6 :: (store 8 into %stack.5), (store 8 into %stack.4)
  frame-setup STPXi killed $x22, killed $x21, $sp, 2 :: (store 8 into %stack.3), (store 8 into %stack.2)
  frame-setup STPXi killed $x20, killed $x19, $sp, 4 :: (store 8 into %stack.1), (store 8 into %stack.0)
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  renamable $x19 = ADRP target-flags(aarch64-page) @X1
  renamable $w8 = LDRWui renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (dereferenceable load 4 from @X1)
  renamable $w20 = ADDWri renamable $w8, 1, 0
  renamable $w21 = ADDWri renamable $w8, 2, 0
  renamable $w22 = ADDWri renamable $w8, 3, 0
  renamable $w23 = ADDWri killed renamable $w8, 4, 0
  frame-setup CFI_INSTRUCTION offset $w19, -8
  frame-setup CFI_INSTRUCTION offset $w20, -16
  frame-setup CFI_INSTRUCTION offset $w21, -24
  frame-setup CFI_INSTRUCTION offset $w22, -32
  frame-setup CFI_INSTRUCTION offset $w23, -40
  frame-setup CFI_INSTRUCTION offset $w30, -48
  BL @foo, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  STRWui killed renamable $w20, killed renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (store 4 into @X1)
  renamable $x8 = ADRP target-flags(aarch64-page) @X2
  renamable $x9 = ADRP target-flags(aarch64-page) @X3
  renamable $x10 = ADRP target-flags(aarch64-page) @X4
  STRWui killed renamable $w21, killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @X2 :: (store 4 into @X2)
  STRWui killed renamable $w22, killed renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @X3 :: (store 4 into @X3)
  STRWui killed renamable $w23, killed renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @X4 :: (store 4 into @X4)
  $x20, $x19 = frame-destroy LDPXi $sp, 4 :: (load 8 from %stack.1), (load 8 from %stack.0)
  $x22, $x21 = frame-destroy LDPXi $sp, 2 :: (load 8 from %stack.3), (load 8 from %stack.2)
  early-clobber $sp, $lr, $x23 = frame-destroy LDPXpost $sp(tied-def 0), 6 :: (load 8 from %stack.5), (load 8 from %stack.4)
  RET undef $lr

######
chris-MI.isCFIInstruction end: 
 ######
 bb.0.entry:
  liveins: $x23, $lr, $x21, $x22, $x19, $x20
  early-clobber $sp = frame-setup STPXpre killed $lr, killed $x23, $sp(tied-def 0), -6 :: (store 8 into %stack.5), (store 8 into %stack.4)
  frame-setup STPXi killed $x22, killed $x21, $sp, 2 :: (store 8 into %stack.3), (store 8 into %stack.2)
  frame-setup STPXi killed $x20, killed $x19, $sp, 4 :: (store 8 into %stack.1), (store 8 into %stack.0)
  renamable $x19 = ADRP target-flags(aarch64-page) @X1
  renamable $w8 = LDRWui renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (dereferenceable load 4 from @X1)
  renamable $w20 = ADDWri renamable $w8, 1, 0
  renamable $w21 = ADDWri renamable $w8, 2, 0
  renamable $w22 = ADDWri renamable $w8, 3, 0
  renamable $w23 = ADDWri killed renamable $w8, 4, 0
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  frame-setup CFI_INSTRUCTION offset $w19, -8
  frame-setup CFI_INSTRUCTION offset $w20, -16
  frame-setup CFI_INSTRUCTION offset $w21, -24
  frame-setup CFI_INSTRUCTION offset $w22, -32
  frame-setup CFI_INSTRUCTION offset $w23, -40
  frame-setup CFI_INSTRUCTION offset $w30, -48
  BL @foo, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  STRWui killed renamable $w20, killed renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (store 4 into @X1)
  renamable $x8 = ADRP target-flags(aarch64-page) @X2
  renamable $x9 = ADRP target-flags(aarch64-page) @X3
  renamable $x10 = ADRP target-flags(aarch64-page) @X4
  STRWui killed renamable $w21, killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @X2 :: (store 4 into @X2)
  STRWui killed renamable $w22, killed renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @X3 :: (store 4 into @X3)
  STRWui killed renamable $w23, killed renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @X4 :: (store 4 into @X4)
  $x20, $x19 = frame-destroy LDPXi $sp, 4 :: (load 8 from %stack.1), (load 8 from %stack.0)
  $x22, $x21 = frame-destroy LDPXi $sp, 2 :: (load 8 from %stack.3), (load 8 from %stack.2)
  early-clobber $sp, $lr, $x23 = frame-destroy LDPXpost $sp(tied-def 0), 6 :: (load 8 from %stack.5), (load 8 from %stack.4)
  RET undef $lr

######
chris_getSchedRegions: new RegionEnd = frame-setup CFI_INSTRUCTION def_cfa_offset 48

chris_getSchedRegions: I = renamable $x19 = ADRP target-flags(aarch64-page) @X1

chris_++NumRegionInstrs = 6
chris_getSchedRegions: I = frame-setup STPXi killed $x20, killed $x19, $sp, 4 :: (store 8 into %stack.1), (store 8 into %stack.0)

chris_++NumRegionInstrs = 7
chris_getSchedRegions: I = frame-setup STPXi killed $x22, killed $x21, $sp, 2 :: (store 8 into %stack.3), (store 8 into %stack.2)

chris_getSchedRegions: I break = frame-setup STPXi killed $x22, killed $x21, $sp, 2 :: (store 8 into %stack.3), (store 8 into %stack.2)

chris_getSchedRegions: begin = frame-setup STPXi killed $x22, killed $x21, $sp, 2 :: (store 8 into %stack.3), (store 8 into %stack.2)

chris_getSchedRegions: start1 RegionEnd = frame-setup STPXi killed $x22, killed $x21, $sp, 2 :: (store 8 into %stack.3), (store 8 into %stack.2)

chris_getSchedRegions: start1-2 RegionEnd = early-clobber $sp = frame-setup STPXpre killed $lr, killed $x23, $sp(tied-def 0), -6 :: (store 8 into %stack.5), (store 8 into %stack.4)

chris_getSchedRegions: RegionEnd start early-clobber $sp = frame-setup STPXpre killed $lr, killed $x23, $sp(tied-def 0), -6 :: (store 8 into %stack.5), (store 8 into %stack.4)

chris_getSchedRegions: *** I 1 = early-clobber $sp = frame-setup STPXpre killed $lr, killed $x23, $sp(tied-def 0), -6 :: (store 8 into %stack.5), (store 8 into %stack.4)

test: entry
  From: STRWui killed renamable $w20, killed renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (store 4 into @X1)
    To: early-clobber $sp, $lr, $x23 = frame-destroy LDPXpost $sp(tied-def 0), 6 :: (load 8 from %stack.5), (load 8 from %stack.4)
 RegionInstrs: 
chris_MI:renamable $x8 = ADRP target-flags(aarch64-page) @X2
chris_MI:renamable $x9 = ADRP target-flags(aarch64-page) @X3
chris_MI:STRWui renamable $w20, renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (store 4 into @X1)
chris_MI:STRWui renamable $w21, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @X2 :: (store 4 into @X2)
chris_MI:STRWui renamable $w22, renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @X3 :: (store 4 into @X3)
chris_MI:$x20, $x19 = frame-destroy LDPXi $sp, 4 :: (load 8 from %stack.1), (load 8 from %stack.0)
chris_MI:$x22, $x21 = frame-destroy LDPXi $sp, 2 :: (load 8 from %stack.3), (load 8 from %stack.2)
chris_MI:renamable $x10 = ADRP target-flags(aarch64-page) @X4
chris_MI:STRWui renamable $w23, renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @X4 :: (store 4 into @X4)
test: entry
  From: frame-setup STPXi killed $x22, killed $x21, $sp, 2 :: (store 8 into %stack.3), (store 8 into %stack.2)
    To: frame-setup CFI_INSTRUCTION def_cfa_offset 48
 RegionInstrs: 
chris_MI:frame-setup STPXi $x20, $x19, $sp, 4 :: (store 8 into %stack.1), (store 8 into %stack.0)
chris_MI:renamable $x19 = ADRP target-flags(aarch64-page) @X1
chris_MI:renamable $w8 = LDRWui renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (dereferenceable load 4 from @X1)
chris_MI:frame-setup STPXi $x22, $x21, $sp, 2 :: (store 8 into %stack.3), (store 8 into %stack.2)
chris_MI:renamable $w20 = ADDWri renamable $w8, 1, 0
chris_MI:renamable $w21 = ADDWri renamable $w8, 2, 0
chris_MI:renamable $w22 = ADDWri renamable $w8, 3, 0
chris_MI:renamable $w23 = ADDWri renamable $w8, 4, 0
chris-afterRegions: 
 ######
 bb.0.entry:
  liveins: $x23, $lr, $x21, $x22, $x19, $x20
  early-clobber $sp = frame-setup STPXpre killed $lr, killed $x23, $sp(tied-def 0), -6 :: (store 8 into %stack.5), (store 8 into %stack.4)
  frame-setup STPXi $x20, $x19, $sp, 4 :: (store 8 into %stack.1), (store 8 into %stack.0)
  renamable $x19 = ADRP target-flags(aarch64-page) @X1
  renamable $w8 = LDRWui renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (dereferenceable load 4 from @X1)
  frame-setup STPXi $x22, $x21, $sp, 2 :: (store 8 into %stack.3), (store 8 into %stack.2)
  renamable $w20 = ADDWri renamable $w8, 1, 0
  renamable $w21 = ADDWri renamable $w8, 2, 0
  renamable $w22 = ADDWri renamable $w8, 3, 0
  renamable $w23 = ADDWri renamable $w8, 4, 0
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  frame-setup CFI_INSTRUCTION offset $w19, -8
  frame-setup CFI_INSTRUCTION offset $w20, -16
  frame-setup CFI_INSTRUCTION offset $w21, -24
  frame-setup CFI_INSTRUCTION offset $w22, -32
  frame-setup CFI_INSTRUCTION offset $w23, -40
  frame-setup CFI_INSTRUCTION offset $w30, -48
  BL @foo, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  renamable $x8 = ADRP target-flags(aarch64-page) @X2
  renamable $x9 = ADRP target-flags(aarch64-page) @X3
  STRWui renamable $w20, renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (store 4 into @X1)
  STRWui renamable $w21, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @X2 :: (store 4 into @X2)
  STRWui renamable $w22, renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @X3 :: (store 4 into @X3)
  $x20, $x19 = frame-destroy LDPXi $sp, 4 :: (load 8 from %stack.1), (load 8 from %stack.0)
  $x22, $x21 = frame-destroy LDPXi $sp, 2 :: (load 8 from %stack.3), (load 8 from %stack.2)
  renamable $x10 = ADRP target-flags(aarch64-page) @X4
  STRWui renamable $w23, renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @X4 :: (store 4 into @X4)
  early-clobber $sp, $lr, $x23 = frame-destroy LDPXpost $sp(tied-def 0), 6 :: (load 8 from %stack.5), (load 8 from %stack.4)
  RET undef $lr

######
--- |
  ; ModuleID = 'test1.mir'
  source_filename = "example.ll"
  target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
  target triple = "aarch64-linux-gnu"
  
  @X1 = global i32 0, align 4
  @X2 = global i32 0, align 4
  @X3 = global i32 0, align 4
  @X4 = global i32 0, align 4
  
  ; Function Attrs: nounwind
  define void @test(i32 %i) #0 {
  entry:
    %0 = load i32, i32* @X1, align 4
    %x1 = add i32 %0, 1
    %x2 = add i32 %0, 2
    %x3 = add i32 %0, 3
    %x4 = add i32 %0, 4
    tail call void @foo()
    store i32 %x1, i32* @X1, align 4
    store i32 %x2, i32* @X2, align 4
    store i32 %x3, i32* @X3, align 4
    store i32 %x4, i32* @X4, align 4
    ret void
  }
  
  declare void @foo()
  
  ; Function Attrs: nounwind
  declare void @llvm.stackprotector(i8*, i8**) #0
  
  attributes #0 = { nounwind }
  
  !llvm.dbg.cu = !{!0}
  !llvm.module.flags = !{!3, !4, !5}
  
  !0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 7.0.0 (trunk 330790) (llvm/trunk 330787)", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly, enums: !2)
  !1 = !DIFile(filename: "test.c", directory: "")
  !2 = !{}
  !3 = !{i32 2, !"Dwarf Version", i32 4}
  !4 = !{i32 2, !"Debug Info Version", i32 3}
  !5 = !{i32 1, !"wchar_size", i32 4}

...
---
name:            test
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
registers:       []
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       48
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    true
  hasCalls:        true
  stackProtector:  ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: spill-slot, offset: -8, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '$x19', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: spill-slot, offset: -16, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '$x20', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: spill-slot, offset: -24, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '$x21', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: spill-slot, offset: -32, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '$x22', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 4, name: '', type: spill-slot, offset: -40, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '$x23', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 5, name: '', type: spill-slot, offset: -48, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '$lr', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
callSites:       []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    liveins: $x23, $lr, $x21, $x22, $x19, $x20
  
    early-clobber $sp = frame-setup STPXpre killed $lr, killed $x23, $sp, -6 :: (store 8 into %stack.5), (store 8 into %stack.4)
    frame-setup STPXi killed $x20, killed $x19, $sp, 4 :: (store 8 into %stack.1), (store 8 into %stack.0)
    renamable $x19 = ADRP target-flags(aarch64-page) @X1
    renamable $w8 = LDRWui renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (dereferenceable load 4 from @X1)
    frame-setup STPXi killed $x22, killed $x21, $sp, 2 :: (store 8 into %stack.3), (store 8 into %stack.2)
    renamable $w20 = ADDWri renamable $w8, 1, 0
    renamable $w21 = ADDWri renamable $w8, 2, 0
    renamable $w22 = ADDWri renamable $w8, 3, 0
    renamable $w23 = ADDWri killed renamable $w8, 4, 0
    frame-setup CFI_INSTRUCTION def_cfa_offset 48
    frame-setup CFI_INSTRUCTION offset $w19, -8
    frame-setup CFI_INSTRUCTION offset $w20, -16
    frame-setup CFI_INSTRUCTION offset $w21, -24
    frame-setup CFI_INSTRUCTION offset $w22, -32
    frame-setup CFI_INSTRUCTION offset $w23, -40
    frame-setup CFI_INSTRUCTION offset $w30, -48
    BL @foo, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit-def $sp
    renamable $x8 = ADRP target-flags(aarch64-page) @X2
    renamable $x9 = ADRP target-flags(aarch64-page) @X3
    STRWui killed renamable $w20, killed renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (store 4 into @X1)
    STRWui killed renamable $w21, killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @X2 :: (store 4 into @X2)
    STRWui killed renamable $w22, killed renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @X3 :: (store 4 into @X3)
    $x20, $x19 = frame-destroy LDPXi $sp, 4 :: (load 8 from %stack.1), (load 8 from %stack.0)
    $x22, $x21 = frame-destroy LDPXi $sp, 2 :: (load 8 from %stack.3), (load 8 from %stack.2)
    renamable $x10 = ADRP target-flags(aarch64-page) @X4
    STRWui killed renamable $w23, killed renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @X4 :: (store 4 into @X4)
    early-clobber $sp, $lr, $x23 = frame-destroy LDPXpost $sp, 6 :: (load 8 from %stack.5), (load 8 from %stack.4)
    RET undef $lr

...
