Before post-MI-sched:
# Machine code for function test: IsSSA, NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=8, align=8, at location [SP-16]
  fi#2: size=8, align=8, at location [SP-24]
  fi#3: size=8, align=8, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-48]

bb.0.entry:
  liveins: $x23, $lr, $x21, $x22, $x19, $x20
  early-clobber $sp = frame-setup STPXpre killed $lr, killed $x23, $sp(tied-def 0), -6 :: (store 8 into %stack.5), (store 8 into %stack.4)
  frame-setup STPXi killed $x22, killed $x21, $sp, 2 :: (store 8 into %stack.3), (store 8 into %stack.2)
  frame-setup STPXi killed $x20, killed $x19, $sp, 4 :: (store 8 into %stack.1), (store 8 into %stack.0)
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  frame-setup CFI_INSTRUCTION offset $w19, -8
  frame-setup CFI_INSTRUCTION offset $w20, -16
  frame-setup CFI_INSTRUCTION offset $w21, -24
  frame-setup CFI_INSTRUCTION offset $w22, -32
  frame-setup CFI_INSTRUCTION offset $w23, -40
  frame-setup CFI_INSTRUCTION offset $w30, -48
  renamable $x19 = ADRP target-flags(aarch64-page) @X1
  renamable $w8 = LDRWui renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (dereferenceable load 4 from @X1)
  renamable $w20 = ADDWri renamable $w8, 1, 0
  renamable $w21 = ADDWri renamable $w8, 2, 0
  renamable $w22 = ADDWri renamable $w8, 3, 0
  renamable $w23 = ADDWri killed renamable $w8, 4, 0
  BL @foo, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  STRWui killed renamable $w20, killed renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (store 4 into @X1)
  renamable $x8 = ADRP target-flags(aarch64-page) @X2
  renamable $x9 = ADRP target-flags(aarch64-page) @X3
  renamable $x10 = ADRP target-flags(aarch64-page) @X4
  STRWui killed renamable $w21, killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @X2 :: (store 4 into @X2)
  STRWui killed renamable $w22, killed renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @X3 :: (store 4 into @X3)
  STRWui killed renamable $w23, killed renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @X4 :: (store 4 into @X4)
  $x20, $x19 = frame-destroy LDPXi $sp, 4 :: (load 8 from %stack.1), (load 8 from %stack.0)
  $x22, $x21 = frame-destroy LDPXi $sp, 2 :: (load 8 from %stack.3), (load 8 from %stack.2)
  early-clobber $sp, $lr, $x23 = frame-destroy LDPXpost $sp(tied-def 0), 6 :: (load 8 from %stack.5), (load 8 from %stack.4)
  RET undef $lr

# End machine code for function test.

chris-line1:test:%bb.0
getScheduRegions
chris-MBB-begin: early-clobber $sp = frame-setup STPXpre killed $lr, killed $x23, $sp(tied-def 0), -6 :: (store 8 into %stack.5), (store 8 into %stack.4)

chris-RegionEnd: UNKNOWN

chris-RegionEnd -- is: RET undef $lr

chris-I: RET undef $lr

chris-MI: early-clobber $sp, $lr, $x23 = frame-destroy LDPXpost $sp(tied-def 0), 6 :: (load 8 from %stack.5), (load 8 from %stack.4)

chris-Regions.push_back: begin=0x7ffc3b979d80chris-Regions.push_back: end=0x7ffc3b979d80chris-RegionEnd: RET undef $lr

chris-RegionEnd -- is: early-clobber $sp, $lr, $x23 = frame-destroy LDPXpost $sp(tied-def 0), 6 :: (load 8 from %stack.5), (load 8 from %stack.4)

chris-I: early-clobber $sp, $lr, $x23 = frame-destroy LDPXpost $sp(tied-def 0), 6 :: (load 8 from %stack.5), (load 8 from %stack.4)

chris-MI: $x22, $x21 = frame-destroy LDPXi $sp, 2 :: (load 8 from %stack.3), (load 8 from %stack.2)

chris-Num: 1
chris-I: $x22, $x21 = frame-destroy LDPXi $sp, 2 :: (load 8 from %stack.3), (load 8 from %stack.2)

chris-MI: $x20, $x19 = frame-destroy LDPXi $sp, 4 :: (load 8 from %stack.1), (load 8 from %stack.0)

chris-Num: 2
chris-I: $x20, $x19 = frame-destroy LDPXi $sp, 4 :: (load 8 from %stack.1), (load 8 from %stack.0)

chris-MI: STRWui killed renamable $w23, killed renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @X4 :: (store 4 into @X4)

chris-Num: 3
chris-I: STRWui killed renamable $w23, killed renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @X4 :: (store 4 into @X4)

chris-MI: STRWui killed renamable $w22, killed renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @X3 :: (store 4 into @X3)

chris-Num: 4
chris-I: STRWui killed renamable $w22, killed renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @X3 :: (store 4 into @X3)

chris-MI: STRWui killed renamable $w21, killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @X2 :: (store 4 into @X2)

chris-Num: 5
chris-I: STRWui killed renamable $w21, killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @X2 :: (store 4 into @X2)

chris-MI: renamable $x10 = ADRP target-flags(aarch64-page) @X4

chris-Num: 6
chris-I: renamable $x10 = ADRP target-flags(aarch64-page) @X4

chris-MI: renamable $x9 = ADRP target-flags(aarch64-page) @X3

chris-Num: 7
chris-I: renamable $x9 = ADRP target-flags(aarch64-page) @X3

chris-MI: renamable $x8 = ADRP target-flags(aarch64-page) @X2

chris-Num: 8
chris-I: renamable $x8 = ADRP target-flags(aarch64-page) @X2

chris-MI: STRWui killed renamable $w20, killed renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (store 4 into @X1)

chris-Num: 9
chris-I: STRWui killed renamable $w20, killed renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (store 4 into @X1)

chris-MI: BL @foo, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp

chris-Regions.push_back: begin=0x7ffc3b979d80chris-Regions.push_back: end=0x7ffc3b979d98here num:9
chris-begin:STRWui killed renamable $w20, killed renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (store 4 into @X1)

chris-end:early-clobber $sp, $lr, $x23 = frame-destroy LDPXpost $sp(tied-def 0), 6 :: (load 8 from %stack.5), (load 8 from %stack.4)

chris-test1:STRWui killed renamable $w20, killed renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (store 4 into @X1)

chris-test1:renamable $x8 = ADRP target-flags(aarch64-page) @X2

chris-test1:renamable $x9 = ADRP target-flags(aarch64-page) @X3

chris-test1:renamable $x10 = ADRP target-flags(aarch64-page) @X4

chris-test1:STRWui killed renamable $w21, killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @X2 :: (store 4 into @X2)

chris-test1:STRWui killed renamable $w22, killed renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @X3 :: (store 4 into @X3)

chris-test1:STRWui killed renamable $w23, killed renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @X4 :: (store 4 into @X4)

chris-test1:$x20, $x19 = frame-destroy LDPXi $sp, 4 :: (load 8 from %stack.1), (load 8 from %stack.0)

chris-test1:$x22, $x21 = frame-destroy LDPXi $sp, 2 :: (load 8 from %stack.3), (load 8 from %stack.2)

chris-RegionEnd: STRWui killed renamable $w20, killed renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (store 4 into @X1)

chris-RegionEnd -- is: BL @foo, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp

chris-I: BL @foo, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp

chris-MI: renamable $w23 = ADDWri killed renamable $w8, 4, 0

chris-Num: 1
chris-I: renamable $w23 = ADDWri killed renamable $w8, 4, 0

chris-MI: renamable $w22 = ADDWri renamable $w8, 3, 0

chris-Num: 2
chris-I: renamable $w22 = ADDWri renamable $w8, 3, 0

chris-MI: renamable $w21 = ADDWri renamable $w8, 2, 0

chris-Num: 3
chris-I: renamable $w21 = ADDWri renamable $w8, 2, 0

chris-MI: renamable $w20 = ADDWri renamable $w8, 1, 0

chris-Num: 4
chris-I: renamable $w20 = ADDWri renamable $w8, 1, 0

chris-MI: renamable $w8 = LDRWui renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (dereferenceable load 4 from @X1)

chris-Num: 5
chris-I: renamable $w8 = LDRWui renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (dereferenceable load 4 from @X1)

chris-MI: renamable $x19 = ADRP target-flags(aarch64-page) @X1

chris-Num: 6
chris-I: renamable $x19 = ADRP target-flags(aarch64-page) @X1

chris-MI: frame-setup CFI_INSTRUCTION offset $w30, -48

chris-Num: 7
chris-I: frame-setup CFI_INSTRUCTION offset $w30, -48

chris-MI: frame-setup CFI_INSTRUCTION offset $w23, -40

chris-Num: 8
chris-I: frame-setup CFI_INSTRUCTION offset $w23, -40

chris-MI: frame-setup CFI_INSTRUCTION offset $w22, -32

chris-Num: 9
chris-I: frame-setup CFI_INSTRUCTION offset $w22, -32

chris-MI: frame-setup CFI_INSTRUCTION offset $w21, -24

chris-Num: 10
chris-I: frame-setup CFI_INSTRUCTION offset $w21, -24

chris-MI: frame-setup CFI_INSTRUCTION offset $w20, -16

chris-Num: 11
chris-I: frame-setup CFI_INSTRUCTION offset $w20, -16

chris-MI: frame-setup CFI_INSTRUCTION offset $w19, -8

chris-Num: 12
chris-I: frame-setup CFI_INSTRUCTION offset $w19, -8

chris-MI: frame-setup CFI_INSTRUCTION def_cfa_offset 48

chris-Num: 13
chris-I: frame-setup CFI_INSTRUCTION def_cfa_offset 48

chris-MI: frame-setup STPXi killed $x20, killed $x19, $sp, 4 :: (store 8 into %stack.1), (store 8 into %stack.0)

chris-Num: 14
chris-I: frame-setup STPXi killed $x20, killed $x19, $sp, 4 :: (store 8 into %stack.1), (store 8 into %stack.0)

chris-MI: frame-setup STPXi killed $x22, killed $x21, $sp, 2 :: (store 8 into %stack.3), (store 8 into %stack.2)

chris-Num: 15
chris-I: frame-setup STPXi killed $x22, killed $x21, $sp, 2 :: (store 8 into %stack.3), (store 8 into %stack.2)

chris-MI: early-clobber $sp = frame-setup STPXpre killed $lr, killed $x23, $sp(tied-def 0), -6 :: (store 8 into %stack.5), (store 8 into %stack.4)

chris-Regions.push_back: begin=0x7ffc3b979d80chris-Regions.push_back: end=0x7ffc3b979db0here num:9
chris-begin:STRWui killed renamable $w20, killed renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (store 4 into @X1)

chris-end:early-clobber $sp, $lr, $x23 = frame-destroy LDPXpost $sp(tied-def 0), 6 :: (load 8 from %stack.5), (load 8 from %stack.4)

chris-test1:STRWui killed renamable $w20, killed renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (store 4 into @X1)

chris-test1:renamable $x8 = ADRP target-flags(aarch64-page) @X2

chris-test1:renamable $x9 = ADRP target-flags(aarch64-page) @X3

chris-test1:renamable $x10 = ADRP target-flags(aarch64-page) @X4

chris-test1:STRWui killed renamable $w21, killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @X2 :: (store 4 into @X2)

chris-test1:STRWui killed renamable $w22, killed renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @X3 :: (store 4 into @X3)

chris-test1:STRWui killed renamable $w23, killed renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @X4 :: (store 4 into @X4)

chris-test1:$x20, $x19 = frame-destroy LDPXi $sp, 4 :: (load 8 from %stack.1), (load 8 from %stack.0)

chris-test1:$x22, $x21 = frame-destroy LDPXi $sp, 2 :: (load 8 from %stack.3), (load 8 from %stack.2)

here num:15
chris-begin:frame-setup STPXi killed $x22, killed $x21, $sp, 2 :: (store 8 into %stack.3), (store 8 into %stack.2)

chris-end:BL @foo, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp

chris-test1:frame-setup STPXi killed $x22, killed $x21, $sp, 2 :: (store 8 into %stack.3), (store 8 into %stack.2)

chris-test1:frame-setup STPXi killed $x20, killed $x19, $sp, 4 :: (store 8 into %stack.1), (store 8 into %stack.0)

chris-test1:frame-setup CFI_INSTRUCTION def_cfa_offset 48

chris-test1:frame-setup CFI_INSTRUCTION offset $w19, -8

chris-test1:frame-setup CFI_INSTRUCTION offset $w20, -16

chris-test1:frame-setup CFI_INSTRUCTION offset $w21, -24

chris-test1:frame-setup CFI_INSTRUCTION offset $w22, -32

chris-test1:frame-setup CFI_INSTRUCTION offset $w23, -40

chris-test1:frame-setup CFI_INSTRUCTION offset $w30, -48

chris-test1:renamable $x19 = ADRP target-flags(aarch64-page) @X1

chris-test1:renamable $w8 = LDRWui renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (dereferenceable load 4 from @X1)

chris-test1:renamable $w20 = ADDWri renamable $w8, 1, 0

chris-test1:renamable $w21 = ADDWri renamable $w8, 2, 0

chris-test1:renamable $w22 = ADDWri renamable $w8, 3, 0

chris-test1:renamable $w23 = ADDWri killed renamable $w8, 4, 0

chris-RegionEnd: frame-setup STPXi killed $x22, killed $x21, $sp, 2 :: (store 8 into %stack.3), (store 8 into %stack.2)

chris-RegionEnd -- is: early-clobber $sp = frame-setup STPXpre killed $lr, killed $x23, $sp(tied-def 0), -6 :: (store 8 into %stack.5), (store 8 into %stack.4)

chris-Regions.push_back: begin=0x7ffc3b979d80chris-Regions.push_back: end=0x7ffc3b979db0here num:9
chris-begin:STRWui killed renamable $w20, killed renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (store 4 into @X1)

chris-end:early-clobber $sp, $lr, $x23 = frame-destroy LDPXpost $sp(tied-def 0), 6 :: (load 8 from %stack.5), (load 8 from %stack.4)

chris-test1:STRWui killed renamable $w20, killed renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (store 4 into @X1)

chris-test1:renamable $x8 = ADRP target-flags(aarch64-page) @X2

chris-test1:renamable $x9 = ADRP target-flags(aarch64-page) @X3

chris-test1:renamable $x10 = ADRP target-flags(aarch64-page) @X4

chris-test1:STRWui killed renamable $w21, killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @X2 :: (store 4 into @X2)

chris-test1:STRWui killed renamable $w22, killed renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @X3 :: (store 4 into @X3)

chris-test1:STRWui killed renamable $w23, killed renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @X4 :: (store 4 into @X4)

chris-test1:$x20, $x19 = frame-destroy LDPXi $sp, 4 :: (load 8 from %stack.1), (load 8 from %stack.0)

chris-test1:$x22, $x21 = frame-destroy LDPXi $sp, 2 :: (load 8 from %stack.3), (load 8 from %stack.2)

here num:15
chris-begin:frame-setup STPXi killed $x22, killed $x21, $sp, 2 :: (store 8 into %stack.3), (store 8 into %stack.2)

chris-end:BL @foo, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp

chris-test1:frame-setup STPXi killed $x22, killed $x21, $sp, 2 :: (store 8 into %stack.3), (store 8 into %stack.2)

chris-test1:frame-setup STPXi killed $x20, killed $x19, $sp, 4 :: (store 8 into %stack.1), (store 8 into %stack.0)

chris-test1:frame-setup CFI_INSTRUCTION def_cfa_offset 48

chris-test1:frame-setup CFI_INSTRUCTION offset $w19, -8

chris-test1:frame-setup CFI_INSTRUCTION offset $w20, -16

chris-test1:frame-setup CFI_INSTRUCTION offset $w21, -24

chris-test1:frame-setup CFI_INSTRUCTION offset $w22, -32

chris-test1:frame-setup CFI_INSTRUCTION offset $w23, -40

chris-test1:frame-setup CFI_INSTRUCTION offset $w30, -48

chris-test1:renamable $x19 = ADRP target-flags(aarch64-page) @X1

chris-test1:renamable $w8 = LDRWui renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (dereferenceable load 4 from @X1)

chris-test1:renamable $w20 = ADDWri renamable $w8, 1, 0

chris-test1:renamable $w21 = ADDWri renamable $w8, 2, 0

chris-test1:renamable $w22 = ADDWri renamable $w8, 3, 0

chris-test1:renamable $w23 = ADDWri killed renamable $w8, 4, 0

num:9
chris-begin:STRWui killed renamable $w20, killed renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (store 4 into @X1)

chris-end:early-clobber $sp, $lr, $x23 = frame-destroy LDPXpost $sp(tied-def 0), 6 :: (load 8 from %stack.5), (load 8 from %stack.4)

num:15
chris-begin:frame-setup STPXi killed $x22, killed $x21, $sp, 2 :: (store 8 into %stack.3), (store 8 into %stack.2)

chris-end:BL @foo, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp

I:STRWui killed renamable $w20, killed renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (store 4 into @X1)

RegionEnd:early-clobber $sp, $lr, $x23 = frame-destroy LDPXpost $sp(tied-def 0), 6 :: (load 8 from %stack.5), (load 8 from %stack.4)

chris-test:STRWui killed renamable $w20, killed renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (store 4 into @X1)

chris-test:renamable $x8 = ADRP target-flags(aarch64-page) @X2

chris-test:renamable $x9 = ADRP target-flags(aarch64-page) @X3

chris-test:renamable $x10 = ADRP target-flags(aarch64-page) @X4

chris-test:STRWui killed renamable $w21, killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @X2 :: (store 4 into @X2)

chris-test:STRWui killed renamable $w22, killed renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @X3 :: (store 4 into @X3)

chris-test:STRWui killed renamable $w23, killed renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @X4 :: (store 4 into @X4)

chris-test:$x20, $x19 = frame-destroy LDPXi $sp, 4 :: (load 8 from %stack.1), (load 8 from %stack.0)

chris-test:$x22, $x21 = frame-destroy LDPXi $sp, 2 :: (load 8 from %stack.3), (load 8 from %stack.2)

chris-enterRegion
begin=STRWui killed renamable $w20, killed renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (store 4 into @X1)

end=early-clobber $sp, $lr, $x23 = frame-destroy LDPXpost $sp(tied-def 0), 6 :: (load 8 from %stack.5), (load 8 from %stack.4)

********** T MI Scheduling **********
test:%bb.0 entry
  From: STRWui killed renamable $w20, killed renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (store 4 into @X1)
    To: early-clobber $sp, $lr, $x23 = frame-destroy LDPXpost $sp(tied-def 0), 6 :: (load 8 from %stack.5), (load 8 from %stack.4)
 RegionInstrs: 9
ScheduleDAGMI::schedule starting
ScheduleDAGMI::schedule starting done.
MI=STRWui killed renamable $w20, killed renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (store 4 into @X1)

chris-initSUnits
MI=renamable $x8 = ADRP target-flags(aarch64-page) @X2

chris-initSUnits
MI=renamable $x9 = ADRP target-flags(aarch64-page) @X3

chris-initSUnits
MI=renamable $x10 = ADRP target-flags(aarch64-page) @X4

chris-initSUnits
MI=STRWui killed renamable $w21, killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @X2 :: (store 4 into @X2)

chris-initSUnits
MI=STRWui killed renamable $w22, killed renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @X3 :: (store 4 into @X3)

chris-initSUnits
MI=STRWui killed renamable $w23, killed renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @X4 :: (store 4 into @X4)

chris-initSUnits
MI=$x20, $x19 = frame-destroy LDPXi $sp, 4 :: (load 8 from %stack.1), (load 8 from %stack.0)

chris-initSUnits
MI=$x22, $x21 = frame-destroy LDPXi $sp, 2 :: (load 8 from %stack.3), (load 8 from %stack.2)

chris-initSUnits
chris-buildSchedGraph: $x22, $x21 = frame-destroy LDPXi $sp, 2 :: (load 8 from %stack.3), (load 8 from %stack.2)

chris-buildSchedGraph: $x20, $x19 = frame-destroy LDPXi $sp, 4 :: (load 8 from %stack.1), (load 8 from %stack.0)

chris-buildSchedGraph: STRWui killed renamable $w23, killed renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @X4 :: (store 4 into @X4)

chris-buildSchedGraph: STRWui killed renamable $w22, killed renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @X3 :: (store 4 into @X3)

chris-buildSchedGraph: STRWui killed renamable $w21, killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @X2 :: (store 4 into @X2)

chris-buildSchedGraph: renamable $x10 = ADRP target-flags(aarch64-page) @X4

chris-buildSchedGraph: renamable $x9 = ADRP target-flags(aarch64-page) @X3

chris-buildSchedGraph: renamable $x8 = ADRP target-flags(aarch64-page) @X2

chris-buildSchedGraph: STRWui killed renamable $w20, killed renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (store 4 into @X1)

chris-findTopRoots:STRWui renamable $w20, renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (store 4 into @X1)

chris-findTopRoots:renamable $x8 = ADRP target-flags(aarch64-page) @X2

chris-findTopRoots:renamable $x9 = ADRP target-flags(aarch64-page) @X3

chris-findTopRoots:renamable $x10 = ADRP target-flags(aarch64-page) @X4

chris-findBotRoots:STRWui renamable $w23, renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @X4 :: (store 4 into @X4)

SU(0):   STRWui renamable $w20, renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (store 4 into @X1)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
    SU(7): Anti Latency=0
    SU(7): Anti Latency=0
SU(1):   renamable $x8 = ADRP target-flags(aarch64-page) @X2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(4): Data Latency=1 Reg=$x8
SU(2):   renamable $x9 = ADRP target-flags(aarch64-page) @X3
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(5): Data Latency=1 Reg=$x9
SU(3):   renamable $x10 = ADRP target-flags(aarch64-page) @X4
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(6): Data Latency=1 Reg=$x10
SU(4):   STRWui renamable $w21, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @X2 :: (store 4 into @X2)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(1): Data Latency=1 Reg=$x8
  Successors:
    SU(8): Anti Latency=0
SU(5):   STRWui renamable $w22, renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @X3 :: (store 4 into @X3)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(2): Data Latency=1 Reg=$x9
  Successors:
    SU(8): Anti Latency=0
SU(6):   STRWui renamable $w23, renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @X4 :: (store 4 into @X4)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=$x10
SU(7):   $x20, $x19 = frame-destroy LDPXi $sp, 4 :: (load 8 from %stack.1), (load 8 from %stack.0)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Predecessors:
    SU(0): Anti Latency=0
    SU(0): Anti Latency=0
  Successors:
    ExitSU: Ord  Latency=3 Artificial
SU(8):   $x22, $x21 = frame-destroy LDPXi $sp, 2 :: (load 8 from %stack.3), (load 8 from %stack.2)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(5): Anti Latency=0
    SU(4): Anti Latency=0
  Successors:
    ExitSU: Ord  Latency=3 Artificial
ExitSU:   early-clobber $sp, $lr, $x23 = frame-destroy LDPXpost $sp(tied-def 0), 6 :: (load 8 from %stack.5), (load 8 from %stack.4)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(8): Ord  Latency=3 Artificial
    SU(7): Ord  Latency=3 Artificial
chris-releaseNode: ReadyCycle= 0
chris-releaseNode: ReadyCycle= 0
chris-releaseNode: ReadyCycle= 0
chris-releaseNode: ReadyCycle= 0
Critical Path: (PGS-RR) 4
chris-nextIfDebug1
I: STRWui renamable $w20, renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (store 4 into @X1)

End: early-clobber $sp, $lr, $x23 = frame-destroy LDPXpost $sp(tied-def 0), 6 :: (load 8 from %stack.5), (load 8 from %stack.4)

I is: STRWui renamable $w20, renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (store 4 into @X1)

break
chris-nextIfDebug1: return: STRWui renamable $w20, renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (store 4 into @X1)

chris-initQueues: CurrentTop:STRWui renamable $w20, renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (store 4 into @X1)

chris-initQueues: CurrentBottom:early-clobber $sp, $lr, $x23 = frame-destroy LDPXpost $sp(tied-def 0), 6 :: (load 8 from %stack.5), (load 8 from %stack.4)

** ScheduleDAGMI::schedule picking next node
chris: IsTopNode:0
PostGenericScheduler::pickNode
debug1
DAG->top(): STRWui renamable $w20, renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (store 4 into @X1)

DAG->bottom(): early-clobber $sp, $lr, $x23 = frame-destroy LDPXpost $sp(tied-def 0), 6 :: (load 8 from %stack.5), (load 8 from %stack.4)

debug2
debug3
pickOnlyChoice: CheckPending=0
CurrMops=0
available not empty
bumpCycle
******************************** Pending.dump *********************
Queue TopQ.P: 
******************************** Pending.dump done *********************
******************************** Available.dump *********************
Queue TopQ.A: 0 1 2 3 
******************************** Available.dump done *********************
debug5
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
debug6
Scheduling SU(1) renamable $x8 = ADRP target-flags(aarch64-page) @X2
chris: check SU break
chris-checkSchedLimit
true
chris-schedule: renamable $x8 = ADRP target-flags(aarch64-page) @X2

chris: scheduleNode
  Ready @0c
  TopQ.A BotLatency SU(1) 4c
  *** Max MOps 1 at cycle 0
MinReadyCycl = 0
std::numeric_limits<unsigned>::max() = 4294967295
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
chris: updateQueues
chris-releaseNode: ReadyCycle= 1
SU is Scheduled: renamable $x8 = ADRP target-flags(aarch64-page) @X2

** ScheduleDAGMI::schedule picking next node
chris: IsTopNode:1
PostGenericScheduler::pickNode
debug1
DAG->top(): STRWui renamable $w20, renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (store 4 into @X1)

DAG->bottom(): early-clobber $sp, $lr, $x23 = frame-destroy LDPXpost $sp(tied-def 0), 6 :: (load 8 from %stack.5), (load 8 from %stack.4)

debug2
debug3
pickOnlyChoice: CheckPending=1
chris-releasePending: MinReadyCycle=0
pending.size=0
CheckPending set to false
CurrMops=0
available not empty
bumpCycle
******************************** Pending.dump *********************
Queue TopQ.P: 
******************************** Pending.dump done *********************
******************************** Available.dump *********************
Queue TopQ.A: 0 3 2 4 
******************************** Available.dump done *********************
debug5
  TopQ.A RemainingLatency 0 + 1c > CritPath 4
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
debug6
Scheduling SU(2) renamable $x9 = ADRP target-flags(aarch64-page) @X3
chris: check SU break
chris-checkSchedLimit
true
chris-schedule: renamable $x9 = ADRP target-flags(aarch64-page) @X3

chris: scheduleNode
  Ready @1c
  TopQ.A BotLatency SU(2) 4c
  *** Max MOps 1 at cycle 1
MinReadyCycl = 0
std::numeric_limits<unsigned>::max() = 4294967295
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
chris: updateQueues
chris-releaseNode: ReadyCycle= 2
SU is Scheduled: renamable $x9 = ADRP target-flags(aarch64-page) @X3

** ScheduleDAGMI::schedule picking next node
chris: IsTopNode:1
PostGenericScheduler::pickNode
debug1
DAG->top(): STRWui renamable $w20, renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (store 4 into @X1)

DAG->bottom(): early-clobber $sp, $lr, $x23 = frame-destroy LDPXpost $sp(tied-def 0), 6 :: (load 8 from %stack.5), (load 8 from %stack.4)

debug2
debug3
pickOnlyChoice: CheckPending=1
chris-releasePending: MinReadyCycle=0
pending.size=0
CheckPending set to false
CurrMops=0
available not empty
bumpCycle
******************************** Pending.dump *********************
Queue TopQ.P: 
******************************** Pending.dump done *********************
******************************** Available.dump *********************
Queue TopQ.A: 0 3 4 5 
******************************** Available.dump done *********************
debug5
  TopQ.A RemainingLatency 0 + 2c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
debug6
Scheduling SU(0) STRWui renamable $w20, renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (store 4 into @X1)
chris: check SU break
chris-checkSchedLimit
true
chris-schedule: STRWui renamable $w20, renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (store 4 into @X1)

chris-nextIfDebug1
I: renamable $x10 = ADRP target-flags(aarch64-page) @X4

End: early-clobber $sp, $lr, $x23 = frame-destroy LDPXpost $sp(tied-def 0), 6 :: (load 8 from %stack.5), (load 8 from %stack.4)

I is: renamable $x10 = ADRP target-flags(aarch64-page) @X4

break
chris-nextIfDebug1: return: renamable $x10 = ADRP target-flags(aarch64-page) @X4

chris: scheduleNode
  Ready @2c
  *** Max MOps 1 at cycle 2
MinReadyCycl = 0
std::numeric_limits<unsigned>::max() = 4294967295
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
chris: updateQueues
chris-releaseNode: ReadyCycle= 2
SU is Scheduled: STRWui renamable $w20, renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (store 4 into @X1)

** ScheduleDAGMI::schedule picking next node
chris: IsTopNode:1
PostGenericScheduler::pickNode
debug1
DAG->top(): renamable $x10 = ADRP target-flags(aarch64-page) @X4

DAG->bottom(): early-clobber $sp, $lr, $x23 = frame-destroy LDPXpost $sp(tied-def 0), 6 :: (load 8 from %stack.5), (load 8 from %stack.4)

debug2
debug3
pickOnlyChoice: CheckPending=1
chris-releasePending: MinReadyCycle=0
pending.size=0
CheckPending set to false
CurrMops=0
available not empty
bumpCycle
******************************** Pending.dump *********************
Queue TopQ.P: 
******************************** Pending.dump done *********************
******************************** Available.dump *********************
Queue TopQ.A: 5 3 4 7 
******************************** Available.dump done *********************
debug5
  TopQ.A RemainingLatency 0 + 3c > CritPath 4
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
Pick Top ORDER     
debug6
Scheduling SU(4) STRWui renamable $w21, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @X2 :: (store 4 into @X2)
chris: check SU break
chris-checkSchedLimit
true
chris-schedule: STRWui renamable $w21, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @X2 :: (store 4 into @X2)

chris: scheduleNode
  Ready @3c
  TopQ.A TopLatency SU(4) 1c
  TopQ.A BotLatency SU(4) 3c
  *** Max MOps 1 at cycle 3
MinReadyCycl = 0
std::numeric_limits<unsigned>::max() = 4294967295
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
chris: updateQueues
SU is Scheduled: STRWui renamable $w21, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @X2 :: (store 4 into @X2)

** ScheduleDAGMI::schedule picking next node
chris: IsTopNode:1
PostGenericScheduler::pickNode
debug1
DAG->top(): renamable $x10 = ADRP target-flags(aarch64-page) @X4

DAG->bottom(): early-clobber $sp, $lr, $x23 = frame-destroy LDPXpost $sp(tied-def 0), 6 :: (load 8 from %stack.5), (load 8 from %stack.4)

debug2
debug3
pickOnlyChoice: CheckPending=1
chris-releasePending: MinReadyCycle=0
pending.size=0
CheckPending set to false
CurrMops=0
available not empty
bumpCycle
******************************** Pending.dump *********************
Queue TopQ.P: 
******************************** Pending.dump done *********************
******************************** Available.dump *********************
Queue TopQ.A: 5 3 7 
******************************** Available.dump done *********************
debug5
  TopQ.A RemainingLatency 0 + 4c > CritPath 4
  Cand SU(5) ORDER                              
Pick Top TOP-PATH  
debug6
Scheduling SU(5) STRWui renamable $w22, renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @X3 :: (store 4 into @X3)
chris: check SU break
chris-checkSchedLimit
true
chris-schedule: STRWui renamable $w22, renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @X3 :: (store 4 into @X3)

chris: scheduleNode
  Ready @4c
  TopQ.A BotLatency SU(5) 3c
  *** Max MOps 1 at cycle 4
MinReadyCycl = 0
std::numeric_limits<unsigned>::max() = 4294967295
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
chris: updateQueues
chris-releaseNode: ReadyCycle= 4
SU is Scheduled: STRWui renamable $w22, renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @X3 :: (store 4 into @X3)

** ScheduleDAGMI::schedule picking next node
chris: IsTopNode:1
PostGenericScheduler::pickNode
debug1
DAG->top(): renamable $x10 = ADRP target-flags(aarch64-page) @X4

DAG->bottom(): early-clobber $sp, $lr, $x23 = frame-destroy LDPXpost $sp(tied-def 0), 6 :: (load 8 from %stack.5), (load 8 from %stack.4)

debug2
debug3
pickOnlyChoice: CheckPending=1
chris-releasePending: MinReadyCycle=0
pending.size=0
CheckPending set to false
CurrMops=0
available not empty
bumpCycle
******************************** Pending.dump *********************
Queue TopQ.P: 
******************************** Pending.dump done *********************
******************************** Available.dump *********************
Queue TopQ.A: 7 3 8 
******************************** Available.dump done *********************
debug5
  TopQ.A RemainingLatency 0 + 5c > CritPath 4
  Cand SU(7) ORDER                              
Pick Top TOP-PATH  
debug6
Scheduling SU(7) $x20, $x19 = frame-destroy LDPXi $sp, 4 :: (load 8 from %stack.1), (load 8 from %stack.0)
chris: check SU break
chris-checkSchedLimit
true
chris-schedule: $x20, $x19 = frame-destroy LDPXi $sp, 4 :: (load 8 from %stack.1), (load 8 from %stack.0)

chris: scheduleNode
  Ready @5c
  TopQ.A BotLatency SU(7) 3c
  *** Max MOps 1 at cycle 5
MinReadyCycl = 0
std::numeric_limits<unsigned>::max() = 4294967295
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
chris: updateQueues
SU is Scheduled: $x20, $x19 = frame-destroy LDPXi $sp, 4 :: (load 8 from %stack.1), (load 8 from %stack.0)

** ScheduleDAGMI::schedule picking next node
chris: IsTopNode:1
PostGenericScheduler::pickNode
debug1
DAG->top(): renamable $x10 = ADRP target-flags(aarch64-page) @X4

DAG->bottom(): early-clobber $sp, $lr, $x23 = frame-destroy LDPXpost $sp(tied-def 0), 6 :: (load 8 from %stack.5), (load 8 from %stack.4)

debug2
debug3
pickOnlyChoice: CheckPending=1
chris-releasePending: MinReadyCycle=0
pending.size=0
CheckPending set to false
CurrMops=0
available not empty
bumpCycle
******************************** Pending.dump *********************
Queue TopQ.P: 
******************************** Pending.dump done *********************
******************************** Available.dump *********************
Queue TopQ.A: 8 3 
******************************** Available.dump done *********************
debug5
  TopQ.A RemainingLatency 0 + 6c > CritPath 4
  Cand SU(8) ORDER                              
Pick Top TOP-PATH  
debug6
Scheduling SU(8) $x22, $x21 = frame-destroy LDPXi $sp, 2 :: (load 8 from %stack.3), (load 8 from %stack.2)
chris: check SU break
chris-checkSchedLimit
true
chris-schedule: $x22, $x21 = frame-destroy LDPXi $sp, 2 :: (load 8 from %stack.3), (load 8 from %stack.2)

chris: scheduleNode
  Ready @6c
  TopQ.A BotLatency SU(8) 3c
  *** Max MOps 1 at cycle 6
MinReadyCycl = 0
std::numeric_limits<unsigned>::max() = 4294967295
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
chris: updateQueues
SU is Scheduled: $x22, $x21 = frame-destroy LDPXi $sp, 2 :: (load 8 from %stack.3), (load 8 from %stack.2)

** ScheduleDAGMI::schedule picking next node
chris: IsTopNode:1
PostGenericScheduler::pickNode
debug1
DAG->top(): renamable $x10 = ADRP target-flags(aarch64-page) @X4

DAG->bottom(): early-clobber $sp, $lr, $x23 = frame-destroy LDPXpost $sp(tied-def 0), 6 :: (load 8 from %stack.5), (load 8 from %stack.4)

debug2
debug3
pickOnlyChoice: CheckPending=1
chris-releasePending: MinReadyCycle=0
pending.size=0
CheckPending set to false
CurrMops=0
available not empty
bumpCycle
******************************** Pending.dump *********************
Queue TopQ.P: 
******************************** Pending.dump done *********************
******************************** Available.dump *********************
Queue TopQ.A: 3 
******************************** Available.dump done *********************
debug4
Pick Top ONLY1     
debug6
Scheduling SU(3) renamable $x10 = ADRP target-flags(aarch64-page) @X4
chris: check SU break
chris-checkSchedLimit
true
chris-schedule: renamable $x10 = ADRP target-flags(aarch64-page) @X4

chris-nextIfDebug1
I: STRWui renamable $w23, renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @X4 :: (store 4 into @X4)

End: early-clobber $sp, $lr, $x23 = frame-destroy LDPXpost $sp(tied-def 0), 6 :: (load 8 from %stack.5), (load 8 from %stack.4)

I is: STRWui renamable $w23, renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @X4 :: (store 4 into @X4)

break
chris-nextIfDebug1: return: STRWui renamable $w23, renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @X4 :: (store 4 into @X4)

chris: scheduleNode
  Ready @7c
  *** Max MOps 1 at cycle 7
MinReadyCycl = 0
std::numeric_limits<unsigned>::max() = 4294967295
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
chris: updateQueues
chris-releaseNode: ReadyCycle= 8
SU is Scheduled: renamable $x10 = ADRP target-flags(aarch64-page) @X4

** ScheduleDAGMI::schedule picking next node
chris: IsTopNode:1
PostGenericScheduler::pickNode
debug1
DAG->top(): STRWui renamable $w23, renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @X4 :: (store 4 into @X4)

DAG->bottom(): early-clobber $sp, $lr, $x23 = frame-destroy LDPXpost $sp(tied-def 0), 6 :: (load 8 from %stack.5), (load 8 from %stack.4)

debug2
debug3
pickOnlyChoice: CheckPending=1
chris-releasePending: MinReadyCycle=0
pending.size=0
CheckPending set to false
CurrMops=0
available not empty
bumpCycle
******************************** Pending.dump *********************
Queue TopQ.P: 
******************************** Pending.dump done *********************
******************************** Available.dump *********************
Queue TopQ.A: 6 
******************************** Available.dump done *********************
debug4
Pick Top ONLY1     
debug6
Scheduling SU(6) STRWui renamable $w23, renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @X4 :: (store 4 into @X4)
chris: check SU break
chris-checkSchedLimit
true
chris-schedule: STRWui renamable $w23, renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @X4 :: (store 4 into @X4)

chris-nextIfDebug1
I: early-clobber $sp, $lr, $x23 = frame-destroy LDPXpost $sp(tied-def 0), 6 :: (load 8 from %stack.5), (load 8 from %stack.4)

End: early-clobber $sp, $lr, $x23 = frame-destroy LDPXpost $sp(tied-def 0), 6 :: (load 8 from %stack.5), (load 8 from %stack.4)

chris-nextIfDebug1: return: early-clobber $sp, $lr, $x23 = frame-destroy LDPXpost $sp(tied-def 0), 6 :: (load 8 from %stack.5), (load 8 from %stack.4)

chris: scheduleNode
  Ready @8c
  *** Max MOps 1 at cycle 8
MinReadyCycl = 0
std::numeric_limits<unsigned>::max() = 4294967295
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
chris: updateQueues
SU is Scheduled: STRWui renamable $w23, renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @X4 :: (store 4 into @X4)

** ScheduleDAGMI::schedule picking next node
chris: IsTopNode:1
PostGenericScheduler::pickNode
debug1
DAG->top(): early-clobber $sp, $lr, $x23 = frame-destroy LDPXpost $sp(tied-def 0), 6 :: (load 8 from %stack.5), (load 8 from %stack.4)

DAG->bottom(): early-clobber $sp, $lr, $x23 = frame-destroy LDPXpost $sp(tied-def 0), 6 :: (load 8 from %stack.5), (load 8 from %stack.4)

chris: check SU break
SU break
chris: placeDebugValues
*** Final schedule for %bb.0 ***
chris-final:MI = renamable $x8 = ADRP target-flags(aarch64-page) @X2

SU(1):   renamable $x8 = ADRP target-flags(aarch64-page) @X2
chris-final:MI = renamable $x9 = ADRP target-flags(aarch64-page) @X3

SU(2):   renamable $x9 = ADRP target-flags(aarch64-page) @X3
chris-final:MI = STRWui renamable $w20, renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (store 4 into @X1)

SU(0):   STRWui renamable $w20, renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (store 4 into @X1)
chris-final:MI = STRWui renamable $w21, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @X2 :: (store 4 into @X2)

SU(4):   STRWui renamable $w21, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @X2 :: (store 4 into @X2)
chris-final:MI = STRWui renamable $w22, renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @X3 :: (store 4 into @X3)

SU(5):   STRWui renamable $w22, renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @X3 :: (store 4 into @X3)
chris-final:MI = $x20, $x19 = frame-destroy LDPXi $sp, 4 :: (load 8 from %stack.1), (load 8 from %stack.0)

SU(7):   $x20, $x19 = frame-destroy LDPXi $sp, 4 :: (load 8 from %stack.1), (load 8 from %stack.0)
chris-final:MI = $x22, $x21 = frame-destroy LDPXi $sp, 2 :: (load 8 from %stack.3), (load 8 from %stack.2)

SU(8):   $x22, $x21 = frame-destroy LDPXi $sp, 2 :: (load 8 from %stack.3), (load 8 from %stack.2)
chris-final:MI = renamable $x10 = ADRP target-flags(aarch64-page) @X4

SU(3):   renamable $x10 = ADRP target-flags(aarch64-page) @X4
chris-final:MI = STRWui renamable $w23, renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @X4 :: (store 4 into @X4)

SU(6):   STRWui renamable $w23, renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @X4 :: (store 4 into @X4)

I:frame-setup STPXi killed $x22, killed $x21, $sp, 2 :: (store 8 into %stack.3), (store 8 into %stack.2)

RegionEnd:BL @foo, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp

chris-test:frame-setup STPXi killed $x22, killed $x21, $sp, 2 :: (store 8 into %stack.3), (store 8 into %stack.2)

chris-test:frame-setup STPXi killed $x20, killed $x19, $sp, 4 :: (store 8 into %stack.1), (store 8 into %stack.0)

chris-test:frame-setup CFI_INSTRUCTION def_cfa_offset 48

chris-test:frame-setup CFI_INSTRUCTION offset $w19, -8

chris-test:frame-setup CFI_INSTRUCTION offset $w20, -16

chris-test:frame-setup CFI_INSTRUCTION offset $w21, -24

chris-test:frame-setup CFI_INSTRUCTION offset $w22, -32

chris-test:frame-setup CFI_INSTRUCTION offset $w23, -40

chris-test:frame-setup CFI_INSTRUCTION offset $w30, -48

chris-test:renamable $x19 = ADRP target-flags(aarch64-page) @X1

chris-test:renamable $w8 = LDRWui renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (dereferenceable load 4 from @X1)

chris-test:renamable $w20 = ADDWri renamable $w8, 1, 0

chris-test:renamable $w21 = ADDWri renamable $w8, 2, 0

chris-test:renamable $w22 = ADDWri renamable $w8, 3, 0

chris-test:renamable $w23 = ADDWri killed renamable $w8, 4, 0

chris-enterRegion
begin=frame-setup STPXi killed $x22, killed $x21, $sp, 2 :: (store 8 into %stack.3), (store 8 into %stack.2)

end=BL @foo, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp

********** T MI Scheduling **********
test:%bb.0 entry
  From: frame-setup STPXi killed $x22, killed $x21, $sp, 2 :: (store 8 into %stack.3), (store 8 into %stack.2)
    To: BL @foo, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
 RegionInstrs: 15
ScheduleDAGMI::schedule starting
ScheduleDAGMI::schedule starting done.
MI=frame-setup STPXi killed $x22, killed $x21, $sp, 2 :: (store 8 into %stack.3), (store 8 into %stack.2)

chris-initSUnits
MI=frame-setup STPXi killed $x20, killed $x19, $sp, 4 :: (store 8 into %stack.1), (store 8 into %stack.0)

chris-initSUnits
MI=frame-setup CFI_INSTRUCTION def_cfa_offset 48

chris-initSUnits
MI=frame-setup CFI_INSTRUCTION offset $w19, -8

chris-initSUnits
MI=frame-setup CFI_INSTRUCTION offset $w20, -16

chris-initSUnits
MI=frame-setup CFI_INSTRUCTION offset $w21, -24

chris-initSUnits
MI=frame-setup CFI_INSTRUCTION offset $w22, -32

chris-initSUnits
MI=frame-setup CFI_INSTRUCTION offset $w23, -40

chris-initSUnits
MI=frame-setup CFI_INSTRUCTION offset $w30, -48

chris-initSUnits
MI=renamable $x19 = ADRP target-flags(aarch64-page) @X1

chris-initSUnits
MI=renamable $w8 = LDRWui renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (dereferenceable load 4 from @X1)

chris-initSUnits
MI=renamable $w20 = ADDWri renamable $w8, 1, 0

chris-initSUnits
MI=renamable $w21 = ADDWri renamable $w8, 2, 0

chris-initSUnits
MI=renamable $w22 = ADDWri renamable $w8, 3, 0

chris-initSUnits
MI=renamable $w23 = ADDWri killed renamable $w8, 4, 0

chris-initSUnits
chris-buildSchedGraph: renamable $w23 = ADDWri killed renamable $w8, 4, 0

chris-buildSchedGraph: renamable $w22 = ADDWri renamable $w8, 3, 0

chris-buildSchedGraph: renamable $w21 = ADDWri renamable $w8, 2, 0

chris-buildSchedGraph: renamable $w20 = ADDWri renamable $w8, 1, 0

chris-buildSchedGraph: renamable $w8 = LDRWui renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (dereferenceable load 4 from @X1)

chris-buildSchedGraph: renamable $x19 = ADRP target-flags(aarch64-page) @X1

chris-buildSchedGraph: frame-setup CFI_INSTRUCTION offset $w30, -48

chris-buildSchedGraph: frame-setup CFI_INSTRUCTION offset $w23, -40

chris-buildSchedGraph: frame-setup CFI_INSTRUCTION offset $w22, -32

chris-buildSchedGraph: frame-setup CFI_INSTRUCTION offset $w21, -24

chris-buildSchedGraph: frame-setup CFI_INSTRUCTION offset $w20, -16

chris-buildSchedGraph: frame-setup CFI_INSTRUCTION offset $w19, -8

chris-buildSchedGraph: frame-setup CFI_INSTRUCTION def_cfa_offset 48

chris-buildSchedGraph: frame-setup STPXi killed $x20, killed $x19, $sp, 4 :: (store 8 into %stack.1), (store 8 into %stack.0)

chris-buildSchedGraph: frame-setup STPXi killed $x22, killed $x21, $sp, 2 :: (store 8 into %stack.3), (store 8 into %stack.2)

chris-findTopRoots:frame-setup STPXi $x22, $x21, $sp, 2 :: (store 8 into %stack.3), (store 8 into %stack.2)

chris-findTopRoots:frame-setup STPXi $x20, $x19, $sp, 4 :: (store 8 into %stack.1), (store 8 into %stack.0)

chris-findTopRoots:frame-setup CFI_INSTRUCTION def_cfa_offset 48

chris-findBotRoots:frame-setup CFI_INSTRUCTION def_cfa_offset 48

chris-findTopRoots:frame-setup CFI_INSTRUCTION offset $w19, -8

chris-findBotRoots:frame-setup CFI_INSTRUCTION offset $w19, -8

chris-findTopRoots:frame-setup CFI_INSTRUCTION offset $w20, -16

chris-findBotRoots:frame-setup CFI_INSTRUCTION offset $w20, -16

chris-findTopRoots:frame-setup CFI_INSTRUCTION offset $w21, -24

chris-findBotRoots:frame-setup CFI_INSTRUCTION offset $w21, -24

chris-findTopRoots:frame-setup CFI_INSTRUCTION offset $w22, -32

chris-findBotRoots:frame-setup CFI_INSTRUCTION offset $w22, -32

chris-findTopRoots:frame-setup CFI_INSTRUCTION offset $w23, -40

chris-findBotRoots:frame-setup CFI_INSTRUCTION offset $w23, -40

chris-findTopRoots:frame-setup CFI_INSTRUCTION offset $w30, -48

chris-findBotRoots:frame-setup CFI_INSTRUCTION offset $w30, -48

chris-findBotRoots:renamable $w20 = ADDWri renamable $w8, 1, 0

chris-findBotRoots:renamable $w21 = ADDWri renamable $w8, 2, 0

chris-findBotRoots:renamable $w22 = ADDWri renamable $w8, 3, 0

chris-findBotRoots:renamable $w23 = ADDWri renamable $w8, 4, 0

SU(0):   frame-setup STPXi $x22, $x21, $sp, 2 :: (store 8 into %stack.3), (store 8 into %stack.2)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Successors:
    SU(13): Anti Latency=0
    SU(12): Anti Latency=0
SU(1):   frame-setup STPXi $x20, $x19, $sp, 4 :: (store 8 into %stack.1), (store 8 into %stack.0)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(11): Anti Latency=0
    SU(9): Anti Latency=0
SU(2):   frame-setup CFI_INSTRUCTION def_cfa_offset 48
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
SU(3):   frame-setup CFI_INSTRUCTION offset $w19, -8
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
SU(4):   frame-setup CFI_INSTRUCTION offset $w20, -16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
SU(5):   frame-setup CFI_INSTRUCTION offset $w21, -24
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
SU(6):   frame-setup CFI_INSTRUCTION offset $w22, -32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
SU(7):   frame-setup CFI_INSTRUCTION offset $w23, -40
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
SU(8):   frame-setup CFI_INSTRUCTION offset $w30, -48
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
SU(9):   renamable $x19 = ADRP target-flags(aarch64-page) @X1
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Predecessors:
    SU(1): Anti Latency=0
  Successors:
    SU(10): Data Latency=1 Reg=$x19
SU(10):   renamable $w8 = LDRWui renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (dereferenceable load 4 from @X1)
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(9): Data Latency=1 Reg=$x19
  Successors:
    SU(14): Data Latency=4 Reg=$w8
    SU(13): Data Latency=4 Reg=$w8
    SU(12): Data Latency=4 Reg=$w8
    SU(11): Data Latency=4 Reg=$w8
SU(11):   renamable $w20 = ADDWri renamable $w8, 1, 0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(10): Data Latency=4 Reg=$w8
    SU(1): Anti Latency=0
SU(12):   renamable $w21 = ADDWri renamable $w8, 2, 0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(10): Data Latency=4 Reg=$w8
    SU(0): Anti Latency=0
SU(13):   renamable $w22 = ADDWri renamable $w8, 3, 0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(10): Data Latency=4 Reg=$w8
    SU(0): Anti Latency=0
SU(14):   renamable $w23 = ADDWri renamable $w8, 4, 0
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(10): Data Latency=4 Reg=$w8
ExitSU:   BL @foo, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
chris-releaseNode: ReadyCycle= 0
chris-releaseNode: ReadyCycle= 0
chris-releaseNode: ReadyCycle= 0
chris-releaseNode: ReadyCycle= 0
chris-releaseNode: ReadyCycle= 0
chris-releaseNode: ReadyCycle= 0
chris-releaseNode: ReadyCycle= 0
chris-releaseNode: ReadyCycle= 0
chris-releaseNode: ReadyCycle= 0
Critical Path: (PGS-RR) 5
chris-nextIfDebug1
I: frame-setup STPXi $x22, $x21, $sp, 2 :: (store 8 into %stack.3), (store 8 into %stack.2)

End: BL @foo, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp

I is: frame-setup STPXi $x22, $x21, $sp, 2 :: (store 8 into %stack.3), (store 8 into %stack.2)

break
chris-nextIfDebug1: return: frame-setup STPXi $x22, $x21, $sp, 2 :: (store 8 into %stack.3), (store 8 into %stack.2)

chris-initQueues: CurrentTop:frame-setup STPXi $x22, $x21, $sp, 2 :: (store 8 into %stack.3), (store 8 into %stack.2)

chris-initQueues: CurrentBottom:BL @foo, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp

** ScheduleDAGMI::schedule picking next node
chris: IsTopNode:0
PostGenericScheduler::pickNode
debug1
DAG->top(): frame-setup STPXi $x22, $x21, $sp, 2 :: (store 8 into %stack.3), (store 8 into %stack.2)

DAG->bottom(): BL @foo, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp

debug2
debug3
pickOnlyChoice: CheckPending=0
CurrMops=0
available not empty
bumpCycle
******************************** Pending.dump *********************
Queue TopQ.P: 
******************************** Pending.dump done *********************
******************************** Available.dump *********************
Queue TopQ.A: 0 1 2 3 4 5 6 7 8 
******************************** Available.dump done *********************
debug5
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
debug6
Scheduling SU(1) frame-setup STPXi $x20, $x19, $sp, 4 :: (store 8 into %stack.1), (store 8 into %stack.0)
chris: check SU break
chris-checkSchedLimit
true
chris-schedule: frame-setup STPXi $x20, $x19, $sp, 4 :: (store 8 into %stack.1), (store 8 into %stack.0)

chris: scheduleNode
  Ready @0c
  TopQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 0
MinReadyCycl = 0
std::numeric_limits<unsigned>::max() = 4294967295
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
chris: updateQueues
chris-releaseNode: ReadyCycle= 0
SU is Scheduled: frame-setup STPXi $x20, $x19, $sp, 4 :: (store 8 into %stack.1), (store 8 into %stack.0)

** ScheduleDAGMI::schedule picking next node
chris: IsTopNode:1
PostGenericScheduler::pickNode
debug1
DAG->top(): frame-setup STPXi $x22, $x21, $sp, 2 :: (store 8 into %stack.3), (store 8 into %stack.2)

DAG->bottom(): BL @foo, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp

debug2
debug3
pickOnlyChoice: CheckPending=1
chris-releasePending: MinReadyCycle=0
pending.size=0
CheckPending set to false
CurrMops=0
available not empty
bumpCycle
******************************** Pending.dump *********************
Queue TopQ.P: 
******************************** Pending.dump done *********************
******************************** Available.dump *********************
Queue TopQ.A: 0 8 2 3 4 5 6 7 9 
******************************** Available.dump done *********************
debug5
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(9) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
debug6
Scheduling SU(9) renamable $x19 = ADRP target-flags(aarch64-page) @X1
chris: check SU break
chris-checkSchedLimit
true
chris-schedule: renamable $x19 = ADRP target-flags(aarch64-page) @X1

chris: scheduleNode
  Ready @1c
  TopQ.A BotLatency SU(9) 5c
  *** Max MOps 1 at cycle 1
MinReadyCycl = 0
std::numeric_limits<unsigned>::max() = 4294967295
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
chris: updateQueues
chris-releaseNode: ReadyCycle= 2
SU is Scheduled: renamable $x19 = ADRP target-flags(aarch64-page) @X1

** ScheduleDAGMI::schedule picking next node
chris: IsTopNode:1
PostGenericScheduler::pickNode
debug1
DAG->top(): frame-setup STPXi $x22, $x21, $sp, 2 :: (store 8 into %stack.3), (store 8 into %stack.2)

DAG->bottom(): BL @foo, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp

debug2
debug3
pickOnlyChoice: CheckPending=1
chris-releasePending: MinReadyCycle=0
pending.size=0
CheckPending set to false
CurrMops=0
available not empty
bumpCycle
******************************** Pending.dump *********************
Queue TopQ.P: 
******************************** Pending.dump done *********************
******************************** Available.dump *********************
Queue TopQ.A: 0 8 2 3 4 5 6 7 10 
******************************** Available.dump done *********************
debug5
  TopQ.A RemainingLatency 0 + 2c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(10) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
debug6
Scheduling SU(10) renamable $w8 = LDRWui renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (dereferenceable load 4 from @X1)
chris: check SU break
chris-checkSchedLimit
true
chris-schedule: renamable $w8 = LDRWui renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (dereferenceable load 4 from @X1)

chris: scheduleNode
  Ready @2c
  TopQ.A TopLatency SU(10) 1c
  *** Max MOps 1 at cycle 2
MinReadyCycl = 0
std::numeric_limits<unsigned>::max() = 4294967295
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
chris: updateQueues
chris-releaseNode: ReadyCycle= 6
chris-releaseNode: ReadyCycle= 6
SU is Scheduled: renamable $w8 = LDRWui renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (dereferenceable load 4 from @X1)

** ScheduleDAGMI::schedule picking next node
chris: IsTopNode:1
PostGenericScheduler::pickNode
debug1
DAG->top(): frame-setup STPXi $x22, $x21, $sp, 2 :: (store 8 into %stack.3), (store 8 into %stack.2)

DAG->bottom(): BL @foo, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp

debug2
debug3
pickOnlyChoice: CheckPending=1
chris-releasePending: MinReadyCycle=0
pending.size=2
i:0 su: renamable $w23 = ADDWri renamable $w8, 4, 0

chris-releasePending: ReadyCycle= 6
i:1 su: renamable $w20 = ADDWri renamable $w8, 1, 0

chris-releasePending: ReadyCycle= 6
CheckPending set to false
CurrMops=0
available not empty
bumpCycle
******************************** Pending.dump *********************
Queue TopQ.P: 14 11 
******************************** Pending.dump done *********************
******************************** Available.dump *********************
Queue TopQ.A: 0 8 2 3 4 5 6 7 
******************************** Available.dump done *********************
debug5
  TopQ.A RemainingLatency 0 + 3c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top ORDER     
debug6
Scheduling SU(0) frame-setup STPXi $x22, $x21, $sp, 2 :: (store 8 into %stack.3), (store 8 into %stack.2)
chris: check SU break
chris-checkSchedLimit
true
chris-schedule: frame-setup STPXi $x22, $x21, $sp, 2 :: (store 8 into %stack.3), (store 8 into %stack.2)

chris-nextIfDebug1
I: frame-setup CFI_INSTRUCTION def_cfa_offset 48

End: BL @foo, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp

I is: frame-setup CFI_INSTRUCTION def_cfa_offset 48

break
chris-nextIfDebug1: return: frame-setup CFI_INSTRUCTION def_cfa_offset 48

chris: scheduleNode
  Ready @3c
  *** Max MOps 1 at cycle 3
MinReadyCycl = 0
std::numeric_limits<unsigned>::max() = 4294967295
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
chris: updateQueues
chris-releaseNode: ReadyCycle= 6
chris-releaseNode: ReadyCycle= 6
SU is Scheduled: frame-setup STPXi $x22, $x21, $sp, 2 :: (store 8 into %stack.3), (store 8 into %stack.2)

** ScheduleDAGMI::schedule picking next node
chris: IsTopNode:1
PostGenericScheduler::pickNode
debug1
DAG->top(): frame-setup CFI_INSTRUCTION def_cfa_offset 48

DAG->bottom(): BL @foo, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp

debug2
debug3
pickOnlyChoice: CheckPending=1
chris-releasePending: MinReadyCycle=0
pending.size=4
i:0 su: renamable $w23 = ADDWri renamable $w8, 4, 0

chris-releasePending: ReadyCycle= 6
i:1 su: renamable $w20 = ADDWri renamable $w8, 1, 0

chris-releasePending: ReadyCycle= 6
i:2 su: renamable $w22 = ADDWri renamable $w8, 3, 0

chris-releasePending: ReadyCycle= 6
i:3 su: renamable $w21 = ADDWri renamable $w8, 2, 0

chris-releasePending: ReadyCycle= 6
CheckPending set to false
CurrMops=0
available not empty
bumpCycle
******************************** Pending.dump *********************
Queue TopQ.P: 14 11 13 12 
******************************** Pending.dump done *********************
******************************** Available.dump *********************
Queue TopQ.A: 7 8 2 3 4 5 6 
******************************** Available.dump done *********************
debug5
  TopQ.A RemainingLatency 0 + 4c > CritPath 5
  Cand SU(7) ORDER                              
  Cand SU(2) ORDER                              
Pick Top ORDER     
debug6
Scheduling SU(2) frame-setup CFI_INSTRUCTION def_cfa_offset 48
chris: check SU break
chris-checkSchedLimit
true
chris-schedule: frame-setup CFI_INSTRUCTION def_cfa_offset 48

chris-nextIfDebug1
I: frame-setup CFI_INSTRUCTION offset $w19, -8

End: BL @foo, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp

I is: frame-setup CFI_INSTRUCTION offset $w19, -8

break
chris-nextIfDebug1: return: frame-setup CFI_INSTRUCTION offset $w19, -8

chris: scheduleNode
  Ready @4c
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
chris: updateQueues
SU is Scheduled: frame-setup CFI_INSTRUCTION def_cfa_offset 48

** ScheduleDAGMI::schedule picking next node
chris: IsTopNode:1
PostGenericScheduler::pickNode
debug1
DAG->top(): frame-setup CFI_INSTRUCTION offset $w19, -8

DAG->bottom(): BL @foo, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp

debug2
debug3
pickOnlyChoice: CheckPending=0
CurrMops=0
available not empty
bumpCycle
******************************** Pending.dump *********************
Queue TopQ.P: 14 11 13 12 
******************************** Pending.dump done *********************
******************************** Available.dump *********************
Queue TopQ.A: 7 8 6 3 4 5 
******************************** Available.dump done *********************
debug5
  TopQ.A RemainingLatency 0 + 4c > CritPath 5
  Cand SU(7) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
debug6
Scheduling SU(3) frame-setup CFI_INSTRUCTION offset $w19, -8
chris: check SU break
chris-checkSchedLimit
true
chris-schedule: frame-setup CFI_INSTRUCTION offset $w19, -8

chris-nextIfDebug1
I: frame-setup CFI_INSTRUCTION offset $w20, -16

End: BL @foo, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp

I is: frame-setup CFI_INSTRUCTION offset $w20, -16

break
chris-nextIfDebug1: return: frame-setup CFI_INSTRUCTION offset $w20, -16

chris: scheduleNode
  Ready @4c
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
chris: updateQueues
SU is Scheduled: frame-setup CFI_INSTRUCTION offset $w19, -8

** ScheduleDAGMI::schedule picking next node
chris: IsTopNode:1
PostGenericScheduler::pickNode
debug1
DAG->top(): frame-setup CFI_INSTRUCTION offset $w20, -16

DAG->bottom(): BL @foo, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp

debug2
debug3
pickOnlyChoice: CheckPending=0
CurrMops=0
available not empty
bumpCycle
******************************** Pending.dump *********************
Queue TopQ.P: 14 11 13 12 
******************************** Pending.dump done *********************
******************************** Available.dump *********************
Queue TopQ.A: 7 8 6 5 4 
******************************** Available.dump done *********************
debug5
  TopQ.A RemainingLatency 0 + 4c > CritPath 5
  Cand SU(7) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
Pick Top ORDER     
debug6
Scheduling SU(4) frame-setup CFI_INSTRUCTION offset $w20, -16
chris: check SU break
chris-checkSchedLimit
true
chris-schedule: frame-setup CFI_INSTRUCTION offset $w20, -16

chris-nextIfDebug1
I: frame-setup CFI_INSTRUCTION offset $w21, -24

End: BL @foo, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp

I is: frame-setup CFI_INSTRUCTION offset $w21, -24

break
chris-nextIfDebug1: return: frame-setup CFI_INSTRUCTION offset $w21, -24

chris: scheduleNode
  Ready @4c
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
chris: updateQueues
SU is Scheduled: frame-setup CFI_INSTRUCTION offset $w20, -16

** ScheduleDAGMI::schedule picking next node
chris: IsTopNode:1
PostGenericScheduler::pickNode
debug1
DAG->top(): frame-setup CFI_INSTRUCTION offset $w21, -24

DAG->bottom(): BL @foo, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp

debug2
debug3
pickOnlyChoice: CheckPending=0
CurrMops=0
available not empty
bumpCycle
******************************** Pending.dump *********************
Queue TopQ.P: 14 11 13 12 
******************************** Pending.dump done *********************
******************************** Available.dump *********************
Queue TopQ.A: 7 8 6 5 
******************************** Available.dump done *********************
debug5
  TopQ.A RemainingLatency 0 + 4c > CritPath 5
  Cand SU(7) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(5) ORDER                              
Pick Top ORDER     
debug6
Scheduling SU(5) frame-setup CFI_INSTRUCTION offset $w21, -24
chris: check SU break
chris-checkSchedLimit
true
chris-schedule: frame-setup CFI_INSTRUCTION offset $w21, -24

chris-nextIfDebug1
I: frame-setup CFI_INSTRUCTION offset $w22, -32

End: BL @foo, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp

I is: frame-setup CFI_INSTRUCTION offset $w22, -32

break
chris-nextIfDebug1: return: frame-setup CFI_INSTRUCTION offset $w22, -32

chris: scheduleNode
  Ready @4c
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
chris: updateQueues
SU is Scheduled: frame-setup CFI_INSTRUCTION offset $w21, -24

** ScheduleDAGMI::schedule picking next node
chris: IsTopNode:1
PostGenericScheduler::pickNode
debug1
DAG->top(): frame-setup CFI_INSTRUCTION offset $w22, -32

DAG->bottom(): BL @foo, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp

debug2
debug3
pickOnlyChoice: CheckPending=0
CurrMops=0
available not empty
bumpCycle
******************************** Pending.dump *********************
Queue TopQ.P: 14 11 13 12 
******************************** Pending.dump done *********************
******************************** Available.dump *********************
Queue TopQ.A: 7 8 6 
******************************** Available.dump done *********************
debug5
  TopQ.A RemainingLatency 0 + 4c > CritPath 5
  Cand SU(7) ORDER                              
  Cand SU(6) ORDER                              
Pick Top ORDER     
debug6
Scheduling SU(6) frame-setup CFI_INSTRUCTION offset $w22, -32
chris: check SU break
chris-checkSchedLimit
true
chris-schedule: frame-setup CFI_INSTRUCTION offset $w22, -32

chris-nextIfDebug1
I: frame-setup CFI_INSTRUCTION offset $w23, -40

End: BL @foo, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp

I is: frame-setup CFI_INSTRUCTION offset $w23, -40

break
chris-nextIfDebug1: return: frame-setup CFI_INSTRUCTION offset $w23, -40

chris: scheduleNode
  Ready @4c
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
chris: updateQueues
SU is Scheduled: frame-setup CFI_INSTRUCTION offset $w22, -32

** ScheduleDAGMI::schedule picking next node
chris: IsTopNode:1
PostGenericScheduler::pickNode
debug1
DAG->top(): frame-setup CFI_INSTRUCTION offset $w23, -40

DAG->bottom(): BL @foo, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp

debug2
debug3
pickOnlyChoice: CheckPending=0
CurrMops=0
available not empty
bumpCycle
******************************** Pending.dump *********************
Queue TopQ.P: 14 11 13 12 
******************************** Pending.dump done *********************
******************************** Available.dump *********************
Queue TopQ.A: 7 8 
******************************** Available.dump done *********************
debug5
  TopQ.A RemainingLatency 0 + 4c > CritPath 5
  Cand SU(7) ORDER                              
Pick Top ORDER     
debug6
Scheduling SU(7) frame-setup CFI_INSTRUCTION offset $w23, -40
chris: check SU break
chris-checkSchedLimit
true
chris-schedule: frame-setup CFI_INSTRUCTION offset $w23, -40

chris-nextIfDebug1
I: frame-setup CFI_INSTRUCTION offset $w30, -48

End: BL @foo, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp

I is: frame-setup CFI_INSTRUCTION offset $w30, -48

break
chris-nextIfDebug1: return: frame-setup CFI_INSTRUCTION offset $w30, -48

chris: scheduleNode
  Ready @4c
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
chris: updateQueues
SU is Scheduled: frame-setup CFI_INSTRUCTION offset $w23, -40

** ScheduleDAGMI::schedule picking next node
chris: IsTopNode:1
PostGenericScheduler::pickNode
debug1
DAG->top(): frame-setup CFI_INSTRUCTION offset $w30, -48

DAG->bottom(): BL @foo, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp

debug2
debug3
pickOnlyChoice: CheckPending=0
CurrMops=0
available not empty
bumpCycle
******************************** Pending.dump *********************
Queue TopQ.P: 14 11 13 12 
******************************** Pending.dump done *********************
******************************** Available.dump *********************
Queue TopQ.A: 8 
******************************** Available.dump done *********************
debug4
Pick Top ONLY1     
debug6
Scheduling SU(8) frame-setup CFI_INSTRUCTION offset $w30, -48
chris: check SU break
chris-checkSchedLimit
true
chris-schedule: frame-setup CFI_INSTRUCTION offset $w30, -48

chris-nextIfDebug1
I: renamable $w20 = ADDWri renamable $w8, 1, 0

End: BL @foo, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp

I is: renamable $w20 = ADDWri renamable $w8, 1, 0

break
chris-nextIfDebug1: return: renamable $w20 = ADDWri renamable $w8, 1, 0

chris: scheduleNode
  Ready @4c
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
chris: updateQueues
SU is Scheduled: frame-setup CFI_INSTRUCTION offset $w30, -48

** ScheduleDAGMI::schedule picking next node
chris: IsTopNode:1
PostGenericScheduler::pickNode
debug1
DAG->top(): renamable $w20 = ADDWri renamable $w8, 1, 0

DAG->bottom(): BL @foo, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp

debug2
debug3
pickOnlyChoice: CheckPending=0
CurrMops=0
doublecheck: Available.empty
bumpCycle
bumpCycle: 4
MinReadyCycl = 0
std::numeric_limits<unsigned>::max() = 4294967295
Cycle: 5 TopQ.A
releasePending 
releasePending: Available.empty
chris-releasePending: MinReadyCycle=4294967295
pending.size=4
i:0 su: renamable $w23 = ADDWri renamable $w8, 4, 0

chris-releasePending: ReadyCycle= 6
i:1 su: renamable $w20 = ADDWri renamable $w8, 1, 0

chris-releasePending: ReadyCycle= 6
i:2 su: renamable $w22 = ADDWri renamable $w8, 3, 0

chris-releasePending: ReadyCycle= 6
i:3 su: renamable $w21 = ADDWri renamable $w8, 2, 0

chris-releasePending: ReadyCycle= 6
CheckPending set to false
bumpCycle: 5
MinReadyCycl = 6
std::numeric_limits<unsigned>::max() = 4294967295
Cycle: 6 TopQ.A
releasePending 
releasePending: Available.empty
chris-releasePending: MinReadyCycle=4294967295
pending.size=4
i:0 su: renamable $w23 = ADDWri renamable $w8, 4, 0

chris-releasePending: ReadyCycle= 6
i:0 su: renamable $w21 = ADDWri renamable $w8, 2, 0

chris-releasePending: ReadyCycle= 6
i:0 su: renamable $w22 = ADDWri renamable $w8, 3, 0

chris-releasePending: ReadyCycle= 6
i:0 su: renamable $w20 = ADDWri renamable $w8, 1, 0

chris-releasePending: ReadyCycle= 6
CheckPending set to false
******************************** Pending.dump *********************
Queue TopQ.P: 
******************************** Pending.dump done *********************
******************************** Available.dump *********************
Queue TopQ.A: 14 12 13 11 
******************************** Available.dump done *********************
debug5
  TopQ.A RemainingLatency 0 + 6c > CritPath 5
  Cand SU(14) ORDER                              
  Cand SU(12) ORDER                              
  Cand SU(11) ORDER                              
Pick Top ORDER     
debug6
Scheduling SU(11) renamable $w20 = ADDWri renamable $w8, 1, 0
chris: check SU break
chris-checkSchedLimit
true
chris-schedule: renamable $w20 = ADDWri renamable $w8, 1, 0

chris-nextIfDebug1
I: renamable $w21 = ADDWri renamable $w8, 2, 0

End: BL @foo, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp

I is: renamable $w21 = ADDWri renamable $w8, 2, 0

break
chris-nextIfDebug1: return: renamable $w21 = ADDWri renamable $w8, 2, 0

chris: scheduleNode
  Ready @6c
  TopQ.A TopLatency SU(11) 5c
  *** Max MOps 1 at cycle 6
MinReadyCycl = 6
std::numeric_limits<unsigned>::max() = 4294967295
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
chris: updateQueues
SU is Scheduled: renamable $w20 = ADDWri renamable $w8, 1, 0

** ScheduleDAGMI::schedule picking next node
chris: IsTopNode:1
PostGenericScheduler::pickNode
debug1
DAG->top(): renamable $w21 = ADDWri renamable $w8, 2, 0

DAG->bottom(): BL @foo, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp

debug2
debug3
pickOnlyChoice: CheckPending=1
chris-releasePending: MinReadyCycle=6
pending.size=0
CheckPending set to false
CurrMops=0
available not empty
bumpCycle
******************************** Pending.dump *********************
Queue TopQ.P: 
******************************** Pending.dump done *********************
******************************** Available.dump *********************
Queue TopQ.A: 14 12 13 
******************************** Available.dump done *********************
debug5
  TopQ.A RemainingLatency 0 + 7c > CritPath 5
  Cand SU(14) ORDER                              
  Cand SU(12) ORDER                              
Pick Top ORDER     
debug6
Scheduling SU(12) renamable $w21 = ADDWri renamable $w8, 2, 0
chris: check SU break
chris-checkSchedLimit
true
chris-schedule: renamable $w21 = ADDWri renamable $w8, 2, 0

chris-nextIfDebug1
I: renamable $w22 = ADDWri renamable $w8, 3, 0

End: BL @foo, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp

I is: renamable $w22 = ADDWri renamable $w8, 3, 0

break
chris-nextIfDebug1: return: renamable $w22 = ADDWri renamable $w8, 3, 0

chris: scheduleNode
  Ready @7c
  *** Max MOps 1 at cycle 7
MinReadyCycl = 6
std::numeric_limits<unsigned>::max() = 4294967295
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
chris: updateQueues
SU is Scheduled: renamable $w21 = ADDWri renamable $w8, 2, 0

** ScheduleDAGMI::schedule picking next node
chris: IsTopNode:1
PostGenericScheduler::pickNode
debug1
DAG->top(): renamable $w22 = ADDWri renamable $w8, 3, 0

DAG->bottom(): BL @foo, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp

debug2
debug3
pickOnlyChoice: CheckPending=1
chris-releasePending: MinReadyCycle=6
pending.size=0
CheckPending set to false
CurrMops=0
available not empty
bumpCycle
******************************** Pending.dump *********************
Queue TopQ.P: 
******************************** Pending.dump done *********************
******************************** Available.dump *********************
Queue TopQ.A: 14 13 
******************************** Available.dump done *********************
debug5
  TopQ.A RemainingLatency 0 + 8c > CritPath 5
  Cand SU(14) ORDER                              
  Cand SU(13) ORDER                              
Pick Top ORDER     
debug6
Scheduling SU(13) renamable $w22 = ADDWri renamable $w8, 3, 0
chris: check SU break
chris-checkSchedLimit
true
chris-schedule: renamable $w22 = ADDWri renamable $w8, 3, 0

chris-nextIfDebug1
I: renamable $w23 = ADDWri renamable $w8, 4, 0

End: BL @foo, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp

I is: renamable $w23 = ADDWri renamable $w8, 4, 0

break
chris-nextIfDebug1: return: renamable $w23 = ADDWri renamable $w8, 4, 0

chris: scheduleNode
  Ready @8c
  *** Max MOps 1 at cycle 8
MinReadyCycl = 6
std::numeric_limits<unsigned>::max() = 4294967295
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 7
  Executed: 9c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
chris: updateQueues
SU is Scheduled: renamable $w22 = ADDWri renamable $w8, 3, 0

** ScheduleDAGMI::schedule picking next node
chris: IsTopNode:1
PostGenericScheduler::pickNode
debug1
DAG->top(): renamable $w23 = ADDWri renamable $w8, 4, 0

DAG->bottom(): BL @foo, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp

debug2
debug3
pickOnlyChoice: CheckPending=1
chris-releasePending: MinReadyCycle=6
pending.size=0
CheckPending set to false
CurrMops=0
available not empty
bumpCycle
******************************** Pending.dump *********************
Queue TopQ.P: 
******************************** Pending.dump done *********************
******************************** Available.dump *********************
Queue TopQ.A: 14 
******************************** Available.dump done *********************
debug4
Pick Top ONLY1     
debug6
Scheduling SU(14) renamable $w23 = ADDWri renamable $w8, 4, 0
chris: check SU break
chris-checkSchedLimit
true
chris-schedule: renamable $w23 = ADDWri renamable $w8, 4, 0

chris-nextIfDebug1
I: BL @foo, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp

End: BL @foo, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp

chris-nextIfDebug1: return: BL @foo, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp

chris: scheduleNode
  Ready @9c
  *** Max MOps 1 at cycle 9
MinReadyCycl = 6
std::numeric_limits<unsigned>::max() = 4294967295
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 8
  Executed: 10c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
chris: updateQueues
SU is Scheduled: renamable $w23 = ADDWri renamable $w8, 4, 0

** ScheduleDAGMI::schedule picking next node
chris: IsTopNode:1
PostGenericScheduler::pickNode
debug1
DAG->top(): BL @foo, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp

DAG->bottom(): BL @foo, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp

chris: check SU break
SU break
chris: placeDebugValues
*** Final schedule for %bb.0 ***
chris-final:MI = frame-setup STPXi $x20, $x19, $sp, 4 :: (store 8 into %stack.1), (store 8 into %stack.0)

SU(1):   frame-setup STPXi $x20, $x19, $sp, 4 :: (store 8 into %stack.1), (store 8 into %stack.0)
chris-final:MI = renamable $x19 = ADRP target-flags(aarch64-page) @X1

SU(9):   renamable $x19 = ADRP target-flags(aarch64-page) @X1
chris-final:MI = renamable $w8 = LDRWui renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (dereferenceable load 4 from @X1)

SU(10):   renamable $w8 = LDRWui renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (dereferenceable load 4 from @X1)
chris-final:MI = frame-setup STPXi $x22, $x21, $sp, 2 :: (store 8 into %stack.3), (store 8 into %stack.2)

SU(0):   frame-setup STPXi $x22, $x21, $sp, 2 :: (store 8 into %stack.3), (store 8 into %stack.2)
chris-final:MI = frame-setup CFI_INSTRUCTION def_cfa_offset 48

SU(2):   frame-setup CFI_INSTRUCTION def_cfa_offset 48
chris-final:MI = frame-setup CFI_INSTRUCTION offset $w19, -8

SU(3):   frame-setup CFI_INSTRUCTION offset $w19, -8
chris-final:MI = frame-setup CFI_INSTRUCTION offset $w20, -16

SU(4):   frame-setup CFI_INSTRUCTION offset $w20, -16
chris-final:MI = frame-setup CFI_INSTRUCTION offset $w21, -24

SU(5):   frame-setup CFI_INSTRUCTION offset $w21, -24
chris-final:MI = frame-setup CFI_INSTRUCTION offset $w22, -32

SU(6):   frame-setup CFI_INSTRUCTION offset $w22, -32
chris-final:MI = frame-setup CFI_INSTRUCTION offset $w23, -40

SU(7):   frame-setup CFI_INSTRUCTION offset $w23, -40
chris-final:MI = frame-setup CFI_INSTRUCTION offset $w30, -48

SU(8):   frame-setup CFI_INSTRUCTION offset $w30, -48
chris-final:MI = renamable $w20 = ADDWri renamable $w8, 1, 0

SU(11):   renamable $w20 = ADDWri renamable $w8, 1, 0
chris-final:MI = renamable $w21 = ADDWri renamable $w8, 2, 0

SU(12):   renamable $w21 = ADDWri renamable $w8, 2, 0
chris-final:MI = renamable $w22 = ADDWri renamable $w8, 3, 0

SU(13):   renamable $w22 = ADDWri renamable $w8, 3, 0
chris-final:MI = renamable $w23 = ADDWri renamable $w8, 4, 0

SU(14):   renamable $w23 = ADDWri renamable $w8, 4, 0

Fixup kills for %bb.0
--- |
  ; ModuleID = 'test.mir'
  source_filename = "test.ll"
  target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
  target triple = "aarch64-linux-gnu"
  
  @X1 = global i32 0, align 4
  @X2 = global i32 0, align 4
  @X3 = global i32 0, align 4
  @X4 = global i32 0, align 4
  
  ; Function Attrs: nounwind
  define void @test(i32 %i) #0 {
  entry:
    %0 = load i32, i32* @X1, align 4
    %x1 = add i32 %0, 1
    %x2 = add i32 %0, 2
    %x3 = add i32 %0, 3
    %x4 = add i32 %0, 4
    tail call void @foo()
    store i32 %x1, i32* @X1, align 4
    store i32 %x2, i32* @X2, align 4
    store i32 %x3, i32* @X3, align 4
    store i32 %x4, i32* @X4, align 4
    ret void
  }
  
  declare void @foo()
  
  ; Function Attrs: nounwind
  declare void @llvm.stackprotector(i8*, i8**) #0
  
  attributes #0 = { nounwind }
  
  !llvm.dbg.cu = !{!0}
  !llvm.module.flags = !{!3, !4, !5}
  
  !0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 7.0.0 (trunk 330790) (llvm/trunk 330787)", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly, enums: !2)
  !1 = !DIFile(filename: "test.c", directory: "")
  !2 = !{}
  !3 = !{i32 2, !"Dwarf Version", i32 4}
  !4 = !{i32 2, !"Debug Info Version", i32 3}
  !5 = !{i32 1, !"wchar_size", i32 4}

...
---
name:            test
alignment:       2
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
registers:       []
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       48
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    true
  hasCalls:        true
  stackProtector:  ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: spill-slot, offset: -8, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '$x19', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: spill-slot, offset: -16, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '$x20', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: spill-slot, offset: -24, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '$x21', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: spill-slot, offset: -32, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '$x22', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 4, name: '', type: spill-slot, offset: -40, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '$x23', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 5, name: '', type: spill-slot, offset: -48, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '$lr', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
callSites:       []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    liveins: $x23, $lr, $x21, $x22, $x19, $x20
  
    early-clobber $sp = frame-setup STPXpre killed $lr, killed $x23, $sp, -6 :: (store 8 into %stack.5), (store 8 into %stack.4)
    frame-setup STPXi killed $x20, killed $x19, $sp, 4 :: (store 8 into %stack.1), (store 8 into %stack.0)
    renamable $x19 = ADRP target-flags(aarch64-page) @X1
    renamable $w8 = LDRWui renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (dereferenceable load 4 from @X1)
    frame-setup STPXi killed $x22, killed $x21, $sp, 2 :: (store 8 into %stack.3), (store 8 into %stack.2)
    frame-setup CFI_INSTRUCTION def_cfa_offset 48
    frame-setup CFI_INSTRUCTION offset $w19, -8
    frame-setup CFI_INSTRUCTION offset $w20, -16
    frame-setup CFI_INSTRUCTION offset $w21, -24
    frame-setup CFI_INSTRUCTION offset $w22, -32
    frame-setup CFI_INSTRUCTION offset $w23, -40
    frame-setup CFI_INSTRUCTION offset $w30, -48
    renamable $w20 = ADDWri renamable $w8, 1, 0
    renamable $w21 = ADDWri renamable $w8, 2, 0
    renamable $w22 = ADDWri renamable $w8, 3, 0
    renamable $w23 = ADDWri killed renamable $w8, 4, 0
    BL @foo, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit-def $sp
    renamable $x8 = ADRP target-flags(aarch64-page) @X2
    renamable $x9 = ADRP target-flags(aarch64-page) @X3
    STRWui killed renamable $w20, killed renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (store 4 into @X1)
    STRWui killed renamable $w21, killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @X2 :: (store 4 into @X2)
    STRWui killed renamable $w22, killed renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @X3 :: (store 4 into @X3)
    $x20, $x19 = frame-destroy LDPXi $sp, 4 :: (load 8 from %stack.1), (load 8 from %stack.0)
    $x22, $x21 = frame-destroy LDPXi $sp, 2 :: (load 8 from %stack.3), (load 8 from %stack.2)
    renamable $x10 = ADRP target-flags(aarch64-page) @X4
    STRWui killed renamable $w23, killed renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @X4 :: (store 4 into @X4)
    early-clobber $sp, $lr, $x23 = frame-destroy LDPXpost $sp, 6 :: (load 8 from %stack.5), (load 8 from %stack.4)
    RET undef $lr

...
