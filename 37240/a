diff --git a/37240/machine-scheduler-with-cfi-instruction.mir b/37240/machine-scheduler-with-cfi-instruction.mir
index 59a6106..e2894f3 100644
--- a/37240/machine-scheduler-with-cfi-instruction.mir
+++ b/37240/machine-scheduler-with-cfi-instruction.mir
@@ -58,40 +58,27 @@ stack:
   - { id: 1, type: spill-slot, offset: -16, size: 8, alignment: 8, callee-saved-register: '$x20' }
   - { id: 2, type: spill-slot, offset: -24, size: 8, alignment: 8, callee-saved-register: '$x21' }
   - { id: 3, type: spill-slot, offset: -32, size: 8, alignment: 8, callee-saved-register: '$x22' }
-  - { id: 4, type: spill-slot, offset: -40, size: 8, alignment: 8, callee-saved-register: '$x23' }
-  - { id: 5, type: spill-slot, offset: -48, size: 8, alignment: 8, callee-saved-register: '$lr' }
 machineFunctionInfo: {}
 body:             |
+  ; CHECK: bb.0.entry
+  ; CHECK:       frame-setup STPXi $x20, killed $x19, $sp, 4
+  ; CHECK-NEXT:  renamable $x19 = ADRP target-flags(aarch64-page) @X1
+  ; CHECK-NEXT:  renamable $w8 = LDRWui renamable $x19
+  ; CHECK-NEXT:  frame-setup STPXi $x22, $x21, $sp, 2
+  ; CHECK-NEXT:  frame-setup CFI_INSTRUCTION def_cfa_offset 48
+  ; CHECK-NEXT:  frame-setup CFI_INSTRUCTION offset $w19, -8
+  ; CHECK-NEXT:  RET 0
+
   bb.0.entry:
-    liveins: $x23, $lr, $x21, $x22, $x19, $x20
-  
+    liveins: $x21, $x22, $x19, $x20
+
     early-clobber $sp = frame-setup STPXpre killed $lr, killed $x23, $sp, -6 :: (store 8 into %stack.5), (store 8 into %stack.4)
-    frame-setup STPXi killed $x22, killed $x21, $sp, 2 :: (store 8 into %stack.3), (store 8 into %stack.2)
-    frame-setup STPXi killed $x20, killed $x19, $sp, 4 :: (store 8 into %stack.1), (store 8 into %stack.0)
+    frame-setup STPXi $x22, $x21, $sp, 2 :: (store 8 into %stack.3), (store 8 into %stack.2)
+    frame-setup STPXi $x20, $x19, $sp, 4 :: (store 8 into %stack.1), (store 8 into %stack.0)
     frame-setup CFI_INSTRUCTION def_cfa_offset 48
     frame-setup CFI_INSTRUCTION offset $w19, -8
-    frame-setup CFI_INSTRUCTION offset $w20, -16
-    frame-setup CFI_INSTRUCTION offset $w21, -24
-    frame-setup CFI_INSTRUCTION offset $w22, -32
-    frame-setup CFI_INSTRUCTION offset $w23, -40
-    frame-setup CFI_INSTRUCTION offset $w30, -48
     renamable $x19 = ADRP target-flags(aarch64-page) @X1
     renamable $w8 = LDRWui renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (dereferenceable load 4 from @X1)
-    renamable $w20 = ADDWri renamable $w8, 1, 0
-    renamable $w21 = ADDWri renamable $w8, 2, 0
-    renamable $w22 = ADDWri renamable $w8, 3, 0
-    renamable $w23 = ADDWri killed renamable $w8, 4, 0
-    BL @foo, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit-def $sp
-    STRWui killed renamable $w20, killed renamable $x19, target-flags(aarch64-pageoff, aarch64-nc) @X1 :: (store 4 into @X1)
-    renamable $x8 = ADRP target-flags(aarch64-page) @X2
-    renamable $x9 = ADRP target-flags(aarch64-page) @X3
-    renamable $x10 = ADRP target-flags(aarch64-page) @X4
-    STRWui killed renamable $w21, killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @X2 :: (store 4 into @X2)
-    STRWui killed renamable $w22, killed renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @X3 :: (store 4 into @X3)
-    STRWui killed renamable $w23, killed renamable $x10, target-flags(aarch64-pageoff, aarch64-nc) @X4 :: (store 4 into @X4)
-    $x20, $x19 = frame-destroy LDPXi $sp, 4 :: (load 8 from %stack.1), (load 8 from %stack.0)
-    $x22, $x21 = frame-destroy LDPXi $sp, 2 :: (load 8 from %stack.3), (load 8 from %stack.2)
-    early-clobber $sp, $lr, $x23 = frame-destroy LDPXpost $sp, 6 :: (load 8 from %stack.5), (load 8 from %stack.4)
-    RET undef $lr
+    RET 0
 
 ...
