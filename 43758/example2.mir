# RUN: llc -run-pass x86-fixup-LEAs -mtriple=x86_64-gnu-unknown -mcpu=x86-64 -o - %s | FileCheck %s
# Bug 43758 - check_cfc: dash g generate different code with X86 LEA Fixup
# https://bugs.llvm.org/show_bug.cgi?id=43758
#
# Debug instruction lead to different codegen decisions when x86-fixup-LEAs call
# call computeRegisterLiveness() in lib/CodeGen/MachineBasicBlock.cpp
# 1) when begin() is exactly on Neighborhood(N=4) position above the "LEA64r" instruction
#    the "I==begin()" is true, and return LQR_Dead.
#    (in this case, without debug, x86-fixup-LEAs work normally)
# 2) when begin() is debug instruction, and just above on Neighborhood(N=4) above the "LEA64r" instruction.
#    the "I==begin()" is false, and return LQR_Unknown
#    (in this case, debug instruction lead x86-fixup-LEAs fail to handle LEA instruction as expected.
--- |
  ; ModuleID = 'example.mir'
  source_filename = "test-suite/MultiSource/Benchmarks/DOE-ProxyApps-C++/HPCCG/generate_matrix.cpp"
  target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

  ;dbg_on_begin: DBG_VALUE on begin of the block should not impact LEA64_r replacement
  define i32 @dbg_on_begin() {
    ret i32 0
  }

...
---
name:            dbg_on_begin
body:             |
  bb.0 (%ir-block.0):
    ;CHECK:bb.0 (%ir-block.0):
    ;CHECK:$rbp = LEA64r killed $rbx, 2, killed $rbx, 0, $noreg
    ;CHECK-NEXT:$rbp = ADD64ri8 $rbp, 5, implicit-def $eflags
    liveins: $rax, $rbx, $rcx, $rdx, $rbp
    DBG_VALUE 0, $noreg
    NOOP implicit $rax
    NOOP implicit $rbx
    NOOP implicit $rcx
    NOOP implicit $rdx
    $rbp = LEA64r killed $rbx, 2, killed $rbx, 5, $noreg
    NOOP
    NOOP
    NOOP
    NOOP
    NOOP
    DBG_VALUE 0, $noreg
...
