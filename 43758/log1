Start X86FixupLEAs
debug1: optTwoAddrLEA isSafeToClobberEFLAGS:$ebp = LEA64_32r killed $rbp, 4, killed $rbp, 0, $noreg

optTwoAddrLEA: debug-after (I): $ebp = LEA64_32r killed $rbp, 4, killed $rbp, 0, $noreg

debug1: processInstrForSlow3OpLEA isSafeToClobberEFLAGS:$ebp = LEA64_32r killed $rbp, 4, killed $rbp, 0, $noreg

### chris_isSafeToClobberEFLAGS MBB:
bb.0 (%ir-block.0):
  liveins: $rax, $rbp, $rbx
  $ebp = LEA64_32r killed $rbp, 4, killed $rbp, 0, $noreg
  RETQ $ebp

###
### chris_isSafeToClobberEFLAGS I:
$ebp = LEA64_32r killed $rbp, 4, killed $rbp, 0, $noreg

###
chris-before: $ebp = LEA64_32r killed $rbp, 4, killed $rbp, 0, $noreg

chris-begin: $ebp = LEA64_32r killed $rbp, 4, killed $rbp, 0, $noreg

chris-end: RETQ $ebp

chris-N down =: 3: $ebp = LEA64_32r killed $rbp, 4, killed $rbp, 0, $noreg

chris-N down =: 2: RETQ $ebp

chris-liveness: return4 Dead
End X86FixupLEAs
Start X86FixupLEAs
debug1: optTwoAddrLEA isSafeToClobberEFLAGS:$rbx = LEA64r killed $rax, 4, killed $rax, 5, $noreg

optTwoAddrLEA: debug-after (I): $rbx = LEA64r killed $rax, 4, killed $rax, 5, $noreg

debug1: processInstrForSlow3OpLEA isSafeToClobberEFLAGS:$rbx = LEA64r killed $rax, 4, killed $rax, 5, $noreg

### chris_isSafeToClobberEFLAGS MBB:
bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $rax, $rbp, $rbx
  CMP64rr $rax, killed $rbx, implicit-def $eflags
  $rbx = LEA64r killed $rax, 4, killed $rax, 5, $noreg
  JCC_1 %bb.1, 4, implicit $eflags
  RETQ $ebx

###
### chris_isSafeToClobberEFLAGS I:
$rbx = LEA64r killed $rax, 4, killed $rax, 5, $noreg

###
chris-before: $rbx = LEA64r killed $rax, 4, killed $rax, 5, $noreg

chris-begin: CMP64rr $rax, killed $rbx, implicit-def $eflags

chris-end: RETQ $ebx

chris-N down =: 3: $rbx = LEA64r killed $rax, 4, killed $rax, 5, $noreg

chris-N down =: 2: JCC_1 %bb.1, 4, implicit $eflags

chris-liveness: return1 Live
debug1: optTwoAddrLEA isSafeToClobberEFLAGS:$rbp = LEA64r killed $rbx, 4, killed $rbx, 5, $noreg

optTwoAddrLEA: debug-after (I): $rbp = LEA64r killed $rbx, 4, killed $rbx, 5, $noreg

debug1: processInstrForSlow3OpLEA isSafeToClobberEFLAGS:$rbp = LEA64r killed $rbx, 4, killed $rbx, 5, $noreg

### chris_isSafeToClobberEFLAGS MBB:
bb.1:
; predecessors: %bb.0
  liveins: $rax, $rbp, $rbx, $r8
  NOOP
  NOOP
  NOOP
  NOOP
  $rbp = LEA64r killed $rbx, 4, killed $rbx, 5, $noreg
  NOOP
  NOOP
  NOOP
  NOOP
  RETQ $ebp

###
### chris_isSafeToClobberEFLAGS I:
$rbp = LEA64r killed $rbx, 4, killed $rbx, 5, $noreg

###
chris-before: $rbp = LEA64r killed $rbx, 4, killed $rbx, 5, $noreg

chris-begin: NOOP

chris-end: RETQ $ebp

chris-N down =: 3: $rbp = LEA64r killed $rbx, 4, killed $rbx, 5, $noreg

chris-N down =: 2: NOOP

chris-N down =: 1: NOOP

chris-N down =: 0: NOOP

chris-N up =: 3: NOOP

chris-N up =: 2: NOOP

chris-N up =: 1: NOOP

chris-N up =: 0: NOOP

chris-I: NOOP

chris-liveness: start block***********: NOOP

chris-liveness: return10 Dead
FixLEA: Candidate to replace:  $rbp = LEA64r killed $rbx, 4, killed $rbx, 5, $noreg
FixLEA: Replaced by:   $rbp = LEA64r killed $rbx, 4, killed $rbx, 0, $noreg
  $rbp = ADD64ri8 $rbp(tied-def 0), 5, implicit-def $eflags
End X86FixupLEAs
