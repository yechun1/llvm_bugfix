# RUN: llc -run-pass x86-fixup-LEAs -mtriple=x86_64-gnu-unknown -verify-machineinstrs -mcpu=corei7-avx -o - %s | FileCheck %s
--- |
  ; ModuleID = 'lea-2.ll'
  source_filename = "lea-2.ll"
  target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
  ;generated using: llc -stop-after x86-pad-short-functions lea-2.ll > leaFinxup64.mir


  ;dbg_on_end: LEA64r that cannot be replaced since its not safe to clobber eflags
  define i32 @dbg_on_end() {
    ret i32 0
  }

  ;dbg_on_begin: 3 operands LEA64_32r that can not be replaced with 2 instructions
  define i32 @dbg_on_begin() {
    ret i32 0
  }

...
---
name:            dbg_on_begin
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
tracksRegLiveness: true
liveins:         
  - { reg: '$rbp' }
  - { reg: '$rax' }
frameInfo:       
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    0
  adjustsStack:    false
  hasCalls:        false
  maxCallFrameSize: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
body:             |
  bb.0 (%ir-block.0):
    liveins: $rax, $rbp, $rbx
    ; CHECK: $rbx = LEA64r killed $rax, 4, killed $rax, 5, $noreg
    ; CHECK: $rbp = LEA64r killed $rbx, 4, killed $rbx, 0, $noreg
    ; CHECK: $rbp = ADD64ri8 $rbp, 5
   
    CMP64rr   $rax, killed $rbx, implicit-def $eflags
    $rbx = LEA64r killed $rax, 4, killed $rax, 5, $noreg
    JCC_1 %bb.1, 4, implicit $eflags
    RETQ $ebx
  bb.1:
    liveins: $rax, $rbp, $rbx, $r8
    NOOP
    NOOP
    NOOP
    NOOP
    $rbp = LEA64r killed $rbx, 4, killed $rbx, 5, $noreg
    NOOP
    NOOP
    NOOP
    NOOP
    RETQ $ebp

...
---
name:            dbg_on_end
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
tracksRegLiveness: true
liveins:         
  - { reg: '$rbx' }
  - { reg: '$rbp' }
frameInfo:       
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    0
  adjustsStack:    false
  hasCalls:        false
  maxCallFrameSize: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
body:             |
  bb.0 (%ir-block.0):
    liveins: $rax, $rbp, $rbx
    ; CHECK: $ebp = LEA64_32r killed $rbp, 4, killed $rbp, 0, $noreg
    $ebp = LEA64_32r killed $rbp, 4, killed $rbp, 0, $noreg
    RETQ $ebp

...


