CheckModuleDebugify [Force set function attributes]: PASS
CheckModuleDebugify [Infer set function attributes]: PASS
CheckModuleDebugify [Interprocedural Sparse Conditional Constant Propagation]: PASS
CheckModuleDebugify [Called Value Propagation]: PASS
CheckModuleDebugify [Deduce and propagate attributes]: PASS
CheckModuleDebugify [Global Variable Optimizer]: PASS
CheckFunctionDebugify [Promote Memory to Register]: PASS
CheckFunctionDebugify [Promote Memory to Register]: PASS
CheckFunctionDebugify [Promote Memory to Register]: PASS
CheckFunctionDebugify [Promote Memory to Register]: PASS
CheckFunctionDebugify [Promote Memory to Register]: PASS
CheckFunctionDebugify [Promote Memory to Register]: PASS
CheckFunctionDebugify [Promote Memory to Register]: PASS
CheckFunctionDebugify [Promote Memory to Register]: PASS
CheckModuleDebugify [Dead Argument Elimination]: PASS
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, !dbg !19, !range !20
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
runOnFunction: I:  %chk0 = icmp ult i32 %x, %length, !dbg !21
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
runOnFunction: I:  %x.inc1 = add i32 %x, 1, !dbg !23
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
runOnFunction: I:  %x.inc2 = add i32 %x, 2, !dbg !26
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
runOnFunction: I:  %x.inc3 = add i32 %x, 3, !dbg !29
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
runOnFunction: I:  ret void, !dbg !32
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ult i32 %x, %length, !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add i32 %x, 1, !dbg !23
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add i32 %x, 2, !dbg !26
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add i32 %x, 3, !dbg !29
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(start):  ret void, !dbg !32


INSTCOMBINE ITERATION #1 on f_0
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ult i32 %x, %length, !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add i32 %x, 1, !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add i32 %x, 2, !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add i32 %x, 3, !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(end):  ret void, !dbg !32
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ult i32 %x, %length, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add i32 %x, 1, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add i32 %x, 2, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add i32 %x, 3, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ult i32 %x, %length, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add i32 %x, 1, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add i32 %x, 2, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add i32 %x, 3, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, !dbg !19, !range !20
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
chris-worklist-bb: BB end:   %chk0 = icmp ult i32 %x, %length, !dbg !21
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-worklist-bb: BB end:   %x.inc1 = add i32 %x, 1, !dbg !23
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-worklist-bb: BB end:   %x.inc2 = add i32 %x, 2, !dbg !26
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-worklist-bb: BB end:   %x.inc3 = add i32 %x, 3, !dbg !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-worklist-bb: BB end:   ret void, !dbg !32
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void, !dbg !32
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-AddInitialGroup: I:   %x.inc3 = add i32 %x, 3, !dbg !29
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-AddInitialGroup: I:   %x.inc2 = add i32 %x, 2, !dbg !26
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-AddInitialGroup: I:   %x.inc1 = add i32 %x, 1, !dbg !23
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-AddInitialGroup: I:   %chk0 = icmp ult i32 %x, %length, !dbg !21
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, !dbg !19, !range !20
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, !dbg !19, !range !20
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, !dbg !19, !range !20
run: WorkList:   %length = load i32, i32* %length_buf, !dbg !19, !range !20
chris-run: I=  %length = load i32, i32* %length_buf, !dbg !19, !range !20
chris-run: I-end=  %length = load i32, i32* %length_buf, !dbg !19, !range !20
IC: Visiting:   %length = load i32, i32* %length_buf, !dbg !19, !range !20
test1: I=  %length = load i32, i32* %length_buf, !dbg !19, !range !20
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ult i32 %x, %length, !dbg !21
chris-RemoveOne: return I  %chk0 = icmp ult i32 %x, %length, !dbg !21
run: WorkList:   %chk0 = icmp ult i32 %x, %length, !dbg !21
chris-run: I=  %chk0 = icmp ult i32 %x, %length, !dbg !21
chris-run: I-end=  %chk0 = icmp ult i32 %x, %length, !dbg !21
IC: Visiting:   %chk0 = icmp ult i32 %x, %length, !dbg !21
test1: I=  %chk0 = icmp ult i32 %x, %length, !dbg !21
visit: has:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
test2
after visiting: Result =   %chk0 = icmp ugt i32 %length, %x, !dbg !21
after visiting: I =   %chk0 = icmp ugt i32 %length, %x, !dbg !21
IC: Mod =   %chk0 = icmp ult i32 %x, %length, !dbg !21
    New =   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-Worklist.AddUsersToWorkList 2:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-add2:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris add f
IC: ADD:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x, !dbg !21
run: WorkList:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
test1: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = add i32 %x, 1, !dbg !23
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
NextInst[1]   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add i32 %x, 1, !dbg !23
chris-RemoveOne: return I  %x.inc1 = add i32 %x, 1, !dbg !23
run: WorkList:   %x.inc1 = add i32 %x, 1, !dbg !23
chris-run: I=  %x.inc1 = add i32 %x, 1, !dbg !23
chris-run: I-end=  %x.inc1 = add i32 %x, 1, !dbg !23
IC: Visiting:   %x.inc1 = add i32 %x, 1, !dbg !23
test1: I=  %x.inc1 = add i32 %x, 1, !dbg !23
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add i32 %x, 2, !dbg !26
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
NextInst[1]   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add i32 %x, 2, !dbg !26
chris-RemoveOne: return I  %x.inc2 = add i32 %x, 2, !dbg !26
run: WorkList:   %x.inc2 = add i32 %x, 2, !dbg !26
chris-run: I=  %x.inc2 = add i32 %x, 2, !dbg !26
chris-run: I-end=  %x.inc2 = add i32 %x, 2, !dbg !26
IC: Visiting:   %x.inc2 = add i32 %x, 2, !dbg !26
test1: I=  %x.inc2 = add i32 %x, 2, !dbg !26
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add i32 %x, 3, !dbg !29
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
NextInst[1]   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add i32 %x, 3, !dbg !29
chris-RemoveOne: return I  %x.inc3 = add i32 %x, 3, !dbg !29
run: WorkList:   %x.inc3 = add i32 %x, 3, !dbg !29
chris-run: I=  %x.inc3 = add i32 %x, 3, !dbg !29
chris-run: I-end=  %x.inc3 = add i32 %x, 3, !dbg !29
IC: Visiting:   %x.inc3 = add i32 %x, 3, !dbg !29
test1: I=  %x.inc3 = add i32 %x, 3, !dbg !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void, !dbg !32
 ok, break
Inst[end]:   ret void, !dbg !32
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void, !dbg !32
chris-RemoveOne: return I  ret void, !dbg !32
run: WorkList:   ret void, !dbg !32
chris-run: I=  ret void, !dbg !32
chris-run: I-end=  ret void, !dbg !32
IC: Visiting:   ret void, !dbg !32
test1: I=  ret void, !dbg !32
visit: nullptr 
test3
test4


INSTCOMBINE ITERATION #2 on f_0
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add i32 %x, 1, !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add i32 %x, 2, !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add i32 %x, 3, !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(end):  ret void, !dbg !32
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add i32 %x, 1, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add i32 %x, 2, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add i32 %x, 3, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add i32 %x, 1, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add i32 %x, 2, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add i32 %x, 3, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-worklist-bb: BB end:   %x.inc1 = add i32 %x, 1, !dbg !23
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-worklist-bb: BB end:   %x.inc2 = add i32 %x, 2, !dbg !26
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-worklist-bb: BB end:   %x.inc3 = add i32 %x, 3, !dbg !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-worklist-bb: BB end:   ret void, !dbg !32
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void, !dbg !32
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-AddInitialGroup: I:   %x.inc3 = add i32 %x, 3, !dbg !29
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-AddInitialGroup: I:   %x.inc2 = add i32 %x, 2, !dbg !26
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-AddInitialGroup: I:   %x.inc1 = add i32 %x, 1, !dbg !23
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
test1: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x, !dbg !21
run: WorkList:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
test1: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = add i32 %x, 1, !dbg !23
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
NextInst[1]   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add i32 %x, 1, !dbg !23
chris-RemoveOne: return I  %x.inc1 = add i32 %x, 1, !dbg !23
run: WorkList:   %x.inc1 = add i32 %x, 1, !dbg !23
chris-run: I=  %x.inc1 = add i32 %x, 1, !dbg !23
chris-run: I-end=  %x.inc1 = add i32 %x, 1, !dbg !23
IC: Visiting:   %x.inc1 = add i32 %x, 1, !dbg !23
test1: I=  %x.inc1 = add i32 %x, 1, !dbg !23
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add i32 %x, 2, !dbg !26
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
NextInst[1]   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add i32 %x, 2, !dbg !26
chris-RemoveOne: return I  %x.inc2 = add i32 %x, 2, !dbg !26
run: WorkList:   %x.inc2 = add i32 %x, 2, !dbg !26
chris-run: I=  %x.inc2 = add i32 %x, 2, !dbg !26
chris-run: I-end=  %x.inc2 = add i32 %x, 2, !dbg !26
IC: Visiting:   %x.inc2 = add i32 %x, 2, !dbg !26
test1: I=  %x.inc2 = add i32 %x, 2, !dbg !26
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add i32 %x, 3, !dbg !29
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
NextInst[1]   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add i32 %x, 3, !dbg !29
chris-RemoveOne: return I  %x.inc3 = add i32 %x, 3, !dbg !29
run: WorkList:   %x.inc3 = add i32 %x, 3, !dbg !29
chris-run: I=  %x.inc3 = add i32 %x, 3, !dbg !29
chris-run: I-end=  %x.inc3 = add i32 %x, 3, !dbg !29
IC: Visiting:   %x.inc3 = add i32 %x, 3, !dbg !29
test1: I=  %x.inc3 = add i32 %x, 3, !dbg !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void, !dbg !32
 ok, break
Inst[end]:   ret void, !dbg !32
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void, !dbg !32
chris-RemoveOne: return I  ret void, !dbg !32
run: WorkList:   ret void, !dbg !32
chris-run: I=  ret void, !dbg !32
chris-run: I-end=  ret void, !dbg !32
IC: Visiting:   ret void, !dbg !32
test1: I=  ret void, !dbg !32
visit: nullptr 
test3
test4
CheckFunctionDebugify [Combine redundant instructions]: PASS
CheckFunctionDebugify [Simplify the CFG]: PASS
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, !dbg !19, !range !20
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
runOnFunction: I:  %chk0 = icmp ult i32 %x, %length, !dbg !21
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
runOnFunction: I:  %x.inc1 = add i32 %x, 1, !dbg !23
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
runOnFunction: I:  %x.inc2 = add i32 %x.inc1, 2, !dbg !26
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
runOnFunction: I:  %x.inc3 = add i32 %x.inc2, 3, !dbg !29
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
runOnFunction: I:  ret void, !dbg !32
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ult i32 %x, %length, !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add i32 %x, 1, !dbg !23
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add i32 %x.inc1, 2, !dbg !26
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add i32 %x.inc2, 3, !dbg !29
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(start):  ret void, !dbg !32


INSTCOMBINE ITERATION #1 on f_1
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ult i32 %x, %length, !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add i32 %x, 1, !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add i32 %x.inc1, 2, !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add i32 %x.inc2, 3, !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(end):  ret void, !dbg !32
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ult i32 %x, %length, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add i32 %x, 1, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add i32 %x.inc1, 2, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add i32 %x.inc2, 3, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ult i32 %x, %length, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add i32 %x, 1, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add i32 %x.inc1, 2, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add i32 %x.inc2, 3, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, !dbg !19, !range !20
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
chris-worklist-bb: BB end:   %chk0 = icmp ult i32 %x, %length, !dbg !21
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-worklist-bb: BB end:   %x.inc1 = add i32 %x, 1, !dbg !23
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-worklist-bb: BB end:   %x.inc2 = add i32 %x.inc1, 2, !dbg !26
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-worklist-bb: BB end:   %x.inc3 = add i32 %x.inc2, 3, !dbg !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-worklist-bb: BB end:   ret void, !dbg !32
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void, !dbg !32
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-AddInitialGroup: I:   %x.inc3 = add i32 %x.inc2, 3, !dbg !29
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-AddInitialGroup: I:   %x.inc2 = add i32 %x.inc1, 2, !dbg !26
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-AddInitialGroup: I:   %x.inc1 = add i32 %x, 1, !dbg !23
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-AddInitialGroup: I:   %chk0 = icmp ult i32 %x, %length, !dbg !21
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, !dbg !19, !range !20
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, !dbg !19, !range !20
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, !dbg !19, !range !20
run: WorkList:   %length = load i32, i32* %length_buf, !dbg !19, !range !20
chris-run: I=  %length = load i32, i32* %length_buf, !dbg !19, !range !20
chris-run: I-end=  %length = load i32, i32* %length_buf, !dbg !19, !range !20
IC: Visiting:   %length = load i32, i32* %length_buf, !dbg !19, !range !20
test1: I=  %length = load i32, i32* %length_buf, !dbg !19, !range !20
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ult i32 %x, %length, !dbg !21
chris-RemoveOne: return I  %chk0 = icmp ult i32 %x, %length, !dbg !21
run: WorkList:   %chk0 = icmp ult i32 %x, %length, !dbg !21
chris-run: I=  %chk0 = icmp ult i32 %x, %length, !dbg !21
chris-run: I-end=  %chk0 = icmp ult i32 %x, %length, !dbg !21
IC: Visiting:   %chk0 = icmp ult i32 %x, %length, !dbg !21
test1: I=  %chk0 = icmp ult i32 %x, %length, !dbg !21
visit: has:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
test2
after visiting: Result =   %chk0 = icmp ugt i32 %length, %x, !dbg !21
after visiting: I =   %chk0 = icmp ugt i32 %length, %x, !dbg !21
IC: Mod =   %chk0 = icmp ult i32 %x, %length, !dbg !21
    New =   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-Worklist.AddUsersToWorkList 2:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-add2:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris add f
IC: ADD:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x, !dbg !21
run: WorkList:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
test1: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = add i32 %x, 1, !dbg !23
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
NextInst[1]   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add i32 %x, 1, !dbg !23
chris-RemoveOne: return I  %x.inc1 = add i32 %x, 1, !dbg !23
run: WorkList:   %x.inc1 = add i32 %x, 1, !dbg !23
chris-run: I=  %x.inc1 = add i32 %x, 1, !dbg !23
chris-run: I-end=  %x.inc1 = add i32 %x, 1, !dbg !23
IC: Visiting:   %x.inc1 = add i32 %x, 1, !dbg !23
test1: I=  %x.inc1 = add i32 %x, 1, !dbg !23
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add i32 %x.inc1, 2, !dbg !26
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
NextInst[1]   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add i32 %x.inc1, 2, !dbg !26
chris-RemoveOne: return I  %x.inc2 = add i32 %x.inc1, 2, !dbg !26
run: WorkList:   %x.inc2 = add i32 %x.inc1, 2, !dbg !26
chris-run: I=  %x.inc2 = add i32 %x.inc1, 2, !dbg !26
chris-run: I-end=  %x.inc2 = add i32 %x.inc1, 2, !dbg !26
IC: Visiting:   %x.inc2 = add i32 %x.inc1, 2, !dbg !26
test1: I=  %x.inc2 = add i32 %x.inc1, 2, !dbg !26
visit: has:   %x.inc2 = add i32 %x, 3, !dbg !26
test2
after visiting: Result =   %x.inc2 = add i32 %x, 3, !dbg !26
after visiting: I =   %x.inc2 = add i32 %x, 3, !dbg !26
IC: Mod =   %x.inc2 = add i32 %x.inc1, 2, !dbg !26
    New =   %x.inc2 = add i32 %x, 3, !dbg !26
chris-Worklist.AddUsersToWorkList 2:   %x.inc2 = add i32 %x, 3, !dbg !26
chris-add2:   %x.inc3 = add i32 %x.inc2, 3, !dbg !29
chris-add2:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris add f
IC: ADD:   %x.inc2 = add i32 %x, 3, !dbg !26
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add i32 %x, 3, !dbg !26
chris-RemoveOne: return I  %x.inc2 = add i32 %x, 3, !dbg !26
run: WorkList:   %x.inc2 = add i32 %x, 3, !dbg !26
chris-run: I=  %x.inc2 = add i32 %x, 3, !dbg !26
chris-run: I-end=  %x.inc2 = add i32 %x, 3, !dbg !26
IC: Visiting:   %x.inc2 = add i32 %x, 3, !dbg !26
test1: I=  %x.inc2 = add i32 %x, 3, !dbg !26
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add i32 %x.inc2, 3, !dbg !29
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
NextInst[1]   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add i32 %x.inc2, 3, !dbg !29
chris-RemoveOne: return I  %x.inc3 = add i32 %x.inc2, 3, !dbg !29
run: WorkList:   %x.inc3 = add i32 %x.inc2, 3, !dbg !29
chris-run: I=  %x.inc3 = add i32 %x.inc2, 3, !dbg !29
chris-run: I-end=  %x.inc3 = add i32 %x.inc2, 3, !dbg !29
IC: Visiting:   %x.inc3 = add i32 %x.inc2, 3, !dbg !29
test1: I=  %x.inc3 = add i32 %x.inc2, 3, !dbg !29
visit: has:   %x.inc3 = add i32 %x, 6, !dbg !29
test2
after visiting: Result =   %x.inc3 = add i32 %x, 6, !dbg !29
after visiting: I =   %x.inc3 = add i32 %x, 6, !dbg !29
IC: Mod =   %x.inc3 = add i32 %x.inc2, 3, !dbg !29
    New =   %x.inc3 = add i32 %x, 6, !dbg !29
chris-Worklist.AddUsersToWorkList 2:   %x.inc3 = add i32 %x, 6, !dbg !29
chris-add2:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris add f
IC: ADD:   %x.inc3 = add i32 %x, 6, !dbg !29
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add i32 %x, 6, !dbg !29
chris-RemoveOne: return I  %x.inc3 = add i32 %x, 6, !dbg !29
run: WorkList:   %x.inc3 = add i32 %x, 6, !dbg !29
chris-run: I=  %x.inc3 = add i32 %x, 6, !dbg !29
chris-run: I-end=  %x.inc3 = add i32 %x, 6, !dbg !29
IC: Visiting:   %x.inc3 = add i32 %x, 6, !dbg !29
test1: I=  %x.inc3 = add i32 %x, 6, !dbg !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void, !dbg !32
 ok, break
Inst[end]:   ret void, !dbg !32
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void, !dbg !32
chris-RemoveOne: return I  ret void, !dbg !32
run: WorkList:   ret void, !dbg !32
chris-run: I=  ret void, !dbg !32
chris-run: I-end=  ret void, !dbg !32
IC: Visiting:   ret void, !dbg !32
test1: I=  ret void, !dbg !32
visit: nullptr 
test3
test4


INSTCOMBINE ITERATION #2 on f_1
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add i32 %x, 1, !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add i32 %x, 3, !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add i32 %x, 6, !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(end):  ret void, !dbg !32
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add i32 %x, 1, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add i32 %x, 3, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add i32 %x, 6, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add i32 %x, 1, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add i32 %x, 3, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add i32 %x, 6, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-worklist-bb: BB end:   %x.inc1 = add i32 %x, 1, !dbg !23
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-worklist-bb: BB end:   %x.inc2 = add i32 %x, 3, !dbg !26
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-worklist-bb: BB end:   %x.inc3 = add i32 %x, 6, !dbg !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-worklist-bb: BB end:   ret void, !dbg !32
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void, !dbg !32
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-AddInitialGroup: I:   %x.inc3 = add i32 %x, 6, !dbg !29
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-AddInitialGroup: I:   %x.inc2 = add i32 %x, 3, !dbg !26
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-AddInitialGroup: I:   %x.inc1 = add i32 %x, 1, !dbg !23
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
test1: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x, !dbg !21
run: WorkList:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
test1: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = add i32 %x, 1, !dbg !23
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
NextInst[1]   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add i32 %x, 1, !dbg !23
chris-RemoveOne: return I  %x.inc1 = add i32 %x, 1, !dbg !23
run: WorkList:   %x.inc1 = add i32 %x, 1, !dbg !23
chris-run: I=  %x.inc1 = add i32 %x, 1, !dbg !23
chris-run: I-end=  %x.inc1 = add i32 %x, 1, !dbg !23
IC: Visiting:   %x.inc1 = add i32 %x, 1, !dbg !23
test1: I=  %x.inc1 = add i32 %x, 1, !dbg !23
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add i32 %x, 3, !dbg !26
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
NextInst[1]   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add i32 %x, 3, !dbg !26
chris-RemoveOne: return I  %x.inc2 = add i32 %x, 3, !dbg !26
run: WorkList:   %x.inc2 = add i32 %x, 3, !dbg !26
chris-run: I=  %x.inc2 = add i32 %x, 3, !dbg !26
chris-run: I-end=  %x.inc2 = add i32 %x, 3, !dbg !26
IC: Visiting:   %x.inc2 = add i32 %x, 3, !dbg !26
test1: I=  %x.inc2 = add i32 %x, 3, !dbg !26
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add i32 %x, 6, !dbg !29
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
NextInst[1]   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add i32 %x, 6, !dbg !29
chris-RemoveOne: return I  %x.inc3 = add i32 %x, 6, !dbg !29
run: WorkList:   %x.inc3 = add i32 %x, 6, !dbg !29
chris-run: I=  %x.inc3 = add i32 %x, 6, !dbg !29
chris-run: I-end=  %x.inc3 = add i32 %x, 6, !dbg !29
IC: Visiting:   %x.inc3 = add i32 %x, 6, !dbg !29
test1: I=  %x.inc3 = add i32 %x, 6, !dbg !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void, !dbg !32
 ok, break
Inst[end]:   ret void, !dbg !32
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void, !dbg !32
chris-RemoveOne: return I  ret void, !dbg !32
run: WorkList:   ret void, !dbg !32
chris-run: I=  ret void, !dbg !32
chris-run: I-end=  ret void, !dbg !32
IC: Visiting:   ret void, !dbg !32
test1: I=  ret void, !dbg !32
visit: nullptr 
test3
test4
CheckFunctionDebugify [Combine redundant instructions]: PASS
CheckFunctionDebugify [Simplify the CFG]: PASS
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %x = and i32 %a, -256, !dbg !20
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x, metadata !10, metadata !DIExpression()), !dbg !21
runOnFunction: I:  %length = load i32, i32* %length_buf, !dbg !21, !range !22
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %length, metadata !12, metadata !DIExpression()), !dbg !22
runOnFunction: I:  %chk0 = icmp ult i32 %x, %length, !dbg !23
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !13, metadata !DIExpression()), !dbg !23
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
runOnFunction: I:  %x.inc1 = or i32 %x, 1, !dbg !25
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
runOnFunction: I:  %x.inc2 = or i32 %x, 2, !dbg !28
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
runOnFunction: I:  %x.inc3 = or i32 %x, 3, !dbg !31
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
runOnFunction: I:  ret void, !dbg !34
INSTCOMBINE ITERATION: Inst(start):  %x = and i32 %a, -256, !dbg !20
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x, metadata !10, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, !dbg !21, !range !22
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %length, metadata !12, metadata !DIExpression()), !dbg !22
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ult i32 %x, %length, !dbg !23
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !13, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = or i32 %x, 1, !dbg !25
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = or i32 %x, 2, !dbg !28
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = or i32 %x, 3, !dbg !31
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
INSTCOMBINE ITERATION: Inst(start):  ret void, !dbg !34


INSTCOMBINE ITERATION #1 on f_2
INSTCOMBINE ITERATION: Inst(end):  %x = and i32 %a, -256, !dbg !20
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x, metadata !10, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, !dbg !21, !range !22
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length, metadata !12, metadata !DIExpression()), !dbg !22
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ult i32 %x, %length, !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !13, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = or i32 %x, 1, !dbg !25
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = or i32 %x, 2, !dbg !28
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = or i32 %x, 3, !dbg !31
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
INSTCOMBINE ITERATION: Inst(end):  ret void, !dbg !34
chris-worklist-bb: bb: 
entry:
  %x = and i32 %a, -256, !dbg !20
  call void @llvm.dbg.value(metadata i32 %x, metadata !9, metadata !DIExpression()), !dbg !20
  %length = load i32, i32* %length_buf, !dbg !21, !range !22
  call void @llvm.dbg.value(metadata i32 %length, metadata !11, metadata !DIExpression()), !dbg !21
  %chk0 = icmp ult i32 %x, %length, !dbg !23
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !23
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
  %x.inc1 = or i32 %x, 1, !dbg !25
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !25
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !26
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
  %x.inc2 = or i32 %x, 2, !dbg !28
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !28
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !29
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
  %x.inc3 = or i32 %x, 3, !dbg !31
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !31
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !32
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
  ret void, !dbg !34

chris-worklist-bb: BB: 
entry:
  %x = and i32 %a, -256, !dbg !20
  call void @llvm.dbg.value(metadata i32 %x, metadata !9, metadata !DIExpression()), !dbg !20
  %length = load i32, i32* %length_buf, !dbg !21, !range !22
  call void @llvm.dbg.value(metadata i32 %length, metadata !11, metadata !DIExpression()), !dbg !21
  %chk0 = icmp ult i32 %x, %length, !dbg !23
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !23
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
  %x.inc1 = or i32 %x, 1, !dbg !25
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !25
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !26
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
  %x.inc2 = or i32 %x, 2, !dbg !28
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !28
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !29
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
  %x.inc3 = or i32 %x, 3, !dbg !31
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !31
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !32
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
  ret void, !dbg !34

chris-worklist-bb: BB end:   %x = and i32 %a, -256, !dbg !20
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x, metadata !10, metadata !DIExpression()), !dbg !21
chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, !dbg !21, !range !22
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length, metadata !12, metadata !DIExpression()), !dbg !22
chris-worklist-bb: BB end:   %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !13, metadata !DIExpression()), !dbg !23
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-worklist-bb: BB end:   %x.inc1 = or i32 %x, 1, !dbg !25
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-worklist-bb: BB end:   %x.inc2 = or i32 %x, 2, !dbg !28
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-worklist-bb: BB end:   %x.inc3 = or i32 %x, 3, !dbg !31
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-worklist-bb: BB end:   ret void, !dbg !34
IC: ADDING: 14 instrs to worklist
chris-AddInitialGroup: I:   ret void, !dbg !34
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-AddInitialGroup: I:   %x.inc3 = or i32 %x, 3, !dbg !31
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-AddInitialGroup: I:   %x.inc2 = or i32 %x, 2, !dbg !28
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-AddInitialGroup: I:   %x.inc1 = or i32 %x, 1, !dbg !25
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-AddInitialGroup: I:   %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, !dbg !21, !range !22
chris-AddInitialGroup: I:   %x = and i32 %a, -256, !dbg !20
RemoveOne!!!
chris-RemoveOne:   %x = and i32 %a, -256, !dbg !20
chris-RemoveOne: return I  %x = and i32 %a, -256, !dbg !20
run: WorkList:   %x = and i32 %a, -256, !dbg !20
chris-run: I=  %x = and i32 %a, -256, !dbg !20
chris-run: I-end=  %x = and i32 %a, -256, !dbg !20
IC: Visiting:   %x = and i32 %a, -256, !dbg !20
test1: I=  %x = and i32 %a, -256, !dbg !20
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, !dbg !21, !range !22
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, !dbg !21, !range !22
run: WorkList:   %length = load i32, i32* %length_buf, !dbg !21, !range !22
chris-run: I=  %length = load i32, i32* %length_buf, !dbg !21, !range !22
chris-run: I-end=  %length = load i32, i32* %length_buf, !dbg !21, !range !22
IC: Visiting:   %length = load i32, i32* %length_buf, !dbg !21, !range !22
test1: I=  %length = load i32, i32* %length_buf, !dbg !21, !range !22
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-RemoveOne: return I  %chk0 = icmp ult i32 %x, %length, !dbg !23
run: WorkList:   %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-run: I=  %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-run: I-end=  %chk0 = icmp ult i32 %x, %length, !dbg !23
IC: Visiting:   %chk0 = icmp ult i32 %x, %length, !dbg !23
test1: I=  %chk0 = icmp ult i32 %x, %length, !dbg !23
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = or i32 %x, 1, !dbg !25
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
NextInst[1]   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = or i32 %x, 1, !dbg !25
chris-RemoveOne: return I  %x.inc1 = or i32 %x, 1, !dbg !25
run: WorkList:   %x.inc1 = or i32 %x, 1, !dbg !25
chris-run: I=  %x.inc1 = or i32 %x, 1, !dbg !25
chris-run: I-end=  %x.inc1 = or i32 %x, 1, !dbg !25
IC: Visiting:   %x.inc1 = or i32 %x, 1, !dbg !25
test1: I=  %x.inc1 = or i32 %x, 1, !dbg !25
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = or i32 %x, 2, !dbg !28
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
NextInst[1]   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = or i32 %x, 2, !dbg !28
chris-RemoveOne: return I  %x.inc2 = or i32 %x, 2, !dbg !28
run: WorkList:   %x.inc2 = or i32 %x, 2, !dbg !28
chris-run: I=  %x.inc2 = or i32 %x, 2, !dbg !28
chris-run: I-end=  %x.inc2 = or i32 %x, 2, !dbg !28
IC: Visiting:   %x.inc2 = or i32 %x, 2, !dbg !28
test1: I=  %x.inc2 = or i32 %x, 2, !dbg !28
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = or i32 %x, 3, !dbg !31
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
NextInst[1]   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = or i32 %x, 3, !dbg !31
chris-RemoveOne: return I  %x.inc3 = or i32 %x, 3, !dbg !31
run: WorkList:   %x.inc3 = or i32 %x, 3, !dbg !31
chris-run: I=  %x.inc3 = or i32 %x, 3, !dbg !31
chris-run: I-end=  %x.inc3 = or i32 %x, 3, !dbg !31
IC: Visiting:   %x.inc3 = or i32 %x, 3, !dbg !31
test1: I=  %x.inc3 = or i32 %x, 3, !dbg !31
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void, !dbg !34
 ok, break
Inst[end]:   ret void, !dbg !34
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void, !dbg !34
chris-RemoveOne: return I  ret void, !dbg !34
run: WorkList:   ret void, !dbg !34
chris-run: I=  ret void, !dbg !34
chris-run: I-end=  ret void, !dbg !34
IC: Visiting:   ret void, !dbg !34
test1: I=  ret void, !dbg !34
visit: nullptr 
test3
test4
CheckFunctionDebugify [Combine redundant instructions]: PASS
CheckFunctionDebugify [Simplify the CFG]: PASS
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %x = and i32 %a, -256, !dbg !20
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x, metadata !10, metadata !DIExpression()), !dbg !21
runOnFunction: I:  %length = load i32, i32* %length_buf, !dbg !21, !range !22
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %length, metadata !12, metadata !DIExpression()), !dbg !22
runOnFunction: I:  %chk0 = icmp ult i32 %x, %length, !dbg !23
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !13, metadata !DIExpression()), !dbg !23
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
runOnFunction: I:  %x.inc1 = add i32 %x, 1, !dbg !25
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
runOnFunction: I:  %x.inc2 = or i32 %x.inc1, 2, !dbg !28
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
runOnFunction: I:  %x.inc3 = add i32 %x.inc2, 3, !dbg !31
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
runOnFunction: I:  ret void, !dbg !34
INSTCOMBINE ITERATION: Inst(start):  %x = and i32 %a, -256, !dbg !20
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x, metadata !10, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, !dbg !21, !range !22
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %length, metadata !12, metadata !DIExpression()), !dbg !22
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ult i32 %x, %length, !dbg !23
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !13, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add i32 %x, 1, !dbg !25
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = or i32 %x.inc1, 2, !dbg !28
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add i32 %x.inc2, 3, !dbg !31
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
INSTCOMBINE ITERATION: Inst(start):  ret void, !dbg !34


INSTCOMBINE ITERATION #1 on f_3
INSTCOMBINE ITERATION: Inst(end):  %x = and i32 %a, -256, !dbg !20
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x, metadata !10, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, !dbg !21, !range !22
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length, metadata !12, metadata !DIExpression()), !dbg !22
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ult i32 %x, %length, !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !13, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add i32 %x, 1, !dbg !25
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = or i32 %x.inc1, 2, !dbg !28
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add i32 %x.inc2, 3, !dbg !31
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
INSTCOMBINE ITERATION: Inst(end):  ret void, !dbg !34
chris-worklist-bb: bb: 
entry:
  %x = and i32 %a, -256, !dbg !20
  call void @llvm.dbg.value(metadata i32 %x, metadata !9, metadata !DIExpression()), !dbg !20
  %length = load i32, i32* %length_buf, !dbg !21, !range !22
  call void @llvm.dbg.value(metadata i32 %length, metadata !11, metadata !DIExpression()), !dbg !21
  %chk0 = icmp ult i32 %x, %length, !dbg !23
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !23
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
  %x.inc1 = add i32 %x, 1, !dbg !25
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !25
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !26
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
  %x.inc2 = or i32 %x.inc1, 2, !dbg !28
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !28
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !29
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
  %x.inc3 = add i32 %x.inc2, 3, !dbg !31
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !31
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !32
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
  ret void, !dbg !34

chris-worklist-bb: BB: 
entry:
  %x = and i32 %a, -256, !dbg !20
  call void @llvm.dbg.value(metadata i32 %x, metadata !9, metadata !DIExpression()), !dbg !20
  %length = load i32, i32* %length_buf, !dbg !21, !range !22
  call void @llvm.dbg.value(metadata i32 %length, metadata !11, metadata !DIExpression()), !dbg !21
  %chk0 = icmp ult i32 %x, %length, !dbg !23
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !23
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
  %x.inc1 = add i32 %x, 1, !dbg !25
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !25
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !26
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
  %x.inc2 = or i32 %x.inc1, 2, !dbg !28
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !28
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !29
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
  %x.inc3 = add i32 %x.inc2, 3, !dbg !31
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !31
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !32
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
  ret void, !dbg !34

chris-worklist-bb: BB end:   %x = and i32 %a, -256, !dbg !20
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x, metadata !10, metadata !DIExpression()), !dbg !21
chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, !dbg !21, !range !22
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length, metadata !12, metadata !DIExpression()), !dbg !22
chris-worklist-bb: BB end:   %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !13, metadata !DIExpression()), !dbg !23
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-worklist-bb: BB end:   %x.inc1 = add i32 %x, 1, !dbg !25
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-worklist-bb: BB end:   %x.inc2 = or i32 %x.inc1, 2, !dbg !28
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-worklist-bb: BB end:   %x.inc3 = add i32 %x.inc2, 3, !dbg !31
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-worklist-bb: BB end:   ret void, !dbg !34
IC: ADDING: 14 instrs to worklist
chris-AddInitialGroup: I:   ret void, !dbg !34
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-AddInitialGroup: I:   %x.inc3 = add i32 %x.inc2, 3, !dbg !31
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-AddInitialGroup: I:   %x.inc2 = or i32 %x.inc1, 2, !dbg !28
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-AddInitialGroup: I:   %x.inc1 = add i32 %x, 1, !dbg !25
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-AddInitialGroup: I:   %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, !dbg !21, !range !22
chris-AddInitialGroup: I:   %x = and i32 %a, -256, !dbg !20
RemoveOne!!!
chris-RemoveOne:   %x = and i32 %a, -256, !dbg !20
chris-RemoveOne: return I  %x = and i32 %a, -256, !dbg !20
run: WorkList:   %x = and i32 %a, -256, !dbg !20
chris-run: I=  %x = and i32 %a, -256, !dbg !20
chris-run: I-end=  %x = and i32 %a, -256, !dbg !20
IC: Visiting:   %x = and i32 %a, -256, !dbg !20
test1: I=  %x = and i32 %a, -256, !dbg !20
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, !dbg !21, !range !22
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, !dbg !21, !range !22
run: WorkList:   %length = load i32, i32* %length_buf, !dbg !21, !range !22
chris-run: I=  %length = load i32, i32* %length_buf, !dbg !21, !range !22
chris-run: I-end=  %length = load i32, i32* %length_buf, !dbg !21, !range !22
IC: Visiting:   %length = load i32, i32* %length_buf, !dbg !21, !range !22
test1: I=  %length = load i32, i32* %length_buf, !dbg !21, !range !22
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-RemoveOne: return I  %chk0 = icmp ult i32 %x, %length, !dbg !23
run: WorkList:   %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-run: I=  %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-run: I-end=  %chk0 = icmp ult i32 %x, %length, !dbg !23
IC: Visiting:   %chk0 = icmp ult i32 %x, %length, !dbg !23
test1: I=  %chk0 = icmp ult i32 %x, %length, !dbg !23
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = add i32 %x, 1, !dbg !25
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
NextInst[1]   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add i32 %x, 1, !dbg !25
chris-RemoveOne: return I  %x.inc1 = add i32 %x, 1, !dbg !25
run: WorkList:   %x.inc1 = add i32 %x, 1, !dbg !25
chris-run: I=  %x.inc1 = add i32 %x, 1, !dbg !25
chris-run: I-end=  %x.inc1 = add i32 %x, 1, !dbg !25
IC: Visiting:   %x.inc1 = add i32 %x, 1, !dbg !25
test1: I=  %x.inc1 = add i32 %x, 1, !dbg !25
visit: has:   <badref> = or i32 %x, 1
test2
after visiting: Result =   <badref> = or i32 %x, 1
after visiting: I =   %x.inc1 = add i32 %x, 1, !dbg !25
IC: Old =   %x.inc1 = add i32 %x, 1, !dbg !25
    New =   <badref> = or i32 %x, 1
chris-Worklist.AddUsersToWorkList 1
chris-add2:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-add2:   %x.inc2 = or i32 %x.inc1, 2, !dbg !28
chris add e
IC: ADD:   %x.inc1 = or i32 %x, 1, !dbg !DILocation(line: 5, column: 1, scope: <0x564ed1ca53c0>)
IC: ERASE   %0 = add i32 %x, 1, !dbg !25
IC: ADD:   %x = and i32 %a, -256, !dbg !20
test3
RemoveOne!!!
chris-RemoveOne:   %x = and i32 %a, -256, !dbg !20
chris-RemoveOne: return I  %x = and i32 %a, -256, !dbg !20
run: WorkList:   %x = and i32 %a, -256, !dbg !20
chris-run: I=  %x = and i32 %a, -256, !dbg !20
chris-run: I-end=  %x = and i32 %a, -256, !dbg !20
IC: Visiting:   %x = and i32 %a, -256, !dbg !20
test1: I=  %x = and i32 %a, -256, !dbg !20
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = or i32 %x, 1, !dbg !25
chris-RemoveOne: return I  %x.inc1 = or i32 %x, 1, !dbg !25
run: WorkList:   %x.inc1 = or i32 %x, 1, !dbg !25
chris-run: I=  %x.inc1 = or i32 %x, 1, !dbg !25
chris-run: I-end=  %x.inc1 = or i32 %x, 1, !dbg !25
IC: Visiting:   %x.inc1 = or i32 %x, 1, !dbg !25
test1: I=  %x.inc1 = or i32 %x, 1, !dbg !25
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = or i32 %x.inc1, 2, !dbg !28
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
NextInst[1]   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = or i32 %x.inc1, 2, !dbg !28
chris-RemoveOne: return I  %x.inc2 = or i32 %x.inc1, 2, !dbg !28
run: WorkList:   %x.inc2 = or i32 %x.inc1, 2, !dbg !28
chris-run: I=  %x.inc2 = or i32 %x.inc1, 2, !dbg !28
chris-run: I-end=  %x.inc2 = or i32 %x.inc1, 2, !dbg !28
IC: Visiting:   %x.inc2 = or i32 %x.inc1, 2, !dbg !28
test1: I=  %x.inc2 = or i32 %x.inc1, 2, !dbg !28
visit: has:   %x.inc2 = or i32 %x, 3, !dbg !28
test2
after visiting: Result =   %x.inc2 = or i32 %x, 3, !dbg !28
after visiting: I =   %x.inc2 = or i32 %x, 3, !dbg !28
IC: Mod =   %x.inc2 = or i32 %x.inc1, 2, !dbg !28
    New =   %x.inc2 = or i32 %x, 3, !dbg !28
chris-Worklist.AddUsersToWorkList 2:   %x.inc2 = or i32 %x, 3, !dbg !28
chris-add2:   %x.inc3 = add i32 %x.inc2, 3, !dbg !31
chris-add2:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris add f
IC: ADD:   %x.inc2 = or i32 %x, 3, !dbg !28
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = or i32 %x, 3, !dbg !28
chris-RemoveOne: return I  %x.inc2 = or i32 %x, 3, !dbg !28
run: WorkList:   %x.inc2 = or i32 %x, 3, !dbg !28
chris-run: I=  %x.inc2 = or i32 %x, 3, !dbg !28
chris-run: I-end=  %x.inc2 = or i32 %x, 3, !dbg !28
IC: Visiting:   %x.inc2 = or i32 %x, 3, !dbg !28
test1: I=  %x.inc2 = or i32 %x, 3, !dbg !28
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add i32 %x.inc2, 3, !dbg !31
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
NextInst[1]   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add i32 %x.inc2, 3, !dbg !31
chris-RemoveOne: return I  %x.inc3 = add i32 %x.inc2, 3, !dbg !31
run: WorkList:   %x.inc3 = add i32 %x.inc2, 3, !dbg !31
chris-run: I=  %x.inc3 = add i32 %x.inc2, 3, !dbg !31
chris-run: I-end=  %x.inc3 = add i32 %x.inc2, 3, !dbg !31
IC: Visiting:   %x.inc3 = add i32 %x.inc2, 3, !dbg !31
test1: I=  %x.inc3 = add i32 %x.inc2, 3, !dbg !31
visit: has:   %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
test2
after visiting: Result =   %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
after visiting: I =   %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
IC: Mod =   %x.inc3 = add i32 %x.inc2, 3, !dbg !31
    New =   %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
chris-Worklist.AddUsersToWorkList 2:   %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
chris-add2:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris add f
IC: ADD:   %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
chris-RemoveOne: return I  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
run: WorkList:   %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
chris-run: I=  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
chris-run: I-end=  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
IC: Visiting:   %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
test1: I=  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void, !dbg !34
 ok, break
Inst[end]:   ret void, !dbg !34
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void, !dbg !34
chris-RemoveOne: return I  ret void, !dbg !34
run: WorkList:   ret void, !dbg !34
chris-run: I=  ret void, !dbg !34
chris-run: I-end=  ret void, !dbg !34
IC: Visiting:   ret void, !dbg !34
test1: I=  ret void, !dbg !34
visit: nullptr 
test3
test4


INSTCOMBINE ITERATION #2 on f_3
INSTCOMBINE ITERATION: Inst(end):  %x = and i32 %a, -256, !dbg !20
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x, metadata !10, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length, metadata !12, metadata !DIExpression()), !dbg !22
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ult i32 %x, %length, !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !13, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = or i32 %x, 1, !dbg !25
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = or i32 %x, 3, !dbg !28
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
INSTCOMBINE ITERATION: Inst(end):  ret void, !dbg !34
chris-worklist-bb: bb: 
entry:
  %x = and i32 %a, -256, !dbg !20
  call void @llvm.dbg.value(metadata i32 %x, metadata !9, metadata !DIExpression()), !dbg !20
  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
  call void @llvm.dbg.value(metadata i32 %length, metadata !11, metadata !DIExpression()), !dbg !21
  %chk0 = icmp ult i32 %x, %length, !dbg !23
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !23
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
  %x.inc1 = or i32 %x, 1, !dbg !25
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !25
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !26
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
  %x.inc2 = or i32 %x, 3, !dbg !28
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !28
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !29
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !31
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !32
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
  ret void, !dbg !34

chris-worklist-bb: BB: 
entry:
  %x = and i32 %a, -256, !dbg !20
  call void @llvm.dbg.value(metadata i32 %x, metadata !9, metadata !DIExpression()), !dbg !20
  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
  call void @llvm.dbg.value(metadata i32 %length, metadata !11, metadata !DIExpression()), !dbg !21
  %chk0 = icmp ult i32 %x, %length, !dbg !23
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !23
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
  %x.inc1 = or i32 %x, 1, !dbg !25
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !25
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !26
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
  %x.inc2 = or i32 %x, 3, !dbg !28
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !28
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !29
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !31
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !32
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
  ret void, !dbg !34

chris-worklist-bb: BB end:   %x = and i32 %a, -256, !dbg !20
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x, metadata !10, metadata !DIExpression()), !dbg !21
chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length, metadata !12, metadata !DIExpression()), !dbg !22
chris-worklist-bb: BB end:   %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !13, metadata !DIExpression()), !dbg !23
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-worklist-bb: BB end:   %x.inc1 = or i32 %x, 1, !dbg !25
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-worklist-bb: BB end:   %x.inc2 = or i32 %x, 3, !dbg !28
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-worklist-bb: BB end:   %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-worklist-bb: BB end:   ret void, !dbg !34
IC: ADDING: 14 instrs to worklist
chris-AddInitialGroup: I:   ret void, !dbg !34
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-AddInitialGroup: I:   %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-AddInitialGroup: I:   %x.inc2 = or i32 %x, 3, !dbg !28
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-AddInitialGroup: I:   %x.inc1 = or i32 %x, 1, !dbg !25
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-AddInitialGroup: I:   %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-AddInitialGroup: I:   %x = and i32 %a, -256, !dbg !20
RemoveOne!!!
chris-RemoveOne:   %x = and i32 %a, -256, !dbg !20
chris-RemoveOne: return I  %x = and i32 %a, -256, !dbg !20
run: WorkList:   %x = and i32 %a, -256, !dbg !20
chris-run: I=  %x = and i32 %a, -256, !dbg !20
chris-run: I-end=  %x = and i32 %a, -256, !dbg !20
IC: Visiting:   %x = and i32 %a, -256, !dbg !20
test1: I=  %x = and i32 %a, -256, !dbg !20
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
test1: I=  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-RemoveOne: return I  %chk0 = icmp ult i32 %x, %length, !dbg !23
run: WorkList:   %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-run: I=  %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-run: I-end=  %chk0 = icmp ult i32 %x, %length, !dbg !23
IC: Visiting:   %chk0 = icmp ult i32 %x, %length, !dbg !23
test1: I=  %chk0 = icmp ult i32 %x, %length, !dbg !23
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = or i32 %x, 1, !dbg !25
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
NextInst[1]   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = or i32 %x, 1, !dbg !25
chris-RemoveOne: return I  %x.inc1 = or i32 %x, 1, !dbg !25
run: WorkList:   %x.inc1 = or i32 %x, 1, !dbg !25
chris-run: I=  %x.inc1 = or i32 %x, 1, !dbg !25
chris-run: I-end=  %x.inc1 = or i32 %x, 1, !dbg !25
IC: Visiting:   %x.inc1 = or i32 %x, 1, !dbg !25
test1: I=  %x.inc1 = or i32 %x, 1, !dbg !25
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = or i32 %x, 3, !dbg !28
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
NextInst[1]   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = or i32 %x, 3, !dbg !28
chris-RemoveOne: return I  %x.inc2 = or i32 %x, 3, !dbg !28
run: WorkList:   %x.inc2 = or i32 %x, 3, !dbg !28
chris-run: I=  %x.inc2 = or i32 %x, 3, !dbg !28
chris-run: I-end=  %x.inc2 = or i32 %x, 3, !dbg !28
IC: Visiting:   %x.inc2 = or i32 %x, 3, !dbg !28
test1: I=  %x.inc2 = or i32 %x, 3, !dbg !28
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
NextInst[1]   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
chris-RemoveOne: return I  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
run: WorkList:   %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
chris-run: I=  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
chris-run: I-end=  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
IC: Visiting:   %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
test1: I=  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void, !dbg !34
 ok, break
Inst[end]:   ret void, !dbg !34
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void, !dbg !34
chris-RemoveOne: return I  ret void, !dbg !34
run: WorkList:   ret void, !dbg !34
chris-run: I=  ret void, !dbg !34
chris-run: I-end=  ret void, !dbg !34
IC: Visiting:   ret void, !dbg !34
test1: I=  ret void, !dbg !34
visit: nullptr 
test3
test4
CheckFunctionDebugify [Combine redundant instructions]: PASS
CheckFunctionDebugify [Simplify the CFG]: PASS
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, !dbg !19, !range !20
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
runOnFunction: I:  %chk0 = icmp ult i32 %x, %length, !dbg !21
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
runOnFunction: I:  %x.inc1 = add i32 %x, -1024, !dbg !23
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
runOnFunction: I:  %x.inc2 = add i32 %x, 2, !dbg !26
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
runOnFunction: I:  %x.inc3 = add i32 %x, 3, !dbg !29
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
runOnFunction: I:  ret void, !dbg !32
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ult i32 %x, %length, !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add i32 %x, -1024, !dbg !23
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add i32 %x, 2, !dbg !26
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add i32 %x, 3, !dbg !29
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(start):  ret void, !dbg !32


INSTCOMBINE ITERATION #1 on f_4
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ult i32 %x, %length, !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add i32 %x, -1024, !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add i32 %x, 2, !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add i32 %x, 3, !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(end):  ret void, !dbg !32
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ult i32 %x, %length, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add i32 %x, -1024, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add i32 %x, 2, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add i32 %x, 3, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ult i32 %x, %length, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add i32 %x, -1024, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add i32 %x, 2, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add i32 %x, 3, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, !dbg !19, !range !20
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
chris-worklist-bb: BB end:   %chk0 = icmp ult i32 %x, %length, !dbg !21
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-worklist-bb: BB end:   %x.inc1 = add i32 %x, -1024, !dbg !23
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-worklist-bb: BB end:   %x.inc2 = add i32 %x, 2, !dbg !26
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-worklist-bb: BB end:   %x.inc3 = add i32 %x, 3, !dbg !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-worklist-bb: BB end:   ret void, !dbg !32
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void, !dbg !32
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-AddInitialGroup: I:   %x.inc3 = add i32 %x, 3, !dbg !29
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-AddInitialGroup: I:   %x.inc2 = add i32 %x, 2, !dbg !26
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-AddInitialGroup: I:   %x.inc1 = add i32 %x, -1024, !dbg !23
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-AddInitialGroup: I:   %chk0 = icmp ult i32 %x, %length, !dbg !21
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, !dbg !19, !range !20
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, !dbg !19, !range !20
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, !dbg !19, !range !20
run: WorkList:   %length = load i32, i32* %length_buf, !dbg !19, !range !20
chris-run: I=  %length = load i32, i32* %length_buf, !dbg !19, !range !20
chris-run: I-end=  %length = load i32, i32* %length_buf, !dbg !19, !range !20
IC: Visiting:   %length = load i32, i32* %length_buf, !dbg !19, !range !20
test1: I=  %length = load i32, i32* %length_buf, !dbg !19, !range !20
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ult i32 %x, %length, !dbg !21
chris-RemoveOne: return I  %chk0 = icmp ult i32 %x, %length, !dbg !21
run: WorkList:   %chk0 = icmp ult i32 %x, %length, !dbg !21
chris-run: I=  %chk0 = icmp ult i32 %x, %length, !dbg !21
chris-run: I-end=  %chk0 = icmp ult i32 %x, %length, !dbg !21
IC: Visiting:   %chk0 = icmp ult i32 %x, %length, !dbg !21
test1: I=  %chk0 = icmp ult i32 %x, %length, !dbg !21
visit: has:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
test2
after visiting: Result =   %chk0 = icmp ugt i32 %length, %x, !dbg !21
after visiting: I =   %chk0 = icmp ugt i32 %length, %x, !dbg !21
IC: Mod =   %chk0 = icmp ult i32 %x, %length, !dbg !21
    New =   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-Worklist.AddUsersToWorkList 2:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-add2:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris add f
IC: ADD:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x, !dbg !21
run: WorkList:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
test1: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = add i32 %x, -1024, !dbg !23
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
NextInst[1]   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add i32 %x, -1024, !dbg !23
chris-RemoveOne: return I  %x.inc1 = add i32 %x, -1024, !dbg !23
run: WorkList:   %x.inc1 = add i32 %x, -1024, !dbg !23
chris-run: I=  %x.inc1 = add i32 %x, -1024, !dbg !23
chris-run: I-end=  %x.inc1 = add i32 %x, -1024, !dbg !23
IC: Visiting:   %x.inc1 = add i32 %x, -1024, !dbg !23
test1: I=  %x.inc1 = add i32 %x, -1024, !dbg !23
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add i32 %x, 2, !dbg !26
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
NextInst[1]   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add i32 %x, 2, !dbg !26
chris-RemoveOne: return I  %x.inc2 = add i32 %x, 2, !dbg !26
run: WorkList:   %x.inc2 = add i32 %x, 2, !dbg !26
chris-run: I=  %x.inc2 = add i32 %x, 2, !dbg !26
chris-run: I-end=  %x.inc2 = add i32 %x, 2, !dbg !26
IC: Visiting:   %x.inc2 = add i32 %x, 2, !dbg !26
test1: I=  %x.inc2 = add i32 %x, 2, !dbg !26
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add i32 %x, 3, !dbg !29
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
NextInst[1]   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add i32 %x, 3, !dbg !29
chris-RemoveOne: return I  %x.inc3 = add i32 %x, 3, !dbg !29
run: WorkList:   %x.inc3 = add i32 %x, 3, !dbg !29
chris-run: I=  %x.inc3 = add i32 %x, 3, !dbg !29
chris-run: I-end=  %x.inc3 = add i32 %x, 3, !dbg !29
IC: Visiting:   %x.inc3 = add i32 %x, 3, !dbg !29
test1: I=  %x.inc3 = add i32 %x, 3, !dbg !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void, !dbg !32
 ok, break
Inst[end]:   ret void, !dbg !32
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void, !dbg !32
chris-RemoveOne: return I  ret void, !dbg !32
run: WorkList:   ret void, !dbg !32
chris-run: I=  ret void, !dbg !32
chris-run: I-end=  ret void, !dbg !32
IC: Visiting:   ret void, !dbg !32
test1: I=  ret void, !dbg !32
visit: nullptr 
test3
test4


INSTCOMBINE ITERATION #2 on f_4
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add i32 %x, -1024, !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add i32 %x, 2, !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add i32 %x, 3, !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(end):  ret void, !dbg !32
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add i32 %x, -1024, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add i32 %x, 2, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add i32 %x, 3, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add i32 %x, -1024, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add i32 %x, 2, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add i32 %x, 3, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-worklist-bb: BB end:   %x.inc1 = add i32 %x, -1024, !dbg !23
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-worklist-bb: BB end:   %x.inc2 = add i32 %x, 2, !dbg !26
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-worklist-bb: BB end:   %x.inc3 = add i32 %x, 3, !dbg !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-worklist-bb: BB end:   ret void, !dbg !32
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void, !dbg !32
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-AddInitialGroup: I:   %x.inc3 = add i32 %x, 3, !dbg !29
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-AddInitialGroup: I:   %x.inc2 = add i32 %x, 2, !dbg !26
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-AddInitialGroup: I:   %x.inc1 = add i32 %x, -1024, !dbg !23
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
test1: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x, !dbg !21
run: WorkList:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
test1: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = add i32 %x, -1024, !dbg !23
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
NextInst[1]   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add i32 %x, -1024, !dbg !23
chris-RemoveOne: return I  %x.inc1 = add i32 %x, -1024, !dbg !23
run: WorkList:   %x.inc1 = add i32 %x, -1024, !dbg !23
chris-run: I=  %x.inc1 = add i32 %x, -1024, !dbg !23
chris-run: I-end=  %x.inc1 = add i32 %x, -1024, !dbg !23
IC: Visiting:   %x.inc1 = add i32 %x, -1024, !dbg !23
test1: I=  %x.inc1 = add i32 %x, -1024, !dbg !23
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add i32 %x, 2, !dbg !26
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
NextInst[1]   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add i32 %x, 2, !dbg !26
chris-RemoveOne: return I  %x.inc2 = add i32 %x, 2, !dbg !26
run: WorkList:   %x.inc2 = add i32 %x, 2, !dbg !26
chris-run: I=  %x.inc2 = add i32 %x, 2, !dbg !26
chris-run: I-end=  %x.inc2 = add i32 %x, 2, !dbg !26
IC: Visiting:   %x.inc2 = add i32 %x, 2, !dbg !26
test1: I=  %x.inc2 = add i32 %x, 2, !dbg !26
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add i32 %x, 3, !dbg !29
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
NextInst[1]   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add i32 %x, 3, !dbg !29
chris-RemoveOne: return I  %x.inc3 = add i32 %x, 3, !dbg !29
run: WorkList:   %x.inc3 = add i32 %x, 3, !dbg !29
chris-run: I=  %x.inc3 = add i32 %x, 3, !dbg !29
chris-run: I-end=  %x.inc3 = add i32 %x, 3, !dbg !29
IC: Visiting:   %x.inc3 = add i32 %x, 3, !dbg !29
test1: I=  %x.inc3 = add i32 %x, 3, !dbg !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void, !dbg !32
 ok, break
Inst[end]:   ret void, !dbg !32
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void, !dbg !32
chris-RemoveOne: return I  ret void, !dbg !32
run: WorkList:   ret void, !dbg !32
chris-run: I=  ret void, !dbg !32
chris-run: I-end=  ret void, !dbg !32
IC: Visiting:   ret void, !dbg !32
test1: I=  ret void, !dbg !32
visit: nullptr 
test3
test4
CheckFunctionDebugify [Combine redundant instructions]: PASS
CheckFunctionDebugify [Simplify the CFG]: PASS
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, !dbg !19, !range !20
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
runOnFunction: I:  %chk0 = icmp ult i32 %x, %length, !dbg !21
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
runOnFunction: I:  %x.inc1 = add i32 %x, 1, !dbg !23
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
runOnFunction: I:  %x.inc2 = add i32 %x.inc1, -200, !dbg !26
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
runOnFunction: I:  %x.inc3 = add i32 %x.inc2, 3, !dbg !29
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
runOnFunction: I:  ret void, !dbg !32
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ult i32 %x, %length, !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add i32 %x, 1, !dbg !23
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add i32 %x.inc1, -200, !dbg !26
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add i32 %x.inc2, 3, !dbg !29
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(start):  ret void, !dbg !32


INSTCOMBINE ITERATION #1 on f_5
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ult i32 %x, %length, !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add i32 %x, 1, !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add i32 %x.inc1, -200, !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add i32 %x.inc2, 3, !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(end):  ret void, !dbg !32
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ult i32 %x, %length, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add i32 %x, 1, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add i32 %x.inc1, -200, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add i32 %x.inc2, 3, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ult i32 %x, %length, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add i32 %x, 1, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add i32 %x.inc1, -200, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add i32 %x.inc2, 3, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, !dbg !19, !range !20
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
chris-worklist-bb: BB end:   %chk0 = icmp ult i32 %x, %length, !dbg !21
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-worklist-bb: BB end:   %x.inc1 = add i32 %x, 1, !dbg !23
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-worklist-bb: BB end:   %x.inc2 = add i32 %x.inc1, -200, !dbg !26
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-worklist-bb: BB end:   %x.inc3 = add i32 %x.inc2, 3, !dbg !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-worklist-bb: BB end:   ret void, !dbg !32
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void, !dbg !32
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-AddInitialGroup: I:   %x.inc3 = add i32 %x.inc2, 3, !dbg !29
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-AddInitialGroup: I:   %x.inc2 = add i32 %x.inc1, -200, !dbg !26
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-AddInitialGroup: I:   %x.inc1 = add i32 %x, 1, !dbg !23
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-AddInitialGroup: I:   %chk0 = icmp ult i32 %x, %length, !dbg !21
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, !dbg !19, !range !20
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, !dbg !19, !range !20
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, !dbg !19, !range !20
run: WorkList:   %length = load i32, i32* %length_buf, !dbg !19, !range !20
chris-run: I=  %length = load i32, i32* %length_buf, !dbg !19, !range !20
chris-run: I-end=  %length = load i32, i32* %length_buf, !dbg !19, !range !20
IC: Visiting:   %length = load i32, i32* %length_buf, !dbg !19, !range !20
test1: I=  %length = load i32, i32* %length_buf, !dbg !19, !range !20
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ult i32 %x, %length, !dbg !21
chris-RemoveOne: return I  %chk0 = icmp ult i32 %x, %length, !dbg !21
run: WorkList:   %chk0 = icmp ult i32 %x, %length, !dbg !21
chris-run: I=  %chk0 = icmp ult i32 %x, %length, !dbg !21
chris-run: I-end=  %chk0 = icmp ult i32 %x, %length, !dbg !21
IC: Visiting:   %chk0 = icmp ult i32 %x, %length, !dbg !21
test1: I=  %chk0 = icmp ult i32 %x, %length, !dbg !21
visit: has:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
test2
after visiting: Result =   %chk0 = icmp ugt i32 %length, %x, !dbg !21
after visiting: I =   %chk0 = icmp ugt i32 %length, %x, !dbg !21
IC: Mod =   %chk0 = icmp ult i32 %x, %length, !dbg !21
    New =   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-Worklist.AddUsersToWorkList 2:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-add2:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris add f
IC: ADD:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x, !dbg !21
run: WorkList:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
test1: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = add i32 %x, 1, !dbg !23
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
NextInst[1]   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add i32 %x, 1, !dbg !23
chris-RemoveOne: return I  %x.inc1 = add i32 %x, 1, !dbg !23
run: WorkList:   %x.inc1 = add i32 %x, 1, !dbg !23
chris-run: I=  %x.inc1 = add i32 %x, 1, !dbg !23
chris-run: I-end=  %x.inc1 = add i32 %x, 1, !dbg !23
IC: Visiting:   %x.inc1 = add i32 %x, 1, !dbg !23
test1: I=  %x.inc1 = add i32 %x, 1, !dbg !23
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add i32 %x.inc1, -200, !dbg !26
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
NextInst[1]   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add i32 %x.inc1, -200, !dbg !26
chris-RemoveOne: return I  %x.inc2 = add i32 %x.inc1, -200, !dbg !26
run: WorkList:   %x.inc2 = add i32 %x.inc1, -200, !dbg !26
chris-run: I=  %x.inc2 = add i32 %x.inc1, -200, !dbg !26
chris-run: I-end=  %x.inc2 = add i32 %x.inc1, -200, !dbg !26
IC: Visiting:   %x.inc2 = add i32 %x.inc1, -200, !dbg !26
test1: I=  %x.inc2 = add i32 %x.inc1, -200, !dbg !26
visit: has:   %x.inc2 = add i32 %x, -199, !dbg !26
test2
after visiting: Result =   %x.inc2 = add i32 %x, -199, !dbg !26
after visiting: I =   %x.inc2 = add i32 %x, -199, !dbg !26
IC: Mod =   %x.inc2 = add i32 %x.inc1, -200, !dbg !26
    New =   %x.inc2 = add i32 %x, -199, !dbg !26
chris-Worklist.AddUsersToWorkList 2:   %x.inc2 = add i32 %x, -199, !dbg !26
chris-add2:   %x.inc3 = add i32 %x.inc2, 3, !dbg !29
chris-add2:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris add f
IC: ADD:   %x.inc2 = add i32 %x, -199, !dbg !26
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add i32 %x, -199, !dbg !26
chris-RemoveOne: return I  %x.inc2 = add i32 %x, -199, !dbg !26
run: WorkList:   %x.inc2 = add i32 %x, -199, !dbg !26
chris-run: I=  %x.inc2 = add i32 %x, -199, !dbg !26
chris-run: I-end=  %x.inc2 = add i32 %x, -199, !dbg !26
IC: Visiting:   %x.inc2 = add i32 %x, -199, !dbg !26
test1: I=  %x.inc2 = add i32 %x, -199, !dbg !26
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add i32 %x.inc2, 3, !dbg !29
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
NextInst[1]   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add i32 %x.inc2, 3, !dbg !29
chris-RemoveOne: return I  %x.inc3 = add i32 %x.inc2, 3, !dbg !29
run: WorkList:   %x.inc3 = add i32 %x.inc2, 3, !dbg !29
chris-run: I=  %x.inc3 = add i32 %x.inc2, 3, !dbg !29
chris-run: I-end=  %x.inc3 = add i32 %x.inc2, 3, !dbg !29
IC: Visiting:   %x.inc3 = add i32 %x.inc2, 3, !dbg !29
test1: I=  %x.inc3 = add i32 %x.inc2, 3, !dbg !29
visit: has:   %x.inc3 = add i32 %x, -196, !dbg !29
test2
after visiting: Result =   %x.inc3 = add i32 %x, -196, !dbg !29
after visiting: I =   %x.inc3 = add i32 %x, -196, !dbg !29
IC: Mod =   %x.inc3 = add i32 %x.inc2, 3, !dbg !29
    New =   %x.inc3 = add i32 %x, -196, !dbg !29
chris-Worklist.AddUsersToWorkList 2:   %x.inc3 = add i32 %x, -196, !dbg !29
chris-add2:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris add f
IC: ADD:   %x.inc3 = add i32 %x, -196, !dbg !29
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add i32 %x, -196, !dbg !29
chris-RemoveOne: return I  %x.inc3 = add i32 %x, -196, !dbg !29
run: WorkList:   %x.inc3 = add i32 %x, -196, !dbg !29
chris-run: I=  %x.inc3 = add i32 %x, -196, !dbg !29
chris-run: I-end=  %x.inc3 = add i32 %x, -196, !dbg !29
IC: Visiting:   %x.inc3 = add i32 %x, -196, !dbg !29
test1: I=  %x.inc3 = add i32 %x, -196, !dbg !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void, !dbg !32
 ok, break
Inst[end]:   ret void, !dbg !32
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void, !dbg !32
chris-RemoveOne: return I  ret void, !dbg !32
run: WorkList:   ret void, !dbg !32
chris-run: I=  ret void, !dbg !32
chris-run: I-end=  ret void, !dbg !32
IC: Visiting:   ret void, !dbg !32
test1: I=  ret void, !dbg !32
visit: nullptr 
test3
test4


INSTCOMBINE ITERATION #2 on f_5
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add i32 %x, 1, !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add i32 %x, -199, !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add i32 %x, -196, !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(end):  ret void, !dbg !32
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add i32 %x, 1, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add i32 %x, -199, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add i32 %x, -196, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add i32 %x, 1, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add i32 %x, -199, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add i32 %x, -196, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-worklist-bb: BB end:   %x.inc1 = add i32 %x, 1, !dbg !23
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-worklist-bb: BB end:   %x.inc2 = add i32 %x, -199, !dbg !26
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-worklist-bb: BB end:   %x.inc3 = add i32 %x, -196, !dbg !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-worklist-bb: BB end:   ret void, !dbg !32
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void, !dbg !32
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-AddInitialGroup: I:   %x.inc3 = add i32 %x, -196, !dbg !29
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-AddInitialGroup: I:   %x.inc2 = add i32 %x, -199, !dbg !26
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-AddInitialGroup: I:   %x.inc1 = add i32 %x, 1, !dbg !23
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
test1: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x, !dbg !21
run: WorkList:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
test1: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = add i32 %x, 1, !dbg !23
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
NextInst[1]   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add i32 %x, 1, !dbg !23
chris-RemoveOne: return I  %x.inc1 = add i32 %x, 1, !dbg !23
run: WorkList:   %x.inc1 = add i32 %x, 1, !dbg !23
chris-run: I=  %x.inc1 = add i32 %x, 1, !dbg !23
chris-run: I-end=  %x.inc1 = add i32 %x, 1, !dbg !23
IC: Visiting:   %x.inc1 = add i32 %x, 1, !dbg !23
test1: I=  %x.inc1 = add i32 %x, 1, !dbg !23
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add i32 %x, -199, !dbg !26
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
NextInst[1]   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add i32 %x, -199, !dbg !26
chris-RemoveOne: return I  %x.inc2 = add i32 %x, -199, !dbg !26
run: WorkList:   %x.inc2 = add i32 %x, -199, !dbg !26
chris-run: I=  %x.inc2 = add i32 %x, -199, !dbg !26
chris-run: I-end=  %x.inc2 = add i32 %x, -199, !dbg !26
IC: Visiting:   %x.inc2 = add i32 %x, -199, !dbg !26
test1: I=  %x.inc2 = add i32 %x, -199, !dbg !26
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add i32 %x, -196, !dbg !29
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
NextInst[1]   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add i32 %x, -196, !dbg !29
chris-RemoveOne: return I  %x.inc3 = add i32 %x, -196, !dbg !29
run: WorkList:   %x.inc3 = add i32 %x, -196, !dbg !29
chris-run: I=  %x.inc3 = add i32 %x, -196, !dbg !29
chris-run: I-end=  %x.inc3 = add i32 %x, -196, !dbg !29
IC: Visiting:   %x.inc3 = add i32 %x, -196, !dbg !29
test1: I=  %x.inc3 = add i32 %x, -196, !dbg !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void, !dbg !32
 ok, break
Inst[end]:   ret void, !dbg !32
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void, !dbg !32
chris-RemoveOne: return I  ret void, !dbg !32
run: WorkList:   ret void, !dbg !32
chris-run: I=  ret void, !dbg !32
chris-run: I-end=  ret void, !dbg !32
IC: Visiting:   ret void, !dbg !32
test1: I=  ret void, !dbg !32
visit: nullptr 
test3
test4
CheckFunctionDebugify [Combine redundant instructions]: PASS
CheckFunctionDebugify [Simplify the CFG]: PASS
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, !dbg !19, !range !20
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
runOnFunction: I:  %chk0 = icmp ult i32 %x, %length, !dbg !21
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
runOnFunction: I:  %x.inc1 = add i32 %x, -2147483647, !dbg !23
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
runOnFunction: I:  %x.inc2 = add i32 %x, 2, !dbg !26
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
runOnFunction: I:  %x.inc3 = add i32 %x, 3, !dbg !29
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
runOnFunction: I:  ret void, !dbg !32
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ult i32 %x, %length, !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add i32 %x, -2147483647, !dbg !23
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add i32 %x, 2, !dbg !26
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add i32 %x, 3, !dbg !29
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(start):  ret void, !dbg !32


INSTCOMBINE ITERATION #1 on f_6
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ult i32 %x, %length, !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add i32 %x, -2147483647, !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add i32 %x, 2, !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add i32 %x, 3, !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(end):  ret void, !dbg !32
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ult i32 %x, %length, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add i32 %x, -2147483647, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add i32 %x, 2, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add i32 %x, 3, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ult i32 %x, %length, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add i32 %x, -2147483647, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add i32 %x, 2, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add i32 %x, 3, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, !dbg !19, !range !20
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
chris-worklist-bb: BB end:   %chk0 = icmp ult i32 %x, %length, !dbg !21
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-worklist-bb: BB end:   %x.inc1 = add i32 %x, -2147483647, !dbg !23
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-worklist-bb: BB end:   %x.inc2 = add i32 %x, 2, !dbg !26
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-worklist-bb: BB end:   %x.inc3 = add i32 %x, 3, !dbg !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-worklist-bb: BB end:   ret void, !dbg !32
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void, !dbg !32
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-AddInitialGroup: I:   %x.inc3 = add i32 %x, 3, !dbg !29
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-AddInitialGroup: I:   %x.inc2 = add i32 %x, 2, !dbg !26
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-AddInitialGroup: I:   %x.inc1 = add i32 %x, -2147483647, !dbg !23
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-AddInitialGroup: I:   %chk0 = icmp ult i32 %x, %length, !dbg !21
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, !dbg !19, !range !20
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, !dbg !19, !range !20
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, !dbg !19, !range !20
run: WorkList:   %length = load i32, i32* %length_buf, !dbg !19, !range !20
chris-run: I=  %length = load i32, i32* %length_buf, !dbg !19, !range !20
chris-run: I-end=  %length = load i32, i32* %length_buf, !dbg !19, !range !20
IC: Visiting:   %length = load i32, i32* %length_buf, !dbg !19, !range !20
test1: I=  %length = load i32, i32* %length_buf, !dbg !19, !range !20
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ult i32 %x, %length, !dbg !21
chris-RemoveOne: return I  %chk0 = icmp ult i32 %x, %length, !dbg !21
run: WorkList:   %chk0 = icmp ult i32 %x, %length, !dbg !21
chris-run: I=  %chk0 = icmp ult i32 %x, %length, !dbg !21
chris-run: I-end=  %chk0 = icmp ult i32 %x, %length, !dbg !21
IC: Visiting:   %chk0 = icmp ult i32 %x, %length, !dbg !21
test1: I=  %chk0 = icmp ult i32 %x, %length, !dbg !21
visit: has:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
test2
after visiting: Result =   %chk0 = icmp ugt i32 %length, %x, !dbg !21
after visiting: I =   %chk0 = icmp ugt i32 %length, %x, !dbg !21
IC: Mod =   %chk0 = icmp ult i32 %x, %length, !dbg !21
    New =   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-Worklist.AddUsersToWorkList 2:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-add2:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris add f
IC: ADD:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x, !dbg !21
run: WorkList:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
test1: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = add i32 %x, -2147483647, !dbg !23
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
NextInst[1]   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add i32 %x, -2147483647, !dbg !23
chris-RemoveOne: return I  %x.inc1 = add i32 %x, -2147483647, !dbg !23
run: WorkList:   %x.inc1 = add i32 %x, -2147483647, !dbg !23
chris-run: I=  %x.inc1 = add i32 %x, -2147483647, !dbg !23
chris-run: I-end=  %x.inc1 = add i32 %x, -2147483647, !dbg !23
IC: Visiting:   %x.inc1 = add i32 %x, -2147483647, !dbg !23
test1: I=  %x.inc1 = add i32 %x, -2147483647, !dbg !23
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add i32 %x, 2, !dbg !26
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
NextInst[1]   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add i32 %x, 2, !dbg !26
chris-RemoveOne: return I  %x.inc2 = add i32 %x, 2, !dbg !26
run: WorkList:   %x.inc2 = add i32 %x, 2, !dbg !26
chris-run: I=  %x.inc2 = add i32 %x, 2, !dbg !26
chris-run: I-end=  %x.inc2 = add i32 %x, 2, !dbg !26
IC: Visiting:   %x.inc2 = add i32 %x, 2, !dbg !26
test1: I=  %x.inc2 = add i32 %x, 2, !dbg !26
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add i32 %x, 3, !dbg !29
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
NextInst[1]   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add i32 %x, 3, !dbg !29
chris-RemoveOne: return I  %x.inc3 = add i32 %x, 3, !dbg !29
run: WorkList:   %x.inc3 = add i32 %x, 3, !dbg !29
chris-run: I=  %x.inc3 = add i32 %x, 3, !dbg !29
chris-run: I-end=  %x.inc3 = add i32 %x, 3, !dbg !29
IC: Visiting:   %x.inc3 = add i32 %x, 3, !dbg !29
test1: I=  %x.inc3 = add i32 %x, 3, !dbg !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void, !dbg !32
 ok, break
Inst[end]:   ret void, !dbg !32
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void, !dbg !32
chris-RemoveOne: return I  ret void, !dbg !32
run: WorkList:   ret void, !dbg !32
chris-run: I=  ret void, !dbg !32
chris-run: I-end=  ret void, !dbg !32
IC: Visiting:   ret void, !dbg !32
test1: I=  ret void, !dbg !32
visit: nullptr 
test3
test4


INSTCOMBINE ITERATION #2 on f_6
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add i32 %x, -2147483647, !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add i32 %x, 2, !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add i32 %x, 3, !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(end):  ret void, !dbg !32
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add i32 %x, -2147483647, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add i32 %x, 2, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add i32 %x, 3, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add i32 %x, -2147483647, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add i32 %x, 2, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add i32 %x, 3, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-worklist-bb: BB end:   %x.inc1 = add i32 %x, -2147483647, !dbg !23
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-worklist-bb: BB end:   %x.inc2 = add i32 %x, 2, !dbg !26
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-worklist-bb: BB end:   %x.inc3 = add i32 %x, 3, !dbg !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-worklist-bb: BB end:   ret void, !dbg !32
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void, !dbg !32
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-AddInitialGroup: I:   %x.inc3 = add i32 %x, 3, !dbg !29
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-AddInitialGroup: I:   %x.inc2 = add i32 %x, 2, !dbg !26
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-AddInitialGroup: I:   %x.inc1 = add i32 %x, -2147483647, !dbg !23
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
test1: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x, !dbg !21
run: WorkList:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
test1: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = add i32 %x, -2147483647, !dbg !23
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
NextInst[1]   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add i32 %x, -2147483647, !dbg !23
chris-RemoveOne: return I  %x.inc1 = add i32 %x, -2147483647, !dbg !23
run: WorkList:   %x.inc1 = add i32 %x, -2147483647, !dbg !23
chris-run: I=  %x.inc1 = add i32 %x, -2147483647, !dbg !23
chris-run: I-end=  %x.inc1 = add i32 %x, -2147483647, !dbg !23
IC: Visiting:   %x.inc1 = add i32 %x, -2147483647, !dbg !23
test1: I=  %x.inc1 = add i32 %x, -2147483647, !dbg !23
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add i32 %x, 2, !dbg !26
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
NextInst[1]   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add i32 %x, 2, !dbg !26
chris-RemoveOne: return I  %x.inc2 = add i32 %x, 2, !dbg !26
run: WorkList:   %x.inc2 = add i32 %x, 2, !dbg !26
chris-run: I=  %x.inc2 = add i32 %x, 2, !dbg !26
chris-run: I-end=  %x.inc2 = add i32 %x, 2, !dbg !26
IC: Visiting:   %x.inc2 = add i32 %x, 2, !dbg !26
test1: I=  %x.inc2 = add i32 %x, 2, !dbg !26
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add i32 %x, 3, !dbg !29
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
NextInst[1]   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add i32 %x, 3, !dbg !29
chris-RemoveOne: return I  %x.inc3 = add i32 %x, 3, !dbg !29
run: WorkList:   %x.inc3 = add i32 %x, 3, !dbg !29
chris-run: I=  %x.inc3 = add i32 %x, 3, !dbg !29
chris-run: I-end=  %x.inc3 = add i32 %x, 3, !dbg !29
IC: Visiting:   %x.inc3 = add i32 %x, 3, !dbg !29
test1: I=  %x.inc3 = add i32 %x, 3, !dbg !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void, !dbg !32
 ok, break
Inst[end]:   ret void, !dbg !32
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void, !dbg !32
chris-RemoveOne: return I  ret void, !dbg !32
run: WorkList:   ret void, !dbg !32
chris-run: I=  ret void, !dbg !32
chris-run: I-end=  ret void, !dbg !32
IC: Visiting:   ret void, !dbg !32
test1: I=  ret void, !dbg !32
visit: nullptr 
test3
test4
CheckFunctionDebugify [Combine redundant instructions]: PASS
CheckFunctionDebugify [Simplify the CFG]: PASS
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length_a = load volatile i32, i32* %length_buf, !dbg !28, !range !29
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %length_a, metadata !10, metadata !DIExpression()), !dbg !29
runOnFunction: I:  %length_b = load volatile i32, i32* %length_buf, !dbg !30, !range !29
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %length_b, metadata !12, metadata !DIExpression()), !dbg !30
runOnFunction: I:  %chk0.a = icmp ult i32 %x, %length_a, !dbg !31
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0.a, metadata !13, metadata !DIExpression()), !dbg !31
runOnFunction: I:  %chk0.b = icmp ult i32 %x, %length_b, !dbg !32
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0.b, metadata !15, metadata !DIExpression()), !dbg !32
runOnFunction: I:  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !16, metadata !DIExpression()), !dbg !33
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
runOnFunction: I:  %x.inc1 = add i32 %x, 1, !dbg !35
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !17, metadata !DIExpression()), !dbg !35
runOnFunction: I:  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1.a, metadata !18, metadata !DIExpression()), !dbg !36
runOnFunction: I:  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1.b, metadata !19, metadata !DIExpression()), !dbg !37
runOnFunction: I:  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !20, metadata !DIExpression()), !dbg !38
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
runOnFunction: I:  %x.inc2 = add i32 %x, 2, !dbg !40
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !21, metadata !DIExpression()), !dbg !40
runOnFunction: I:  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2.a, metadata !22, metadata !DIExpression()), !dbg !41
runOnFunction: I:  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2.b, metadata !23, metadata !DIExpression()), !dbg !42
runOnFunction: I:  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !24, metadata !DIExpression()), !dbg !43
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
runOnFunction: I:  %x.inc3 = add i32 %x, 3, !dbg !45
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !25, metadata !DIExpression()), !dbg !45
runOnFunction: I:  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3.a, metadata !26, metadata !DIExpression()), !dbg !46
runOnFunction: I:  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3.b, metadata !27, metadata !DIExpression()), !dbg !47
runOnFunction: I:  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !28, metadata !DIExpression()), !dbg !48
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
runOnFunction: I:  ret void, !dbg !50
INSTCOMBINE ITERATION: Inst(start):  %length_a = load volatile i32, i32* %length_buf, !dbg !28, !range !29
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %length_a, metadata !10, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(start):  %length_b = load volatile i32, i32* %length_buf, !dbg !30, !range !29
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %length_b, metadata !12, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(start):  %chk0.a = icmp ult i32 %x, %length_a, !dbg !31
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0.a, metadata !13, metadata !DIExpression()), !dbg !31
INSTCOMBINE ITERATION: Inst(start):  %chk0.b = icmp ult i32 %x, %length_b, !dbg !32
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0.b, metadata !15, metadata !DIExpression()), !dbg !32
INSTCOMBINE ITERATION: Inst(start):  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !16, metadata !DIExpression()), !dbg !33
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add i32 %x, 1, !dbg !35
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !17, metadata !DIExpression()), !dbg !35
INSTCOMBINE ITERATION: Inst(start):  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1.a, metadata !18, metadata !DIExpression()), !dbg !36
INSTCOMBINE ITERATION: Inst(start):  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1.b, metadata !19, metadata !DIExpression()), !dbg !37
INSTCOMBINE ITERATION: Inst(start):  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !20, metadata !DIExpression()), !dbg !38
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add i32 %x, 2, !dbg !40
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !21, metadata !DIExpression()), !dbg !40
INSTCOMBINE ITERATION: Inst(start):  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2.a, metadata !22, metadata !DIExpression()), !dbg !41
INSTCOMBINE ITERATION: Inst(start):  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2.b, metadata !23, metadata !DIExpression()), !dbg !42
INSTCOMBINE ITERATION: Inst(start):  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !24, metadata !DIExpression()), !dbg !43
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add i32 %x, 3, !dbg !45
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !25, metadata !DIExpression()), !dbg !45
INSTCOMBINE ITERATION: Inst(start):  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3.a, metadata !26, metadata !DIExpression()), !dbg !46
INSTCOMBINE ITERATION: Inst(start):  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3.b, metadata !27, metadata !DIExpression()), !dbg !47
INSTCOMBINE ITERATION: Inst(start):  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !28, metadata !DIExpression()), !dbg !48
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
INSTCOMBINE ITERATION: Inst(start):  ret void, !dbg !50


INSTCOMBINE ITERATION #1 on f_7
INSTCOMBINE ITERATION: Inst(end):  %length_a = load volatile i32, i32* %length_buf, !dbg !28, !range !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length_a, metadata !10, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(end):  %length_b = load volatile i32, i32* %length_buf, !dbg !30, !range !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length_b, metadata !12, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(end):  %chk0.a = icmp ult i32 %x, %length_a, !dbg !31
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0.a, metadata !13, metadata !DIExpression()), !dbg !31
INSTCOMBINE ITERATION: Inst(end):  %chk0.b = icmp ult i32 %x, %length_b, !dbg !32
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0.b, metadata !15, metadata !DIExpression()), !dbg !32
INSTCOMBINE ITERATION: Inst(end):  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !16, metadata !DIExpression()), !dbg !33
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add i32 %x, 1, !dbg !35
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !17, metadata !DIExpression()), !dbg !35
INSTCOMBINE ITERATION: Inst(end):  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1.a, metadata !18, metadata !DIExpression()), !dbg !36
INSTCOMBINE ITERATION: Inst(end):  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1.b, metadata !19, metadata !DIExpression()), !dbg !37
INSTCOMBINE ITERATION: Inst(end):  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !20, metadata !DIExpression()), !dbg !38
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add i32 %x, 2, !dbg !40
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !21, metadata !DIExpression()), !dbg !40
INSTCOMBINE ITERATION: Inst(end):  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2.a, metadata !22, metadata !DIExpression()), !dbg !41
INSTCOMBINE ITERATION: Inst(end):  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2.b, metadata !23, metadata !DIExpression()), !dbg !42
INSTCOMBINE ITERATION: Inst(end):  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !24, metadata !DIExpression()), !dbg !43
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add i32 %x, 3, !dbg !45
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !25, metadata !DIExpression()), !dbg !45
INSTCOMBINE ITERATION: Inst(end):  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3.a, metadata !26, metadata !DIExpression()), !dbg !46
INSTCOMBINE ITERATION: Inst(end):  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3.b, metadata !27, metadata !DIExpression()), !dbg !47
INSTCOMBINE ITERATION: Inst(end):  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !28, metadata !DIExpression()), !dbg !48
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
INSTCOMBINE ITERATION: Inst(end):  ret void, !dbg !50
chris-worklist-bb: bb: 
entry:
  %length_a = load volatile i32, i32* %length_buf, !dbg !28, !range !29
  call void @llvm.dbg.value(metadata i32 %length_a, metadata !9, metadata !DIExpression()), !dbg !28
  %length_b = load volatile i32, i32* %length_buf, !dbg !30, !range !29
  call void @llvm.dbg.value(metadata i32 %length_b, metadata !11, metadata !DIExpression()), !dbg !30
  %chk0.a = icmp ult i32 %x, %length_a, !dbg !31
  call void @llvm.dbg.value(metadata i1 %chk0.a, metadata !12, metadata !DIExpression()), !dbg !31
  %chk0.b = icmp ult i32 %x, %length_b, !dbg !32
  call void @llvm.dbg.value(metadata i1 %chk0.b, metadata !14, metadata !DIExpression()), !dbg !32
  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !15, metadata !DIExpression()), !dbg !33
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
  %x.inc1 = add i32 %x, 1, !dbg !35
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !16, metadata !DIExpression()), !dbg !35
  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
  call void @llvm.dbg.value(metadata i1 %chk1.a, metadata !17, metadata !DIExpression()), !dbg !36
  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
  call void @llvm.dbg.value(metadata i1 %chk1.b, metadata !18, metadata !DIExpression()), !dbg !37
  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !19, metadata !DIExpression()), !dbg !38
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
  %x.inc2 = add i32 %x, 2, !dbg !40
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !20, metadata !DIExpression()), !dbg !40
  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
  call void @llvm.dbg.value(metadata i1 %chk2.a, metadata !21, metadata !DIExpression()), !dbg !41
  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
  call void @llvm.dbg.value(metadata i1 %chk2.b, metadata !22, metadata !DIExpression()), !dbg !42
  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !23, metadata !DIExpression()), !dbg !43
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
  %x.inc3 = add i32 %x, 3, !dbg !45
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !24, metadata !DIExpression()), !dbg !45
  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
  call void @llvm.dbg.value(metadata i1 %chk3.a, metadata !25, metadata !DIExpression()), !dbg !46
  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
  call void @llvm.dbg.value(metadata i1 %chk3.b, metadata !26, metadata !DIExpression()), !dbg !47
  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !27, metadata !DIExpression()), !dbg !48
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
  ret void, !dbg !50

chris-worklist-bb: BB: 
entry:
  %length_a = load volatile i32, i32* %length_buf, !dbg !28, !range !29
  call void @llvm.dbg.value(metadata i32 %length_a, metadata !9, metadata !DIExpression()), !dbg !28
  %length_b = load volatile i32, i32* %length_buf, !dbg !30, !range !29
  call void @llvm.dbg.value(metadata i32 %length_b, metadata !11, metadata !DIExpression()), !dbg !30
  %chk0.a = icmp ult i32 %x, %length_a, !dbg !31
  call void @llvm.dbg.value(metadata i1 %chk0.a, metadata !12, metadata !DIExpression()), !dbg !31
  %chk0.b = icmp ult i32 %x, %length_b, !dbg !32
  call void @llvm.dbg.value(metadata i1 %chk0.b, metadata !14, metadata !DIExpression()), !dbg !32
  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !15, metadata !DIExpression()), !dbg !33
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
  %x.inc1 = add i32 %x, 1, !dbg !35
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !16, metadata !DIExpression()), !dbg !35
  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
  call void @llvm.dbg.value(metadata i1 %chk1.a, metadata !17, metadata !DIExpression()), !dbg !36
  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
  call void @llvm.dbg.value(metadata i1 %chk1.b, metadata !18, metadata !DIExpression()), !dbg !37
  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !19, metadata !DIExpression()), !dbg !38
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
  %x.inc2 = add i32 %x, 2, !dbg !40
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !20, metadata !DIExpression()), !dbg !40
  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
  call void @llvm.dbg.value(metadata i1 %chk2.a, metadata !21, metadata !DIExpression()), !dbg !41
  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
  call void @llvm.dbg.value(metadata i1 %chk2.b, metadata !22, metadata !DIExpression()), !dbg !42
  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !23, metadata !DIExpression()), !dbg !43
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
  %x.inc3 = add i32 %x, 3, !dbg !45
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !24, metadata !DIExpression()), !dbg !45
  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
  call void @llvm.dbg.value(metadata i1 %chk3.a, metadata !25, metadata !DIExpression()), !dbg !46
  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
  call void @llvm.dbg.value(metadata i1 %chk3.b, metadata !26, metadata !DIExpression()), !dbg !47
  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !27, metadata !DIExpression()), !dbg !48
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
  ret void, !dbg !50

chris-worklist-bb: BB end:   %length_a = load volatile i32, i32* %length_buf, !dbg !28, !range !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length_a, metadata !10, metadata !DIExpression()), !dbg !29
chris-worklist-bb: BB end:   %length_b = load volatile i32, i32* %length_buf, !dbg !30, !range !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length_b, metadata !12, metadata !DIExpression()), !dbg !30
chris-worklist-bb: BB end:   %chk0.a = icmp ult i32 %x, %length_a, !dbg !31
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0.a, metadata !13, metadata !DIExpression()), !dbg !31
chris-worklist-bb: BB end:   %chk0.b = icmp ult i32 %x, %length_b, !dbg !32
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0.b, metadata !15, metadata !DIExpression()), !dbg !32
chris-worklist-bb: BB end:   %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !16, metadata !DIExpression()), !dbg !33
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
chris-worklist-bb: BB end:   %x.inc1 = add i32 %x, 1, !dbg !35
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !17, metadata !DIExpression()), !dbg !35
chris-worklist-bb: BB end:   %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1.a, metadata !18, metadata !DIExpression()), !dbg !36
chris-worklist-bb: BB end:   %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1.b, metadata !19, metadata !DIExpression()), !dbg !37
chris-worklist-bb: BB end:   %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !20, metadata !DIExpression()), !dbg !38
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
chris-worklist-bb: BB end:   %x.inc2 = add i32 %x, 2, !dbg !40
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !21, metadata !DIExpression()), !dbg !40
chris-worklist-bb: BB end:   %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2.a, metadata !22, metadata !DIExpression()), !dbg !41
chris-worklist-bb: BB end:   %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2.b, metadata !23, metadata !DIExpression()), !dbg !42
chris-worklist-bb: BB end:   %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !24, metadata !DIExpression()), !dbg !43
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
chris-worklist-bb: BB end:   %x.inc3 = add i32 %x, 3, !dbg !45
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !25, metadata !DIExpression()), !dbg !45
chris-worklist-bb: BB end:   %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3.a, metadata !26, metadata !DIExpression()), !dbg !46
chris-worklist-bb: BB end:   %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3.b, metadata !27, metadata !DIExpression()), !dbg !47
chris-worklist-bb: BB end:   %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !28, metadata !DIExpression()), !dbg !48
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
chris-worklist-bb: BB end:   ret void, !dbg !50
IC: ADDING: 22 instrs to worklist
chris-AddInitialGroup: I:   ret void, !dbg !50
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
chris-AddInitialGroup: I:   %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
chris-AddInitialGroup: I:   %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
chris-AddInitialGroup: I:   %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
chris-AddInitialGroup: I:   %x.inc3 = add i32 %x, 3, !dbg !45
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
chris-AddInitialGroup: I:   %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
chris-AddInitialGroup: I:   %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
chris-AddInitialGroup: I:   %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
chris-AddInitialGroup: I:   %x.inc2 = add i32 %x, 2, !dbg !40
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
chris-AddInitialGroup: I:   %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
chris-AddInitialGroup: I:   %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
chris-AddInitialGroup: I:   %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
chris-AddInitialGroup: I:   %x.inc1 = add i32 %x, 1, !dbg !35
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
chris-AddInitialGroup: I:   %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
chris-AddInitialGroup: I:   %chk0.b = icmp ult i32 %x, %length_b, !dbg !32
chris-AddInitialGroup: I:   %chk0.a = icmp ult i32 %x, %length_a, !dbg !31
chris-AddInitialGroup: I:   %length_b = load volatile i32, i32* %length_buf, !dbg !30, !range !29
chris-AddInitialGroup: I:   %length_a = load volatile i32, i32* %length_buf, !dbg !28, !range !29
RemoveOne!!!
chris-RemoveOne:   %length_a = load volatile i32, i32* %length_buf, !dbg !28, !range !29
chris-RemoveOne: return I  %length_a = load volatile i32, i32* %length_buf, !dbg !28, !range !29
run: WorkList:   %length_a = load volatile i32, i32* %length_buf, !dbg !28, !range !29
chris-run: I=  %length_a = load volatile i32, i32* %length_buf, !dbg !28, !range !29
chris-run: I-end=  %length_a = load volatile i32, i32* %length_buf, !dbg !28, !range !29
IC: Visiting:   %length_a = load volatile i32, i32* %length_buf, !dbg !28, !range !29
test1: I=  %length_a = load volatile i32, i32* %length_buf, !dbg !28, !range !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %length_b = load volatile i32, i32* %length_buf, !dbg !30, !range !29
chris-RemoveOne: return I  %length_b = load volatile i32, i32* %length_buf, !dbg !30, !range !29
run: WorkList:   %length_b = load volatile i32, i32* %length_buf, !dbg !30, !range !29
chris-run: I=  %length_b = load volatile i32, i32* %length_buf, !dbg !30, !range !29
chris-run: I-end=  %length_b = load volatile i32, i32* %length_buf, !dbg !30, !range !29
IC: Visiting:   %length_b = load volatile i32, i32* %length_buf, !dbg !30, !range !29
test1: I=  %length_b = load volatile i32, i32* %length_buf, !dbg !30, !range !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0.a = icmp ult i32 %x, %length_a, !dbg !31
chris-RemoveOne: return I  %chk0.a = icmp ult i32 %x, %length_a, !dbg !31
run: WorkList:   %chk0.a = icmp ult i32 %x, %length_a, !dbg !31
chris-run: I=  %chk0.a = icmp ult i32 %x, %length_a, !dbg !31
chris-run: I-end=  %chk0.a = icmp ult i32 %x, %length_a, !dbg !31
IC: Visiting:   %chk0.a = icmp ult i32 %x, %length_a, !dbg !31
test1: I=  %chk0.a = icmp ult i32 %x, %length_a, !dbg !31
visit: has:   %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
test2
after visiting: Result =   %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
after visiting: I =   %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
IC: Mod =   %chk0.a = icmp ult i32 %x, %length_a, !dbg !31
    New =   %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
chris-Worklist.AddUsersToWorkList 2:   %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
chris-add2:   %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
chris add f
IC: ADD:   %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
test3
RemoveOne!!!
chris-RemoveOne:   %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
chris-RemoveOne: return I  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
run: WorkList:   %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
chris-run: I=  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
chris-run: I-end=  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
IC: Visiting:   %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
test1: I=  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0.b = icmp ult i32 %x, %length_b, !dbg !32
chris-RemoveOne: return I  %chk0.b = icmp ult i32 %x, %length_b, !dbg !32
run: WorkList:   %chk0.b = icmp ult i32 %x, %length_b, !dbg !32
chris-run: I=  %chk0.b = icmp ult i32 %x, %length_b, !dbg !32
chris-run: I-end=  %chk0.b = icmp ult i32 %x, %length_b, !dbg !32
IC: Visiting:   %chk0.b = icmp ult i32 %x, %length_b, !dbg !32
test1: I=  %chk0.b = icmp ult i32 %x, %length_b, !dbg !32
visit: has:   %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
test2
after visiting: Result =   %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
after visiting: I =   %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
IC: Mod =   %chk0.b = icmp ult i32 %x, %length_b, !dbg !32
    New =   %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
chris-Worklist.AddUsersToWorkList 2:   %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
chris-add2:   %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
chris add f
IC: ADD:   %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
test3
RemoveOne!!!
chris-RemoveOne:   %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
chris-RemoveOne: return I  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
run: WorkList:   %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
chris-run: I=  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
chris-run: I-end=  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
IC: Visiting:   %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
test1: I=  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
chris-RemoveOne: return I  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
run: WorkList:   %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
chris-run: I=  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
chris-run: I-end=  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
IC: Visiting:   %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
test1: I=  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = add i32 %x, 1, !dbg !35
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !17, metadata !DIExpression()), !dbg !35
NextInst[1]   %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk1.a, metadata !18, metadata !DIExpression()), !dbg !36
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk1.a, metadata !18, metadata !DIExpression()), !dbg !36
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add i32 %x, 1, !dbg !35
chris-RemoveOne: return I  %x.inc1 = add i32 %x, 1, !dbg !35
run: WorkList:   %x.inc1 = add i32 %x, 1, !dbg !35
chris-run: I=  %x.inc1 = add i32 %x, 1, !dbg !35
chris-run: I-end=  %x.inc1 = add i32 %x, 1, !dbg !35
IC: Visiting:   %x.inc1 = add i32 %x, 1, !dbg !35
test1: I=  %x.inc1 = add i32 %x, 1, !dbg !35
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
chris-RemoveOne: return I  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
run: WorkList:   %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
chris-run: I=  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
chris-run: I-end=  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
IC: Visiting:   %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
test1: I=  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
chris-RemoveOne: return I  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
run: WorkList:   %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
chris-run: I=  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
chris-run: I-end=  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
IC: Visiting:   %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
test1: I=  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
chris-RemoveOne: return I  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
run: WorkList:   %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
chris-run: I=  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
chris-run: I-end=  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
IC: Visiting:   %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
test1: I=  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add i32 %x, 2, !dbg !40
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !21, metadata !DIExpression()), !dbg !40
NextInst[1]   %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk2.a, metadata !22, metadata !DIExpression()), !dbg !41
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk2.a, metadata !22, metadata !DIExpression()), !dbg !41
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add i32 %x, 2, !dbg !40
chris-RemoveOne: return I  %x.inc2 = add i32 %x, 2, !dbg !40
run: WorkList:   %x.inc2 = add i32 %x, 2, !dbg !40
chris-run: I=  %x.inc2 = add i32 %x, 2, !dbg !40
chris-run: I-end=  %x.inc2 = add i32 %x, 2, !dbg !40
IC: Visiting:   %x.inc2 = add i32 %x, 2, !dbg !40
test1: I=  %x.inc2 = add i32 %x, 2, !dbg !40
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
chris-RemoveOne: return I  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
run: WorkList:   %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
chris-run: I=  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
chris-run: I-end=  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
IC: Visiting:   %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
test1: I=  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
chris-RemoveOne: return I  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
run: WorkList:   %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
chris-run: I=  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
chris-run: I-end=  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
IC: Visiting:   %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
test1: I=  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
chris-RemoveOne: return I  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
run: WorkList:   %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
chris-run: I=  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
chris-run: I-end=  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
IC: Visiting:   %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
test1: I=  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add i32 %x, 3, !dbg !45
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !25, metadata !DIExpression()), !dbg !45
NextInst[1]   %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk3.a, metadata !26, metadata !DIExpression()), !dbg !46
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk3.a, metadata !26, metadata !DIExpression()), !dbg !46
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add i32 %x, 3, !dbg !45
chris-RemoveOne: return I  %x.inc3 = add i32 %x, 3, !dbg !45
run: WorkList:   %x.inc3 = add i32 %x, 3, !dbg !45
chris-run: I=  %x.inc3 = add i32 %x, 3, !dbg !45
chris-run: I-end=  %x.inc3 = add i32 %x, 3, !dbg !45
IC: Visiting:   %x.inc3 = add i32 %x, 3, !dbg !45
test1: I=  %x.inc3 = add i32 %x, 3, !dbg !45
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
chris-RemoveOne: return I  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
run: WorkList:   %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
chris-run: I=  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
chris-run: I-end=  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
IC: Visiting:   %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
test1: I=  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
chris-RemoveOne: return I  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
run: WorkList:   %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
chris-run: I=  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
chris-run: I-end=  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
IC: Visiting:   %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
test1: I=  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
chris-RemoveOne: return I  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
run: WorkList:   %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
chris-run: I=  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
chris-run: I-end=  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
IC: Visiting:   %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
test1: I=  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void, !dbg !50
 ok, break
Inst[end]:   ret void, !dbg !50
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void, !dbg !50
chris-RemoveOne: return I  ret void, !dbg !50
run: WorkList:   ret void, !dbg !50
chris-run: I=  ret void, !dbg !50
chris-run: I-end=  ret void, !dbg !50
IC: Visiting:   ret void, !dbg !50
test1: I=  ret void, !dbg !50
visit: nullptr 
test3
test4


INSTCOMBINE ITERATION #2 on f_7
INSTCOMBINE ITERATION: Inst(end):  %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length_a, metadata !10, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(end):  %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length_b, metadata !12, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(end):  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0.a, metadata !13, metadata !DIExpression()), !dbg !31
INSTCOMBINE ITERATION: Inst(end):  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0.b, metadata !15, metadata !DIExpression()), !dbg !32
INSTCOMBINE ITERATION: Inst(end):  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !16, metadata !DIExpression()), !dbg !33
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add i32 %x, 1, !dbg !35
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !17, metadata !DIExpression()), !dbg !35
INSTCOMBINE ITERATION: Inst(end):  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1.a, metadata !18, metadata !DIExpression()), !dbg !36
INSTCOMBINE ITERATION: Inst(end):  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1.b, metadata !19, metadata !DIExpression()), !dbg !37
INSTCOMBINE ITERATION: Inst(end):  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !20, metadata !DIExpression()), !dbg !38
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add i32 %x, 2, !dbg !40
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !21, metadata !DIExpression()), !dbg !40
INSTCOMBINE ITERATION: Inst(end):  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2.a, metadata !22, metadata !DIExpression()), !dbg !41
INSTCOMBINE ITERATION: Inst(end):  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2.b, metadata !23, metadata !DIExpression()), !dbg !42
INSTCOMBINE ITERATION: Inst(end):  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !24, metadata !DIExpression()), !dbg !43
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add i32 %x, 3, !dbg !45
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !25, metadata !DIExpression()), !dbg !45
INSTCOMBINE ITERATION: Inst(end):  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3.a, metadata !26, metadata !DIExpression()), !dbg !46
INSTCOMBINE ITERATION: Inst(end):  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3.b, metadata !27, metadata !DIExpression()), !dbg !47
INSTCOMBINE ITERATION: Inst(end):  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !28, metadata !DIExpression()), !dbg !48
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
INSTCOMBINE ITERATION: Inst(end):  ret void, !dbg !50
chris-worklist-bb: bb: 
entry:
  %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
  call void @llvm.dbg.value(metadata i32 %length_a, metadata !9, metadata !DIExpression()), !dbg !28
  %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
  call void @llvm.dbg.value(metadata i32 %length_b, metadata !11, metadata !DIExpression()), !dbg !30
  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
  call void @llvm.dbg.value(metadata i1 %chk0.a, metadata !12, metadata !DIExpression()), !dbg !31
  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
  call void @llvm.dbg.value(metadata i1 %chk0.b, metadata !14, metadata !DIExpression()), !dbg !32
  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !15, metadata !DIExpression()), !dbg !33
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
  %x.inc1 = add i32 %x, 1, !dbg !35
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !16, metadata !DIExpression()), !dbg !35
  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
  call void @llvm.dbg.value(metadata i1 %chk1.a, metadata !17, metadata !DIExpression()), !dbg !36
  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
  call void @llvm.dbg.value(metadata i1 %chk1.b, metadata !18, metadata !DIExpression()), !dbg !37
  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !19, metadata !DIExpression()), !dbg !38
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
  %x.inc2 = add i32 %x, 2, !dbg !40
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !20, metadata !DIExpression()), !dbg !40
  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
  call void @llvm.dbg.value(metadata i1 %chk2.a, metadata !21, metadata !DIExpression()), !dbg !41
  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
  call void @llvm.dbg.value(metadata i1 %chk2.b, metadata !22, metadata !DIExpression()), !dbg !42
  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !23, metadata !DIExpression()), !dbg !43
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
  %x.inc3 = add i32 %x, 3, !dbg !45
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !24, metadata !DIExpression()), !dbg !45
  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
  call void @llvm.dbg.value(metadata i1 %chk3.a, metadata !25, metadata !DIExpression()), !dbg !46
  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
  call void @llvm.dbg.value(metadata i1 %chk3.b, metadata !26, metadata !DIExpression()), !dbg !47
  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !27, metadata !DIExpression()), !dbg !48
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
  ret void, !dbg !50

chris-worklist-bb: BB: 
entry:
  %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
  call void @llvm.dbg.value(metadata i32 %length_a, metadata !9, metadata !DIExpression()), !dbg !28
  %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
  call void @llvm.dbg.value(metadata i32 %length_b, metadata !11, metadata !DIExpression()), !dbg !30
  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
  call void @llvm.dbg.value(metadata i1 %chk0.a, metadata !12, metadata !DIExpression()), !dbg !31
  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
  call void @llvm.dbg.value(metadata i1 %chk0.b, metadata !14, metadata !DIExpression()), !dbg !32
  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !15, metadata !DIExpression()), !dbg !33
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
  %x.inc1 = add i32 %x, 1, !dbg !35
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !16, metadata !DIExpression()), !dbg !35
  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
  call void @llvm.dbg.value(metadata i1 %chk1.a, metadata !17, metadata !DIExpression()), !dbg !36
  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
  call void @llvm.dbg.value(metadata i1 %chk1.b, metadata !18, metadata !DIExpression()), !dbg !37
  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !19, metadata !DIExpression()), !dbg !38
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
  %x.inc2 = add i32 %x, 2, !dbg !40
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !20, metadata !DIExpression()), !dbg !40
  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
  call void @llvm.dbg.value(metadata i1 %chk2.a, metadata !21, metadata !DIExpression()), !dbg !41
  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
  call void @llvm.dbg.value(metadata i1 %chk2.b, metadata !22, metadata !DIExpression()), !dbg !42
  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !23, metadata !DIExpression()), !dbg !43
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
  %x.inc3 = add i32 %x, 3, !dbg !45
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !24, metadata !DIExpression()), !dbg !45
  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
  call void @llvm.dbg.value(metadata i1 %chk3.a, metadata !25, metadata !DIExpression()), !dbg !46
  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
  call void @llvm.dbg.value(metadata i1 %chk3.b, metadata !26, metadata !DIExpression()), !dbg !47
  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !27, metadata !DIExpression()), !dbg !48
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
  ret void, !dbg !50

chris-worklist-bb: BB end:   %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length_a, metadata !10, metadata !DIExpression()), !dbg !29
chris-worklist-bb: BB end:   %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length_b, metadata !12, metadata !DIExpression()), !dbg !30
chris-worklist-bb: BB end:   %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0.a, metadata !13, metadata !DIExpression()), !dbg !31
chris-worklist-bb: BB end:   %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0.b, metadata !15, metadata !DIExpression()), !dbg !32
chris-worklist-bb: BB end:   %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !16, metadata !DIExpression()), !dbg !33
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
chris-worklist-bb: BB end:   %x.inc1 = add i32 %x, 1, !dbg !35
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !17, metadata !DIExpression()), !dbg !35
chris-worklist-bb: BB end:   %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1.a, metadata !18, metadata !DIExpression()), !dbg !36
chris-worklist-bb: BB end:   %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1.b, metadata !19, metadata !DIExpression()), !dbg !37
chris-worklist-bb: BB end:   %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !20, metadata !DIExpression()), !dbg !38
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
chris-worklist-bb: BB end:   %x.inc2 = add i32 %x, 2, !dbg !40
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !21, metadata !DIExpression()), !dbg !40
chris-worklist-bb: BB end:   %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2.a, metadata !22, metadata !DIExpression()), !dbg !41
chris-worklist-bb: BB end:   %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2.b, metadata !23, metadata !DIExpression()), !dbg !42
chris-worklist-bb: BB end:   %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !24, metadata !DIExpression()), !dbg !43
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
chris-worklist-bb: BB end:   %x.inc3 = add i32 %x, 3, !dbg !45
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !25, metadata !DIExpression()), !dbg !45
chris-worklist-bb: BB end:   %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3.a, metadata !26, metadata !DIExpression()), !dbg !46
chris-worklist-bb: BB end:   %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3.b, metadata !27, metadata !DIExpression()), !dbg !47
chris-worklist-bb: BB end:   %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !28, metadata !DIExpression()), !dbg !48
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
chris-worklist-bb: BB end:   ret void, !dbg !50
IC: ADDING: 22 instrs to worklist
chris-AddInitialGroup: I:   ret void, !dbg !50
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
chris-AddInitialGroup: I:   %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
chris-AddInitialGroup: I:   %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
chris-AddInitialGroup: I:   %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
chris-AddInitialGroup: I:   %x.inc3 = add i32 %x, 3, !dbg !45
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
chris-AddInitialGroup: I:   %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
chris-AddInitialGroup: I:   %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
chris-AddInitialGroup: I:   %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
chris-AddInitialGroup: I:   %x.inc2 = add i32 %x, 2, !dbg !40
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
chris-AddInitialGroup: I:   %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
chris-AddInitialGroup: I:   %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
chris-AddInitialGroup: I:   %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
chris-AddInitialGroup: I:   %x.inc1 = add i32 %x, 1, !dbg !35
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
chris-AddInitialGroup: I:   %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
chris-AddInitialGroup: I:   %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
chris-AddInitialGroup: I:   %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
chris-AddInitialGroup: I:   %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
chris-AddInitialGroup: I:   %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
RemoveOne!!!
chris-RemoveOne:   %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
chris-RemoveOne: return I  %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
run: WorkList:   %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
chris-run: I=  %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
chris-run: I-end=  %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
IC: Visiting:   %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
test1: I=  %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
chris-RemoveOne: return I  %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
run: WorkList:   %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
chris-run: I=  %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
chris-run: I-end=  %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
IC: Visiting:   %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
test1: I=  %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
chris-RemoveOne: return I  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
run: WorkList:   %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
chris-run: I=  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
chris-run: I-end=  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
IC: Visiting:   %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
test1: I=  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
chris-RemoveOne: return I  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
run: WorkList:   %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
chris-run: I=  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
chris-run: I-end=  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
IC: Visiting:   %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
test1: I=  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
chris-RemoveOne: return I  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
run: WorkList:   %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
chris-run: I=  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
chris-run: I-end=  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
IC: Visiting:   %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
test1: I=  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = add i32 %x, 1, !dbg !35
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !17, metadata !DIExpression()), !dbg !35
NextInst[1]   %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk1.a, metadata !18, metadata !DIExpression()), !dbg !36
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk1.a, metadata !18, metadata !DIExpression()), !dbg !36
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add i32 %x, 1, !dbg !35
chris-RemoveOne: return I  %x.inc1 = add i32 %x, 1, !dbg !35
run: WorkList:   %x.inc1 = add i32 %x, 1, !dbg !35
chris-run: I=  %x.inc1 = add i32 %x, 1, !dbg !35
chris-run: I-end=  %x.inc1 = add i32 %x, 1, !dbg !35
IC: Visiting:   %x.inc1 = add i32 %x, 1, !dbg !35
test1: I=  %x.inc1 = add i32 %x, 1, !dbg !35
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
chris-RemoveOne: return I  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
run: WorkList:   %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
chris-run: I=  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
chris-run: I-end=  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
IC: Visiting:   %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
test1: I=  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
chris-RemoveOne: return I  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
run: WorkList:   %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
chris-run: I=  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
chris-run: I-end=  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
IC: Visiting:   %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
test1: I=  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
chris-RemoveOne: return I  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
run: WorkList:   %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
chris-run: I=  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
chris-run: I-end=  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
IC: Visiting:   %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
test1: I=  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add i32 %x, 2, !dbg !40
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !21, metadata !DIExpression()), !dbg !40
NextInst[1]   %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk2.a, metadata !22, metadata !DIExpression()), !dbg !41
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk2.a, metadata !22, metadata !DIExpression()), !dbg !41
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add i32 %x, 2, !dbg !40
chris-RemoveOne: return I  %x.inc2 = add i32 %x, 2, !dbg !40
run: WorkList:   %x.inc2 = add i32 %x, 2, !dbg !40
chris-run: I=  %x.inc2 = add i32 %x, 2, !dbg !40
chris-run: I-end=  %x.inc2 = add i32 %x, 2, !dbg !40
IC: Visiting:   %x.inc2 = add i32 %x, 2, !dbg !40
test1: I=  %x.inc2 = add i32 %x, 2, !dbg !40
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
chris-RemoveOne: return I  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
run: WorkList:   %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
chris-run: I=  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
chris-run: I-end=  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
IC: Visiting:   %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
test1: I=  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
chris-RemoveOne: return I  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
run: WorkList:   %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
chris-run: I=  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
chris-run: I-end=  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
IC: Visiting:   %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
test1: I=  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
chris-RemoveOne: return I  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
run: WorkList:   %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
chris-run: I=  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
chris-run: I-end=  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
IC: Visiting:   %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
test1: I=  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add i32 %x, 3, !dbg !45
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !25, metadata !DIExpression()), !dbg !45
NextInst[1]   %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk3.a, metadata !26, metadata !DIExpression()), !dbg !46
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk3.a, metadata !26, metadata !DIExpression()), !dbg !46
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add i32 %x, 3, !dbg !45
chris-RemoveOne: return I  %x.inc3 = add i32 %x, 3, !dbg !45
run: WorkList:   %x.inc3 = add i32 %x, 3, !dbg !45
chris-run: I=  %x.inc3 = add i32 %x, 3, !dbg !45
chris-run: I-end=  %x.inc3 = add i32 %x, 3, !dbg !45
IC: Visiting:   %x.inc3 = add i32 %x, 3, !dbg !45
test1: I=  %x.inc3 = add i32 %x, 3, !dbg !45
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
chris-RemoveOne: return I  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
run: WorkList:   %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
chris-run: I=  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
chris-run: I-end=  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
IC: Visiting:   %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
test1: I=  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
chris-RemoveOne: return I  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
run: WorkList:   %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
chris-run: I=  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
chris-run: I-end=  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
IC: Visiting:   %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
test1: I=  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
chris-RemoveOne: return I  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
run: WorkList:   %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
chris-run: I=  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
chris-run: I-end=  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
IC: Visiting:   %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
test1: I=  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void, !dbg !50
 ok, break
Inst[end]:   ret void, !dbg !50
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void, !dbg !50
chris-RemoveOne: return I  ret void, !dbg !50
run: WorkList:   ret void, !dbg !50
chris-run: I=  ret void, !dbg !50
chris-run: I-end=  ret void, !dbg !50
IC: Visiting:   ret void, !dbg !50
test1: I=  ret void, !dbg !50
visit: nullptr 
test3
test4
CheckFunctionDebugify [Combine redundant instructions]: PASS
CheckFunctionDebugify [Simplify the CFG]: PASS
CheckModuleDebugify [Globals Alias Analysis]: PASS
CheckFunctionDebugify [SROA]: PASS
CheckFunctionDebugify [Early CSE w/ MemorySSA]: PASS
CheckFunctionDebugify [Speculatively execute instructions if target has divergent branches]: PASS
CheckFunctionDebugify [Jump Threading]: PASS
CheckFunctionDebugify [Value Propagation]: PASS
CheckFunctionDebugify [Simplify the CFG]: PASS
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
runOnFunction: I:  %chk0 = icmp ugt i32 %length, %x, !dbg !21
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
runOnFunction: I:  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
runOnFunction: I:  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
runOnFunction: I:  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
runOnFunction: I:  ret void, !dbg !32
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(start):  ret void, !dbg !32


INSTCOMBINE ITERATION #1 on f_0
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(end):  ret void, !dbg !32
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-worklist-bb: BB end:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-worklist-bb: BB end:   %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-worklist-bb: BB end:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-worklist-bb: BB end:   ret void, !dbg !32
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void, !dbg !32
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-AddInitialGroup: I:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-AddInitialGroup: I:   %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-AddInitialGroup: I:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
test1: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x, !dbg !21
run: WorkList:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
test1: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
NextInst[1]   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-RemoveOne: return I  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
run: WorkList:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-run: I=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-run: I-end=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
IC: Visiting:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
test1: I=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
NextInst[1]   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
chris-RemoveOne: return I  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
run: WorkList:   %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
chris-run: I=  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
chris-run: I-end=  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
IC: Visiting:   %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
test1: I=  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
NextInst[1]   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
chris-RemoveOne: return I  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
run: WorkList:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
chris-run: I=  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
chris-run: I-end=  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
IC: Visiting:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
test1: I=  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void, !dbg !32
 ok, break
Inst[end]:   ret void, !dbg !32
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void, !dbg !32
chris-RemoveOne: return I  ret void, !dbg !32
run: WorkList:   ret void, !dbg !32
chris-run: I=  ret void, !dbg !32
chris-run: I-end=  ret void, !dbg !32
IC: Visiting:   ret void, !dbg !32
test1: I=  ret void, !dbg !32
visit: nullptr 
test3
test4
CheckFunctionDebugify [Combine redundant instructions]: PASS
CheckFunctionDebugify [Conditionally eliminate dead library calls]: PASS
CheckFunctionDebugify [PGOMemOPSize]: PASS
CheckFunctionDebugify [Tail Call Elimination]: PASS
CheckFunctionDebugify [Simplify the CFG]: PASS
CheckFunctionDebugify [Reassociate expressions]: PASS
CheckFunctionDebugify [Simplify the CFG]: PASS
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
runOnFunction: I:  %chk0 = icmp ugt i32 %length, %x, !dbg !21
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
runOnFunction: I:  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
runOnFunction: I:  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
runOnFunction: I:  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
runOnFunction: I:  ret void, !dbg !32
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(start):  ret void, !dbg !32


INSTCOMBINE ITERATION #1 on f_0
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(end):  ret void, !dbg !32
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-worklist-bb: BB end:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-worklist-bb: BB end:   %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-worklist-bb: BB end:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-worklist-bb: BB end:   ret void, !dbg !32
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void, !dbg !32
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-AddInitialGroup: I:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-AddInitialGroup: I:   %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-AddInitialGroup: I:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
test1: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x, !dbg !21
run: WorkList:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
test1: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
NextInst[1]   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-RemoveOne: return I  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
run: WorkList:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-run: I=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-run: I-end=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
IC: Visiting:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
test1: I=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
NextInst[1]   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
chris-RemoveOne: return I  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
run: WorkList:   %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
chris-run: I=  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
chris-run: I-end=  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
IC: Visiting:   %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
test1: I=  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
NextInst[1]   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
chris-RemoveOne: return I  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
run: WorkList:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
chris-run: I=  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
chris-run: I-end=  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
IC: Visiting:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
test1: I=  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void, !dbg !32
 ok, break
Inst[end]:   ret void, !dbg !32
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void, !dbg !32
chris-RemoveOne: return I  ret void, !dbg !32
run: WorkList:   ret void, !dbg !32
chris-run: I=  ret void, !dbg !32
chris-run: I-end=  ret void, !dbg !32
IC: Visiting:   ret void, !dbg !32
test1: I=  ret void, !dbg !32
visit: nullptr 
test3
test4
CheckFunctionDebugify [Combine redundant instructions]: PASS
CheckFunctionDebugify [MemCpy Optimization]: PASS
CheckFunctionDebugify [Sparse Conditional Constant Propagation]: PASS
CheckFunctionDebugify [Bit-Tracking Dead Code Elimination]: PASS
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
runOnFunction: I:  %chk0 = icmp ugt i32 %length, %x, !dbg !21
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
runOnFunction: I:  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
runOnFunction: I:  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
runOnFunction: I:  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
runOnFunction: I:  ret void, !dbg !32
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(start):  ret void, !dbg !32


INSTCOMBINE ITERATION #1 on f_0
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(end):  ret void, !dbg !32
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-worklist-bb: BB end:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-worklist-bb: BB end:   %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-worklist-bb: BB end:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-worklist-bb: BB end:   ret void, !dbg !32
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void, !dbg !32
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-AddInitialGroup: I:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-AddInitialGroup: I:   %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-AddInitialGroup: I:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
test1: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x, !dbg !21
run: WorkList:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
test1: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
NextInst[1]   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-RemoveOne: return I  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
run: WorkList:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-run: I=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-run: I-end=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
IC: Visiting:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
test1: I=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
NextInst[1]   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
chris-RemoveOne: return I  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
run: WorkList:   %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
chris-run: I=  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
chris-run: I-end=  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
IC: Visiting:   %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
test1: I=  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
NextInst[1]   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
chris-RemoveOne: return I  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
run: WorkList:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
chris-run: I=  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
chris-run: I-end=  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
IC: Visiting:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
test1: I=  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void, !dbg !32
 ok, break
Inst[end]:   ret void, !dbg !32
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void, !dbg !32
chris-RemoveOne: return I  ret void, !dbg !32
run: WorkList:   ret void, !dbg !32
chris-run: I=  ret void, !dbg !32
chris-run: I-end=  ret void, !dbg !32
IC: Visiting:   ret void, !dbg !32
test1: I=  ret void, !dbg !32
visit: nullptr 
test3
test4
CheckFunctionDebugify [Combine redundant instructions]: PASS
CheckFunctionDebugify [Jump Threading]: PASS
CheckFunctionDebugify [Value Propagation]: PASS
CheckFunctionDebugify [Dead Store Elimination]: PASS
CheckFunctionDebugify [Aggressive Dead Code Elimination]: PASS
CheckFunctionDebugify [Simplify the CFG]: PASS
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
runOnFunction: I:  %chk0 = icmp ugt i32 %length, %x, !dbg !21
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
runOnFunction: I:  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
runOnFunction: I:  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
runOnFunction: I:  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
runOnFunction: I:  ret void, !dbg !32
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(start):  ret void, !dbg !32


INSTCOMBINE ITERATION #1 on f_0
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(end):  ret void, !dbg !32
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-worklist-bb: BB end:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-worklist-bb: BB end:   %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-worklist-bb: BB end:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-worklist-bb: BB end:   ret void, !dbg !32
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void, !dbg !32
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-AddInitialGroup: I:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-AddInitialGroup: I:   %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-AddInitialGroup: I:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
test1: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x, !dbg !21
run: WorkList:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
test1: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
NextInst[1]   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-RemoveOne: return I  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
run: WorkList:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-run: I=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-run: I-end=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
IC: Visiting:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
test1: I=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
NextInst[1]   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
chris-RemoveOne: return I  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
run: WorkList:   %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
chris-run: I=  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
chris-run: I-end=  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
IC: Visiting:   %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
test1: I=  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
NextInst[1]   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
chris-RemoveOne: return I  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
run: WorkList:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
chris-run: I=  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
chris-run: I-end=  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
IC: Visiting:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
test1: I=  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void, !dbg !32
 ok, break
Inst[end]:   ret void, !dbg !32
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void, !dbg !32
chris-RemoveOne: return I  ret void, !dbg !32
run: WorkList:   ret void, !dbg !32
chris-run: I=  ret void, !dbg !32
chris-run: I-end=  ret void, !dbg !32
IC: Visiting:   ret void, !dbg !32
test1: I=  ret void, !dbg !32
visit: nullptr 
test3
test4
CheckFunctionDebugify [Combine redundant instructions]: PASS
CheckFunctionDebugify [SROA]: PASS
CheckFunctionDebugify [Early CSE w/ MemorySSA]: PASS
CheckFunctionDebugify [Speculatively execute instructions if target has divergent branches]: PASS
CheckFunctionDebugify [Jump Threading]: PASS
CheckFunctionDebugify [Value Propagation]: PASS
CheckFunctionDebugify [Simplify the CFG]: PASS
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
runOnFunction: I:  %chk0 = icmp ugt i32 %length, %x, !dbg !21
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
runOnFunction: I:  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
runOnFunction: I:  %x.inc2 = add nuw i32 %x, 3, !dbg !26
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
runOnFunction: I:  %x.inc3 = add nuw i32 %x, 6, !dbg !29
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
runOnFunction: I:  ret void, !dbg !32
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add nuw i32 %x, 3, !dbg !26
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw i32 %x, 6, !dbg !29
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(start):  ret void, !dbg !32


INSTCOMBINE ITERATION #1 on f_1
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add nuw i32 %x, 3, !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw i32 %x, 6, !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(end):  ret void, !dbg !32
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add nuw i32 %x, 3, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add nuw i32 %x, 6, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add nuw i32 %x, 3, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add nuw i32 %x, 6, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-worklist-bb: BB end:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-worklist-bb: BB end:   %x.inc2 = add nuw i32 %x, 3, !dbg !26
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-worklist-bb: BB end:   %x.inc3 = add nuw i32 %x, 6, !dbg !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-worklist-bb: BB end:   ret void, !dbg !32
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void, !dbg !32
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-AddInitialGroup: I:   %x.inc3 = add nuw i32 %x, 6, !dbg !29
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-AddInitialGroup: I:   %x.inc2 = add nuw i32 %x, 3, !dbg !26
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-AddInitialGroup: I:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
test1: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x, !dbg !21
run: WorkList:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
test1: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
NextInst[1]   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-RemoveOne: return I  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
run: WorkList:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-run: I=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-run: I-end=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
IC: Visiting:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
test1: I=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add nuw i32 %x, 3, !dbg !26
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
NextInst[1]   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add nuw i32 %x, 3, !dbg !26
chris-RemoveOne: return I  %x.inc2 = add nuw i32 %x, 3, !dbg !26
run: WorkList:   %x.inc2 = add nuw i32 %x, 3, !dbg !26
chris-run: I=  %x.inc2 = add nuw i32 %x, 3, !dbg !26
chris-run: I-end=  %x.inc2 = add nuw i32 %x, 3, !dbg !26
IC: Visiting:   %x.inc2 = add nuw i32 %x, 3, !dbg !26
test1: I=  %x.inc2 = add nuw i32 %x, 3, !dbg !26
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add nuw i32 %x, 6, !dbg !29
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
NextInst[1]   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw i32 %x, 6, !dbg !29
chris-RemoveOne: return I  %x.inc3 = add nuw i32 %x, 6, !dbg !29
run: WorkList:   %x.inc3 = add nuw i32 %x, 6, !dbg !29
chris-run: I=  %x.inc3 = add nuw i32 %x, 6, !dbg !29
chris-run: I-end=  %x.inc3 = add nuw i32 %x, 6, !dbg !29
IC: Visiting:   %x.inc3 = add nuw i32 %x, 6, !dbg !29
test1: I=  %x.inc3 = add nuw i32 %x, 6, !dbg !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void, !dbg !32
 ok, break
Inst[end]:   ret void, !dbg !32
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void, !dbg !32
chris-RemoveOne: return I  ret void, !dbg !32
run: WorkList:   ret void, !dbg !32
chris-run: I=  ret void, !dbg !32
chris-run: I-end=  ret void, !dbg !32
IC: Visiting:   ret void, !dbg !32
test1: I=  ret void, !dbg !32
visit: nullptr 
test3
test4
CheckFunctionDebugify [Combine redundant instructions]: PASS
CheckFunctionDebugify [Conditionally eliminate dead library calls]: PASS
CheckFunctionDebugify [PGOMemOPSize]: PASS
CheckFunctionDebugify [Tail Call Elimination]: PASS
CheckFunctionDebugify [Simplify the CFG]: PASS
CheckFunctionDebugify [Reassociate expressions]: PASS
CheckFunctionDebugify [Simplify the CFG]: PASS
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
runOnFunction: I:  %chk0 = icmp ugt i32 %length, %x, !dbg !21
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
runOnFunction: I:  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
runOnFunction: I:  %x.inc2 = add nuw i32 %x, 3, !dbg !26
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
runOnFunction: I:  %x.inc3 = add nuw i32 %x, 6, !dbg !29
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
runOnFunction: I:  ret void, !dbg !32
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add nuw i32 %x, 3, !dbg !26
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw i32 %x, 6, !dbg !29
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(start):  ret void, !dbg !32


INSTCOMBINE ITERATION #1 on f_1
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add nuw i32 %x, 3, !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw i32 %x, 6, !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(end):  ret void, !dbg !32
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add nuw i32 %x, 3, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add nuw i32 %x, 6, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add nuw i32 %x, 3, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add nuw i32 %x, 6, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-worklist-bb: BB end:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-worklist-bb: BB end:   %x.inc2 = add nuw i32 %x, 3, !dbg !26
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-worklist-bb: BB end:   %x.inc3 = add nuw i32 %x, 6, !dbg !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-worklist-bb: BB end:   ret void, !dbg !32
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void, !dbg !32
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-AddInitialGroup: I:   %x.inc3 = add nuw i32 %x, 6, !dbg !29
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-AddInitialGroup: I:   %x.inc2 = add nuw i32 %x, 3, !dbg !26
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-AddInitialGroup: I:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
test1: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x, !dbg !21
run: WorkList:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
test1: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
NextInst[1]   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-RemoveOne: return I  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
run: WorkList:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-run: I=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-run: I-end=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
IC: Visiting:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
test1: I=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add nuw i32 %x, 3, !dbg !26
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
NextInst[1]   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add nuw i32 %x, 3, !dbg !26
chris-RemoveOne: return I  %x.inc2 = add nuw i32 %x, 3, !dbg !26
run: WorkList:   %x.inc2 = add nuw i32 %x, 3, !dbg !26
chris-run: I=  %x.inc2 = add nuw i32 %x, 3, !dbg !26
chris-run: I-end=  %x.inc2 = add nuw i32 %x, 3, !dbg !26
IC: Visiting:   %x.inc2 = add nuw i32 %x, 3, !dbg !26
test1: I=  %x.inc2 = add nuw i32 %x, 3, !dbg !26
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add nuw i32 %x, 6, !dbg !29
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
NextInst[1]   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw i32 %x, 6, !dbg !29
chris-RemoveOne: return I  %x.inc3 = add nuw i32 %x, 6, !dbg !29
run: WorkList:   %x.inc3 = add nuw i32 %x, 6, !dbg !29
chris-run: I=  %x.inc3 = add nuw i32 %x, 6, !dbg !29
chris-run: I-end=  %x.inc3 = add nuw i32 %x, 6, !dbg !29
IC: Visiting:   %x.inc3 = add nuw i32 %x, 6, !dbg !29
test1: I=  %x.inc3 = add nuw i32 %x, 6, !dbg !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void, !dbg !32
 ok, break
Inst[end]:   ret void, !dbg !32
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void, !dbg !32
chris-RemoveOne: return I  ret void, !dbg !32
run: WorkList:   ret void, !dbg !32
chris-run: I=  ret void, !dbg !32
chris-run: I-end=  ret void, !dbg !32
IC: Visiting:   ret void, !dbg !32
test1: I=  ret void, !dbg !32
visit: nullptr 
test3
test4
CheckFunctionDebugify [Combine redundant instructions]: PASS
CheckFunctionDebugify [MemCpy Optimization]: PASS
CheckFunctionDebugify [Sparse Conditional Constant Propagation]: PASS
CheckFunctionDebugify [Bit-Tracking Dead Code Elimination]: PASS
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
runOnFunction: I:  %chk0 = icmp ugt i32 %length, %x, !dbg !21
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
runOnFunction: I:  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
runOnFunction: I:  %x.inc2 = add nuw i32 %x, 3, !dbg !26
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
runOnFunction: I:  %x.inc3 = add nuw i32 %x, 6, !dbg !29
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
runOnFunction: I:  ret void, !dbg !32
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add nuw i32 %x, 3, !dbg !26
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw i32 %x, 6, !dbg !29
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(start):  ret void, !dbg !32


INSTCOMBINE ITERATION #1 on f_1
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add nuw i32 %x, 3, !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw i32 %x, 6, !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(end):  ret void, !dbg !32
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add nuw i32 %x, 3, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add nuw i32 %x, 6, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add nuw i32 %x, 3, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add nuw i32 %x, 6, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-worklist-bb: BB end:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-worklist-bb: BB end:   %x.inc2 = add nuw i32 %x, 3, !dbg !26
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-worklist-bb: BB end:   %x.inc3 = add nuw i32 %x, 6, !dbg !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-worklist-bb: BB end:   ret void, !dbg !32
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void, !dbg !32
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-AddInitialGroup: I:   %x.inc3 = add nuw i32 %x, 6, !dbg !29
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-AddInitialGroup: I:   %x.inc2 = add nuw i32 %x, 3, !dbg !26
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-AddInitialGroup: I:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
test1: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x, !dbg !21
run: WorkList:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
test1: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
NextInst[1]   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-RemoveOne: return I  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
run: WorkList:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-run: I=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-run: I-end=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
IC: Visiting:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
test1: I=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add nuw i32 %x, 3, !dbg !26
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
NextInst[1]   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add nuw i32 %x, 3, !dbg !26
chris-RemoveOne: return I  %x.inc2 = add nuw i32 %x, 3, !dbg !26
run: WorkList:   %x.inc2 = add nuw i32 %x, 3, !dbg !26
chris-run: I=  %x.inc2 = add nuw i32 %x, 3, !dbg !26
chris-run: I-end=  %x.inc2 = add nuw i32 %x, 3, !dbg !26
IC: Visiting:   %x.inc2 = add nuw i32 %x, 3, !dbg !26
test1: I=  %x.inc2 = add nuw i32 %x, 3, !dbg !26
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add nuw i32 %x, 6, !dbg !29
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
NextInst[1]   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw i32 %x, 6, !dbg !29
chris-RemoveOne: return I  %x.inc3 = add nuw i32 %x, 6, !dbg !29
run: WorkList:   %x.inc3 = add nuw i32 %x, 6, !dbg !29
chris-run: I=  %x.inc3 = add nuw i32 %x, 6, !dbg !29
chris-run: I-end=  %x.inc3 = add nuw i32 %x, 6, !dbg !29
IC: Visiting:   %x.inc3 = add nuw i32 %x, 6, !dbg !29
test1: I=  %x.inc3 = add nuw i32 %x, 6, !dbg !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void, !dbg !32
 ok, break
Inst[end]:   ret void, !dbg !32
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void, !dbg !32
chris-RemoveOne: return I  ret void, !dbg !32
run: WorkList:   ret void, !dbg !32
chris-run: I=  ret void, !dbg !32
chris-run: I-end=  ret void, !dbg !32
IC: Visiting:   ret void, !dbg !32
test1: I=  ret void, !dbg !32
visit: nullptr 
test3
test4
CheckFunctionDebugify [Combine redundant instructions]: PASS
CheckFunctionDebugify [Jump Threading]: PASS
CheckFunctionDebugify [Value Propagation]: PASS
CheckFunctionDebugify [Dead Store Elimination]: PASS
CheckFunctionDebugify [Aggressive Dead Code Elimination]: PASS
CheckFunctionDebugify [Simplify the CFG]: PASS
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
runOnFunction: I:  %chk0 = icmp ugt i32 %length, %x, !dbg !21
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
runOnFunction: I:  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
runOnFunction: I:  %x.inc2 = add nuw i32 %x, 3, !dbg !26
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
runOnFunction: I:  %x.inc3 = add nuw i32 %x, 6, !dbg !29
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
runOnFunction: I:  ret void, !dbg !32
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add nuw i32 %x, 3, !dbg !26
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw i32 %x, 6, !dbg !29
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(start):  ret void, !dbg !32


INSTCOMBINE ITERATION #1 on f_1
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add nuw i32 %x, 3, !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw i32 %x, 6, !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(end):  ret void, !dbg !32
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add nuw i32 %x, 3, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add nuw i32 %x, 6, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add nuw i32 %x, 3, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add nuw i32 %x, 6, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-worklist-bb: BB end:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-worklist-bb: BB end:   %x.inc2 = add nuw i32 %x, 3, !dbg !26
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-worklist-bb: BB end:   %x.inc3 = add nuw i32 %x, 6, !dbg !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-worklist-bb: BB end:   ret void, !dbg !32
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void, !dbg !32
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-AddInitialGroup: I:   %x.inc3 = add nuw i32 %x, 6, !dbg !29
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-AddInitialGroup: I:   %x.inc2 = add nuw i32 %x, 3, !dbg !26
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-AddInitialGroup: I:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
test1: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x, !dbg !21
run: WorkList:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
test1: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
NextInst[1]   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-RemoveOne: return I  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
run: WorkList:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-run: I=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-run: I-end=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
IC: Visiting:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
test1: I=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add nuw i32 %x, 3, !dbg !26
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
NextInst[1]   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add nuw i32 %x, 3, !dbg !26
chris-RemoveOne: return I  %x.inc2 = add nuw i32 %x, 3, !dbg !26
run: WorkList:   %x.inc2 = add nuw i32 %x, 3, !dbg !26
chris-run: I=  %x.inc2 = add nuw i32 %x, 3, !dbg !26
chris-run: I-end=  %x.inc2 = add nuw i32 %x, 3, !dbg !26
IC: Visiting:   %x.inc2 = add nuw i32 %x, 3, !dbg !26
test1: I=  %x.inc2 = add nuw i32 %x, 3, !dbg !26
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add nuw i32 %x, 6, !dbg !29
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
NextInst[1]   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw i32 %x, 6, !dbg !29
chris-RemoveOne: return I  %x.inc3 = add nuw i32 %x, 6, !dbg !29
run: WorkList:   %x.inc3 = add nuw i32 %x, 6, !dbg !29
chris-run: I=  %x.inc3 = add nuw i32 %x, 6, !dbg !29
chris-run: I-end=  %x.inc3 = add nuw i32 %x, 6, !dbg !29
IC: Visiting:   %x.inc3 = add nuw i32 %x, 6, !dbg !29
test1: I=  %x.inc3 = add nuw i32 %x, 6, !dbg !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void, !dbg !32
 ok, break
Inst[end]:   ret void, !dbg !32
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void, !dbg !32
chris-RemoveOne: return I  ret void, !dbg !32
run: WorkList:   ret void, !dbg !32
chris-run: I=  ret void, !dbg !32
chris-run: I-end=  ret void, !dbg !32
IC: Visiting:   ret void, !dbg !32
test1: I=  ret void, !dbg !32
visit: nullptr 
test3
test4
CheckFunctionDebugify [Combine redundant instructions]: PASS
CheckFunctionDebugify [SROA]: PASS
CheckFunctionDebugify [Early CSE w/ MemorySSA]: PASS
CheckFunctionDebugify [Speculatively execute instructions if target has divergent branches]: PASS
CheckFunctionDebugify [Jump Threading]: PASS
CheckFunctionDebugify [Value Propagation]: PASS
CheckFunctionDebugify [Simplify the CFG]: PASS
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %x = and i32 %a, -256, !dbg !20
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x, metadata !10, metadata !DIExpression()), !dbg !21
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %length, metadata !12, metadata !DIExpression()), !dbg !22
runOnFunction: I:  %chk0 = icmp ult i32 %x, %length, !dbg !23
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !13, metadata !DIExpression()), !dbg !23
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
runOnFunction: I:  %x.inc1 = or i32 %x, 1, !dbg !25
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
runOnFunction: I:  %x.inc2 = or i32 %x, 2, !dbg !28
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
runOnFunction: I:  %x.inc3 = or i32 %x, 3, !dbg !31
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
runOnFunction: I:  ret void, !dbg !34
INSTCOMBINE ITERATION: Inst(start):  %x = and i32 %a, -256, !dbg !20
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x, metadata !10, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %length, metadata !12, metadata !DIExpression()), !dbg !22
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ult i32 %x, %length, !dbg !23
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !13, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = or i32 %x, 1, !dbg !25
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = or i32 %x, 2, !dbg !28
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = or i32 %x, 3, !dbg !31
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
INSTCOMBINE ITERATION: Inst(start):  ret void, !dbg !34


INSTCOMBINE ITERATION #1 on f_2
INSTCOMBINE ITERATION: Inst(end):  %x = and i32 %a, -256, !dbg !20
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x, metadata !10, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length, metadata !12, metadata !DIExpression()), !dbg !22
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ult i32 %x, %length, !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !13, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = or i32 %x, 1, !dbg !25
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = or i32 %x, 2, !dbg !28
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = or i32 %x, 3, !dbg !31
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
INSTCOMBINE ITERATION: Inst(end):  ret void, !dbg !34
chris-worklist-bb: bb: 
entry:
  %x = and i32 %a, -256, !dbg !20
  call void @llvm.dbg.value(metadata i32 %x, metadata !9, metadata !DIExpression()), !dbg !20
  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
  call void @llvm.dbg.value(metadata i32 %length, metadata !11, metadata !DIExpression()), !dbg !21
  %chk0 = icmp ult i32 %x, %length, !dbg !23
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !23
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
  %x.inc1 = or i32 %x, 1, !dbg !25
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !25
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !26
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
  %x.inc2 = or i32 %x, 2, !dbg !28
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !28
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !29
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
  %x.inc3 = or i32 %x, 3, !dbg !31
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !31
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !32
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
  ret void, !dbg !34

chris-worklist-bb: BB: 
entry:
  %x = and i32 %a, -256, !dbg !20
  call void @llvm.dbg.value(metadata i32 %x, metadata !9, metadata !DIExpression()), !dbg !20
  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
  call void @llvm.dbg.value(metadata i32 %length, metadata !11, metadata !DIExpression()), !dbg !21
  %chk0 = icmp ult i32 %x, %length, !dbg !23
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !23
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
  %x.inc1 = or i32 %x, 1, !dbg !25
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !25
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !26
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
  %x.inc2 = or i32 %x, 2, !dbg !28
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !28
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !29
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
  %x.inc3 = or i32 %x, 3, !dbg !31
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !31
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !32
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
  ret void, !dbg !34

chris-worklist-bb: BB end:   %x = and i32 %a, -256, !dbg !20
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x, metadata !10, metadata !DIExpression()), !dbg !21
chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length, metadata !12, metadata !DIExpression()), !dbg !22
chris-worklist-bb: BB end:   %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !13, metadata !DIExpression()), !dbg !23
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-worklist-bb: BB end:   %x.inc1 = or i32 %x, 1, !dbg !25
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-worklist-bb: BB end:   %x.inc2 = or i32 %x, 2, !dbg !28
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-worklist-bb: BB end:   %x.inc3 = or i32 %x, 3, !dbg !31
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-worklist-bb: BB end:   ret void, !dbg !34
IC: ADDING: 14 instrs to worklist
chris-AddInitialGroup: I:   ret void, !dbg !34
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-AddInitialGroup: I:   %x.inc3 = or i32 %x, 3, !dbg !31
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-AddInitialGroup: I:   %x.inc2 = or i32 %x, 2, !dbg !28
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-AddInitialGroup: I:   %x.inc1 = or i32 %x, 1, !dbg !25
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-AddInitialGroup: I:   %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-AddInitialGroup: I:   %x = and i32 %a, -256, !dbg !20
RemoveOne!!!
chris-RemoveOne:   %x = and i32 %a, -256, !dbg !20
chris-RemoveOne: return I  %x = and i32 %a, -256, !dbg !20
run: WorkList:   %x = and i32 %a, -256, !dbg !20
chris-run: I=  %x = and i32 %a, -256, !dbg !20
chris-run: I-end=  %x = and i32 %a, -256, !dbg !20
IC: Visiting:   %x = and i32 %a, -256, !dbg !20
test1: I=  %x = and i32 %a, -256, !dbg !20
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
test1: I=  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-RemoveOne: return I  %chk0 = icmp ult i32 %x, %length, !dbg !23
run: WorkList:   %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-run: I=  %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-run: I-end=  %chk0 = icmp ult i32 %x, %length, !dbg !23
IC: Visiting:   %chk0 = icmp ult i32 %x, %length, !dbg !23
test1: I=  %chk0 = icmp ult i32 %x, %length, !dbg !23
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = or i32 %x, 1, !dbg !25
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
NextInst[1]   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = or i32 %x, 1, !dbg !25
chris-RemoveOne: return I  %x.inc1 = or i32 %x, 1, !dbg !25
run: WorkList:   %x.inc1 = or i32 %x, 1, !dbg !25
chris-run: I=  %x.inc1 = or i32 %x, 1, !dbg !25
chris-run: I-end=  %x.inc1 = or i32 %x, 1, !dbg !25
IC: Visiting:   %x.inc1 = or i32 %x, 1, !dbg !25
test1: I=  %x.inc1 = or i32 %x, 1, !dbg !25
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = or i32 %x, 2, !dbg !28
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
NextInst[1]   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = or i32 %x, 2, !dbg !28
chris-RemoveOne: return I  %x.inc2 = or i32 %x, 2, !dbg !28
run: WorkList:   %x.inc2 = or i32 %x, 2, !dbg !28
chris-run: I=  %x.inc2 = or i32 %x, 2, !dbg !28
chris-run: I-end=  %x.inc2 = or i32 %x, 2, !dbg !28
IC: Visiting:   %x.inc2 = or i32 %x, 2, !dbg !28
test1: I=  %x.inc2 = or i32 %x, 2, !dbg !28
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = or i32 %x, 3, !dbg !31
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
NextInst[1]   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = or i32 %x, 3, !dbg !31
chris-RemoveOne: return I  %x.inc3 = or i32 %x, 3, !dbg !31
run: WorkList:   %x.inc3 = or i32 %x, 3, !dbg !31
chris-run: I=  %x.inc3 = or i32 %x, 3, !dbg !31
chris-run: I-end=  %x.inc3 = or i32 %x, 3, !dbg !31
IC: Visiting:   %x.inc3 = or i32 %x, 3, !dbg !31
test1: I=  %x.inc3 = or i32 %x, 3, !dbg !31
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void, !dbg !34
 ok, break
Inst[end]:   ret void, !dbg !34
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void, !dbg !34
chris-RemoveOne: return I  ret void, !dbg !34
run: WorkList:   ret void, !dbg !34
chris-run: I=  ret void, !dbg !34
chris-run: I-end=  ret void, !dbg !34
IC: Visiting:   ret void, !dbg !34
test1: I=  ret void, !dbg !34
visit: nullptr 
test3
test4
CheckFunctionDebugify [Combine redundant instructions]: PASS
CheckFunctionDebugify [Conditionally eliminate dead library calls]: PASS
CheckFunctionDebugify [PGOMemOPSize]: PASS
CheckFunctionDebugify [Tail Call Elimination]: PASS
CheckFunctionDebugify [Simplify the CFG]: PASS
CheckFunctionDebugify [Reassociate expressions]: PASS
CheckFunctionDebugify [Simplify the CFG]: PASS
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %x = and i32 %a, -256, !dbg !20
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x, metadata !10, metadata !DIExpression()), !dbg !21
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %length, metadata !12, metadata !DIExpression()), !dbg !22
runOnFunction: I:  %chk0 = icmp ult i32 %x, %length, !dbg !23
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !13, metadata !DIExpression()), !dbg !23
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
runOnFunction: I:  %x.inc1 = or i32 %x, 1, !dbg !25
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
runOnFunction: I:  %x.inc2 = or i32 %x, 2, !dbg !28
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
runOnFunction: I:  %x.inc3 = or i32 %x, 3, !dbg !31
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
runOnFunction: I:  ret void, !dbg !34
INSTCOMBINE ITERATION: Inst(start):  %x = and i32 %a, -256, !dbg !20
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x, metadata !10, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %length, metadata !12, metadata !DIExpression()), !dbg !22
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ult i32 %x, %length, !dbg !23
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !13, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = or i32 %x, 1, !dbg !25
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = or i32 %x, 2, !dbg !28
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = or i32 %x, 3, !dbg !31
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
INSTCOMBINE ITERATION: Inst(start):  ret void, !dbg !34


INSTCOMBINE ITERATION #1 on f_2
INSTCOMBINE ITERATION: Inst(end):  %x = and i32 %a, -256, !dbg !20
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x, metadata !10, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length, metadata !12, metadata !DIExpression()), !dbg !22
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ult i32 %x, %length, !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !13, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = or i32 %x, 1, !dbg !25
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = or i32 %x, 2, !dbg !28
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = or i32 %x, 3, !dbg !31
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
INSTCOMBINE ITERATION: Inst(end):  ret void, !dbg !34
chris-worklist-bb: bb: 
entry:
  %x = and i32 %a, -256, !dbg !20
  call void @llvm.dbg.value(metadata i32 %x, metadata !9, metadata !DIExpression()), !dbg !20
  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
  call void @llvm.dbg.value(metadata i32 %length, metadata !11, metadata !DIExpression()), !dbg !21
  %chk0 = icmp ult i32 %x, %length, !dbg !23
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !23
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
  %x.inc1 = or i32 %x, 1, !dbg !25
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !25
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !26
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
  %x.inc2 = or i32 %x, 2, !dbg !28
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !28
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !29
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
  %x.inc3 = or i32 %x, 3, !dbg !31
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !31
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !32
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
  ret void, !dbg !34

chris-worklist-bb: BB: 
entry:
  %x = and i32 %a, -256, !dbg !20
  call void @llvm.dbg.value(metadata i32 %x, metadata !9, metadata !DIExpression()), !dbg !20
  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
  call void @llvm.dbg.value(metadata i32 %length, metadata !11, metadata !DIExpression()), !dbg !21
  %chk0 = icmp ult i32 %x, %length, !dbg !23
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !23
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
  %x.inc1 = or i32 %x, 1, !dbg !25
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !25
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !26
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
  %x.inc2 = or i32 %x, 2, !dbg !28
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !28
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !29
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
  %x.inc3 = or i32 %x, 3, !dbg !31
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !31
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !32
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
  ret void, !dbg !34

chris-worklist-bb: BB end:   %x = and i32 %a, -256, !dbg !20
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x, metadata !10, metadata !DIExpression()), !dbg !21
chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length, metadata !12, metadata !DIExpression()), !dbg !22
chris-worklist-bb: BB end:   %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !13, metadata !DIExpression()), !dbg !23
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-worklist-bb: BB end:   %x.inc1 = or i32 %x, 1, !dbg !25
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-worklist-bb: BB end:   %x.inc2 = or i32 %x, 2, !dbg !28
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-worklist-bb: BB end:   %x.inc3 = or i32 %x, 3, !dbg !31
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-worklist-bb: BB end:   ret void, !dbg !34
IC: ADDING: 14 instrs to worklist
chris-AddInitialGroup: I:   ret void, !dbg !34
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-AddInitialGroup: I:   %x.inc3 = or i32 %x, 3, !dbg !31
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-AddInitialGroup: I:   %x.inc2 = or i32 %x, 2, !dbg !28
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-AddInitialGroup: I:   %x.inc1 = or i32 %x, 1, !dbg !25
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-AddInitialGroup: I:   %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-AddInitialGroup: I:   %x = and i32 %a, -256, !dbg !20
RemoveOne!!!
chris-RemoveOne:   %x = and i32 %a, -256, !dbg !20
chris-RemoveOne: return I  %x = and i32 %a, -256, !dbg !20
run: WorkList:   %x = and i32 %a, -256, !dbg !20
chris-run: I=  %x = and i32 %a, -256, !dbg !20
chris-run: I-end=  %x = and i32 %a, -256, !dbg !20
IC: Visiting:   %x = and i32 %a, -256, !dbg !20
test1: I=  %x = and i32 %a, -256, !dbg !20
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
test1: I=  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-RemoveOne: return I  %chk0 = icmp ult i32 %x, %length, !dbg !23
run: WorkList:   %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-run: I=  %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-run: I-end=  %chk0 = icmp ult i32 %x, %length, !dbg !23
IC: Visiting:   %chk0 = icmp ult i32 %x, %length, !dbg !23
test1: I=  %chk0 = icmp ult i32 %x, %length, !dbg !23
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = or i32 %x, 1, !dbg !25
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
NextInst[1]   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = or i32 %x, 1, !dbg !25
chris-RemoveOne: return I  %x.inc1 = or i32 %x, 1, !dbg !25
run: WorkList:   %x.inc1 = or i32 %x, 1, !dbg !25
chris-run: I=  %x.inc1 = or i32 %x, 1, !dbg !25
chris-run: I-end=  %x.inc1 = or i32 %x, 1, !dbg !25
IC: Visiting:   %x.inc1 = or i32 %x, 1, !dbg !25
test1: I=  %x.inc1 = or i32 %x, 1, !dbg !25
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = or i32 %x, 2, !dbg !28
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
NextInst[1]   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = or i32 %x, 2, !dbg !28
chris-RemoveOne: return I  %x.inc2 = or i32 %x, 2, !dbg !28
run: WorkList:   %x.inc2 = or i32 %x, 2, !dbg !28
chris-run: I=  %x.inc2 = or i32 %x, 2, !dbg !28
chris-run: I-end=  %x.inc2 = or i32 %x, 2, !dbg !28
IC: Visiting:   %x.inc2 = or i32 %x, 2, !dbg !28
test1: I=  %x.inc2 = or i32 %x, 2, !dbg !28
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = or i32 %x, 3, !dbg !31
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
NextInst[1]   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = or i32 %x, 3, !dbg !31
chris-RemoveOne: return I  %x.inc3 = or i32 %x, 3, !dbg !31
run: WorkList:   %x.inc3 = or i32 %x, 3, !dbg !31
chris-run: I=  %x.inc3 = or i32 %x, 3, !dbg !31
chris-run: I-end=  %x.inc3 = or i32 %x, 3, !dbg !31
IC: Visiting:   %x.inc3 = or i32 %x, 3, !dbg !31
test1: I=  %x.inc3 = or i32 %x, 3, !dbg !31
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void, !dbg !34
 ok, break
Inst[end]:   ret void, !dbg !34
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void, !dbg !34
chris-RemoveOne: return I  ret void, !dbg !34
run: WorkList:   ret void, !dbg !34
chris-run: I=  ret void, !dbg !34
chris-run: I-end=  ret void, !dbg !34
IC: Visiting:   ret void, !dbg !34
test1: I=  ret void, !dbg !34
visit: nullptr 
test3
test4
CheckFunctionDebugify [Combine redundant instructions]: PASS
CheckFunctionDebugify [MemCpy Optimization]: PASS
CheckFunctionDebugify [Sparse Conditional Constant Propagation]: PASS
CheckFunctionDebugify [Bit-Tracking Dead Code Elimination]: PASS
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %x = and i32 %a, -256, !dbg !20
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x, metadata !10, metadata !DIExpression()), !dbg !21
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %length, metadata !12, metadata !DIExpression()), !dbg !22
runOnFunction: I:  %chk0 = icmp ult i32 %x, %length, !dbg !23
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !13, metadata !DIExpression()), !dbg !23
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
runOnFunction: I:  %x.inc1 = or i32 %x, 1, !dbg !25
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
runOnFunction: I:  %x.inc2 = or i32 %x, 2, !dbg !28
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
runOnFunction: I:  %x.inc3 = or i32 %x, 3, !dbg !31
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
runOnFunction: I:  ret void, !dbg !34
INSTCOMBINE ITERATION: Inst(start):  %x = and i32 %a, -256, !dbg !20
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x, metadata !10, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %length, metadata !12, metadata !DIExpression()), !dbg !22
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ult i32 %x, %length, !dbg !23
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !13, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = or i32 %x, 1, !dbg !25
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = or i32 %x, 2, !dbg !28
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = or i32 %x, 3, !dbg !31
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
INSTCOMBINE ITERATION: Inst(start):  ret void, !dbg !34


INSTCOMBINE ITERATION #1 on f_2
INSTCOMBINE ITERATION: Inst(end):  %x = and i32 %a, -256, !dbg !20
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x, metadata !10, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length, metadata !12, metadata !DIExpression()), !dbg !22
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ult i32 %x, %length, !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !13, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = or i32 %x, 1, !dbg !25
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = or i32 %x, 2, !dbg !28
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = or i32 %x, 3, !dbg !31
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
INSTCOMBINE ITERATION: Inst(end):  ret void, !dbg !34
chris-worklist-bb: bb: 
entry:
  %x = and i32 %a, -256, !dbg !20
  call void @llvm.dbg.value(metadata i32 %x, metadata !9, metadata !DIExpression()), !dbg !20
  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
  call void @llvm.dbg.value(metadata i32 %length, metadata !11, metadata !DIExpression()), !dbg !21
  %chk0 = icmp ult i32 %x, %length, !dbg !23
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !23
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
  %x.inc1 = or i32 %x, 1, !dbg !25
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !25
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !26
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
  %x.inc2 = or i32 %x, 2, !dbg !28
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !28
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !29
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
  %x.inc3 = or i32 %x, 3, !dbg !31
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !31
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !32
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
  ret void, !dbg !34

chris-worklist-bb: BB: 
entry:
  %x = and i32 %a, -256, !dbg !20
  call void @llvm.dbg.value(metadata i32 %x, metadata !9, metadata !DIExpression()), !dbg !20
  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
  call void @llvm.dbg.value(metadata i32 %length, metadata !11, metadata !DIExpression()), !dbg !21
  %chk0 = icmp ult i32 %x, %length, !dbg !23
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !23
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
  %x.inc1 = or i32 %x, 1, !dbg !25
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !25
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !26
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
  %x.inc2 = or i32 %x, 2, !dbg !28
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !28
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !29
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
  %x.inc3 = or i32 %x, 3, !dbg !31
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !31
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !32
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
  ret void, !dbg !34

chris-worklist-bb: BB end:   %x = and i32 %a, -256, !dbg !20
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x, metadata !10, metadata !DIExpression()), !dbg !21
chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length, metadata !12, metadata !DIExpression()), !dbg !22
chris-worklist-bb: BB end:   %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !13, metadata !DIExpression()), !dbg !23
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-worklist-bb: BB end:   %x.inc1 = or i32 %x, 1, !dbg !25
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-worklist-bb: BB end:   %x.inc2 = or i32 %x, 2, !dbg !28
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-worklist-bb: BB end:   %x.inc3 = or i32 %x, 3, !dbg !31
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-worklist-bb: BB end:   ret void, !dbg !34
IC: ADDING: 14 instrs to worklist
chris-AddInitialGroup: I:   ret void, !dbg !34
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-AddInitialGroup: I:   %x.inc3 = or i32 %x, 3, !dbg !31
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-AddInitialGroup: I:   %x.inc2 = or i32 %x, 2, !dbg !28
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-AddInitialGroup: I:   %x.inc1 = or i32 %x, 1, !dbg !25
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-AddInitialGroup: I:   %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-AddInitialGroup: I:   %x = and i32 %a, -256, !dbg !20
RemoveOne!!!
chris-RemoveOne:   %x = and i32 %a, -256, !dbg !20
chris-RemoveOne: return I  %x = and i32 %a, -256, !dbg !20
run: WorkList:   %x = and i32 %a, -256, !dbg !20
chris-run: I=  %x = and i32 %a, -256, !dbg !20
chris-run: I-end=  %x = and i32 %a, -256, !dbg !20
IC: Visiting:   %x = and i32 %a, -256, !dbg !20
test1: I=  %x = and i32 %a, -256, !dbg !20
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
test1: I=  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-RemoveOne: return I  %chk0 = icmp ult i32 %x, %length, !dbg !23
run: WorkList:   %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-run: I=  %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-run: I-end=  %chk0 = icmp ult i32 %x, %length, !dbg !23
IC: Visiting:   %chk0 = icmp ult i32 %x, %length, !dbg !23
test1: I=  %chk0 = icmp ult i32 %x, %length, !dbg !23
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = or i32 %x, 1, !dbg !25
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
NextInst[1]   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = or i32 %x, 1, !dbg !25
chris-RemoveOne: return I  %x.inc1 = or i32 %x, 1, !dbg !25
run: WorkList:   %x.inc1 = or i32 %x, 1, !dbg !25
chris-run: I=  %x.inc1 = or i32 %x, 1, !dbg !25
chris-run: I-end=  %x.inc1 = or i32 %x, 1, !dbg !25
IC: Visiting:   %x.inc1 = or i32 %x, 1, !dbg !25
test1: I=  %x.inc1 = or i32 %x, 1, !dbg !25
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = or i32 %x, 2, !dbg !28
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
NextInst[1]   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = or i32 %x, 2, !dbg !28
chris-RemoveOne: return I  %x.inc2 = or i32 %x, 2, !dbg !28
run: WorkList:   %x.inc2 = or i32 %x, 2, !dbg !28
chris-run: I=  %x.inc2 = or i32 %x, 2, !dbg !28
chris-run: I-end=  %x.inc2 = or i32 %x, 2, !dbg !28
IC: Visiting:   %x.inc2 = or i32 %x, 2, !dbg !28
test1: I=  %x.inc2 = or i32 %x, 2, !dbg !28
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = or i32 %x, 3, !dbg !31
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
NextInst[1]   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = or i32 %x, 3, !dbg !31
chris-RemoveOne: return I  %x.inc3 = or i32 %x, 3, !dbg !31
run: WorkList:   %x.inc3 = or i32 %x, 3, !dbg !31
chris-run: I=  %x.inc3 = or i32 %x, 3, !dbg !31
chris-run: I-end=  %x.inc3 = or i32 %x, 3, !dbg !31
IC: Visiting:   %x.inc3 = or i32 %x, 3, !dbg !31
test1: I=  %x.inc3 = or i32 %x, 3, !dbg !31
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void, !dbg !34
 ok, break
Inst[end]:   ret void, !dbg !34
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void, !dbg !34
chris-RemoveOne: return I  ret void, !dbg !34
run: WorkList:   ret void, !dbg !34
chris-run: I=  ret void, !dbg !34
chris-run: I-end=  ret void, !dbg !34
IC: Visiting:   ret void, !dbg !34
test1: I=  ret void, !dbg !34
visit: nullptr 
test3
test4
CheckFunctionDebugify [Combine redundant instructions]: PASS
CheckFunctionDebugify [Jump Threading]: PASS
CheckFunctionDebugify [Value Propagation]: PASS
CheckFunctionDebugify [Dead Store Elimination]: PASS
CheckFunctionDebugify [Aggressive Dead Code Elimination]: PASS
CheckFunctionDebugify [Simplify the CFG]: PASS
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %x = and i32 %a, -256, !dbg !20
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x, metadata !10, metadata !DIExpression()), !dbg !21
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %length, metadata !12, metadata !DIExpression()), !dbg !22
runOnFunction: I:  %chk0 = icmp ult i32 %x, %length, !dbg !23
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !13, metadata !DIExpression()), !dbg !23
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
runOnFunction: I:  %x.inc1 = or i32 %x, 1, !dbg !25
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
runOnFunction: I:  %x.inc2 = or i32 %x, 2, !dbg !28
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
runOnFunction: I:  %x.inc3 = or i32 %x, 3, !dbg !31
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
runOnFunction: I:  ret void, !dbg !34
INSTCOMBINE ITERATION: Inst(start):  %x = and i32 %a, -256, !dbg !20
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x, metadata !10, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %length, metadata !12, metadata !DIExpression()), !dbg !22
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ult i32 %x, %length, !dbg !23
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !13, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = or i32 %x, 1, !dbg !25
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = or i32 %x, 2, !dbg !28
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = or i32 %x, 3, !dbg !31
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
INSTCOMBINE ITERATION: Inst(start):  ret void, !dbg !34


INSTCOMBINE ITERATION #1 on f_2
INSTCOMBINE ITERATION: Inst(end):  %x = and i32 %a, -256, !dbg !20
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x, metadata !10, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length, metadata !12, metadata !DIExpression()), !dbg !22
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ult i32 %x, %length, !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !13, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = or i32 %x, 1, !dbg !25
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = or i32 %x, 2, !dbg !28
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = or i32 %x, 3, !dbg !31
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
INSTCOMBINE ITERATION: Inst(end):  ret void, !dbg !34
chris-worklist-bb: bb: 
entry:
  %x = and i32 %a, -256, !dbg !20
  call void @llvm.dbg.value(metadata i32 %x, metadata !9, metadata !DIExpression()), !dbg !20
  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
  call void @llvm.dbg.value(metadata i32 %length, metadata !11, metadata !DIExpression()), !dbg !21
  %chk0 = icmp ult i32 %x, %length, !dbg !23
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !23
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
  %x.inc1 = or i32 %x, 1, !dbg !25
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !25
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !26
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
  %x.inc2 = or i32 %x, 2, !dbg !28
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !28
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !29
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
  %x.inc3 = or i32 %x, 3, !dbg !31
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !31
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !32
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
  ret void, !dbg !34

chris-worklist-bb: BB: 
entry:
  %x = and i32 %a, -256, !dbg !20
  call void @llvm.dbg.value(metadata i32 %x, metadata !9, metadata !DIExpression()), !dbg !20
  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
  call void @llvm.dbg.value(metadata i32 %length, metadata !11, metadata !DIExpression()), !dbg !21
  %chk0 = icmp ult i32 %x, %length, !dbg !23
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !23
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
  %x.inc1 = or i32 %x, 1, !dbg !25
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !25
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !26
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
  %x.inc2 = or i32 %x, 2, !dbg !28
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !28
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !29
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
  %x.inc3 = or i32 %x, 3, !dbg !31
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !31
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !32
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
  ret void, !dbg !34

chris-worklist-bb: BB end:   %x = and i32 %a, -256, !dbg !20
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x, metadata !10, metadata !DIExpression()), !dbg !21
chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length, metadata !12, metadata !DIExpression()), !dbg !22
chris-worklist-bb: BB end:   %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !13, metadata !DIExpression()), !dbg !23
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-worklist-bb: BB end:   %x.inc1 = or i32 %x, 1, !dbg !25
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-worklist-bb: BB end:   %x.inc2 = or i32 %x, 2, !dbg !28
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-worklist-bb: BB end:   %x.inc3 = or i32 %x, 3, !dbg !31
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-worklist-bb: BB end:   ret void, !dbg !34
IC: ADDING: 14 instrs to worklist
chris-AddInitialGroup: I:   ret void, !dbg !34
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-AddInitialGroup: I:   %x.inc3 = or i32 %x, 3, !dbg !31
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-AddInitialGroup: I:   %x.inc2 = or i32 %x, 2, !dbg !28
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-AddInitialGroup: I:   %x.inc1 = or i32 %x, 1, !dbg !25
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-AddInitialGroup: I:   %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-AddInitialGroup: I:   %x = and i32 %a, -256, !dbg !20
RemoveOne!!!
chris-RemoveOne:   %x = and i32 %a, -256, !dbg !20
chris-RemoveOne: return I  %x = and i32 %a, -256, !dbg !20
run: WorkList:   %x = and i32 %a, -256, !dbg !20
chris-run: I=  %x = and i32 %a, -256, !dbg !20
chris-run: I-end=  %x = and i32 %a, -256, !dbg !20
IC: Visiting:   %x = and i32 %a, -256, !dbg !20
test1: I=  %x = and i32 %a, -256, !dbg !20
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
test1: I=  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-RemoveOne: return I  %chk0 = icmp ult i32 %x, %length, !dbg !23
run: WorkList:   %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-run: I=  %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-run: I-end=  %chk0 = icmp ult i32 %x, %length, !dbg !23
IC: Visiting:   %chk0 = icmp ult i32 %x, %length, !dbg !23
test1: I=  %chk0 = icmp ult i32 %x, %length, !dbg !23
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = or i32 %x, 1, !dbg !25
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
NextInst[1]   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = or i32 %x, 1, !dbg !25
chris-RemoveOne: return I  %x.inc1 = or i32 %x, 1, !dbg !25
run: WorkList:   %x.inc1 = or i32 %x, 1, !dbg !25
chris-run: I=  %x.inc1 = or i32 %x, 1, !dbg !25
chris-run: I-end=  %x.inc1 = or i32 %x, 1, !dbg !25
IC: Visiting:   %x.inc1 = or i32 %x, 1, !dbg !25
test1: I=  %x.inc1 = or i32 %x, 1, !dbg !25
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = or i32 %x, 2, !dbg !28
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
NextInst[1]   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = or i32 %x, 2, !dbg !28
chris-RemoveOne: return I  %x.inc2 = or i32 %x, 2, !dbg !28
run: WorkList:   %x.inc2 = or i32 %x, 2, !dbg !28
chris-run: I=  %x.inc2 = or i32 %x, 2, !dbg !28
chris-run: I-end=  %x.inc2 = or i32 %x, 2, !dbg !28
IC: Visiting:   %x.inc2 = or i32 %x, 2, !dbg !28
test1: I=  %x.inc2 = or i32 %x, 2, !dbg !28
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = or i32 %x, 3, !dbg !31
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
NextInst[1]   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = or i32 %x, 3, !dbg !31
chris-RemoveOne: return I  %x.inc3 = or i32 %x, 3, !dbg !31
run: WorkList:   %x.inc3 = or i32 %x, 3, !dbg !31
chris-run: I=  %x.inc3 = or i32 %x, 3, !dbg !31
chris-run: I-end=  %x.inc3 = or i32 %x, 3, !dbg !31
IC: Visiting:   %x.inc3 = or i32 %x, 3, !dbg !31
test1: I=  %x.inc3 = or i32 %x, 3, !dbg !31
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void, !dbg !34
 ok, break
Inst[end]:   ret void, !dbg !34
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void, !dbg !34
chris-RemoveOne: return I  ret void, !dbg !34
run: WorkList:   ret void, !dbg !34
chris-run: I=  ret void, !dbg !34
chris-run: I-end=  ret void, !dbg !34
IC: Visiting:   ret void, !dbg !34
test1: I=  ret void, !dbg !34
visit: nullptr 
test3
test4
CheckFunctionDebugify [Combine redundant instructions]: PASS
CheckFunctionDebugify [SROA]: PASS
CheckFunctionDebugify [Early CSE w/ MemorySSA]: PASS
CheckFunctionDebugify [Speculatively execute instructions if target has divergent branches]: PASS
CheckFunctionDebugify [Jump Threading]: PASS
CheckFunctionDebugify [Value Propagation]: PASS
CheckFunctionDebugify [Simplify the CFG]: PASS
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %x = and i32 %a, -256, !dbg !20
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x, metadata !10, metadata !DIExpression()), !dbg !21
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %length, metadata !12, metadata !DIExpression()), !dbg !22
runOnFunction: I:  %chk0 = icmp ult i32 %x, %length, !dbg !23
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !13, metadata !DIExpression()), !dbg !23
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
runOnFunction: I:  %x.inc1 = or i32 %x, 1, !dbg !25
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
runOnFunction: I:  %x.inc2 = or i32 %x, 3, !dbg !28
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
runOnFunction: I:  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
runOnFunction: I:  ret void, !dbg !34
INSTCOMBINE ITERATION: Inst(start):  %x = and i32 %a, -256, !dbg !20
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x, metadata !10, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %length, metadata !12, metadata !DIExpression()), !dbg !22
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ult i32 %x, %length, !dbg !23
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !13, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = or i32 %x, 1, !dbg !25
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = or i32 %x, 3, !dbg !28
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
INSTCOMBINE ITERATION: Inst(start):  ret void, !dbg !34


INSTCOMBINE ITERATION #1 on f_3
INSTCOMBINE ITERATION: Inst(end):  %x = and i32 %a, -256, !dbg !20
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x, metadata !10, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length, metadata !12, metadata !DIExpression()), !dbg !22
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ult i32 %x, %length, !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !13, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = or i32 %x, 1, !dbg !25
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = or i32 %x, 3, !dbg !28
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
INSTCOMBINE ITERATION: Inst(end):  ret void, !dbg !34
chris-worklist-bb: bb: 
entry:
  %x = and i32 %a, -256, !dbg !20
  call void @llvm.dbg.value(metadata i32 %x, metadata !9, metadata !DIExpression()), !dbg !20
  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
  call void @llvm.dbg.value(metadata i32 %length, metadata !11, metadata !DIExpression()), !dbg !21
  %chk0 = icmp ult i32 %x, %length, !dbg !23
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !23
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
  %x.inc1 = or i32 %x, 1, !dbg !25
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !25
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !26
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
  %x.inc2 = or i32 %x, 3, !dbg !28
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !28
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !29
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !31
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !32
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
  ret void, !dbg !34

chris-worklist-bb: BB: 
entry:
  %x = and i32 %a, -256, !dbg !20
  call void @llvm.dbg.value(metadata i32 %x, metadata !9, metadata !DIExpression()), !dbg !20
  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
  call void @llvm.dbg.value(metadata i32 %length, metadata !11, metadata !DIExpression()), !dbg !21
  %chk0 = icmp ult i32 %x, %length, !dbg !23
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !23
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
  %x.inc1 = or i32 %x, 1, !dbg !25
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !25
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !26
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
  %x.inc2 = or i32 %x, 3, !dbg !28
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !28
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !29
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !31
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !32
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
  ret void, !dbg !34

chris-worklist-bb: BB end:   %x = and i32 %a, -256, !dbg !20
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x, metadata !10, metadata !DIExpression()), !dbg !21
chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length, metadata !12, metadata !DIExpression()), !dbg !22
chris-worklist-bb: BB end:   %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !13, metadata !DIExpression()), !dbg !23
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-worklist-bb: BB end:   %x.inc1 = or i32 %x, 1, !dbg !25
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-worklist-bb: BB end:   %x.inc2 = or i32 %x, 3, !dbg !28
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-worklist-bb: BB end:   %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-worklist-bb: BB end:   ret void, !dbg !34
IC: ADDING: 14 instrs to worklist
chris-AddInitialGroup: I:   ret void, !dbg !34
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-AddInitialGroup: I:   %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-AddInitialGroup: I:   %x.inc2 = or i32 %x, 3, !dbg !28
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-AddInitialGroup: I:   %x.inc1 = or i32 %x, 1, !dbg !25
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-AddInitialGroup: I:   %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-AddInitialGroup: I:   %x = and i32 %a, -256, !dbg !20
RemoveOne!!!
chris-RemoveOne:   %x = and i32 %a, -256, !dbg !20
chris-RemoveOne: return I  %x = and i32 %a, -256, !dbg !20
run: WorkList:   %x = and i32 %a, -256, !dbg !20
chris-run: I=  %x = and i32 %a, -256, !dbg !20
chris-run: I-end=  %x = and i32 %a, -256, !dbg !20
IC: Visiting:   %x = and i32 %a, -256, !dbg !20
test1: I=  %x = and i32 %a, -256, !dbg !20
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
test1: I=  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-RemoveOne: return I  %chk0 = icmp ult i32 %x, %length, !dbg !23
run: WorkList:   %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-run: I=  %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-run: I-end=  %chk0 = icmp ult i32 %x, %length, !dbg !23
IC: Visiting:   %chk0 = icmp ult i32 %x, %length, !dbg !23
test1: I=  %chk0 = icmp ult i32 %x, %length, !dbg !23
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = or i32 %x, 1, !dbg !25
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
NextInst[1]   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = or i32 %x, 1, !dbg !25
chris-RemoveOne: return I  %x.inc1 = or i32 %x, 1, !dbg !25
run: WorkList:   %x.inc1 = or i32 %x, 1, !dbg !25
chris-run: I=  %x.inc1 = or i32 %x, 1, !dbg !25
chris-run: I-end=  %x.inc1 = or i32 %x, 1, !dbg !25
IC: Visiting:   %x.inc1 = or i32 %x, 1, !dbg !25
test1: I=  %x.inc1 = or i32 %x, 1, !dbg !25
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = or i32 %x, 3, !dbg !28
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
NextInst[1]   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = or i32 %x, 3, !dbg !28
chris-RemoveOne: return I  %x.inc2 = or i32 %x, 3, !dbg !28
run: WorkList:   %x.inc2 = or i32 %x, 3, !dbg !28
chris-run: I=  %x.inc2 = or i32 %x, 3, !dbg !28
chris-run: I-end=  %x.inc2 = or i32 %x, 3, !dbg !28
IC: Visiting:   %x.inc2 = or i32 %x, 3, !dbg !28
test1: I=  %x.inc2 = or i32 %x, 3, !dbg !28
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
NextInst[1]   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
chris-RemoveOne: return I  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
run: WorkList:   %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
chris-run: I=  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
chris-run: I-end=  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
IC: Visiting:   %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
test1: I=  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void, !dbg !34
 ok, break
Inst[end]:   ret void, !dbg !34
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void, !dbg !34
chris-RemoveOne: return I  ret void, !dbg !34
run: WorkList:   ret void, !dbg !34
chris-run: I=  ret void, !dbg !34
chris-run: I-end=  ret void, !dbg !34
IC: Visiting:   ret void, !dbg !34
test1: I=  ret void, !dbg !34
visit: nullptr 
test3
test4
CheckFunctionDebugify [Combine redundant instructions]: PASS
CheckFunctionDebugify [Conditionally eliminate dead library calls]: PASS
CheckFunctionDebugify [PGOMemOPSize]: PASS
CheckFunctionDebugify [Tail Call Elimination]: PASS
CheckFunctionDebugify [Simplify the CFG]: PASS
CheckFunctionDebugify [Reassociate expressions]: PASS
CheckFunctionDebugify [Simplify the CFG]: PASS
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %x = and i32 %a, -256, !dbg !20
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x, metadata !10, metadata !DIExpression()), !dbg !21
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %length, metadata !12, metadata !DIExpression()), !dbg !22
runOnFunction: I:  %chk0 = icmp ult i32 %x, %length, !dbg !23
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !13, metadata !DIExpression()), !dbg !23
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
runOnFunction: I:  %x.inc1 = or i32 %x, 1, !dbg !25
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
runOnFunction: I:  %x.inc2 = or i32 %x, 3, !dbg !28
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
runOnFunction: I:  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
runOnFunction: I:  ret void, !dbg !34
INSTCOMBINE ITERATION: Inst(start):  %x = and i32 %a, -256, !dbg !20
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x, metadata !10, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %length, metadata !12, metadata !DIExpression()), !dbg !22
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ult i32 %x, %length, !dbg !23
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !13, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = or i32 %x, 1, !dbg !25
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = or i32 %x, 3, !dbg !28
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
INSTCOMBINE ITERATION: Inst(start):  ret void, !dbg !34


INSTCOMBINE ITERATION #1 on f_3
INSTCOMBINE ITERATION: Inst(end):  %x = and i32 %a, -256, !dbg !20
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x, metadata !10, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length, metadata !12, metadata !DIExpression()), !dbg !22
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ult i32 %x, %length, !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !13, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = or i32 %x, 1, !dbg !25
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = or i32 %x, 3, !dbg !28
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
INSTCOMBINE ITERATION: Inst(end):  ret void, !dbg !34
chris-worklist-bb: bb: 
entry:
  %x = and i32 %a, -256, !dbg !20
  call void @llvm.dbg.value(metadata i32 %x, metadata !9, metadata !DIExpression()), !dbg !20
  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
  call void @llvm.dbg.value(metadata i32 %length, metadata !11, metadata !DIExpression()), !dbg !21
  %chk0 = icmp ult i32 %x, %length, !dbg !23
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !23
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
  %x.inc1 = or i32 %x, 1, !dbg !25
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !25
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !26
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
  %x.inc2 = or i32 %x, 3, !dbg !28
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !28
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !29
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !31
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !32
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
  ret void, !dbg !34

chris-worklist-bb: BB: 
entry:
  %x = and i32 %a, -256, !dbg !20
  call void @llvm.dbg.value(metadata i32 %x, metadata !9, metadata !DIExpression()), !dbg !20
  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
  call void @llvm.dbg.value(metadata i32 %length, metadata !11, metadata !DIExpression()), !dbg !21
  %chk0 = icmp ult i32 %x, %length, !dbg !23
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !23
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
  %x.inc1 = or i32 %x, 1, !dbg !25
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !25
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !26
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
  %x.inc2 = or i32 %x, 3, !dbg !28
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !28
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !29
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !31
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !32
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
  ret void, !dbg !34

chris-worklist-bb: BB end:   %x = and i32 %a, -256, !dbg !20
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x, metadata !10, metadata !DIExpression()), !dbg !21
chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length, metadata !12, metadata !DIExpression()), !dbg !22
chris-worklist-bb: BB end:   %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !13, metadata !DIExpression()), !dbg !23
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-worklist-bb: BB end:   %x.inc1 = or i32 %x, 1, !dbg !25
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-worklist-bb: BB end:   %x.inc2 = or i32 %x, 3, !dbg !28
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-worklist-bb: BB end:   %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-worklist-bb: BB end:   ret void, !dbg !34
IC: ADDING: 14 instrs to worklist
chris-AddInitialGroup: I:   ret void, !dbg !34
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-AddInitialGroup: I:   %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-AddInitialGroup: I:   %x.inc2 = or i32 %x, 3, !dbg !28
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-AddInitialGroup: I:   %x.inc1 = or i32 %x, 1, !dbg !25
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-AddInitialGroup: I:   %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-AddInitialGroup: I:   %x = and i32 %a, -256, !dbg !20
RemoveOne!!!
chris-RemoveOne:   %x = and i32 %a, -256, !dbg !20
chris-RemoveOne: return I  %x = and i32 %a, -256, !dbg !20
run: WorkList:   %x = and i32 %a, -256, !dbg !20
chris-run: I=  %x = and i32 %a, -256, !dbg !20
chris-run: I-end=  %x = and i32 %a, -256, !dbg !20
IC: Visiting:   %x = and i32 %a, -256, !dbg !20
test1: I=  %x = and i32 %a, -256, !dbg !20
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
test1: I=  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-RemoveOne: return I  %chk0 = icmp ult i32 %x, %length, !dbg !23
run: WorkList:   %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-run: I=  %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-run: I-end=  %chk0 = icmp ult i32 %x, %length, !dbg !23
IC: Visiting:   %chk0 = icmp ult i32 %x, %length, !dbg !23
test1: I=  %chk0 = icmp ult i32 %x, %length, !dbg !23
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = or i32 %x, 1, !dbg !25
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
NextInst[1]   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = or i32 %x, 1, !dbg !25
chris-RemoveOne: return I  %x.inc1 = or i32 %x, 1, !dbg !25
run: WorkList:   %x.inc1 = or i32 %x, 1, !dbg !25
chris-run: I=  %x.inc1 = or i32 %x, 1, !dbg !25
chris-run: I-end=  %x.inc1 = or i32 %x, 1, !dbg !25
IC: Visiting:   %x.inc1 = or i32 %x, 1, !dbg !25
test1: I=  %x.inc1 = or i32 %x, 1, !dbg !25
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = or i32 %x, 3, !dbg !28
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
NextInst[1]   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = or i32 %x, 3, !dbg !28
chris-RemoveOne: return I  %x.inc2 = or i32 %x, 3, !dbg !28
run: WorkList:   %x.inc2 = or i32 %x, 3, !dbg !28
chris-run: I=  %x.inc2 = or i32 %x, 3, !dbg !28
chris-run: I-end=  %x.inc2 = or i32 %x, 3, !dbg !28
IC: Visiting:   %x.inc2 = or i32 %x, 3, !dbg !28
test1: I=  %x.inc2 = or i32 %x, 3, !dbg !28
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
NextInst[1]   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
chris-RemoveOne: return I  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
run: WorkList:   %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
chris-run: I=  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
chris-run: I-end=  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
IC: Visiting:   %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
test1: I=  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void, !dbg !34
 ok, break
Inst[end]:   ret void, !dbg !34
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void, !dbg !34
chris-RemoveOne: return I  ret void, !dbg !34
run: WorkList:   ret void, !dbg !34
chris-run: I=  ret void, !dbg !34
chris-run: I-end=  ret void, !dbg !34
IC: Visiting:   ret void, !dbg !34
test1: I=  ret void, !dbg !34
visit: nullptr 
test3
test4
CheckFunctionDebugify [Combine redundant instructions]: PASS
CheckFunctionDebugify [MemCpy Optimization]: PASS
CheckFunctionDebugify [Sparse Conditional Constant Propagation]: PASS
CheckFunctionDebugify [Bit-Tracking Dead Code Elimination]: PASS
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %x = and i32 %a, -256, !dbg !20
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x, metadata !10, metadata !DIExpression()), !dbg !21
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %length, metadata !12, metadata !DIExpression()), !dbg !22
runOnFunction: I:  %chk0 = icmp ult i32 %x, %length, !dbg !23
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !13, metadata !DIExpression()), !dbg !23
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
runOnFunction: I:  %x.inc1 = or i32 %x, 1, !dbg !25
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
runOnFunction: I:  %x.inc2 = or i32 %x, 3, !dbg !28
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
runOnFunction: I:  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
runOnFunction: I:  ret void, !dbg !34
INSTCOMBINE ITERATION: Inst(start):  %x = and i32 %a, -256, !dbg !20
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x, metadata !10, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %length, metadata !12, metadata !DIExpression()), !dbg !22
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ult i32 %x, %length, !dbg !23
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !13, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = or i32 %x, 1, !dbg !25
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = or i32 %x, 3, !dbg !28
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
INSTCOMBINE ITERATION: Inst(start):  ret void, !dbg !34


INSTCOMBINE ITERATION #1 on f_3
INSTCOMBINE ITERATION: Inst(end):  %x = and i32 %a, -256, !dbg !20
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x, metadata !10, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length, metadata !12, metadata !DIExpression()), !dbg !22
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ult i32 %x, %length, !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !13, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = or i32 %x, 1, !dbg !25
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = or i32 %x, 3, !dbg !28
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
INSTCOMBINE ITERATION: Inst(end):  ret void, !dbg !34
chris-worklist-bb: bb: 
entry:
  %x = and i32 %a, -256, !dbg !20
  call void @llvm.dbg.value(metadata i32 %x, metadata !9, metadata !DIExpression()), !dbg !20
  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
  call void @llvm.dbg.value(metadata i32 %length, metadata !11, metadata !DIExpression()), !dbg !21
  %chk0 = icmp ult i32 %x, %length, !dbg !23
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !23
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
  %x.inc1 = or i32 %x, 1, !dbg !25
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !25
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !26
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
  %x.inc2 = or i32 %x, 3, !dbg !28
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !28
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !29
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !31
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !32
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
  ret void, !dbg !34

chris-worklist-bb: BB: 
entry:
  %x = and i32 %a, -256, !dbg !20
  call void @llvm.dbg.value(metadata i32 %x, metadata !9, metadata !DIExpression()), !dbg !20
  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
  call void @llvm.dbg.value(metadata i32 %length, metadata !11, metadata !DIExpression()), !dbg !21
  %chk0 = icmp ult i32 %x, %length, !dbg !23
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !23
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
  %x.inc1 = or i32 %x, 1, !dbg !25
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !25
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !26
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
  %x.inc2 = or i32 %x, 3, !dbg !28
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !28
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !29
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !31
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !32
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
  ret void, !dbg !34

chris-worklist-bb: BB end:   %x = and i32 %a, -256, !dbg !20
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x, metadata !10, metadata !DIExpression()), !dbg !21
chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length, metadata !12, metadata !DIExpression()), !dbg !22
chris-worklist-bb: BB end:   %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !13, metadata !DIExpression()), !dbg !23
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-worklist-bb: BB end:   %x.inc1 = or i32 %x, 1, !dbg !25
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-worklist-bb: BB end:   %x.inc2 = or i32 %x, 3, !dbg !28
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-worklist-bb: BB end:   %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-worklist-bb: BB end:   ret void, !dbg !34
IC: ADDING: 14 instrs to worklist
chris-AddInitialGroup: I:   ret void, !dbg !34
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-AddInitialGroup: I:   %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-AddInitialGroup: I:   %x.inc2 = or i32 %x, 3, !dbg !28
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-AddInitialGroup: I:   %x.inc1 = or i32 %x, 1, !dbg !25
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-AddInitialGroup: I:   %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-AddInitialGroup: I:   %x = and i32 %a, -256, !dbg !20
RemoveOne!!!
chris-RemoveOne:   %x = and i32 %a, -256, !dbg !20
chris-RemoveOne: return I  %x = and i32 %a, -256, !dbg !20
run: WorkList:   %x = and i32 %a, -256, !dbg !20
chris-run: I=  %x = and i32 %a, -256, !dbg !20
chris-run: I-end=  %x = and i32 %a, -256, !dbg !20
IC: Visiting:   %x = and i32 %a, -256, !dbg !20
test1: I=  %x = and i32 %a, -256, !dbg !20
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
test1: I=  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-RemoveOne: return I  %chk0 = icmp ult i32 %x, %length, !dbg !23
run: WorkList:   %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-run: I=  %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-run: I-end=  %chk0 = icmp ult i32 %x, %length, !dbg !23
IC: Visiting:   %chk0 = icmp ult i32 %x, %length, !dbg !23
test1: I=  %chk0 = icmp ult i32 %x, %length, !dbg !23
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = or i32 %x, 1, !dbg !25
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
NextInst[1]   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = or i32 %x, 1, !dbg !25
chris-RemoveOne: return I  %x.inc1 = or i32 %x, 1, !dbg !25
run: WorkList:   %x.inc1 = or i32 %x, 1, !dbg !25
chris-run: I=  %x.inc1 = or i32 %x, 1, !dbg !25
chris-run: I-end=  %x.inc1 = or i32 %x, 1, !dbg !25
IC: Visiting:   %x.inc1 = or i32 %x, 1, !dbg !25
test1: I=  %x.inc1 = or i32 %x, 1, !dbg !25
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = or i32 %x, 3, !dbg !28
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
NextInst[1]   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = or i32 %x, 3, !dbg !28
chris-RemoveOne: return I  %x.inc2 = or i32 %x, 3, !dbg !28
run: WorkList:   %x.inc2 = or i32 %x, 3, !dbg !28
chris-run: I=  %x.inc2 = or i32 %x, 3, !dbg !28
chris-run: I-end=  %x.inc2 = or i32 %x, 3, !dbg !28
IC: Visiting:   %x.inc2 = or i32 %x, 3, !dbg !28
test1: I=  %x.inc2 = or i32 %x, 3, !dbg !28
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
NextInst[1]   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
chris-RemoveOne: return I  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
run: WorkList:   %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
chris-run: I=  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
chris-run: I-end=  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
IC: Visiting:   %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
test1: I=  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void, !dbg !34
 ok, break
Inst[end]:   ret void, !dbg !34
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void, !dbg !34
chris-RemoveOne: return I  ret void, !dbg !34
run: WorkList:   ret void, !dbg !34
chris-run: I=  ret void, !dbg !34
chris-run: I-end=  ret void, !dbg !34
IC: Visiting:   ret void, !dbg !34
test1: I=  ret void, !dbg !34
visit: nullptr 
test3
test4
CheckFunctionDebugify [Combine redundant instructions]: PASS
CheckFunctionDebugify [Jump Threading]: PASS
CheckFunctionDebugify [Value Propagation]: PASS
CheckFunctionDebugify [Dead Store Elimination]: PASS
CheckFunctionDebugify [Aggressive Dead Code Elimination]: PASS
CheckFunctionDebugify [Simplify the CFG]: PASS
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %x = and i32 %a, -256, !dbg !20
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x, metadata !10, metadata !DIExpression()), !dbg !21
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %length, metadata !12, metadata !DIExpression()), !dbg !22
runOnFunction: I:  %chk0 = icmp ult i32 %x, %length, !dbg !23
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !13, metadata !DIExpression()), !dbg !23
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
runOnFunction: I:  %x.inc1 = or i32 %x, 1, !dbg !25
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
runOnFunction: I:  %x.inc2 = or i32 %x, 3, !dbg !28
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
runOnFunction: I:  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
runOnFunction: I:  ret void, !dbg !34
INSTCOMBINE ITERATION: Inst(start):  %x = and i32 %a, -256, !dbg !20
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x, metadata !10, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %length, metadata !12, metadata !DIExpression()), !dbg !22
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ult i32 %x, %length, !dbg !23
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !13, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = or i32 %x, 1, !dbg !25
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = or i32 %x, 3, !dbg !28
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
INSTCOMBINE ITERATION: Inst(start):  ret void, !dbg !34


INSTCOMBINE ITERATION #1 on f_3
INSTCOMBINE ITERATION: Inst(end):  %x = and i32 %a, -256, !dbg !20
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x, metadata !10, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length, metadata !12, metadata !DIExpression()), !dbg !22
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ult i32 %x, %length, !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !13, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = or i32 %x, 1, !dbg !25
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = or i32 %x, 3, !dbg !28
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
INSTCOMBINE ITERATION: Inst(end):  ret void, !dbg !34
chris-worklist-bb: bb: 
entry:
  %x = and i32 %a, -256, !dbg !20
  call void @llvm.dbg.value(metadata i32 %x, metadata !9, metadata !DIExpression()), !dbg !20
  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
  call void @llvm.dbg.value(metadata i32 %length, metadata !11, metadata !DIExpression()), !dbg !21
  %chk0 = icmp ult i32 %x, %length, !dbg !23
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !23
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
  %x.inc1 = or i32 %x, 1, !dbg !25
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !25
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !26
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
  %x.inc2 = or i32 %x, 3, !dbg !28
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !28
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !29
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !31
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !32
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
  ret void, !dbg !34

chris-worklist-bb: BB: 
entry:
  %x = and i32 %a, -256, !dbg !20
  call void @llvm.dbg.value(metadata i32 %x, metadata !9, metadata !DIExpression()), !dbg !20
  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
  call void @llvm.dbg.value(metadata i32 %length, metadata !11, metadata !DIExpression()), !dbg !21
  %chk0 = icmp ult i32 %x, %length, !dbg !23
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !23
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
  %x.inc1 = or i32 %x, 1, !dbg !25
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !25
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !26
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
  %x.inc2 = or i32 %x, 3, !dbg !28
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !28
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !29
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !31
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !32
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
  ret void, !dbg !34

chris-worklist-bb: BB end:   %x = and i32 %a, -256, !dbg !20
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x, metadata !10, metadata !DIExpression()), !dbg !21
chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length, metadata !12, metadata !DIExpression()), !dbg !22
chris-worklist-bb: BB end:   %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !13, metadata !DIExpression()), !dbg !23
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-worklist-bb: BB end:   %x.inc1 = or i32 %x, 1, !dbg !25
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-worklist-bb: BB end:   %x.inc2 = or i32 %x, 3, !dbg !28
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-worklist-bb: BB end:   %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-worklist-bb: BB end:   ret void, !dbg !34
IC: ADDING: 14 instrs to worklist
chris-AddInitialGroup: I:   ret void, !dbg !34
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-AddInitialGroup: I:   %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-AddInitialGroup: I:   %x.inc2 = or i32 %x, 3, !dbg !28
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-AddInitialGroup: I:   %x.inc1 = or i32 %x, 1, !dbg !25
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-AddInitialGroup: I:   %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-AddInitialGroup: I:   %x = and i32 %a, -256, !dbg !20
RemoveOne!!!
chris-RemoveOne:   %x = and i32 %a, -256, !dbg !20
chris-RemoveOne: return I  %x = and i32 %a, -256, !dbg !20
run: WorkList:   %x = and i32 %a, -256, !dbg !20
chris-run: I=  %x = and i32 %a, -256, !dbg !20
chris-run: I-end=  %x = and i32 %a, -256, !dbg !20
IC: Visiting:   %x = and i32 %a, -256, !dbg !20
test1: I=  %x = and i32 %a, -256, !dbg !20
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
test1: I=  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-RemoveOne: return I  %chk0 = icmp ult i32 %x, %length, !dbg !23
run: WorkList:   %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-run: I=  %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-run: I-end=  %chk0 = icmp ult i32 %x, %length, !dbg !23
IC: Visiting:   %chk0 = icmp ult i32 %x, %length, !dbg !23
test1: I=  %chk0 = icmp ult i32 %x, %length, !dbg !23
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = or i32 %x, 1, !dbg !25
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
NextInst[1]   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = or i32 %x, 1, !dbg !25
chris-RemoveOne: return I  %x.inc1 = or i32 %x, 1, !dbg !25
run: WorkList:   %x.inc1 = or i32 %x, 1, !dbg !25
chris-run: I=  %x.inc1 = or i32 %x, 1, !dbg !25
chris-run: I-end=  %x.inc1 = or i32 %x, 1, !dbg !25
IC: Visiting:   %x.inc1 = or i32 %x, 1, !dbg !25
test1: I=  %x.inc1 = or i32 %x, 1, !dbg !25
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = or i32 %x, 3, !dbg !28
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
NextInst[1]   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = or i32 %x, 3, !dbg !28
chris-RemoveOne: return I  %x.inc2 = or i32 %x, 3, !dbg !28
run: WorkList:   %x.inc2 = or i32 %x, 3, !dbg !28
chris-run: I=  %x.inc2 = or i32 %x, 3, !dbg !28
chris-run: I-end=  %x.inc2 = or i32 %x, 3, !dbg !28
IC: Visiting:   %x.inc2 = or i32 %x, 3, !dbg !28
test1: I=  %x.inc2 = or i32 %x, 3, !dbg !28
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
NextInst[1]   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
chris-RemoveOne: return I  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
run: WorkList:   %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
chris-run: I=  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
chris-run: I-end=  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
IC: Visiting:   %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
test1: I=  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void, !dbg !34
 ok, break
Inst[end]:   ret void, !dbg !34
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void, !dbg !34
chris-RemoveOne: return I  ret void, !dbg !34
run: WorkList:   ret void, !dbg !34
chris-run: I=  ret void, !dbg !34
chris-run: I-end=  ret void, !dbg !34
IC: Visiting:   ret void, !dbg !34
test1: I=  ret void, !dbg !34
visit: nullptr 
test3
test4
CheckFunctionDebugify [Combine redundant instructions]: PASS
CheckFunctionDebugify [SROA]: PASS
CheckFunctionDebugify [Early CSE w/ MemorySSA]: PASS
CheckFunctionDebugify [Speculatively execute instructions if target has divergent branches]: PASS
CheckFunctionDebugify [Jump Threading]: PASS
CheckFunctionDebugify [Value Propagation]: PASS
CheckFunctionDebugify [Simplify the CFG]: PASS
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
runOnFunction: I:  %chk0 = icmp ugt i32 %length, %x, !dbg !21
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
runOnFunction: I:  %x.inc1 = add nsw i32 %x, -1024, !dbg !23
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
runOnFunction: I:  %x.inc2 = add nuw i32 %x, 2, !dbg !26
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
runOnFunction: I:  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
runOnFunction: I:  ret void, !dbg !32
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add nsw i32 %x, -1024, !dbg !23
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add nuw i32 %x, 2, !dbg !26
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(start):  ret void, !dbg !32


INSTCOMBINE ITERATION #1 on f_4
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add nsw i32 %x, -1024, !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add nuw i32 %x, 2, !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(end):  ret void, !dbg !32
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add nsw i32 %x, -1024, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add nuw i32 %x, 2, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add nsw i32 %x, -1024, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add nuw i32 %x, 2, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-worklist-bb: BB end:   %x.inc1 = add nsw i32 %x, -1024, !dbg !23
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-worklist-bb: BB end:   %x.inc2 = add nuw i32 %x, 2, !dbg !26
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-worklist-bb: BB end:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-worklist-bb: BB end:   ret void, !dbg !32
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void, !dbg !32
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-AddInitialGroup: I:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-AddInitialGroup: I:   %x.inc2 = add nuw i32 %x, 2, !dbg !26
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-AddInitialGroup: I:   %x.inc1 = add nsw i32 %x, -1024, !dbg !23
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
test1: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x, !dbg !21
run: WorkList:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
test1: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = add nsw i32 %x, -1024, !dbg !23
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
NextInst[1]   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add nsw i32 %x, -1024, !dbg !23
chris-RemoveOne: return I  %x.inc1 = add nsw i32 %x, -1024, !dbg !23
run: WorkList:   %x.inc1 = add nsw i32 %x, -1024, !dbg !23
chris-run: I=  %x.inc1 = add nsw i32 %x, -1024, !dbg !23
chris-run: I-end=  %x.inc1 = add nsw i32 %x, -1024, !dbg !23
IC: Visiting:   %x.inc1 = add nsw i32 %x, -1024, !dbg !23
test1: I=  %x.inc1 = add nsw i32 %x, -1024, !dbg !23
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add nuw i32 %x, 2, !dbg !26
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
NextInst[1]   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add nuw i32 %x, 2, !dbg !26
chris-RemoveOne: return I  %x.inc2 = add nuw i32 %x, 2, !dbg !26
run: WorkList:   %x.inc2 = add nuw i32 %x, 2, !dbg !26
chris-run: I=  %x.inc2 = add nuw i32 %x, 2, !dbg !26
chris-run: I-end=  %x.inc2 = add nuw i32 %x, 2, !dbg !26
IC: Visiting:   %x.inc2 = add nuw i32 %x, 2, !dbg !26
test1: I=  %x.inc2 = add nuw i32 %x, 2, !dbg !26
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
NextInst[1]   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
chris-RemoveOne: return I  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
run: WorkList:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
chris-run: I=  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
chris-run: I-end=  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
IC: Visiting:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
test1: I=  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void, !dbg !32
 ok, break
Inst[end]:   ret void, !dbg !32
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void, !dbg !32
chris-RemoveOne: return I  ret void, !dbg !32
run: WorkList:   ret void, !dbg !32
chris-run: I=  ret void, !dbg !32
chris-run: I-end=  ret void, !dbg !32
IC: Visiting:   ret void, !dbg !32
test1: I=  ret void, !dbg !32
visit: nullptr 
test3
test4
CheckFunctionDebugify [Combine redundant instructions]: PASS
CheckFunctionDebugify [Conditionally eliminate dead library calls]: PASS
CheckFunctionDebugify [PGOMemOPSize]: PASS
CheckFunctionDebugify [Tail Call Elimination]: PASS
CheckFunctionDebugify [Simplify the CFG]: PASS
CheckFunctionDebugify [Reassociate expressions]: PASS
CheckFunctionDebugify [Simplify the CFG]: PASS
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
runOnFunction: I:  %chk0 = icmp ugt i32 %length, %x, !dbg !21
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
runOnFunction: I:  %x.inc1 = add nsw i32 %x, -1024, !dbg !23
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
runOnFunction: I:  %x.inc2 = add nuw i32 %x, 2, !dbg !26
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
runOnFunction: I:  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
runOnFunction: I:  ret void, !dbg !32
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add nsw i32 %x, -1024, !dbg !23
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add nuw i32 %x, 2, !dbg !26
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(start):  ret void, !dbg !32


INSTCOMBINE ITERATION #1 on f_4
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add nsw i32 %x, -1024, !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add nuw i32 %x, 2, !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(end):  ret void, !dbg !32
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add nsw i32 %x, -1024, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add nuw i32 %x, 2, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add nsw i32 %x, -1024, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add nuw i32 %x, 2, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-worklist-bb: BB end:   %x.inc1 = add nsw i32 %x, -1024, !dbg !23
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-worklist-bb: BB end:   %x.inc2 = add nuw i32 %x, 2, !dbg !26
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-worklist-bb: BB end:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-worklist-bb: BB end:   ret void, !dbg !32
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void, !dbg !32
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-AddInitialGroup: I:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-AddInitialGroup: I:   %x.inc2 = add nuw i32 %x, 2, !dbg !26
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-AddInitialGroup: I:   %x.inc1 = add nsw i32 %x, -1024, !dbg !23
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
test1: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x, !dbg !21
run: WorkList:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
test1: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = add nsw i32 %x, -1024, !dbg !23
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
NextInst[1]   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add nsw i32 %x, -1024, !dbg !23
chris-RemoveOne: return I  %x.inc1 = add nsw i32 %x, -1024, !dbg !23
run: WorkList:   %x.inc1 = add nsw i32 %x, -1024, !dbg !23
chris-run: I=  %x.inc1 = add nsw i32 %x, -1024, !dbg !23
chris-run: I-end=  %x.inc1 = add nsw i32 %x, -1024, !dbg !23
IC: Visiting:   %x.inc1 = add nsw i32 %x, -1024, !dbg !23
test1: I=  %x.inc1 = add nsw i32 %x, -1024, !dbg !23
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add nuw i32 %x, 2, !dbg !26
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
NextInst[1]   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add nuw i32 %x, 2, !dbg !26
chris-RemoveOne: return I  %x.inc2 = add nuw i32 %x, 2, !dbg !26
run: WorkList:   %x.inc2 = add nuw i32 %x, 2, !dbg !26
chris-run: I=  %x.inc2 = add nuw i32 %x, 2, !dbg !26
chris-run: I-end=  %x.inc2 = add nuw i32 %x, 2, !dbg !26
IC: Visiting:   %x.inc2 = add nuw i32 %x, 2, !dbg !26
test1: I=  %x.inc2 = add nuw i32 %x, 2, !dbg !26
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
NextInst[1]   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
chris-RemoveOne: return I  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
run: WorkList:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
chris-run: I=  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
chris-run: I-end=  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
IC: Visiting:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
test1: I=  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void, !dbg !32
 ok, break
Inst[end]:   ret void, !dbg !32
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void, !dbg !32
chris-RemoveOne: return I  ret void, !dbg !32
run: WorkList:   ret void, !dbg !32
chris-run: I=  ret void, !dbg !32
chris-run: I-end=  ret void, !dbg !32
IC: Visiting:   ret void, !dbg !32
test1: I=  ret void, !dbg !32
visit: nullptr 
test3
test4
CheckFunctionDebugify [Combine redundant instructions]: PASS
CheckFunctionDebugify [MemCpy Optimization]: PASS
CheckFunctionDebugify [Sparse Conditional Constant Propagation]: PASS
CheckFunctionDebugify [Bit-Tracking Dead Code Elimination]: PASS
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
runOnFunction: I:  %chk0 = icmp ugt i32 %length, %x, !dbg !21
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
runOnFunction: I:  %x.inc1 = add nsw i32 %x, -1024, !dbg !23
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
runOnFunction: I:  %x.inc2 = add nuw i32 %x, 2, !dbg !26
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
runOnFunction: I:  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
runOnFunction: I:  ret void, !dbg !32
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add nsw i32 %x, -1024, !dbg !23
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add nuw i32 %x, 2, !dbg !26
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(start):  ret void, !dbg !32


INSTCOMBINE ITERATION #1 on f_4
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add nsw i32 %x, -1024, !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add nuw i32 %x, 2, !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(end):  ret void, !dbg !32
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add nsw i32 %x, -1024, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add nuw i32 %x, 2, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add nsw i32 %x, -1024, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add nuw i32 %x, 2, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-worklist-bb: BB end:   %x.inc1 = add nsw i32 %x, -1024, !dbg !23
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-worklist-bb: BB end:   %x.inc2 = add nuw i32 %x, 2, !dbg !26
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-worklist-bb: BB end:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-worklist-bb: BB end:   ret void, !dbg !32
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void, !dbg !32
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-AddInitialGroup: I:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-AddInitialGroup: I:   %x.inc2 = add nuw i32 %x, 2, !dbg !26
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-AddInitialGroup: I:   %x.inc1 = add nsw i32 %x, -1024, !dbg !23
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
test1: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x, !dbg !21
run: WorkList:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
test1: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = add nsw i32 %x, -1024, !dbg !23
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
NextInst[1]   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add nsw i32 %x, -1024, !dbg !23
chris-RemoveOne: return I  %x.inc1 = add nsw i32 %x, -1024, !dbg !23
run: WorkList:   %x.inc1 = add nsw i32 %x, -1024, !dbg !23
chris-run: I=  %x.inc1 = add nsw i32 %x, -1024, !dbg !23
chris-run: I-end=  %x.inc1 = add nsw i32 %x, -1024, !dbg !23
IC: Visiting:   %x.inc1 = add nsw i32 %x, -1024, !dbg !23
test1: I=  %x.inc1 = add nsw i32 %x, -1024, !dbg !23
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add nuw i32 %x, 2, !dbg !26
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
NextInst[1]   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add nuw i32 %x, 2, !dbg !26
chris-RemoveOne: return I  %x.inc2 = add nuw i32 %x, 2, !dbg !26
run: WorkList:   %x.inc2 = add nuw i32 %x, 2, !dbg !26
chris-run: I=  %x.inc2 = add nuw i32 %x, 2, !dbg !26
chris-run: I-end=  %x.inc2 = add nuw i32 %x, 2, !dbg !26
IC: Visiting:   %x.inc2 = add nuw i32 %x, 2, !dbg !26
test1: I=  %x.inc2 = add nuw i32 %x, 2, !dbg !26
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
NextInst[1]   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
chris-RemoveOne: return I  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
run: WorkList:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
chris-run: I=  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
chris-run: I-end=  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
IC: Visiting:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
test1: I=  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void, !dbg !32
 ok, break
Inst[end]:   ret void, !dbg !32
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void, !dbg !32
chris-RemoveOne: return I  ret void, !dbg !32
run: WorkList:   ret void, !dbg !32
chris-run: I=  ret void, !dbg !32
chris-run: I-end=  ret void, !dbg !32
IC: Visiting:   ret void, !dbg !32
test1: I=  ret void, !dbg !32
visit: nullptr 
test3
test4
CheckFunctionDebugify [Combine redundant instructions]: PASS
CheckFunctionDebugify [Jump Threading]: PASS
CheckFunctionDebugify [Value Propagation]: PASS
CheckFunctionDebugify [Dead Store Elimination]: PASS
CheckFunctionDebugify [Aggressive Dead Code Elimination]: PASS
CheckFunctionDebugify [Simplify the CFG]: PASS
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
runOnFunction: I:  %chk0 = icmp ugt i32 %length, %x, !dbg !21
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
runOnFunction: I:  %x.inc1 = add nsw i32 %x, -1024, !dbg !23
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
runOnFunction: I:  %x.inc2 = add nuw i32 %x, 2, !dbg !26
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
runOnFunction: I:  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
runOnFunction: I:  ret void, !dbg !32
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add nsw i32 %x, -1024, !dbg !23
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add nuw i32 %x, 2, !dbg !26
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(start):  ret void, !dbg !32


INSTCOMBINE ITERATION #1 on f_4
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add nsw i32 %x, -1024, !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add nuw i32 %x, 2, !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(end):  ret void, !dbg !32
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add nsw i32 %x, -1024, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add nuw i32 %x, 2, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add nsw i32 %x, -1024, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add nuw i32 %x, 2, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-worklist-bb: BB end:   %x.inc1 = add nsw i32 %x, -1024, !dbg !23
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-worklist-bb: BB end:   %x.inc2 = add nuw i32 %x, 2, !dbg !26
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-worklist-bb: BB end:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-worklist-bb: BB end:   ret void, !dbg !32
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void, !dbg !32
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-AddInitialGroup: I:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-AddInitialGroup: I:   %x.inc2 = add nuw i32 %x, 2, !dbg !26
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-AddInitialGroup: I:   %x.inc1 = add nsw i32 %x, -1024, !dbg !23
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
test1: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x, !dbg !21
run: WorkList:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
test1: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = add nsw i32 %x, -1024, !dbg !23
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
NextInst[1]   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add nsw i32 %x, -1024, !dbg !23
chris-RemoveOne: return I  %x.inc1 = add nsw i32 %x, -1024, !dbg !23
run: WorkList:   %x.inc1 = add nsw i32 %x, -1024, !dbg !23
chris-run: I=  %x.inc1 = add nsw i32 %x, -1024, !dbg !23
chris-run: I-end=  %x.inc1 = add nsw i32 %x, -1024, !dbg !23
IC: Visiting:   %x.inc1 = add nsw i32 %x, -1024, !dbg !23
test1: I=  %x.inc1 = add nsw i32 %x, -1024, !dbg !23
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add nuw i32 %x, 2, !dbg !26
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
NextInst[1]   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add nuw i32 %x, 2, !dbg !26
chris-RemoveOne: return I  %x.inc2 = add nuw i32 %x, 2, !dbg !26
run: WorkList:   %x.inc2 = add nuw i32 %x, 2, !dbg !26
chris-run: I=  %x.inc2 = add nuw i32 %x, 2, !dbg !26
chris-run: I-end=  %x.inc2 = add nuw i32 %x, 2, !dbg !26
IC: Visiting:   %x.inc2 = add nuw i32 %x, 2, !dbg !26
test1: I=  %x.inc2 = add nuw i32 %x, 2, !dbg !26
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
NextInst[1]   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
chris-RemoveOne: return I  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
run: WorkList:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
chris-run: I=  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
chris-run: I-end=  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
IC: Visiting:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
test1: I=  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void, !dbg !32
 ok, break
Inst[end]:   ret void, !dbg !32
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void, !dbg !32
chris-RemoveOne: return I  ret void, !dbg !32
run: WorkList:   ret void, !dbg !32
chris-run: I=  ret void, !dbg !32
chris-run: I-end=  ret void, !dbg !32
IC: Visiting:   ret void, !dbg !32
test1: I=  ret void, !dbg !32
visit: nullptr 
test3
test4
CheckFunctionDebugify [Combine redundant instructions]: PASS
CheckFunctionDebugify [SROA]: PASS
CheckFunctionDebugify [Early CSE w/ MemorySSA]: PASS
CheckFunctionDebugify [Speculatively execute instructions if target has divergent branches]: PASS
CheckFunctionDebugify [Jump Threading]: PASS
CheckFunctionDebugify [Value Propagation]: PASS
CheckFunctionDebugify [Simplify the CFG]: PASS
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
runOnFunction: I:  %chk0 = icmp ugt i32 %length, %x, !dbg !21
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
runOnFunction: I:  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
runOnFunction: I:  %x.inc2 = add nsw i32 %x, -199, !dbg !26
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
runOnFunction: I:  %x.inc3 = add nsw i32 %x, -196, !dbg !29
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
runOnFunction: I:  ret void, !dbg !32
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add nsw i32 %x, -199, !dbg !26
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nsw i32 %x, -196, !dbg !29
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(start):  ret void, !dbg !32


INSTCOMBINE ITERATION #1 on f_5
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add nsw i32 %x, -199, !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nsw i32 %x, -196, !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(end):  ret void, !dbg !32
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add nsw i32 %x, -199, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add nsw i32 %x, -196, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add nsw i32 %x, -199, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add nsw i32 %x, -196, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-worklist-bb: BB end:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-worklist-bb: BB end:   %x.inc2 = add nsw i32 %x, -199, !dbg !26
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-worklist-bb: BB end:   %x.inc3 = add nsw i32 %x, -196, !dbg !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-worklist-bb: BB end:   ret void, !dbg !32
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void, !dbg !32
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-AddInitialGroup: I:   %x.inc3 = add nsw i32 %x, -196, !dbg !29
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-AddInitialGroup: I:   %x.inc2 = add nsw i32 %x, -199, !dbg !26
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-AddInitialGroup: I:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
test1: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x, !dbg !21
run: WorkList:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
test1: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
NextInst[1]   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-RemoveOne: return I  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
run: WorkList:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-run: I=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-run: I-end=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
IC: Visiting:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
test1: I=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add nsw i32 %x, -199, !dbg !26
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
NextInst[1]   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add nsw i32 %x, -199, !dbg !26
chris-RemoveOne: return I  %x.inc2 = add nsw i32 %x, -199, !dbg !26
run: WorkList:   %x.inc2 = add nsw i32 %x, -199, !dbg !26
chris-run: I=  %x.inc2 = add nsw i32 %x, -199, !dbg !26
chris-run: I-end=  %x.inc2 = add nsw i32 %x, -199, !dbg !26
IC: Visiting:   %x.inc2 = add nsw i32 %x, -199, !dbg !26
test1: I=  %x.inc2 = add nsw i32 %x, -199, !dbg !26
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add nsw i32 %x, -196, !dbg !29
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
NextInst[1]   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nsw i32 %x, -196, !dbg !29
chris-RemoveOne: return I  %x.inc3 = add nsw i32 %x, -196, !dbg !29
run: WorkList:   %x.inc3 = add nsw i32 %x, -196, !dbg !29
chris-run: I=  %x.inc3 = add nsw i32 %x, -196, !dbg !29
chris-run: I-end=  %x.inc3 = add nsw i32 %x, -196, !dbg !29
IC: Visiting:   %x.inc3 = add nsw i32 %x, -196, !dbg !29
test1: I=  %x.inc3 = add nsw i32 %x, -196, !dbg !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void, !dbg !32
 ok, break
Inst[end]:   ret void, !dbg !32
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void, !dbg !32
chris-RemoveOne: return I  ret void, !dbg !32
run: WorkList:   ret void, !dbg !32
chris-run: I=  ret void, !dbg !32
chris-run: I-end=  ret void, !dbg !32
IC: Visiting:   ret void, !dbg !32
test1: I=  ret void, !dbg !32
visit: nullptr 
test3
test4
CheckFunctionDebugify [Combine redundant instructions]: PASS
CheckFunctionDebugify [Conditionally eliminate dead library calls]: PASS
CheckFunctionDebugify [PGOMemOPSize]: PASS
CheckFunctionDebugify [Tail Call Elimination]: PASS
CheckFunctionDebugify [Simplify the CFG]: PASS
CheckFunctionDebugify [Reassociate expressions]: PASS
CheckFunctionDebugify [Simplify the CFG]: PASS
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
runOnFunction: I:  %chk0 = icmp ugt i32 %length, %x, !dbg !21
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
runOnFunction: I:  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
runOnFunction: I:  %x.inc2 = add nsw i32 %x, -199, !dbg !26
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
runOnFunction: I:  %x.inc3 = add nsw i32 %x, -196, !dbg !29
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
runOnFunction: I:  ret void, !dbg !32
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add nsw i32 %x, -199, !dbg !26
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nsw i32 %x, -196, !dbg !29
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(start):  ret void, !dbg !32


INSTCOMBINE ITERATION #1 on f_5
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add nsw i32 %x, -199, !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nsw i32 %x, -196, !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(end):  ret void, !dbg !32
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add nsw i32 %x, -199, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add nsw i32 %x, -196, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add nsw i32 %x, -199, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add nsw i32 %x, -196, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-worklist-bb: BB end:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-worklist-bb: BB end:   %x.inc2 = add nsw i32 %x, -199, !dbg !26
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-worklist-bb: BB end:   %x.inc3 = add nsw i32 %x, -196, !dbg !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-worklist-bb: BB end:   ret void, !dbg !32
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void, !dbg !32
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-AddInitialGroup: I:   %x.inc3 = add nsw i32 %x, -196, !dbg !29
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-AddInitialGroup: I:   %x.inc2 = add nsw i32 %x, -199, !dbg !26
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-AddInitialGroup: I:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
test1: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x, !dbg !21
run: WorkList:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
test1: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
NextInst[1]   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-RemoveOne: return I  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
run: WorkList:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-run: I=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-run: I-end=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
IC: Visiting:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
test1: I=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add nsw i32 %x, -199, !dbg !26
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
NextInst[1]   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add nsw i32 %x, -199, !dbg !26
chris-RemoveOne: return I  %x.inc2 = add nsw i32 %x, -199, !dbg !26
run: WorkList:   %x.inc2 = add nsw i32 %x, -199, !dbg !26
chris-run: I=  %x.inc2 = add nsw i32 %x, -199, !dbg !26
chris-run: I-end=  %x.inc2 = add nsw i32 %x, -199, !dbg !26
IC: Visiting:   %x.inc2 = add nsw i32 %x, -199, !dbg !26
test1: I=  %x.inc2 = add nsw i32 %x, -199, !dbg !26
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add nsw i32 %x, -196, !dbg !29
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
NextInst[1]   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nsw i32 %x, -196, !dbg !29
chris-RemoveOne: return I  %x.inc3 = add nsw i32 %x, -196, !dbg !29
run: WorkList:   %x.inc3 = add nsw i32 %x, -196, !dbg !29
chris-run: I=  %x.inc3 = add nsw i32 %x, -196, !dbg !29
chris-run: I-end=  %x.inc3 = add nsw i32 %x, -196, !dbg !29
IC: Visiting:   %x.inc3 = add nsw i32 %x, -196, !dbg !29
test1: I=  %x.inc3 = add nsw i32 %x, -196, !dbg !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void, !dbg !32
 ok, break
Inst[end]:   ret void, !dbg !32
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void, !dbg !32
chris-RemoveOne: return I  ret void, !dbg !32
run: WorkList:   ret void, !dbg !32
chris-run: I=  ret void, !dbg !32
chris-run: I-end=  ret void, !dbg !32
IC: Visiting:   ret void, !dbg !32
test1: I=  ret void, !dbg !32
visit: nullptr 
test3
test4
CheckFunctionDebugify [Combine redundant instructions]: PASS
CheckFunctionDebugify [MemCpy Optimization]: PASS
CheckFunctionDebugify [Sparse Conditional Constant Propagation]: PASS
CheckFunctionDebugify [Bit-Tracking Dead Code Elimination]: PASS
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
runOnFunction: I:  %chk0 = icmp ugt i32 %length, %x, !dbg !21
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
runOnFunction: I:  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
runOnFunction: I:  %x.inc2 = add nsw i32 %x, -199, !dbg !26
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
runOnFunction: I:  %x.inc3 = add nsw i32 %x, -196, !dbg !29
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
runOnFunction: I:  ret void, !dbg !32
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add nsw i32 %x, -199, !dbg !26
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nsw i32 %x, -196, !dbg !29
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(start):  ret void, !dbg !32


INSTCOMBINE ITERATION #1 on f_5
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add nsw i32 %x, -199, !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nsw i32 %x, -196, !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(end):  ret void, !dbg !32
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add nsw i32 %x, -199, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add nsw i32 %x, -196, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add nsw i32 %x, -199, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add nsw i32 %x, -196, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-worklist-bb: BB end:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-worklist-bb: BB end:   %x.inc2 = add nsw i32 %x, -199, !dbg !26
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-worklist-bb: BB end:   %x.inc3 = add nsw i32 %x, -196, !dbg !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-worklist-bb: BB end:   ret void, !dbg !32
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void, !dbg !32
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-AddInitialGroup: I:   %x.inc3 = add nsw i32 %x, -196, !dbg !29
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-AddInitialGroup: I:   %x.inc2 = add nsw i32 %x, -199, !dbg !26
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-AddInitialGroup: I:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
test1: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x, !dbg !21
run: WorkList:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
test1: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
NextInst[1]   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-RemoveOne: return I  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
run: WorkList:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-run: I=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-run: I-end=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
IC: Visiting:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
test1: I=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add nsw i32 %x, -199, !dbg !26
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
NextInst[1]   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add nsw i32 %x, -199, !dbg !26
chris-RemoveOne: return I  %x.inc2 = add nsw i32 %x, -199, !dbg !26
run: WorkList:   %x.inc2 = add nsw i32 %x, -199, !dbg !26
chris-run: I=  %x.inc2 = add nsw i32 %x, -199, !dbg !26
chris-run: I-end=  %x.inc2 = add nsw i32 %x, -199, !dbg !26
IC: Visiting:   %x.inc2 = add nsw i32 %x, -199, !dbg !26
test1: I=  %x.inc2 = add nsw i32 %x, -199, !dbg !26
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add nsw i32 %x, -196, !dbg !29
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
NextInst[1]   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nsw i32 %x, -196, !dbg !29
chris-RemoveOne: return I  %x.inc3 = add nsw i32 %x, -196, !dbg !29
run: WorkList:   %x.inc3 = add nsw i32 %x, -196, !dbg !29
chris-run: I=  %x.inc3 = add nsw i32 %x, -196, !dbg !29
chris-run: I-end=  %x.inc3 = add nsw i32 %x, -196, !dbg !29
IC: Visiting:   %x.inc3 = add nsw i32 %x, -196, !dbg !29
test1: I=  %x.inc3 = add nsw i32 %x, -196, !dbg !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void, !dbg !32
 ok, break
Inst[end]:   ret void, !dbg !32
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void, !dbg !32
chris-RemoveOne: return I  ret void, !dbg !32
run: WorkList:   ret void, !dbg !32
chris-run: I=  ret void, !dbg !32
chris-run: I-end=  ret void, !dbg !32
IC: Visiting:   ret void, !dbg !32
test1: I=  ret void, !dbg !32
visit: nullptr 
test3
test4
CheckFunctionDebugify [Combine redundant instructions]: PASS
CheckFunctionDebugify [Jump Threading]: PASS
CheckFunctionDebugify [Value Propagation]: PASS
CheckFunctionDebugify [Dead Store Elimination]: PASS
CheckFunctionDebugify [Aggressive Dead Code Elimination]: PASS
CheckFunctionDebugify [Simplify the CFG]: PASS
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
runOnFunction: I:  %chk0 = icmp ugt i32 %length, %x, !dbg !21
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
runOnFunction: I:  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
runOnFunction: I:  %x.inc2 = add nsw i32 %x, -199, !dbg !26
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
runOnFunction: I:  %x.inc3 = add nsw i32 %x, -196, !dbg !29
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
runOnFunction: I:  ret void, !dbg !32
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add nsw i32 %x, -199, !dbg !26
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nsw i32 %x, -196, !dbg !29
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(start):  ret void, !dbg !32


INSTCOMBINE ITERATION #1 on f_5
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add nsw i32 %x, -199, !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nsw i32 %x, -196, !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(end):  ret void, !dbg !32
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add nsw i32 %x, -199, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add nsw i32 %x, -196, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add nsw i32 %x, -199, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add nsw i32 %x, -196, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-worklist-bb: BB end:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-worklist-bb: BB end:   %x.inc2 = add nsw i32 %x, -199, !dbg !26
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-worklist-bb: BB end:   %x.inc3 = add nsw i32 %x, -196, !dbg !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-worklist-bb: BB end:   ret void, !dbg !32
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void, !dbg !32
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-AddInitialGroup: I:   %x.inc3 = add nsw i32 %x, -196, !dbg !29
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-AddInitialGroup: I:   %x.inc2 = add nsw i32 %x, -199, !dbg !26
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-AddInitialGroup: I:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
test1: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x, !dbg !21
run: WorkList:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
test1: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
NextInst[1]   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-RemoveOne: return I  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
run: WorkList:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-run: I=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-run: I-end=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
IC: Visiting:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
test1: I=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add nsw i32 %x, -199, !dbg !26
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
NextInst[1]   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add nsw i32 %x, -199, !dbg !26
chris-RemoveOne: return I  %x.inc2 = add nsw i32 %x, -199, !dbg !26
run: WorkList:   %x.inc2 = add nsw i32 %x, -199, !dbg !26
chris-run: I=  %x.inc2 = add nsw i32 %x, -199, !dbg !26
chris-run: I-end=  %x.inc2 = add nsw i32 %x, -199, !dbg !26
IC: Visiting:   %x.inc2 = add nsw i32 %x, -199, !dbg !26
test1: I=  %x.inc2 = add nsw i32 %x, -199, !dbg !26
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add nsw i32 %x, -196, !dbg !29
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
NextInst[1]   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nsw i32 %x, -196, !dbg !29
chris-RemoveOne: return I  %x.inc3 = add nsw i32 %x, -196, !dbg !29
run: WorkList:   %x.inc3 = add nsw i32 %x, -196, !dbg !29
chris-run: I=  %x.inc3 = add nsw i32 %x, -196, !dbg !29
chris-run: I-end=  %x.inc3 = add nsw i32 %x, -196, !dbg !29
IC: Visiting:   %x.inc3 = add nsw i32 %x, -196, !dbg !29
test1: I=  %x.inc3 = add nsw i32 %x, -196, !dbg !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void, !dbg !32
 ok, break
Inst[end]:   ret void, !dbg !32
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void, !dbg !32
chris-RemoveOne: return I  ret void, !dbg !32
run: WorkList:   ret void, !dbg !32
chris-run: I=  ret void, !dbg !32
chris-run: I-end=  ret void, !dbg !32
IC: Visiting:   ret void, !dbg !32
test1: I=  ret void, !dbg !32
visit: nullptr 
test3
test4
CheckFunctionDebugify [Combine redundant instructions]: PASS
CheckFunctionDebugify [SROA]: PASS
CheckFunctionDebugify [Early CSE w/ MemorySSA]: PASS
CheckFunctionDebugify [Speculatively execute instructions if target has divergent branches]: PASS
CheckFunctionDebugify [Jump Threading]: PASS
CheckFunctionDebugify [Value Propagation]: PASS
CheckFunctionDebugify [Simplify the CFG]: PASS
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
runOnFunction: I:  %chk0 = icmp ugt i32 %length, %x, !dbg !21
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
runOnFunction: I:  %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
runOnFunction: I:  %x.inc2 = add i32 %x, 2, !dbg !26
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
runOnFunction: I:  %x.inc3 = add nuw i32 %x, 3, !dbg !29
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
runOnFunction: I:  ret void, !dbg !32
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add i32 %x, 2, !dbg !26
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw i32 %x, 3, !dbg !29
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(start):  ret void, !dbg !32


INSTCOMBINE ITERATION #1 on f_6
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add i32 %x, 2, !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw i32 %x, 3, !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(end):  ret void, !dbg !32
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add i32 %x, 2, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add nuw i32 %x, 3, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add i32 %x, 2, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add nuw i32 %x, 3, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-worklist-bb: BB end:   %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-worklist-bb: BB end:   %x.inc2 = add i32 %x, 2, !dbg !26
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-worklist-bb: BB end:   %x.inc3 = add nuw i32 %x, 3, !dbg !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-worklist-bb: BB end:   ret void, !dbg !32
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void, !dbg !32
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-AddInitialGroup: I:   %x.inc3 = add nuw i32 %x, 3, !dbg !29
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-AddInitialGroup: I:   %x.inc2 = add i32 %x, 2, !dbg !26
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-AddInitialGroup: I:   %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
test1: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x, !dbg !21
run: WorkList:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
test1: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
NextInst[1]   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
chris-RemoveOne: return I  %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
run: WorkList:   %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
chris-run: I=  %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
chris-run: I-end=  %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
IC: Visiting:   %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
test1: I=  %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add i32 %x, 2, !dbg !26
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
NextInst[1]   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add i32 %x, 2, !dbg !26
chris-RemoveOne: return I  %x.inc2 = add i32 %x, 2, !dbg !26
run: WorkList:   %x.inc2 = add i32 %x, 2, !dbg !26
chris-run: I=  %x.inc2 = add i32 %x, 2, !dbg !26
chris-run: I-end=  %x.inc2 = add i32 %x, 2, !dbg !26
IC: Visiting:   %x.inc2 = add i32 %x, 2, !dbg !26
test1: I=  %x.inc2 = add i32 %x, 2, !dbg !26
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add nuw i32 %x, 3, !dbg !29
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
NextInst[1]   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw i32 %x, 3, !dbg !29
chris-RemoveOne: return I  %x.inc3 = add nuw i32 %x, 3, !dbg !29
run: WorkList:   %x.inc3 = add nuw i32 %x, 3, !dbg !29
chris-run: I=  %x.inc3 = add nuw i32 %x, 3, !dbg !29
chris-run: I-end=  %x.inc3 = add nuw i32 %x, 3, !dbg !29
IC: Visiting:   %x.inc3 = add nuw i32 %x, 3, !dbg !29
test1: I=  %x.inc3 = add nuw i32 %x, 3, !dbg !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void, !dbg !32
 ok, break
Inst[end]:   ret void, !dbg !32
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void, !dbg !32
chris-RemoveOne: return I  ret void, !dbg !32
run: WorkList:   ret void, !dbg !32
chris-run: I=  ret void, !dbg !32
chris-run: I-end=  ret void, !dbg !32
IC: Visiting:   ret void, !dbg !32
test1: I=  ret void, !dbg !32
visit: nullptr 
test3
test4
CheckFunctionDebugify [Combine redundant instructions]: PASS
CheckFunctionDebugify [Conditionally eliminate dead library calls]: PASS
CheckFunctionDebugify [PGOMemOPSize]: PASS
CheckFunctionDebugify [Tail Call Elimination]: PASS
CheckFunctionDebugify [Simplify the CFG]: PASS
CheckFunctionDebugify [Reassociate expressions]: PASS
CheckFunctionDebugify [Simplify the CFG]: PASS
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
runOnFunction: I:  %chk0 = icmp ugt i32 %length, %x, !dbg !21
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
runOnFunction: I:  %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
runOnFunction: I:  %x.inc2 = add i32 %x, 2, !dbg !26
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
runOnFunction: I:  %x.inc3 = add nuw i32 %x, 3, !dbg !29
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
runOnFunction: I:  ret void, !dbg !32
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add i32 %x, 2, !dbg !26
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw i32 %x, 3, !dbg !29
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(start):  ret void, !dbg !32


INSTCOMBINE ITERATION #1 on f_6
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add i32 %x, 2, !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw i32 %x, 3, !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(end):  ret void, !dbg !32
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add i32 %x, 2, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add nuw i32 %x, 3, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add i32 %x, 2, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add nuw i32 %x, 3, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-worklist-bb: BB end:   %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-worklist-bb: BB end:   %x.inc2 = add i32 %x, 2, !dbg !26
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-worklist-bb: BB end:   %x.inc3 = add nuw i32 %x, 3, !dbg !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-worklist-bb: BB end:   ret void, !dbg !32
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void, !dbg !32
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-AddInitialGroup: I:   %x.inc3 = add nuw i32 %x, 3, !dbg !29
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-AddInitialGroup: I:   %x.inc2 = add i32 %x, 2, !dbg !26
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-AddInitialGroup: I:   %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
test1: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x, !dbg !21
run: WorkList:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
test1: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
NextInst[1]   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
chris-RemoveOne: return I  %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
run: WorkList:   %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
chris-run: I=  %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
chris-run: I-end=  %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
IC: Visiting:   %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
test1: I=  %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add i32 %x, 2, !dbg !26
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
NextInst[1]   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add i32 %x, 2, !dbg !26
chris-RemoveOne: return I  %x.inc2 = add i32 %x, 2, !dbg !26
run: WorkList:   %x.inc2 = add i32 %x, 2, !dbg !26
chris-run: I=  %x.inc2 = add i32 %x, 2, !dbg !26
chris-run: I-end=  %x.inc2 = add i32 %x, 2, !dbg !26
IC: Visiting:   %x.inc2 = add i32 %x, 2, !dbg !26
test1: I=  %x.inc2 = add i32 %x, 2, !dbg !26
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add nuw i32 %x, 3, !dbg !29
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
NextInst[1]   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw i32 %x, 3, !dbg !29
chris-RemoveOne: return I  %x.inc3 = add nuw i32 %x, 3, !dbg !29
run: WorkList:   %x.inc3 = add nuw i32 %x, 3, !dbg !29
chris-run: I=  %x.inc3 = add nuw i32 %x, 3, !dbg !29
chris-run: I-end=  %x.inc3 = add nuw i32 %x, 3, !dbg !29
IC: Visiting:   %x.inc3 = add nuw i32 %x, 3, !dbg !29
test1: I=  %x.inc3 = add nuw i32 %x, 3, !dbg !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void, !dbg !32
 ok, break
Inst[end]:   ret void, !dbg !32
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void, !dbg !32
chris-RemoveOne: return I  ret void, !dbg !32
run: WorkList:   ret void, !dbg !32
chris-run: I=  ret void, !dbg !32
chris-run: I-end=  ret void, !dbg !32
IC: Visiting:   ret void, !dbg !32
test1: I=  ret void, !dbg !32
visit: nullptr 
test3
test4
CheckFunctionDebugify [Combine redundant instructions]: PASS
CheckFunctionDebugify [MemCpy Optimization]: PASS
CheckFunctionDebugify [Sparse Conditional Constant Propagation]: PASS
CheckFunctionDebugify [Bit-Tracking Dead Code Elimination]: PASS
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
runOnFunction: I:  %chk0 = icmp ugt i32 %length, %x, !dbg !21
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
runOnFunction: I:  %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
runOnFunction: I:  %x.inc2 = add i32 %x, 2, !dbg !26
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
runOnFunction: I:  %x.inc3 = add nuw i32 %x, 3, !dbg !29
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
runOnFunction: I:  ret void, !dbg !32
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add i32 %x, 2, !dbg !26
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw i32 %x, 3, !dbg !29
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(start):  ret void, !dbg !32


INSTCOMBINE ITERATION #1 on f_6
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add i32 %x, 2, !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw i32 %x, 3, !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(end):  ret void, !dbg !32
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add i32 %x, 2, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add nuw i32 %x, 3, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add i32 %x, 2, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add nuw i32 %x, 3, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-worklist-bb: BB end:   %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-worklist-bb: BB end:   %x.inc2 = add i32 %x, 2, !dbg !26
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-worklist-bb: BB end:   %x.inc3 = add nuw i32 %x, 3, !dbg !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-worklist-bb: BB end:   ret void, !dbg !32
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void, !dbg !32
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-AddInitialGroup: I:   %x.inc3 = add nuw i32 %x, 3, !dbg !29
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-AddInitialGroup: I:   %x.inc2 = add i32 %x, 2, !dbg !26
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-AddInitialGroup: I:   %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
test1: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x, !dbg !21
run: WorkList:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
test1: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
NextInst[1]   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
chris-RemoveOne: return I  %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
run: WorkList:   %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
chris-run: I=  %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
chris-run: I-end=  %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
IC: Visiting:   %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
test1: I=  %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add i32 %x, 2, !dbg !26
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
NextInst[1]   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add i32 %x, 2, !dbg !26
chris-RemoveOne: return I  %x.inc2 = add i32 %x, 2, !dbg !26
run: WorkList:   %x.inc2 = add i32 %x, 2, !dbg !26
chris-run: I=  %x.inc2 = add i32 %x, 2, !dbg !26
chris-run: I-end=  %x.inc2 = add i32 %x, 2, !dbg !26
IC: Visiting:   %x.inc2 = add i32 %x, 2, !dbg !26
test1: I=  %x.inc2 = add i32 %x, 2, !dbg !26
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add nuw i32 %x, 3, !dbg !29
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
NextInst[1]   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw i32 %x, 3, !dbg !29
chris-RemoveOne: return I  %x.inc3 = add nuw i32 %x, 3, !dbg !29
run: WorkList:   %x.inc3 = add nuw i32 %x, 3, !dbg !29
chris-run: I=  %x.inc3 = add nuw i32 %x, 3, !dbg !29
chris-run: I-end=  %x.inc3 = add nuw i32 %x, 3, !dbg !29
IC: Visiting:   %x.inc3 = add nuw i32 %x, 3, !dbg !29
test1: I=  %x.inc3 = add nuw i32 %x, 3, !dbg !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void, !dbg !32
 ok, break
Inst[end]:   ret void, !dbg !32
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void, !dbg !32
chris-RemoveOne: return I  ret void, !dbg !32
run: WorkList:   ret void, !dbg !32
chris-run: I=  ret void, !dbg !32
chris-run: I-end=  ret void, !dbg !32
IC: Visiting:   ret void, !dbg !32
test1: I=  ret void, !dbg !32
visit: nullptr 
test3
test4
CheckFunctionDebugify [Combine redundant instructions]: PASS
CheckFunctionDebugify [Jump Threading]: PASS
CheckFunctionDebugify [Value Propagation]: PASS
CheckFunctionDebugify [Dead Store Elimination]: PASS
CheckFunctionDebugify [Aggressive Dead Code Elimination]: PASS
CheckFunctionDebugify [Simplify the CFG]: PASS
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
runOnFunction: I:  %chk0 = icmp ugt i32 %length, %x, !dbg !21
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
runOnFunction: I:  %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
runOnFunction: I:  %x.inc2 = add i32 %x, 2, !dbg !26
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
runOnFunction: I:  %x.inc3 = add nuw i32 %x, 3, !dbg !29
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
runOnFunction: I:  ret void, !dbg !32
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add i32 %x, 2, !dbg !26
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw i32 %x, 3, !dbg !29
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(start):  ret void, !dbg !32


INSTCOMBINE ITERATION #1 on f_6
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add i32 %x, 2, !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw i32 %x, 3, !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(end):  ret void, !dbg !32
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add i32 %x, 2, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add nuw i32 %x, 3, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add i32 %x, 2, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add nuw i32 %x, 3, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-worklist-bb: BB end:   %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-worklist-bb: BB end:   %x.inc2 = add i32 %x, 2, !dbg !26
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-worklist-bb: BB end:   %x.inc3 = add nuw i32 %x, 3, !dbg !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-worklist-bb: BB end:   ret void, !dbg !32
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void, !dbg !32
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-AddInitialGroup: I:   %x.inc3 = add nuw i32 %x, 3, !dbg !29
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-AddInitialGroup: I:   %x.inc2 = add i32 %x, 2, !dbg !26
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-AddInitialGroup: I:   %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
test1: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x, !dbg !21
run: WorkList:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
test1: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
NextInst[1]   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
chris-RemoveOne: return I  %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
run: WorkList:   %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
chris-run: I=  %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
chris-run: I-end=  %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
IC: Visiting:   %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
test1: I=  %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add i32 %x, 2, !dbg !26
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
NextInst[1]   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add i32 %x, 2, !dbg !26
chris-RemoveOne: return I  %x.inc2 = add i32 %x, 2, !dbg !26
run: WorkList:   %x.inc2 = add i32 %x, 2, !dbg !26
chris-run: I=  %x.inc2 = add i32 %x, 2, !dbg !26
chris-run: I-end=  %x.inc2 = add i32 %x, 2, !dbg !26
IC: Visiting:   %x.inc2 = add i32 %x, 2, !dbg !26
test1: I=  %x.inc2 = add i32 %x, 2, !dbg !26
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add nuw i32 %x, 3, !dbg !29
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
NextInst[1]   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw i32 %x, 3, !dbg !29
chris-RemoveOne: return I  %x.inc3 = add nuw i32 %x, 3, !dbg !29
run: WorkList:   %x.inc3 = add nuw i32 %x, 3, !dbg !29
chris-run: I=  %x.inc3 = add nuw i32 %x, 3, !dbg !29
chris-run: I-end=  %x.inc3 = add nuw i32 %x, 3, !dbg !29
IC: Visiting:   %x.inc3 = add nuw i32 %x, 3, !dbg !29
test1: I=  %x.inc3 = add nuw i32 %x, 3, !dbg !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void, !dbg !32
 ok, break
Inst[end]:   ret void, !dbg !32
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void, !dbg !32
chris-RemoveOne: return I  ret void, !dbg !32
run: WorkList:   ret void, !dbg !32
chris-run: I=  ret void, !dbg !32
chris-run: I-end=  ret void, !dbg !32
IC: Visiting:   ret void, !dbg !32
test1: I=  ret void, !dbg !32
visit: nullptr 
test3
test4
CheckFunctionDebugify [Combine redundant instructions]: PASS
CheckFunctionDebugify [SROA]: PASS
CheckFunctionDebugify [Early CSE w/ MemorySSA]: PASS
CheckFunctionDebugify [Speculatively execute instructions if target has divergent branches]: PASS
CheckFunctionDebugify [Jump Threading]: PASS
CheckFunctionDebugify [Value Propagation]: PASS
CheckFunctionDebugify [Simplify the CFG]: PASS
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %length_a, metadata !10, metadata !DIExpression()), !dbg !29
runOnFunction: I:  %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %length_b, metadata !12, metadata !DIExpression()), !dbg !30
runOnFunction: I:  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0.a, metadata !13, metadata !DIExpression()), !dbg !31
runOnFunction: I:  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0.b, metadata !15, metadata !DIExpression()), !dbg !32
runOnFunction: I:  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !16, metadata !DIExpression()), !dbg !33
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
runOnFunction: I:  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !17, metadata !DIExpression()), !dbg !35
runOnFunction: I:  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1.a, metadata !18, metadata !DIExpression()), !dbg !36
runOnFunction: I:  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1.b, metadata !19, metadata !DIExpression()), !dbg !37
runOnFunction: I:  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !20, metadata !DIExpression()), !dbg !38
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
runOnFunction: I:  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !21, metadata !DIExpression()), !dbg !40
runOnFunction: I:  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2.a, metadata !22, metadata !DIExpression()), !dbg !41
runOnFunction: I:  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2.b, metadata !23, metadata !DIExpression()), !dbg !42
runOnFunction: I:  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !24, metadata !DIExpression()), !dbg !43
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
runOnFunction: I:  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !25, metadata !DIExpression()), !dbg !45
runOnFunction: I:  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3.a, metadata !26, metadata !DIExpression()), !dbg !46
runOnFunction: I:  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3.b, metadata !27, metadata !DIExpression()), !dbg !47
runOnFunction: I:  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !28, metadata !DIExpression()), !dbg !48
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
runOnFunction: I:  ret void, !dbg !50
INSTCOMBINE ITERATION: Inst(start):  %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %length_a, metadata !10, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(start):  %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %length_b, metadata !12, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(start):  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0.a, metadata !13, metadata !DIExpression()), !dbg !31
INSTCOMBINE ITERATION: Inst(start):  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0.b, metadata !15, metadata !DIExpression()), !dbg !32
INSTCOMBINE ITERATION: Inst(start):  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !16, metadata !DIExpression()), !dbg !33
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !17, metadata !DIExpression()), !dbg !35
INSTCOMBINE ITERATION: Inst(start):  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1.a, metadata !18, metadata !DIExpression()), !dbg !36
INSTCOMBINE ITERATION: Inst(start):  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1.b, metadata !19, metadata !DIExpression()), !dbg !37
INSTCOMBINE ITERATION: Inst(start):  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !20, metadata !DIExpression()), !dbg !38
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !21, metadata !DIExpression()), !dbg !40
INSTCOMBINE ITERATION: Inst(start):  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2.a, metadata !22, metadata !DIExpression()), !dbg !41
INSTCOMBINE ITERATION: Inst(start):  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2.b, metadata !23, metadata !DIExpression()), !dbg !42
INSTCOMBINE ITERATION: Inst(start):  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !24, metadata !DIExpression()), !dbg !43
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !25, metadata !DIExpression()), !dbg !45
INSTCOMBINE ITERATION: Inst(start):  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3.a, metadata !26, metadata !DIExpression()), !dbg !46
INSTCOMBINE ITERATION: Inst(start):  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3.b, metadata !27, metadata !DIExpression()), !dbg !47
INSTCOMBINE ITERATION: Inst(start):  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !28, metadata !DIExpression()), !dbg !48
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
INSTCOMBINE ITERATION: Inst(start):  ret void, !dbg !50


INSTCOMBINE ITERATION #1 on f_7
INSTCOMBINE ITERATION: Inst(end):  %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length_a, metadata !10, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(end):  %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length_b, metadata !12, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(end):  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0.a, metadata !13, metadata !DIExpression()), !dbg !31
INSTCOMBINE ITERATION: Inst(end):  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0.b, metadata !15, metadata !DIExpression()), !dbg !32
INSTCOMBINE ITERATION: Inst(end):  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !16, metadata !DIExpression()), !dbg !33
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !17, metadata !DIExpression()), !dbg !35
INSTCOMBINE ITERATION: Inst(end):  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1.a, metadata !18, metadata !DIExpression()), !dbg !36
INSTCOMBINE ITERATION: Inst(end):  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1.b, metadata !19, metadata !DIExpression()), !dbg !37
INSTCOMBINE ITERATION: Inst(end):  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !20, metadata !DIExpression()), !dbg !38
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !21, metadata !DIExpression()), !dbg !40
INSTCOMBINE ITERATION: Inst(end):  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2.a, metadata !22, metadata !DIExpression()), !dbg !41
INSTCOMBINE ITERATION: Inst(end):  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2.b, metadata !23, metadata !DIExpression()), !dbg !42
INSTCOMBINE ITERATION: Inst(end):  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !24, metadata !DIExpression()), !dbg !43
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !25, metadata !DIExpression()), !dbg !45
INSTCOMBINE ITERATION: Inst(end):  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3.a, metadata !26, metadata !DIExpression()), !dbg !46
INSTCOMBINE ITERATION: Inst(end):  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3.b, metadata !27, metadata !DIExpression()), !dbg !47
INSTCOMBINE ITERATION: Inst(end):  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !28, metadata !DIExpression()), !dbg !48
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
INSTCOMBINE ITERATION: Inst(end):  ret void, !dbg !50
chris-worklist-bb: bb: 
entry:
  %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
  call void @llvm.dbg.value(metadata i32 %length_a, metadata !9, metadata !DIExpression()), !dbg !28
  %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
  call void @llvm.dbg.value(metadata i32 %length_b, metadata !11, metadata !DIExpression()), !dbg !30
  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
  call void @llvm.dbg.value(metadata i1 %chk0.a, metadata !12, metadata !DIExpression()), !dbg !31
  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
  call void @llvm.dbg.value(metadata i1 %chk0.b, metadata !14, metadata !DIExpression()), !dbg !32
  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !15, metadata !DIExpression()), !dbg !33
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !16, metadata !DIExpression()), !dbg !35
  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
  call void @llvm.dbg.value(metadata i1 %chk1.a, metadata !17, metadata !DIExpression()), !dbg !36
  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
  call void @llvm.dbg.value(metadata i1 %chk1.b, metadata !18, metadata !DIExpression()), !dbg !37
  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !19, metadata !DIExpression()), !dbg !38
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !20, metadata !DIExpression()), !dbg !40
  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
  call void @llvm.dbg.value(metadata i1 %chk2.a, metadata !21, metadata !DIExpression()), !dbg !41
  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
  call void @llvm.dbg.value(metadata i1 %chk2.b, metadata !22, metadata !DIExpression()), !dbg !42
  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !23, metadata !DIExpression()), !dbg !43
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !24, metadata !DIExpression()), !dbg !45
  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
  call void @llvm.dbg.value(metadata i1 %chk3.a, metadata !25, metadata !DIExpression()), !dbg !46
  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
  call void @llvm.dbg.value(metadata i1 %chk3.b, metadata !26, metadata !DIExpression()), !dbg !47
  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !27, metadata !DIExpression()), !dbg !48
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
  ret void, !dbg !50

chris-worklist-bb: BB: 
entry:
  %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
  call void @llvm.dbg.value(metadata i32 %length_a, metadata !9, metadata !DIExpression()), !dbg !28
  %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
  call void @llvm.dbg.value(metadata i32 %length_b, metadata !11, metadata !DIExpression()), !dbg !30
  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
  call void @llvm.dbg.value(metadata i1 %chk0.a, metadata !12, metadata !DIExpression()), !dbg !31
  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
  call void @llvm.dbg.value(metadata i1 %chk0.b, metadata !14, metadata !DIExpression()), !dbg !32
  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !15, metadata !DIExpression()), !dbg !33
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !16, metadata !DIExpression()), !dbg !35
  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
  call void @llvm.dbg.value(metadata i1 %chk1.a, metadata !17, metadata !DIExpression()), !dbg !36
  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
  call void @llvm.dbg.value(metadata i1 %chk1.b, metadata !18, metadata !DIExpression()), !dbg !37
  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !19, metadata !DIExpression()), !dbg !38
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !20, metadata !DIExpression()), !dbg !40
  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
  call void @llvm.dbg.value(metadata i1 %chk2.a, metadata !21, metadata !DIExpression()), !dbg !41
  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
  call void @llvm.dbg.value(metadata i1 %chk2.b, metadata !22, metadata !DIExpression()), !dbg !42
  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !23, metadata !DIExpression()), !dbg !43
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !24, metadata !DIExpression()), !dbg !45
  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
  call void @llvm.dbg.value(metadata i1 %chk3.a, metadata !25, metadata !DIExpression()), !dbg !46
  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
  call void @llvm.dbg.value(metadata i1 %chk3.b, metadata !26, metadata !DIExpression()), !dbg !47
  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !27, metadata !DIExpression()), !dbg !48
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
  ret void, !dbg !50

chris-worklist-bb: BB end:   %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length_a, metadata !10, metadata !DIExpression()), !dbg !29
chris-worklist-bb: BB end:   %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length_b, metadata !12, metadata !DIExpression()), !dbg !30
chris-worklist-bb: BB end:   %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0.a, metadata !13, metadata !DIExpression()), !dbg !31
chris-worklist-bb: BB end:   %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0.b, metadata !15, metadata !DIExpression()), !dbg !32
chris-worklist-bb: BB end:   %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !16, metadata !DIExpression()), !dbg !33
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
chris-worklist-bb: BB end:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !17, metadata !DIExpression()), !dbg !35
chris-worklist-bb: BB end:   %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1.a, metadata !18, metadata !DIExpression()), !dbg !36
chris-worklist-bb: BB end:   %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1.b, metadata !19, metadata !DIExpression()), !dbg !37
chris-worklist-bb: BB end:   %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !20, metadata !DIExpression()), !dbg !38
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
chris-worklist-bb: BB end:   %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !21, metadata !DIExpression()), !dbg !40
chris-worklist-bb: BB end:   %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2.a, metadata !22, metadata !DIExpression()), !dbg !41
chris-worklist-bb: BB end:   %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2.b, metadata !23, metadata !DIExpression()), !dbg !42
chris-worklist-bb: BB end:   %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !24, metadata !DIExpression()), !dbg !43
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
chris-worklist-bb: BB end:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !25, metadata !DIExpression()), !dbg !45
chris-worklist-bb: BB end:   %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3.a, metadata !26, metadata !DIExpression()), !dbg !46
chris-worklist-bb: BB end:   %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3.b, metadata !27, metadata !DIExpression()), !dbg !47
chris-worklist-bb: BB end:   %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !28, metadata !DIExpression()), !dbg !48
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
chris-worklist-bb: BB end:   ret void, !dbg !50
IC: ADDING: 22 instrs to worklist
chris-AddInitialGroup: I:   ret void, !dbg !50
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
chris-AddInitialGroup: I:   %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
chris-AddInitialGroup: I:   %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
chris-AddInitialGroup: I:   %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
chris-AddInitialGroup: I:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
chris-AddInitialGroup: I:   %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
chris-AddInitialGroup: I:   %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
chris-AddInitialGroup: I:   %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
chris-AddInitialGroup: I:   %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
chris-AddInitialGroup: I:   %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
chris-AddInitialGroup: I:   %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
chris-AddInitialGroup: I:   %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
chris-AddInitialGroup: I:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
chris-AddInitialGroup: I:   %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
chris-AddInitialGroup: I:   %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
chris-AddInitialGroup: I:   %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
chris-AddInitialGroup: I:   %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
chris-AddInitialGroup: I:   %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
RemoveOne!!!
chris-RemoveOne:   %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
chris-RemoveOne: return I  %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
run: WorkList:   %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
chris-run: I=  %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
chris-run: I-end=  %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
IC: Visiting:   %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
test1: I=  %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
chris-RemoveOne: return I  %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
run: WorkList:   %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
chris-run: I=  %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
chris-run: I-end=  %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
IC: Visiting:   %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
test1: I=  %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
chris-RemoveOne: return I  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
run: WorkList:   %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
chris-run: I=  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
chris-run: I-end=  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
IC: Visiting:   %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
test1: I=  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
chris-RemoveOne: return I  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
run: WorkList:   %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
chris-run: I=  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
chris-run: I-end=  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
IC: Visiting:   %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
test1: I=  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
chris-RemoveOne: return I  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
run: WorkList:   %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
chris-run: I=  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
chris-run: I-end=  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
IC: Visiting:   %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
test1: I=  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !17, metadata !DIExpression()), !dbg !35
NextInst[1]   %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk1.a, metadata !18, metadata !DIExpression()), !dbg !36
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk1.a, metadata !18, metadata !DIExpression()), !dbg !36
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
chris-RemoveOne: return I  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
run: WorkList:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
chris-run: I=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
chris-run: I-end=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
IC: Visiting:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
test1: I=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
chris-RemoveOne: return I  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
run: WorkList:   %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
chris-run: I=  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
chris-run: I-end=  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
IC: Visiting:   %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
test1: I=  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
chris-RemoveOne: return I  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
run: WorkList:   %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
chris-run: I=  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
chris-run: I-end=  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
IC: Visiting:   %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
test1: I=  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
chris-RemoveOne: return I  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
run: WorkList:   %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
chris-run: I=  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
chris-run: I-end=  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
IC: Visiting:   %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
test1: I=  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !21, metadata !DIExpression()), !dbg !40
NextInst[1]   %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk2.a, metadata !22, metadata !DIExpression()), !dbg !41
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk2.a, metadata !22, metadata !DIExpression()), !dbg !41
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
chris-RemoveOne: return I  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
run: WorkList:   %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
chris-run: I=  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
chris-run: I-end=  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
IC: Visiting:   %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
test1: I=  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
chris-RemoveOne: return I  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
run: WorkList:   %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
chris-run: I=  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
chris-run: I-end=  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
IC: Visiting:   %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
test1: I=  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
chris-RemoveOne: return I  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
run: WorkList:   %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
chris-run: I=  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
chris-run: I-end=  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
IC: Visiting:   %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
test1: I=  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
chris-RemoveOne: return I  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
run: WorkList:   %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
chris-run: I=  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
chris-run: I-end=  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
IC: Visiting:   %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
test1: I=  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !25, metadata !DIExpression()), !dbg !45
NextInst[1]   %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk3.a, metadata !26, metadata !DIExpression()), !dbg !46
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk3.a, metadata !26, metadata !DIExpression()), !dbg !46
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
chris-RemoveOne: return I  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
run: WorkList:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
chris-run: I=  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
chris-run: I-end=  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
IC: Visiting:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
test1: I=  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
chris-RemoveOne: return I  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
run: WorkList:   %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
chris-run: I=  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
chris-run: I-end=  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
IC: Visiting:   %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
test1: I=  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
chris-RemoveOne: return I  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
run: WorkList:   %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
chris-run: I=  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
chris-run: I-end=  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
IC: Visiting:   %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
test1: I=  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
chris-RemoveOne: return I  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
run: WorkList:   %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
chris-run: I=  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
chris-run: I-end=  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
IC: Visiting:   %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
test1: I=  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void, !dbg !50
 ok, break
Inst[end]:   ret void, !dbg !50
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void, !dbg !50
chris-RemoveOne: return I  ret void, !dbg !50
run: WorkList:   ret void, !dbg !50
chris-run: I=  ret void, !dbg !50
chris-run: I-end=  ret void, !dbg !50
IC: Visiting:   ret void, !dbg !50
test1: I=  ret void, !dbg !50
visit: nullptr 
test3
test4
CheckFunctionDebugify [Combine redundant instructions]: PASS
CheckFunctionDebugify [Conditionally eliminate dead library calls]: PASS
CheckFunctionDebugify [PGOMemOPSize]: PASS
CheckFunctionDebugify [Tail Call Elimination]: PASS
CheckFunctionDebugify [Simplify the CFG]: PASS
CheckFunctionDebugify [Reassociate expressions]: PASS
CheckFunctionDebugify [Simplify the CFG]: PASS
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %length_a, metadata !10, metadata !DIExpression()), !dbg !29
runOnFunction: I:  %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %length_b, metadata !12, metadata !DIExpression()), !dbg !30
runOnFunction: I:  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0.a, metadata !13, metadata !DIExpression()), !dbg !31
runOnFunction: I:  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0.b, metadata !15, metadata !DIExpression()), !dbg !32
runOnFunction: I:  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !16, metadata !DIExpression()), !dbg !33
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
runOnFunction: I:  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !17, metadata !DIExpression()), !dbg !35
runOnFunction: I:  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1.a, metadata !18, metadata !DIExpression()), !dbg !36
runOnFunction: I:  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1.b, metadata !19, metadata !DIExpression()), !dbg !37
runOnFunction: I:  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !20, metadata !DIExpression()), !dbg !38
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
runOnFunction: I:  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !21, metadata !DIExpression()), !dbg !40
runOnFunction: I:  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2.a, metadata !22, metadata !DIExpression()), !dbg !41
runOnFunction: I:  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2.b, metadata !23, metadata !DIExpression()), !dbg !42
runOnFunction: I:  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !24, metadata !DIExpression()), !dbg !43
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
runOnFunction: I:  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !25, metadata !DIExpression()), !dbg !45
runOnFunction: I:  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3.a, metadata !26, metadata !DIExpression()), !dbg !46
runOnFunction: I:  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3.b, metadata !27, metadata !DIExpression()), !dbg !47
runOnFunction: I:  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !28, metadata !DIExpression()), !dbg !48
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
runOnFunction: I:  ret void, !dbg !50
INSTCOMBINE ITERATION: Inst(start):  %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %length_a, metadata !10, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(start):  %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %length_b, metadata !12, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(start):  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0.a, metadata !13, metadata !DIExpression()), !dbg !31
INSTCOMBINE ITERATION: Inst(start):  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0.b, metadata !15, metadata !DIExpression()), !dbg !32
INSTCOMBINE ITERATION: Inst(start):  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !16, metadata !DIExpression()), !dbg !33
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !17, metadata !DIExpression()), !dbg !35
INSTCOMBINE ITERATION: Inst(start):  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1.a, metadata !18, metadata !DIExpression()), !dbg !36
INSTCOMBINE ITERATION: Inst(start):  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1.b, metadata !19, metadata !DIExpression()), !dbg !37
INSTCOMBINE ITERATION: Inst(start):  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !20, metadata !DIExpression()), !dbg !38
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !21, metadata !DIExpression()), !dbg !40
INSTCOMBINE ITERATION: Inst(start):  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2.a, metadata !22, metadata !DIExpression()), !dbg !41
INSTCOMBINE ITERATION: Inst(start):  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2.b, metadata !23, metadata !DIExpression()), !dbg !42
INSTCOMBINE ITERATION: Inst(start):  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !24, metadata !DIExpression()), !dbg !43
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !25, metadata !DIExpression()), !dbg !45
INSTCOMBINE ITERATION: Inst(start):  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3.a, metadata !26, metadata !DIExpression()), !dbg !46
INSTCOMBINE ITERATION: Inst(start):  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3.b, metadata !27, metadata !DIExpression()), !dbg !47
INSTCOMBINE ITERATION: Inst(start):  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !28, metadata !DIExpression()), !dbg !48
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
INSTCOMBINE ITERATION: Inst(start):  ret void, !dbg !50


INSTCOMBINE ITERATION #1 on f_7
INSTCOMBINE ITERATION: Inst(end):  %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length_a, metadata !10, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(end):  %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length_b, metadata !12, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(end):  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0.a, metadata !13, metadata !DIExpression()), !dbg !31
INSTCOMBINE ITERATION: Inst(end):  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0.b, metadata !15, metadata !DIExpression()), !dbg !32
INSTCOMBINE ITERATION: Inst(end):  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !16, metadata !DIExpression()), !dbg !33
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !17, metadata !DIExpression()), !dbg !35
INSTCOMBINE ITERATION: Inst(end):  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1.a, metadata !18, metadata !DIExpression()), !dbg !36
INSTCOMBINE ITERATION: Inst(end):  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1.b, metadata !19, metadata !DIExpression()), !dbg !37
INSTCOMBINE ITERATION: Inst(end):  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !20, metadata !DIExpression()), !dbg !38
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !21, metadata !DIExpression()), !dbg !40
INSTCOMBINE ITERATION: Inst(end):  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2.a, metadata !22, metadata !DIExpression()), !dbg !41
INSTCOMBINE ITERATION: Inst(end):  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2.b, metadata !23, metadata !DIExpression()), !dbg !42
INSTCOMBINE ITERATION: Inst(end):  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !24, metadata !DIExpression()), !dbg !43
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !25, metadata !DIExpression()), !dbg !45
INSTCOMBINE ITERATION: Inst(end):  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3.a, metadata !26, metadata !DIExpression()), !dbg !46
INSTCOMBINE ITERATION: Inst(end):  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3.b, metadata !27, metadata !DIExpression()), !dbg !47
INSTCOMBINE ITERATION: Inst(end):  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !28, metadata !DIExpression()), !dbg !48
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
INSTCOMBINE ITERATION: Inst(end):  ret void, !dbg !50
chris-worklist-bb: bb: 
entry:
  %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
  call void @llvm.dbg.value(metadata i32 %length_a, metadata !9, metadata !DIExpression()), !dbg !28
  %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
  call void @llvm.dbg.value(metadata i32 %length_b, metadata !11, metadata !DIExpression()), !dbg !30
  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
  call void @llvm.dbg.value(metadata i1 %chk0.a, metadata !12, metadata !DIExpression()), !dbg !31
  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
  call void @llvm.dbg.value(metadata i1 %chk0.b, metadata !14, metadata !DIExpression()), !dbg !32
  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !15, metadata !DIExpression()), !dbg !33
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !16, metadata !DIExpression()), !dbg !35
  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
  call void @llvm.dbg.value(metadata i1 %chk1.a, metadata !17, metadata !DIExpression()), !dbg !36
  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
  call void @llvm.dbg.value(metadata i1 %chk1.b, metadata !18, metadata !DIExpression()), !dbg !37
  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !19, metadata !DIExpression()), !dbg !38
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !20, metadata !DIExpression()), !dbg !40
  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
  call void @llvm.dbg.value(metadata i1 %chk2.a, metadata !21, metadata !DIExpression()), !dbg !41
  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
  call void @llvm.dbg.value(metadata i1 %chk2.b, metadata !22, metadata !DIExpression()), !dbg !42
  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !23, metadata !DIExpression()), !dbg !43
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !24, metadata !DIExpression()), !dbg !45
  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
  call void @llvm.dbg.value(metadata i1 %chk3.a, metadata !25, metadata !DIExpression()), !dbg !46
  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
  call void @llvm.dbg.value(metadata i1 %chk3.b, metadata !26, metadata !DIExpression()), !dbg !47
  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !27, metadata !DIExpression()), !dbg !48
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
  ret void, !dbg !50

chris-worklist-bb: BB: 
entry:
  %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
  call void @llvm.dbg.value(metadata i32 %length_a, metadata !9, metadata !DIExpression()), !dbg !28
  %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
  call void @llvm.dbg.value(metadata i32 %length_b, metadata !11, metadata !DIExpression()), !dbg !30
  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
  call void @llvm.dbg.value(metadata i1 %chk0.a, metadata !12, metadata !DIExpression()), !dbg !31
  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
  call void @llvm.dbg.value(metadata i1 %chk0.b, metadata !14, metadata !DIExpression()), !dbg !32
  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !15, metadata !DIExpression()), !dbg !33
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !16, metadata !DIExpression()), !dbg !35
  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
  call void @llvm.dbg.value(metadata i1 %chk1.a, metadata !17, metadata !DIExpression()), !dbg !36
  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
  call void @llvm.dbg.value(metadata i1 %chk1.b, metadata !18, metadata !DIExpression()), !dbg !37
  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !19, metadata !DIExpression()), !dbg !38
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !20, metadata !DIExpression()), !dbg !40
  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
  call void @llvm.dbg.value(metadata i1 %chk2.a, metadata !21, metadata !DIExpression()), !dbg !41
  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
  call void @llvm.dbg.value(metadata i1 %chk2.b, metadata !22, metadata !DIExpression()), !dbg !42
  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !23, metadata !DIExpression()), !dbg !43
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !24, metadata !DIExpression()), !dbg !45
  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
  call void @llvm.dbg.value(metadata i1 %chk3.a, metadata !25, metadata !DIExpression()), !dbg !46
  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
  call void @llvm.dbg.value(metadata i1 %chk3.b, metadata !26, metadata !DIExpression()), !dbg !47
  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !27, metadata !DIExpression()), !dbg !48
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
  ret void, !dbg !50

chris-worklist-bb: BB end:   %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length_a, metadata !10, metadata !DIExpression()), !dbg !29
chris-worklist-bb: BB end:   %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length_b, metadata !12, metadata !DIExpression()), !dbg !30
chris-worklist-bb: BB end:   %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0.a, metadata !13, metadata !DIExpression()), !dbg !31
chris-worklist-bb: BB end:   %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0.b, metadata !15, metadata !DIExpression()), !dbg !32
chris-worklist-bb: BB end:   %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !16, metadata !DIExpression()), !dbg !33
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
chris-worklist-bb: BB end:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !17, metadata !DIExpression()), !dbg !35
chris-worklist-bb: BB end:   %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1.a, metadata !18, metadata !DIExpression()), !dbg !36
chris-worklist-bb: BB end:   %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1.b, metadata !19, metadata !DIExpression()), !dbg !37
chris-worklist-bb: BB end:   %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !20, metadata !DIExpression()), !dbg !38
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
chris-worklist-bb: BB end:   %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !21, metadata !DIExpression()), !dbg !40
chris-worklist-bb: BB end:   %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2.a, metadata !22, metadata !DIExpression()), !dbg !41
chris-worklist-bb: BB end:   %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2.b, metadata !23, metadata !DIExpression()), !dbg !42
chris-worklist-bb: BB end:   %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !24, metadata !DIExpression()), !dbg !43
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
chris-worklist-bb: BB end:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !25, metadata !DIExpression()), !dbg !45
chris-worklist-bb: BB end:   %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3.a, metadata !26, metadata !DIExpression()), !dbg !46
chris-worklist-bb: BB end:   %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3.b, metadata !27, metadata !DIExpression()), !dbg !47
chris-worklist-bb: BB end:   %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !28, metadata !DIExpression()), !dbg !48
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
chris-worklist-bb: BB end:   ret void, !dbg !50
IC: ADDING: 22 instrs to worklist
chris-AddInitialGroup: I:   ret void, !dbg !50
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
chris-AddInitialGroup: I:   %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
chris-AddInitialGroup: I:   %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
chris-AddInitialGroup: I:   %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
chris-AddInitialGroup: I:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
chris-AddInitialGroup: I:   %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
chris-AddInitialGroup: I:   %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
chris-AddInitialGroup: I:   %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
chris-AddInitialGroup: I:   %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
chris-AddInitialGroup: I:   %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
chris-AddInitialGroup: I:   %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
chris-AddInitialGroup: I:   %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
chris-AddInitialGroup: I:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
chris-AddInitialGroup: I:   %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
chris-AddInitialGroup: I:   %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
chris-AddInitialGroup: I:   %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
chris-AddInitialGroup: I:   %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
chris-AddInitialGroup: I:   %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
RemoveOne!!!
chris-RemoveOne:   %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
chris-RemoveOne: return I  %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
run: WorkList:   %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
chris-run: I=  %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
chris-run: I-end=  %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
IC: Visiting:   %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
test1: I=  %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
chris-RemoveOne: return I  %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
run: WorkList:   %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
chris-run: I=  %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
chris-run: I-end=  %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
IC: Visiting:   %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
test1: I=  %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
chris-RemoveOne: return I  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
run: WorkList:   %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
chris-run: I=  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
chris-run: I-end=  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
IC: Visiting:   %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
test1: I=  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
chris-RemoveOne: return I  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
run: WorkList:   %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
chris-run: I=  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
chris-run: I-end=  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
IC: Visiting:   %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
test1: I=  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
chris-RemoveOne: return I  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
run: WorkList:   %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
chris-run: I=  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
chris-run: I-end=  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
IC: Visiting:   %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
test1: I=  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !17, metadata !DIExpression()), !dbg !35
NextInst[1]   %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk1.a, metadata !18, metadata !DIExpression()), !dbg !36
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk1.a, metadata !18, metadata !DIExpression()), !dbg !36
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
chris-RemoveOne: return I  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
run: WorkList:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
chris-run: I=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
chris-run: I-end=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
IC: Visiting:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
test1: I=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
chris-RemoveOne: return I  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
run: WorkList:   %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
chris-run: I=  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
chris-run: I-end=  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
IC: Visiting:   %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
test1: I=  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
chris-RemoveOne: return I  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
run: WorkList:   %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
chris-run: I=  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
chris-run: I-end=  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
IC: Visiting:   %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
test1: I=  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
chris-RemoveOne: return I  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
run: WorkList:   %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
chris-run: I=  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
chris-run: I-end=  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
IC: Visiting:   %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
test1: I=  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !21, metadata !DIExpression()), !dbg !40
NextInst[1]   %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk2.a, metadata !22, metadata !DIExpression()), !dbg !41
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk2.a, metadata !22, metadata !DIExpression()), !dbg !41
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
chris-RemoveOne: return I  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
run: WorkList:   %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
chris-run: I=  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
chris-run: I-end=  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
IC: Visiting:   %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
test1: I=  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
chris-RemoveOne: return I  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
run: WorkList:   %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
chris-run: I=  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
chris-run: I-end=  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
IC: Visiting:   %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
test1: I=  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
chris-RemoveOne: return I  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
run: WorkList:   %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
chris-run: I=  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
chris-run: I-end=  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
IC: Visiting:   %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
test1: I=  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
chris-RemoveOne: return I  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
run: WorkList:   %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
chris-run: I=  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
chris-run: I-end=  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
IC: Visiting:   %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
test1: I=  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !25, metadata !DIExpression()), !dbg !45
NextInst[1]   %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk3.a, metadata !26, metadata !DIExpression()), !dbg !46
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk3.a, metadata !26, metadata !DIExpression()), !dbg !46
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
chris-RemoveOne: return I  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
run: WorkList:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
chris-run: I=  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
chris-run: I-end=  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
IC: Visiting:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
test1: I=  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
chris-RemoveOne: return I  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
run: WorkList:   %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
chris-run: I=  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
chris-run: I-end=  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
IC: Visiting:   %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
test1: I=  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
chris-RemoveOne: return I  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
run: WorkList:   %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
chris-run: I=  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
chris-run: I-end=  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
IC: Visiting:   %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
test1: I=  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
chris-RemoveOne: return I  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
run: WorkList:   %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
chris-run: I=  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
chris-run: I-end=  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
IC: Visiting:   %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
test1: I=  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void, !dbg !50
 ok, break
Inst[end]:   ret void, !dbg !50
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void, !dbg !50
chris-RemoveOne: return I  ret void, !dbg !50
run: WorkList:   ret void, !dbg !50
chris-run: I=  ret void, !dbg !50
chris-run: I-end=  ret void, !dbg !50
IC: Visiting:   ret void, !dbg !50
test1: I=  ret void, !dbg !50
visit: nullptr 
test3
test4
CheckFunctionDebugify [Combine redundant instructions]: PASS
CheckFunctionDebugify [MemCpy Optimization]: PASS
CheckFunctionDebugify [Sparse Conditional Constant Propagation]: PASS
CheckFunctionDebugify [Bit-Tracking Dead Code Elimination]: PASS
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %length_a, metadata !10, metadata !DIExpression()), !dbg !29
runOnFunction: I:  %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %length_b, metadata !12, metadata !DIExpression()), !dbg !30
runOnFunction: I:  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0.a, metadata !13, metadata !DIExpression()), !dbg !31
runOnFunction: I:  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0.b, metadata !15, metadata !DIExpression()), !dbg !32
runOnFunction: I:  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !16, metadata !DIExpression()), !dbg !33
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
runOnFunction: I:  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !17, metadata !DIExpression()), !dbg !35
runOnFunction: I:  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1.a, metadata !18, metadata !DIExpression()), !dbg !36
runOnFunction: I:  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1.b, metadata !19, metadata !DIExpression()), !dbg !37
runOnFunction: I:  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !20, metadata !DIExpression()), !dbg !38
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
runOnFunction: I:  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !21, metadata !DIExpression()), !dbg !40
runOnFunction: I:  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2.a, metadata !22, metadata !DIExpression()), !dbg !41
runOnFunction: I:  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2.b, metadata !23, metadata !DIExpression()), !dbg !42
runOnFunction: I:  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !24, metadata !DIExpression()), !dbg !43
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
runOnFunction: I:  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !25, metadata !DIExpression()), !dbg !45
runOnFunction: I:  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3.a, metadata !26, metadata !DIExpression()), !dbg !46
runOnFunction: I:  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3.b, metadata !27, metadata !DIExpression()), !dbg !47
runOnFunction: I:  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !28, metadata !DIExpression()), !dbg !48
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
runOnFunction: I:  ret void, !dbg !50
INSTCOMBINE ITERATION: Inst(start):  %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %length_a, metadata !10, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(start):  %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %length_b, metadata !12, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(start):  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0.a, metadata !13, metadata !DIExpression()), !dbg !31
INSTCOMBINE ITERATION: Inst(start):  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0.b, metadata !15, metadata !DIExpression()), !dbg !32
INSTCOMBINE ITERATION: Inst(start):  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !16, metadata !DIExpression()), !dbg !33
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !17, metadata !DIExpression()), !dbg !35
INSTCOMBINE ITERATION: Inst(start):  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1.a, metadata !18, metadata !DIExpression()), !dbg !36
INSTCOMBINE ITERATION: Inst(start):  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1.b, metadata !19, metadata !DIExpression()), !dbg !37
INSTCOMBINE ITERATION: Inst(start):  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !20, metadata !DIExpression()), !dbg !38
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !21, metadata !DIExpression()), !dbg !40
INSTCOMBINE ITERATION: Inst(start):  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2.a, metadata !22, metadata !DIExpression()), !dbg !41
INSTCOMBINE ITERATION: Inst(start):  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2.b, metadata !23, metadata !DIExpression()), !dbg !42
INSTCOMBINE ITERATION: Inst(start):  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !24, metadata !DIExpression()), !dbg !43
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !25, metadata !DIExpression()), !dbg !45
INSTCOMBINE ITERATION: Inst(start):  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3.a, metadata !26, metadata !DIExpression()), !dbg !46
INSTCOMBINE ITERATION: Inst(start):  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3.b, metadata !27, metadata !DIExpression()), !dbg !47
INSTCOMBINE ITERATION: Inst(start):  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !28, metadata !DIExpression()), !dbg !48
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
INSTCOMBINE ITERATION: Inst(start):  ret void, !dbg !50


INSTCOMBINE ITERATION #1 on f_7
INSTCOMBINE ITERATION: Inst(end):  %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length_a, metadata !10, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(end):  %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length_b, metadata !12, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(end):  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0.a, metadata !13, metadata !DIExpression()), !dbg !31
INSTCOMBINE ITERATION: Inst(end):  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0.b, metadata !15, metadata !DIExpression()), !dbg !32
INSTCOMBINE ITERATION: Inst(end):  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !16, metadata !DIExpression()), !dbg !33
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !17, metadata !DIExpression()), !dbg !35
INSTCOMBINE ITERATION: Inst(end):  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1.a, metadata !18, metadata !DIExpression()), !dbg !36
INSTCOMBINE ITERATION: Inst(end):  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1.b, metadata !19, metadata !DIExpression()), !dbg !37
INSTCOMBINE ITERATION: Inst(end):  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !20, metadata !DIExpression()), !dbg !38
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !21, metadata !DIExpression()), !dbg !40
INSTCOMBINE ITERATION: Inst(end):  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2.a, metadata !22, metadata !DIExpression()), !dbg !41
INSTCOMBINE ITERATION: Inst(end):  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2.b, metadata !23, metadata !DIExpression()), !dbg !42
INSTCOMBINE ITERATION: Inst(end):  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !24, metadata !DIExpression()), !dbg !43
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !25, metadata !DIExpression()), !dbg !45
INSTCOMBINE ITERATION: Inst(end):  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3.a, metadata !26, metadata !DIExpression()), !dbg !46
INSTCOMBINE ITERATION: Inst(end):  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3.b, metadata !27, metadata !DIExpression()), !dbg !47
INSTCOMBINE ITERATION: Inst(end):  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !28, metadata !DIExpression()), !dbg !48
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
INSTCOMBINE ITERATION: Inst(end):  ret void, !dbg !50
chris-worklist-bb: bb: 
entry:
  %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
  call void @llvm.dbg.value(metadata i32 %length_a, metadata !9, metadata !DIExpression()), !dbg !28
  %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
  call void @llvm.dbg.value(metadata i32 %length_b, metadata !11, metadata !DIExpression()), !dbg !30
  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
  call void @llvm.dbg.value(metadata i1 %chk0.a, metadata !12, metadata !DIExpression()), !dbg !31
  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
  call void @llvm.dbg.value(metadata i1 %chk0.b, metadata !14, metadata !DIExpression()), !dbg !32
  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !15, metadata !DIExpression()), !dbg !33
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !16, metadata !DIExpression()), !dbg !35
  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
  call void @llvm.dbg.value(metadata i1 %chk1.a, metadata !17, metadata !DIExpression()), !dbg !36
  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
  call void @llvm.dbg.value(metadata i1 %chk1.b, metadata !18, metadata !DIExpression()), !dbg !37
  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !19, metadata !DIExpression()), !dbg !38
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !20, metadata !DIExpression()), !dbg !40
  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
  call void @llvm.dbg.value(metadata i1 %chk2.a, metadata !21, metadata !DIExpression()), !dbg !41
  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
  call void @llvm.dbg.value(metadata i1 %chk2.b, metadata !22, metadata !DIExpression()), !dbg !42
  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !23, metadata !DIExpression()), !dbg !43
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !24, metadata !DIExpression()), !dbg !45
  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
  call void @llvm.dbg.value(metadata i1 %chk3.a, metadata !25, metadata !DIExpression()), !dbg !46
  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
  call void @llvm.dbg.value(metadata i1 %chk3.b, metadata !26, metadata !DIExpression()), !dbg !47
  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !27, metadata !DIExpression()), !dbg !48
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
  ret void, !dbg !50

chris-worklist-bb: BB: 
entry:
  %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
  call void @llvm.dbg.value(metadata i32 %length_a, metadata !9, metadata !DIExpression()), !dbg !28
  %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
  call void @llvm.dbg.value(metadata i32 %length_b, metadata !11, metadata !DIExpression()), !dbg !30
  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
  call void @llvm.dbg.value(metadata i1 %chk0.a, metadata !12, metadata !DIExpression()), !dbg !31
  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
  call void @llvm.dbg.value(metadata i1 %chk0.b, metadata !14, metadata !DIExpression()), !dbg !32
  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !15, metadata !DIExpression()), !dbg !33
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !16, metadata !DIExpression()), !dbg !35
  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
  call void @llvm.dbg.value(metadata i1 %chk1.a, metadata !17, metadata !DIExpression()), !dbg !36
  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
  call void @llvm.dbg.value(metadata i1 %chk1.b, metadata !18, metadata !DIExpression()), !dbg !37
  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !19, metadata !DIExpression()), !dbg !38
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !20, metadata !DIExpression()), !dbg !40
  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
  call void @llvm.dbg.value(metadata i1 %chk2.a, metadata !21, metadata !DIExpression()), !dbg !41
  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
  call void @llvm.dbg.value(metadata i1 %chk2.b, metadata !22, metadata !DIExpression()), !dbg !42
  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !23, metadata !DIExpression()), !dbg !43
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !24, metadata !DIExpression()), !dbg !45
  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
  call void @llvm.dbg.value(metadata i1 %chk3.a, metadata !25, metadata !DIExpression()), !dbg !46
  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
  call void @llvm.dbg.value(metadata i1 %chk3.b, metadata !26, metadata !DIExpression()), !dbg !47
  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !27, metadata !DIExpression()), !dbg !48
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
  ret void, !dbg !50

chris-worklist-bb: BB end:   %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length_a, metadata !10, metadata !DIExpression()), !dbg !29
chris-worklist-bb: BB end:   %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length_b, metadata !12, metadata !DIExpression()), !dbg !30
chris-worklist-bb: BB end:   %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0.a, metadata !13, metadata !DIExpression()), !dbg !31
chris-worklist-bb: BB end:   %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0.b, metadata !15, metadata !DIExpression()), !dbg !32
chris-worklist-bb: BB end:   %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !16, metadata !DIExpression()), !dbg !33
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
chris-worklist-bb: BB end:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !17, metadata !DIExpression()), !dbg !35
chris-worklist-bb: BB end:   %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1.a, metadata !18, metadata !DIExpression()), !dbg !36
chris-worklist-bb: BB end:   %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1.b, metadata !19, metadata !DIExpression()), !dbg !37
chris-worklist-bb: BB end:   %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !20, metadata !DIExpression()), !dbg !38
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
chris-worklist-bb: BB end:   %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !21, metadata !DIExpression()), !dbg !40
chris-worklist-bb: BB end:   %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2.a, metadata !22, metadata !DIExpression()), !dbg !41
chris-worklist-bb: BB end:   %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2.b, metadata !23, metadata !DIExpression()), !dbg !42
chris-worklist-bb: BB end:   %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !24, metadata !DIExpression()), !dbg !43
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
chris-worklist-bb: BB end:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !25, metadata !DIExpression()), !dbg !45
chris-worklist-bb: BB end:   %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3.a, metadata !26, metadata !DIExpression()), !dbg !46
chris-worklist-bb: BB end:   %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3.b, metadata !27, metadata !DIExpression()), !dbg !47
chris-worklist-bb: BB end:   %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !28, metadata !DIExpression()), !dbg !48
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
chris-worklist-bb: BB end:   ret void, !dbg !50
IC: ADDING: 22 instrs to worklist
chris-AddInitialGroup: I:   ret void, !dbg !50
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
chris-AddInitialGroup: I:   %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
chris-AddInitialGroup: I:   %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
chris-AddInitialGroup: I:   %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
chris-AddInitialGroup: I:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
chris-AddInitialGroup: I:   %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
chris-AddInitialGroup: I:   %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
chris-AddInitialGroup: I:   %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
chris-AddInitialGroup: I:   %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
chris-AddInitialGroup: I:   %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
chris-AddInitialGroup: I:   %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
chris-AddInitialGroup: I:   %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
chris-AddInitialGroup: I:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
chris-AddInitialGroup: I:   %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
chris-AddInitialGroup: I:   %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
chris-AddInitialGroup: I:   %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
chris-AddInitialGroup: I:   %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
chris-AddInitialGroup: I:   %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
RemoveOne!!!
chris-RemoveOne:   %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
chris-RemoveOne: return I  %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
run: WorkList:   %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
chris-run: I=  %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
chris-run: I-end=  %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
IC: Visiting:   %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
test1: I=  %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
chris-RemoveOne: return I  %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
run: WorkList:   %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
chris-run: I=  %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
chris-run: I-end=  %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
IC: Visiting:   %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
test1: I=  %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
chris-RemoveOne: return I  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
run: WorkList:   %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
chris-run: I=  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
chris-run: I-end=  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
IC: Visiting:   %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
test1: I=  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
chris-RemoveOne: return I  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
run: WorkList:   %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
chris-run: I=  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
chris-run: I-end=  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
IC: Visiting:   %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
test1: I=  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
chris-RemoveOne: return I  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
run: WorkList:   %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
chris-run: I=  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
chris-run: I-end=  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
IC: Visiting:   %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
test1: I=  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !17, metadata !DIExpression()), !dbg !35
NextInst[1]   %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk1.a, metadata !18, metadata !DIExpression()), !dbg !36
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk1.a, metadata !18, metadata !DIExpression()), !dbg !36
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
chris-RemoveOne: return I  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
run: WorkList:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
chris-run: I=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
chris-run: I-end=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
IC: Visiting:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
test1: I=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
chris-RemoveOne: return I  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
run: WorkList:   %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
chris-run: I=  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
chris-run: I-end=  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
IC: Visiting:   %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
test1: I=  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
chris-RemoveOne: return I  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
run: WorkList:   %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
chris-run: I=  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
chris-run: I-end=  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
IC: Visiting:   %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
test1: I=  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
chris-RemoveOne: return I  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
run: WorkList:   %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
chris-run: I=  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
chris-run: I-end=  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
IC: Visiting:   %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
test1: I=  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !21, metadata !DIExpression()), !dbg !40
NextInst[1]   %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk2.a, metadata !22, metadata !DIExpression()), !dbg !41
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk2.a, metadata !22, metadata !DIExpression()), !dbg !41
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
chris-RemoveOne: return I  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
run: WorkList:   %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
chris-run: I=  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
chris-run: I-end=  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
IC: Visiting:   %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
test1: I=  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
chris-RemoveOne: return I  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
run: WorkList:   %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
chris-run: I=  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
chris-run: I-end=  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
IC: Visiting:   %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
test1: I=  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
chris-RemoveOne: return I  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
run: WorkList:   %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
chris-run: I=  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
chris-run: I-end=  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
IC: Visiting:   %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
test1: I=  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
chris-RemoveOne: return I  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
run: WorkList:   %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
chris-run: I=  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
chris-run: I-end=  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
IC: Visiting:   %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
test1: I=  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !25, metadata !DIExpression()), !dbg !45
NextInst[1]   %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk3.a, metadata !26, metadata !DIExpression()), !dbg !46
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk3.a, metadata !26, metadata !DIExpression()), !dbg !46
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
chris-RemoveOne: return I  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
run: WorkList:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
chris-run: I=  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
chris-run: I-end=  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
IC: Visiting:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
test1: I=  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
chris-RemoveOne: return I  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
run: WorkList:   %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
chris-run: I=  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
chris-run: I-end=  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
IC: Visiting:   %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
test1: I=  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
chris-RemoveOne: return I  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
run: WorkList:   %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
chris-run: I=  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
chris-run: I-end=  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
IC: Visiting:   %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
test1: I=  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
chris-RemoveOne: return I  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
run: WorkList:   %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
chris-run: I=  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
chris-run: I-end=  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
IC: Visiting:   %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
test1: I=  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void, !dbg !50
 ok, break
Inst[end]:   ret void, !dbg !50
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void, !dbg !50
chris-RemoveOne: return I  ret void, !dbg !50
run: WorkList:   ret void, !dbg !50
chris-run: I=  ret void, !dbg !50
chris-run: I-end=  ret void, !dbg !50
IC: Visiting:   ret void, !dbg !50
test1: I=  ret void, !dbg !50
visit: nullptr 
test3
test4
CheckFunctionDebugify [Combine redundant instructions]: PASS
CheckFunctionDebugify [Jump Threading]: PASS
CheckFunctionDebugify [Value Propagation]: PASS
CheckFunctionDebugify [Dead Store Elimination]: PASS
CheckFunctionDebugify [Aggressive Dead Code Elimination]: PASS
CheckFunctionDebugify [Simplify the CFG]: PASS
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %length_a, metadata !10, metadata !DIExpression()), !dbg !29
runOnFunction: I:  %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %length_b, metadata !12, metadata !DIExpression()), !dbg !30
runOnFunction: I:  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0.a, metadata !13, metadata !DIExpression()), !dbg !31
runOnFunction: I:  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0.b, metadata !15, metadata !DIExpression()), !dbg !32
runOnFunction: I:  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !16, metadata !DIExpression()), !dbg !33
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
runOnFunction: I:  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !17, metadata !DIExpression()), !dbg !35
runOnFunction: I:  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1.a, metadata !18, metadata !DIExpression()), !dbg !36
runOnFunction: I:  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1.b, metadata !19, metadata !DIExpression()), !dbg !37
runOnFunction: I:  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !20, metadata !DIExpression()), !dbg !38
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
runOnFunction: I:  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !21, metadata !DIExpression()), !dbg !40
runOnFunction: I:  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2.a, metadata !22, metadata !DIExpression()), !dbg !41
runOnFunction: I:  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2.b, metadata !23, metadata !DIExpression()), !dbg !42
runOnFunction: I:  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !24, metadata !DIExpression()), !dbg !43
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
runOnFunction: I:  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !25, metadata !DIExpression()), !dbg !45
runOnFunction: I:  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3.a, metadata !26, metadata !DIExpression()), !dbg !46
runOnFunction: I:  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3.b, metadata !27, metadata !DIExpression()), !dbg !47
runOnFunction: I:  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !28, metadata !DIExpression()), !dbg !48
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
runOnFunction: I:  ret void, !dbg !50
INSTCOMBINE ITERATION: Inst(start):  %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %length_a, metadata !10, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(start):  %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %length_b, metadata !12, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(start):  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0.a, metadata !13, metadata !DIExpression()), !dbg !31
INSTCOMBINE ITERATION: Inst(start):  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0.b, metadata !15, metadata !DIExpression()), !dbg !32
INSTCOMBINE ITERATION: Inst(start):  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !16, metadata !DIExpression()), !dbg !33
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !17, metadata !DIExpression()), !dbg !35
INSTCOMBINE ITERATION: Inst(start):  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1.a, metadata !18, metadata !DIExpression()), !dbg !36
INSTCOMBINE ITERATION: Inst(start):  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1.b, metadata !19, metadata !DIExpression()), !dbg !37
INSTCOMBINE ITERATION: Inst(start):  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !20, metadata !DIExpression()), !dbg !38
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !21, metadata !DIExpression()), !dbg !40
INSTCOMBINE ITERATION: Inst(start):  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2.a, metadata !22, metadata !DIExpression()), !dbg !41
INSTCOMBINE ITERATION: Inst(start):  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2.b, metadata !23, metadata !DIExpression()), !dbg !42
INSTCOMBINE ITERATION: Inst(start):  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !24, metadata !DIExpression()), !dbg !43
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !25, metadata !DIExpression()), !dbg !45
INSTCOMBINE ITERATION: Inst(start):  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3.a, metadata !26, metadata !DIExpression()), !dbg !46
INSTCOMBINE ITERATION: Inst(start):  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3.b, metadata !27, metadata !DIExpression()), !dbg !47
INSTCOMBINE ITERATION: Inst(start):  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !28, metadata !DIExpression()), !dbg !48
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
INSTCOMBINE ITERATION: Inst(start):  ret void, !dbg !50


INSTCOMBINE ITERATION #1 on f_7
INSTCOMBINE ITERATION: Inst(end):  %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length_a, metadata !10, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(end):  %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length_b, metadata !12, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(end):  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0.a, metadata !13, metadata !DIExpression()), !dbg !31
INSTCOMBINE ITERATION: Inst(end):  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0.b, metadata !15, metadata !DIExpression()), !dbg !32
INSTCOMBINE ITERATION: Inst(end):  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !16, metadata !DIExpression()), !dbg !33
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !17, metadata !DIExpression()), !dbg !35
INSTCOMBINE ITERATION: Inst(end):  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1.a, metadata !18, metadata !DIExpression()), !dbg !36
INSTCOMBINE ITERATION: Inst(end):  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1.b, metadata !19, metadata !DIExpression()), !dbg !37
INSTCOMBINE ITERATION: Inst(end):  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !20, metadata !DIExpression()), !dbg !38
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !21, metadata !DIExpression()), !dbg !40
INSTCOMBINE ITERATION: Inst(end):  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2.a, metadata !22, metadata !DIExpression()), !dbg !41
INSTCOMBINE ITERATION: Inst(end):  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2.b, metadata !23, metadata !DIExpression()), !dbg !42
INSTCOMBINE ITERATION: Inst(end):  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !24, metadata !DIExpression()), !dbg !43
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !25, metadata !DIExpression()), !dbg !45
INSTCOMBINE ITERATION: Inst(end):  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3.a, metadata !26, metadata !DIExpression()), !dbg !46
INSTCOMBINE ITERATION: Inst(end):  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3.b, metadata !27, metadata !DIExpression()), !dbg !47
INSTCOMBINE ITERATION: Inst(end):  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !28, metadata !DIExpression()), !dbg !48
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
INSTCOMBINE ITERATION: Inst(end):  ret void, !dbg !50
chris-worklist-bb: bb: 
entry:
  %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
  call void @llvm.dbg.value(metadata i32 %length_a, metadata !9, metadata !DIExpression()), !dbg !28
  %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
  call void @llvm.dbg.value(metadata i32 %length_b, metadata !11, metadata !DIExpression()), !dbg !30
  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
  call void @llvm.dbg.value(metadata i1 %chk0.a, metadata !12, metadata !DIExpression()), !dbg !31
  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
  call void @llvm.dbg.value(metadata i1 %chk0.b, metadata !14, metadata !DIExpression()), !dbg !32
  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !15, metadata !DIExpression()), !dbg !33
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !16, metadata !DIExpression()), !dbg !35
  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
  call void @llvm.dbg.value(metadata i1 %chk1.a, metadata !17, metadata !DIExpression()), !dbg !36
  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
  call void @llvm.dbg.value(metadata i1 %chk1.b, metadata !18, metadata !DIExpression()), !dbg !37
  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !19, metadata !DIExpression()), !dbg !38
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !20, metadata !DIExpression()), !dbg !40
  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
  call void @llvm.dbg.value(metadata i1 %chk2.a, metadata !21, metadata !DIExpression()), !dbg !41
  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
  call void @llvm.dbg.value(metadata i1 %chk2.b, metadata !22, metadata !DIExpression()), !dbg !42
  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !23, metadata !DIExpression()), !dbg !43
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !24, metadata !DIExpression()), !dbg !45
  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
  call void @llvm.dbg.value(metadata i1 %chk3.a, metadata !25, metadata !DIExpression()), !dbg !46
  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
  call void @llvm.dbg.value(metadata i1 %chk3.b, metadata !26, metadata !DIExpression()), !dbg !47
  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !27, metadata !DIExpression()), !dbg !48
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
  ret void, !dbg !50

chris-worklist-bb: BB: 
entry:
  %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
  call void @llvm.dbg.value(metadata i32 %length_a, metadata !9, metadata !DIExpression()), !dbg !28
  %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
  call void @llvm.dbg.value(metadata i32 %length_b, metadata !11, metadata !DIExpression()), !dbg !30
  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
  call void @llvm.dbg.value(metadata i1 %chk0.a, metadata !12, metadata !DIExpression()), !dbg !31
  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
  call void @llvm.dbg.value(metadata i1 %chk0.b, metadata !14, metadata !DIExpression()), !dbg !32
  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !15, metadata !DIExpression()), !dbg !33
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !16, metadata !DIExpression()), !dbg !35
  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
  call void @llvm.dbg.value(metadata i1 %chk1.a, metadata !17, metadata !DIExpression()), !dbg !36
  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
  call void @llvm.dbg.value(metadata i1 %chk1.b, metadata !18, metadata !DIExpression()), !dbg !37
  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !19, metadata !DIExpression()), !dbg !38
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !20, metadata !DIExpression()), !dbg !40
  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
  call void @llvm.dbg.value(metadata i1 %chk2.a, metadata !21, metadata !DIExpression()), !dbg !41
  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
  call void @llvm.dbg.value(metadata i1 %chk2.b, metadata !22, metadata !DIExpression()), !dbg !42
  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !23, metadata !DIExpression()), !dbg !43
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !24, metadata !DIExpression()), !dbg !45
  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
  call void @llvm.dbg.value(metadata i1 %chk3.a, metadata !25, metadata !DIExpression()), !dbg !46
  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
  call void @llvm.dbg.value(metadata i1 %chk3.b, metadata !26, metadata !DIExpression()), !dbg !47
  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !27, metadata !DIExpression()), !dbg !48
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
  ret void, !dbg !50

chris-worklist-bb: BB end:   %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length_a, metadata !10, metadata !DIExpression()), !dbg !29
chris-worklist-bb: BB end:   %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length_b, metadata !12, metadata !DIExpression()), !dbg !30
chris-worklist-bb: BB end:   %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0.a, metadata !13, metadata !DIExpression()), !dbg !31
chris-worklist-bb: BB end:   %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0.b, metadata !15, metadata !DIExpression()), !dbg !32
chris-worklist-bb: BB end:   %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !16, metadata !DIExpression()), !dbg !33
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
chris-worklist-bb: BB end:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !17, metadata !DIExpression()), !dbg !35
chris-worklist-bb: BB end:   %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1.a, metadata !18, metadata !DIExpression()), !dbg !36
chris-worklist-bb: BB end:   %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1.b, metadata !19, metadata !DIExpression()), !dbg !37
chris-worklist-bb: BB end:   %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !20, metadata !DIExpression()), !dbg !38
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
chris-worklist-bb: BB end:   %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !21, metadata !DIExpression()), !dbg !40
chris-worklist-bb: BB end:   %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2.a, metadata !22, metadata !DIExpression()), !dbg !41
chris-worklist-bb: BB end:   %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2.b, metadata !23, metadata !DIExpression()), !dbg !42
chris-worklist-bb: BB end:   %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !24, metadata !DIExpression()), !dbg !43
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
chris-worklist-bb: BB end:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !25, metadata !DIExpression()), !dbg !45
chris-worklist-bb: BB end:   %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3.a, metadata !26, metadata !DIExpression()), !dbg !46
chris-worklist-bb: BB end:   %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3.b, metadata !27, metadata !DIExpression()), !dbg !47
chris-worklist-bb: BB end:   %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !28, metadata !DIExpression()), !dbg !48
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
chris-worklist-bb: BB end:   ret void, !dbg !50
IC: ADDING: 22 instrs to worklist
chris-AddInitialGroup: I:   ret void, !dbg !50
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
chris-AddInitialGroup: I:   %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
chris-AddInitialGroup: I:   %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
chris-AddInitialGroup: I:   %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
chris-AddInitialGroup: I:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
chris-AddInitialGroup: I:   %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
chris-AddInitialGroup: I:   %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
chris-AddInitialGroup: I:   %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
chris-AddInitialGroup: I:   %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
chris-AddInitialGroup: I:   %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
chris-AddInitialGroup: I:   %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
chris-AddInitialGroup: I:   %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
chris-AddInitialGroup: I:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
chris-AddInitialGroup: I:   %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
chris-AddInitialGroup: I:   %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
chris-AddInitialGroup: I:   %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
chris-AddInitialGroup: I:   %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
chris-AddInitialGroup: I:   %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
RemoveOne!!!
chris-RemoveOne:   %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
chris-RemoveOne: return I  %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
run: WorkList:   %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
chris-run: I=  %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
chris-run: I-end=  %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
IC: Visiting:   %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
test1: I=  %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
chris-RemoveOne: return I  %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
run: WorkList:   %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
chris-run: I=  %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
chris-run: I-end=  %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
IC: Visiting:   %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
test1: I=  %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
chris-RemoveOne: return I  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
run: WorkList:   %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
chris-run: I=  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
chris-run: I-end=  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
IC: Visiting:   %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
test1: I=  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
chris-RemoveOne: return I  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
run: WorkList:   %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
chris-run: I=  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
chris-run: I-end=  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
IC: Visiting:   %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
test1: I=  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
chris-RemoveOne: return I  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
run: WorkList:   %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
chris-run: I=  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
chris-run: I-end=  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
IC: Visiting:   %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
test1: I=  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !17, metadata !DIExpression()), !dbg !35
NextInst[1]   %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk1.a, metadata !18, metadata !DIExpression()), !dbg !36
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk1.a, metadata !18, metadata !DIExpression()), !dbg !36
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
chris-RemoveOne: return I  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
run: WorkList:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
chris-run: I=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
chris-run: I-end=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
IC: Visiting:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
test1: I=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
chris-RemoveOne: return I  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
run: WorkList:   %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
chris-run: I=  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
chris-run: I-end=  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
IC: Visiting:   %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
test1: I=  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
chris-RemoveOne: return I  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
run: WorkList:   %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
chris-run: I=  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
chris-run: I-end=  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
IC: Visiting:   %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
test1: I=  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
chris-RemoveOne: return I  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
run: WorkList:   %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
chris-run: I=  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
chris-run: I-end=  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
IC: Visiting:   %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
test1: I=  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !21, metadata !DIExpression()), !dbg !40
NextInst[1]   %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk2.a, metadata !22, metadata !DIExpression()), !dbg !41
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk2.a, metadata !22, metadata !DIExpression()), !dbg !41
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
chris-RemoveOne: return I  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
run: WorkList:   %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
chris-run: I=  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
chris-run: I-end=  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
IC: Visiting:   %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
test1: I=  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
chris-RemoveOne: return I  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
run: WorkList:   %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
chris-run: I=  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
chris-run: I-end=  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
IC: Visiting:   %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
test1: I=  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
chris-RemoveOne: return I  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
run: WorkList:   %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
chris-run: I=  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
chris-run: I-end=  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
IC: Visiting:   %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
test1: I=  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
chris-RemoveOne: return I  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
run: WorkList:   %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
chris-run: I=  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
chris-run: I-end=  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
IC: Visiting:   %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
test1: I=  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !25, metadata !DIExpression()), !dbg !45
NextInst[1]   %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk3.a, metadata !26, metadata !DIExpression()), !dbg !46
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk3.a, metadata !26, metadata !DIExpression()), !dbg !46
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
chris-RemoveOne: return I  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
run: WorkList:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
chris-run: I=  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
chris-run: I-end=  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
IC: Visiting:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
test1: I=  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
chris-RemoveOne: return I  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
run: WorkList:   %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
chris-run: I=  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
chris-run: I-end=  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
IC: Visiting:   %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
test1: I=  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
chris-RemoveOne: return I  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
run: WorkList:   %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
chris-run: I=  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
chris-run: I-end=  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
IC: Visiting:   %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
test1: I=  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
chris-RemoveOne: return I  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
run: WorkList:   %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
chris-run: I=  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
chris-run: I-end=  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
IC: Visiting:   %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
test1: I=  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void, !dbg !50
 ok, break
Inst[end]:   ret void, !dbg !50
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void, !dbg !50
chris-RemoveOne: return I  ret void, !dbg !50
run: WorkList:   ret void, !dbg !50
chris-run: I=  ret void, !dbg !50
chris-run: I-end=  ret void, !dbg !50
IC: Visiting:   ret void, !dbg !50
test1: I=  ret void, !dbg !50
visit: nullptr 
test3
test4
CheckFunctionDebugify [Combine redundant instructions]: PASS
CheckModuleDebugify [A No-Op Barrier Pass]: PASS
CheckModuleDebugify [Deduce function attributes in RPO]: PASS
CheckModuleDebugify [Global Variable Optimizer]: PASS
CheckModuleDebugify [Dead Global Elimination]: PASS
CheckModuleDebugify [Globals Alias Analysis]: PASS
CheckFunctionDebugify [Float to int]: PASS
CheckFunctionDebugify [Loop Distribution]: PASS
CheckFunctionDebugify [Loop Vectorization]: PASS
CheckFunctionDebugify [Loop Load Elimination]: PASS
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
runOnFunction: I:  %chk0 = icmp ugt i32 %length, %x, !dbg !21
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
runOnFunction: I:  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
runOnFunction: I:  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
runOnFunction: I:  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
runOnFunction: I:  ret void, !dbg !32
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(start):  ret void, !dbg !32


INSTCOMBINE ITERATION #1 on f_0
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(end):  ret void, !dbg !32
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-worklist-bb: BB end:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-worklist-bb: BB end:   %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-worklist-bb: BB end:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-worklist-bb: BB end:   ret void, !dbg !32
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void, !dbg !32
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-AddInitialGroup: I:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-AddInitialGroup: I:   %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-AddInitialGroup: I:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
test1: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x, !dbg !21
run: WorkList:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
test1: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
NextInst[1]   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-RemoveOne: return I  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
run: WorkList:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-run: I=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-run: I-end=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
IC: Visiting:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
test1: I=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
NextInst[1]   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
chris-RemoveOne: return I  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
run: WorkList:   %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
chris-run: I=  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
chris-run: I-end=  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
IC: Visiting:   %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
test1: I=  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
NextInst[1]   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
chris-RemoveOne: return I  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
run: WorkList:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
chris-run: I=  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
chris-run: I-end=  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
IC: Visiting:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
test1: I=  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void, !dbg !32
 ok, break
Inst[end]:   ret void, !dbg !32
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void, !dbg !32
chris-RemoveOne: return I  ret void, !dbg !32
run: WorkList:   ret void, !dbg !32
chris-run: I=  ret void, !dbg !32
chris-run: I-end=  ret void, !dbg !32
IC: Visiting:   ret void, !dbg !32
test1: I=  ret void, !dbg !32
visit: nullptr 
test3
test4
CheckFunctionDebugify [Combine redundant instructions]: PASS
CheckFunctionDebugify [Simplify the CFG]: PASS
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
runOnFunction: I:  %chk0 = icmp ugt i32 %length, %x, !dbg !21
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
runOnFunction: I:  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
runOnFunction: I:  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
runOnFunction: I:  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
runOnFunction: I:  ret void, !dbg !32
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(start):  ret void, !dbg !32


INSTCOMBINE ITERATION #1 on f_0
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(end):  ret void, !dbg !32
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-worklist-bb: BB end:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-worklist-bb: BB end:   %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-worklist-bb: BB end:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-worklist-bb: BB end:   ret void, !dbg !32
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void, !dbg !32
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-AddInitialGroup: I:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-AddInitialGroup: I:   %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-AddInitialGroup: I:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
test1: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x, !dbg !21
run: WorkList:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
test1: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
NextInst[1]   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-RemoveOne: return I  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
run: WorkList:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-run: I=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-run: I-end=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
IC: Visiting:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
test1: I=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
NextInst[1]   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
chris-RemoveOne: return I  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
run: WorkList:   %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
chris-run: I=  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
chris-run: I-end=  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
IC: Visiting:   %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
test1: I=  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
NextInst[1]   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
chris-RemoveOne: return I  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
run: WorkList:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
chris-run: I=  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
chris-run: I-end=  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
IC: Visiting:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
test1: I=  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void, !dbg !32
 ok, break
Inst[end]:   ret void, !dbg !32
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void, !dbg !32
chris-RemoveOne: return I  ret void, !dbg !32
run: WorkList:   ret void, !dbg !32
chris-run: I=  ret void, !dbg !32
chris-run: I-end=  ret void, !dbg !32
IC: Visiting:   ret void, !dbg !32
test1: I=  ret void, !dbg !32
visit: nullptr 
test3
test4
CheckFunctionDebugify [Combine redundant instructions]: PASS
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
runOnFunction: I:  %chk0 = icmp ugt i32 %length, %x, !dbg !21
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
runOnFunction: I:  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
runOnFunction: I:  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
runOnFunction: I:  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
runOnFunction: I:  ret void, !dbg !32
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(start):  ret void, !dbg !32


INSTCOMBINE ITERATION #1 on f_0
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(end):  ret void, !dbg !32
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-worklist-bb: BB end:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-worklist-bb: BB end:   %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-worklist-bb: BB end:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-worklist-bb: BB end:   ret void, !dbg !32
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void, !dbg !32
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-AddInitialGroup: I:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-AddInitialGroup: I:   %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-AddInitialGroup: I:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
test1: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x, !dbg !21
run: WorkList:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
test1: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
NextInst[1]   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-RemoveOne: return I  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
run: WorkList:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-run: I=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-run: I-end=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
IC: Visiting:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
test1: I=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
NextInst[1]   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
chris-RemoveOne: return I  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
run: WorkList:   %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
chris-run: I=  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
chris-run: I-end=  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
IC: Visiting:   %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
test1: I=  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !26
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
NextInst[1]   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
chris-RemoveOne: return I  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
run: WorkList:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
chris-run: I=  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
chris-run: I-end=  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
IC: Visiting:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
test1: I=  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void, !dbg !32
 ok, break
Inst[end]:   ret void, !dbg !32
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void, !dbg !32
chris-RemoveOne: return I  ret void, !dbg !32
run: WorkList:   ret void, !dbg !32
chris-run: I=  ret void, !dbg !32
chris-run: I-end=  ret void, !dbg !32
IC: Visiting:   ret void, !dbg !32
test1: I=  ret void, !dbg !32
visit: nullptr 
test3
test4
CheckFunctionDebugify [Combine redundant instructions]: PASS
CheckFunctionDebugify [Warn about non-applied transformations]: PASS
CheckFunctionDebugify [Alignment from assumptions]: PASS
CheckFunctionDebugify [Float to int]: PASS
CheckFunctionDebugify [Loop Distribution]: PASS
CheckFunctionDebugify [Loop Vectorization]: PASS
CheckFunctionDebugify [Loop Load Elimination]: PASS
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
runOnFunction: I:  %chk0 = icmp ugt i32 %length, %x, !dbg !21
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
runOnFunction: I:  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
runOnFunction: I:  %x.inc2 = add nuw i32 %x, 3, !dbg !26
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
runOnFunction: I:  %x.inc3 = add nuw i32 %x, 6, !dbg !29
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
runOnFunction: I:  ret void, !dbg !32
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add nuw i32 %x, 3, !dbg !26
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw i32 %x, 6, !dbg !29
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(start):  ret void, !dbg !32


INSTCOMBINE ITERATION #1 on f_1
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add nuw i32 %x, 3, !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw i32 %x, 6, !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(end):  ret void, !dbg !32
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add nuw i32 %x, 3, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add nuw i32 %x, 6, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add nuw i32 %x, 3, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add nuw i32 %x, 6, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-worklist-bb: BB end:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-worklist-bb: BB end:   %x.inc2 = add nuw i32 %x, 3, !dbg !26
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-worklist-bb: BB end:   %x.inc3 = add nuw i32 %x, 6, !dbg !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-worklist-bb: BB end:   ret void, !dbg !32
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void, !dbg !32
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-AddInitialGroup: I:   %x.inc3 = add nuw i32 %x, 6, !dbg !29
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-AddInitialGroup: I:   %x.inc2 = add nuw i32 %x, 3, !dbg !26
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-AddInitialGroup: I:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
test1: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x, !dbg !21
run: WorkList:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
test1: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
NextInst[1]   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-RemoveOne: return I  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
run: WorkList:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-run: I=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-run: I-end=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
IC: Visiting:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
test1: I=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add nuw i32 %x, 3, !dbg !26
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
NextInst[1]   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add nuw i32 %x, 3, !dbg !26
chris-RemoveOne: return I  %x.inc2 = add nuw i32 %x, 3, !dbg !26
run: WorkList:   %x.inc2 = add nuw i32 %x, 3, !dbg !26
chris-run: I=  %x.inc2 = add nuw i32 %x, 3, !dbg !26
chris-run: I-end=  %x.inc2 = add nuw i32 %x, 3, !dbg !26
IC: Visiting:   %x.inc2 = add nuw i32 %x, 3, !dbg !26
test1: I=  %x.inc2 = add nuw i32 %x, 3, !dbg !26
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add nuw i32 %x, 6, !dbg !29
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
NextInst[1]   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw i32 %x, 6, !dbg !29
chris-RemoveOne: return I  %x.inc3 = add nuw i32 %x, 6, !dbg !29
run: WorkList:   %x.inc3 = add nuw i32 %x, 6, !dbg !29
chris-run: I=  %x.inc3 = add nuw i32 %x, 6, !dbg !29
chris-run: I-end=  %x.inc3 = add nuw i32 %x, 6, !dbg !29
IC: Visiting:   %x.inc3 = add nuw i32 %x, 6, !dbg !29
test1: I=  %x.inc3 = add nuw i32 %x, 6, !dbg !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void, !dbg !32
 ok, break
Inst[end]:   ret void, !dbg !32
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void, !dbg !32
chris-RemoveOne: return I  ret void, !dbg !32
run: WorkList:   ret void, !dbg !32
chris-run: I=  ret void, !dbg !32
chris-run: I-end=  ret void, !dbg !32
IC: Visiting:   ret void, !dbg !32
test1: I=  ret void, !dbg !32
visit: nullptr 
test3
test4
CheckFunctionDebugify [Combine redundant instructions]: PASS
CheckFunctionDebugify [Simplify the CFG]: PASS
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
runOnFunction: I:  %chk0 = icmp ugt i32 %length, %x, !dbg !21
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
runOnFunction: I:  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
runOnFunction: I:  %x.inc2 = add nuw i32 %x, 3, !dbg !26
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
runOnFunction: I:  %x.inc3 = add nuw i32 %x, 6, !dbg !29
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
runOnFunction: I:  ret void, !dbg !32
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add nuw i32 %x, 3, !dbg !26
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw i32 %x, 6, !dbg !29
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(start):  ret void, !dbg !32


INSTCOMBINE ITERATION #1 on f_1
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add nuw i32 %x, 3, !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw i32 %x, 6, !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(end):  ret void, !dbg !32
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add nuw i32 %x, 3, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add nuw i32 %x, 6, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add nuw i32 %x, 3, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add nuw i32 %x, 6, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-worklist-bb: BB end:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-worklist-bb: BB end:   %x.inc2 = add nuw i32 %x, 3, !dbg !26
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-worklist-bb: BB end:   %x.inc3 = add nuw i32 %x, 6, !dbg !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-worklist-bb: BB end:   ret void, !dbg !32
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void, !dbg !32
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-AddInitialGroup: I:   %x.inc3 = add nuw i32 %x, 6, !dbg !29
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-AddInitialGroup: I:   %x.inc2 = add nuw i32 %x, 3, !dbg !26
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-AddInitialGroup: I:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
test1: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x, !dbg !21
run: WorkList:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
test1: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
NextInst[1]   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-RemoveOne: return I  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
run: WorkList:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-run: I=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-run: I-end=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
IC: Visiting:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
test1: I=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add nuw i32 %x, 3, !dbg !26
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
NextInst[1]   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add nuw i32 %x, 3, !dbg !26
chris-RemoveOne: return I  %x.inc2 = add nuw i32 %x, 3, !dbg !26
run: WorkList:   %x.inc2 = add nuw i32 %x, 3, !dbg !26
chris-run: I=  %x.inc2 = add nuw i32 %x, 3, !dbg !26
chris-run: I-end=  %x.inc2 = add nuw i32 %x, 3, !dbg !26
IC: Visiting:   %x.inc2 = add nuw i32 %x, 3, !dbg !26
test1: I=  %x.inc2 = add nuw i32 %x, 3, !dbg !26
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add nuw i32 %x, 6, !dbg !29
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
NextInst[1]   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw i32 %x, 6, !dbg !29
chris-RemoveOne: return I  %x.inc3 = add nuw i32 %x, 6, !dbg !29
run: WorkList:   %x.inc3 = add nuw i32 %x, 6, !dbg !29
chris-run: I=  %x.inc3 = add nuw i32 %x, 6, !dbg !29
chris-run: I-end=  %x.inc3 = add nuw i32 %x, 6, !dbg !29
IC: Visiting:   %x.inc3 = add nuw i32 %x, 6, !dbg !29
test1: I=  %x.inc3 = add nuw i32 %x, 6, !dbg !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void, !dbg !32
 ok, break
Inst[end]:   ret void, !dbg !32
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void, !dbg !32
chris-RemoveOne: return I  ret void, !dbg !32
run: WorkList:   ret void, !dbg !32
chris-run: I=  ret void, !dbg !32
chris-run: I-end=  ret void, !dbg !32
IC: Visiting:   ret void, !dbg !32
test1: I=  ret void, !dbg !32
visit: nullptr 
test3
test4
CheckFunctionDebugify [Combine redundant instructions]: PASS
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
runOnFunction: I:  %chk0 = icmp ugt i32 %length, %x, !dbg !21
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
runOnFunction: I:  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
runOnFunction: I:  %x.inc2 = add nuw i32 %x, 3, !dbg !26
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
runOnFunction: I:  %x.inc3 = add nuw i32 %x, 6, !dbg !29
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
runOnFunction: I:  ret void, !dbg !32
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add nuw i32 %x, 3, !dbg !26
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw i32 %x, 6, !dbg !29
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(start):  ret void, !dbg !32


INSTCOMBINE ITERATION #1 on f_1
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add nuw i32 %x, 3, !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw i32 %x, 6, !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(end):  ret void, !dbg !32
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add nuw i32 %x, 3, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add nuw i32 %x, 6, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add nuw i32 %x, 3, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add nuw i32 %x, 6, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-worklist-bb: BB end:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-worklist-bb: BB end:   %x.inc2 = add nuw i32 %x, 3, !dbg !26
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-worklist-bb: BB end:   %x.inc3 = add nuw i32 %x, 6, !dbg !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-worklist-bb: BB end:   ret void, !dbg !32
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void, !dbg !32
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-AddInitialGroup: I:   %x.inc3 = add nuw i32 %x, 6, !dbg !29
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-AddInitialGroup: I:   %x.inc2 = add nuw i32 %x, 3, !dbg !26
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-AddInitialGroup: I:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
test1: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x, !dbg !21
run: WorkList:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
test1: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
NextInst[1]   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-RemoveOne: return I  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
run: WorkList:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-run: I=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-run: I-end=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
IC: Visiting:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
test1: I=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add nuw i32 %x, 3, !dbg !26
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
NextInst[1]   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add nuw i32 %x, 3, !dbg !26
chris-RemoveOne: return I  %x.inc2 = add nuw i32 %x, 3, !dbg !26
run: WorkList:   %x.inc2 = add nuw i32 %x, 3, !dbg !26
chris-run: I=  %x.inc2 = add nuw i32 %x, 3, !dbg !26
chris-run: I-end=  %x.inc2 = add nuw i32 %x, 3, !dbg !26
IC: Visiting:   %x.inc2 = add nuw i32 %x, 3, !dbg !26
test1: I=  %x.inc2 = add nuw i32 %x, 3, !dbg !26
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add nuw i32 %x, 6, !dbg !29
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
NextInst[1]   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw i32 %x, 6, !dbg !29
chris-RemoveOne: return I  %x.inc3 = add nuw i32 %x, 6, !dbg !29
run: WorkList:   %x.inc3 = add nuw i32 %x, 6, !dbg !29
chris-run: I=  %x.inc3 = add nuw i32 %x, 6, !dbg !29
chris-run: I-end=  %x.inc3 = add nuw i32 %x, 6, !dbg !29
IC: Visiting:   %x.inc3 = add nuw i32 %x, 6, !dbg !29
test1: I=  %x.inc3 = add nuw i32 %x, 6, !dbg !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void, !dbg !32
 ok, break
Inst[end]:   ret void, !dbg !32
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void, !dbg !32
chris-RemoveOne: return I  ret void, !dbg !32
run: WorkList:   ret void, !dbg !32
chris-run: I=  ret void, !dbg !32
chris-run: I-end=  ret void, !dbg !32
IC: Visiting:   ret void, !dbg !32
test1: I=  ret void, !dbg !32
visit: nullptr 
test3
test4
CheckFunctionDebugify [Combine redundant instructions]: PASS
CheckFunctionDebugify [Warn about non-applied transformations]: PASS
CheckFunctionDebugify [Alignment from assumptions]: PASS
CheckFunctionDebugify [Float to int]: PASS
CheckFunctionDebugify [Loop Distribution]: PASS
CheckFunctionDebugify [Loop Vectorization]: PASS
CheckFunctionDebugify [Loop Load Elimination]: PASS
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %x = and i32 %a, -256, !dbg !20
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x, metadata !10, metadata !DIExpression()), !dbg !21
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %length, metadata !12, metadata !DIExpression()), !dbg !22
runOnFunction: I:  %chk0 = icmp ult i32 %x, %length, !dbg !23
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !13, metadata !DIExpression()), !dbg !23
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
runOnFunction: I:  %x.inc1 = or i32 %x, 1, !dbg !25
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
runOnFunction: I:  %x.inc2 = or i32 %x, 2, !dbg !28
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
runOnFunction: I:  %x.inc3 = or i32 %x, 3, !dbg !31
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
runOnFunction: I:  ret void, !dbg !34
INSTCOMBINE ITERATION: Inst(start):  %x = and i32 %a, -256, !dbg !20
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x, metadata !10, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %length, metadata !12, metadata !DIExpression()), !dbg !22
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ult i32 %x, %length, !dbg !23
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !13, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = or i32 %x, 1, !dbg !25
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = or i32 %x, 2, !dbg !28
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = or i32 %x, 3, !dbg !31
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
INSTCOMBINE ITERATION: Inst(start):  ret void, !dbg !34


INSTCOMBINE ITERATION #1 on f_2
INSTCOMBINE ITERATION: Inst(end):  %x = and i32 %a, -256, !dbg !20
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x, metadata !10, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length, metadata !12, metadata !DIExpression()), !dbg !22
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ult i32 %x, %length, !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !13, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = or i32 %x, 1, !dbg !25
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = or i32 %x, 2, !dbg !28
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = or i32 %x, 3, !dbg !31
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
INSTCOMBINE ITERATION: Inst(end):  ret void, !dbg !34
chris-worklist-bb: bb: 
entry:
  %x = and i32 %a, -256, !dbg !20
  call void @llvm.dbg.value(metadata i32 %x, metadata !9, metadata !DIExpression()), !dbg !20
  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
  call void @llvm.dbg.value(metadata i32 %length, metadata !11, metadata !DIExpression()), !dbg !21
  %chk0 = icmp ult i32 %x, %length, !dbg !23
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !23
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
  %x.inc1 = or i32 %x, 1, !dbg !25
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !25
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !26
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
  %x.inc2 = or i32 %x, 2, !dbg !28
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !28
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !29
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
  %x.inc3 = or i32 %x, 3, !dbg !31
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !31
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !32
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
  ret void, !dbg !34

chris-worklist-bb: BB: 
entry:
  %x = and i32 %a, -256, !dbg !20
  call void @llvm.dbg.value(metadata i32 %x, metadata !9, metadata !DIExpression()), !dbg !20
  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
  call void @llvm.dbg.value(metadata i32 %length, metadata !11, metadata !DIExpression()), !dbg !21
  %chk0 = icmp ult i32 %x, %length, !dbg !23
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !23
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
  %x.inc1 = or i32 %x, 1, !dbg !25
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !25
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !26
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
  %x.inc2 = or i32 %x, 2, !dbg !28
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !28
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !29
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
  %x.inc3 = or i32 %x, 3, !dbg !31
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !31
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !32
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
  ret void, !dbg !34

chris-worklist-bb: BB end:   %x = and i32 %a, -256, !dbg !20
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x, metadata !10, metadata !DIExpression()), !dbg !21
chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length, metadata !12, metadata !DIExpression()), !dbg !22
chris-worklist-bb: BB end:   %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !13, metadata !DIExpression()), !dbg !23
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-worklist-bb: BB end:   %x.inc1 = or i32 %x, 1, !dbg !25
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-worklist-bb: BB end:   %x.inc2 = or i32 %x, 2, !dbg !28
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-worklist-bb: BB end:   %x.inc3 = or i32 %x, 3, !dbg !31
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-worklist-bb: BB end:   ret void, !dbg !34
IC: ADDING: 14 instrs to worklist
chris-AddInitialGroup: I:   ret void, !dbg !34
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-AddInitialGroup: I:   %x.inc3 = or i32 %x, 3, !dbg !31
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-AddInitialGroup: I:   %x.inc2 = or i32 %x, 2, !dbg !28
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-AddInitialGroup: I:   %x.inc1 = or i32 %x, 1, !dbg !25
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-AddInitialGroup: I:   %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-AddInitialGroup: I:   %x = and i32 %a, -256, !dbg !20
RemoveOne!!!
chris-RemoveOne:   %x = and i32 %a, -256, !dbg !20
chris-RemoveOne: return I  %x = and i32 %a, -256, !dbg !20
run: WorkList:   %x = and i32 %a, -256, !dbg !20
chris-run: I=  %x = and i32 %a, -256, !dbg !20
chris-run: I-end=  %x = and i32 %a, -256, !dbg !20
IC: Visiting:   %x = and i32 %a, -256, !dbg !20
test1: I=  %x = and i32 %a, -256, !dbg !20
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
test1: I=  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-RemoveOne: return I  %chk0 = icmp ult i32 %x, %length, !dbg !23
run: WorkList:   %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-run: I=  %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-run: I-end=  %chk0 = icmp ult i32 %x, %length, !dbg !23
IC: Visiting:   %chk0 = icmp ult i32 %x, %length, !dbg !23
test1: I=  %chk0 = icmp ult i32 %x, %length, !dbg !23
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = or i32 %x, 1, !dbg !25
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
NextInst[1]   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = or i32 %x, 1, !dbg !25
chris-RemoveOne: return I  %x.inc1 = or i32 %x, 1, !dbg !25
run: WorkList:   %x.inc1 = or i32 %x, 1, !dbg !25
chris-run: I=  %x.inc1 = or i32 %x, 1, !dbg !25
chris-run: I-end=  %x.inc1 = or i32 %x, 1, !dbg !25
IC: Visiting:   %x.inc1 = or i32 %x, 1, !dbg !25
test1: I=  %x.inc1 = or i32 %x, 1, !dbg !25
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = or i32 %x, 2, !dbg !28
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
NextInst[1]   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = or i32 %x, 2, !dbg !28
chris-RemoveOne: return I  %x.inc2 = or i32 %x, 2, !dbg !28
run: WorkList:   %x.inc2 = or i32 %x, 2, !dbg !28
chris-run: I=  %x.inc2 = or i32 %x, 2, !dbg !28
chris-run: I-end=  %x.inc2 = or i32 %x, 2, !dbg !28
IC: Visiting:   %x.inc2 = or i32 %x, 2, !dbg !28
test1: I=  %x.inc2 = or i32 %x, 2, !dbg !28
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = or i32 %x, 3, !dbg !31
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
NextInst[1]   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = or i32 %x, 3, !dbg !31
chris-RemoveOne: return I  %x.inc3 = or i32 %x, 3, !dbg !31
run: WorkList:   %x.inc3 = or i32 %x, 3, !dbg !31
chris-run: I=  %x.inc3 = or i32 %x, 3, !dbg !31
chris-run: I-end=  %x.inc3 = or i32 %x, 3, !dbg !31
IC: Visiting:   %x.inc3 = or i32 %x, 3, !dbg !31
test1: I=  %x.inc3 = or i32 %x, 3, !dbg !31
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void, !dbg !34
 ok, break
Inst[end]:   ret void, !dbg !34
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void, !dbg !34
chris-RemoveOne: return I  ret void, !dbg !34
run: WorkList:   ret void, !dbg !34
chris-run: I=  ret void, !dbg !34
chris-run: I-end=  ret void, !dbg !34
IC: Visiting:   ret void, !dbg !34
test1: I=  ret void, !dbg !34
visit: nullptr 
test3
test4
CheckFunctionDebugify [Combine redundant instructions]: PASS
CheckFunctionDebugify [Simplify the CFG]: PASS
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %x = and i32 %a, -256, !dbg !20
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x, metadata !10, metadata !DIExpression()), !dbg !21
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %length, metadata !12, metadata !DIExpression()), !dbg !22
runOnFunction: I:  %chk0 = icmp ult i32 %x, %length, !dbg !23
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !13, metadata !DIExpression()), !dbg !23
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
runOnFunction: I:  %x.inc1 = or i32 %x, 1, !dbg !25
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
runOnFunction: I:  %x.inc2 = or i32 %x, 2, !dbg !28
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
runOnFunction: I:  %x.inc3 = or i32 %x, 3, !dbg !31
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
runOnFunction: I:  ret void, !dbg !34
INSTCOMBINE ITERATION: Inst(start):  %x = and i32 %a, -256, !dbg !20
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x, metadata !10, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %length, metadata !12, metadata !DIExpression()), !dbg !22
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ult i32 %x, %length, !dbg !23
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !13, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = or i32 %x, 1, !dbg !25
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = or i32 %x, 2, !dbg !28
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = or i32 %x, 3, !dbg !31
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
INSTCOMBINE ITERATION: Inst(start):  ret void, !dbg !34


INSTCOMBINE ITERATION #1 on f_2
INSTCOMBINE ITERATION: Inst(end):  %x = and i32 %a, -256, !dbg !20
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x, metadata !10, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length, metadata !12, metadata !DIExpression()), !dbg !22
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ult i32 %x, %length, !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !13, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = or i32 %x, 1, !dbg !25
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = or i32 %x, 2, !dbg !28
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = or i32 %x, 3, !dbg !31
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
INSTCOMBINE ITERATION: Inst(end):  ret void, !dbg !34
chris-worklist-bb: bb: 
entry:
  %x = and i32 %a, -256, !dbg !20
  call void @llvm.dbg.value(metadata i32 %x, metadata !9, metadata !DIExpression()), !dbg !20
  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
  call void @llvm.dbg.value(metadata i32 %length, metadata !11, metadata !DIExpression()), !dbg !21
  %chk0 = icmp ult i32 %x, %length, !dbg !23
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !23
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
  %x.inc1 = or i32 %x, 1, !dbg !25
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !25
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !26
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
  %x.inc2 = or i32 %x, 2, !dbg !28
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !28
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !29
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
  %x.inc3 = or i32 %x, 3, !dbg !31
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !31
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !32
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
  ret void, !dbg !34

chris-worklist-bb: BB: 
entry:
  %x = and i32 %a, -256, !dbg !20
  call void @llvm.dbg.value(metadata i32 %x, metadata !9, metadata !DIExpression()), !dbg !20
  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
  call void @llvm.dbg.value(metadata i32 %length, metadata !11, metadata !DIExpression()), !dbg !21
  %chk0 = icmp ult i32 %x, %length, !dbg !23
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !23
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
  %x.inc1 = or i32 %x, 1, !dbg !25
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !25
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !26
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
  %x.inc2 = or i32 %x, 2, !dbg !28
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !28
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !29
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
  %x.inc3 = or i32 %x, 3, !dbg !31
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !31
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !32
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
  ret void, !dbg !34

chris-worklist-bb: BB end:   %x = and i32 %a, -256, !dbg !20
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x, metadata !10, metadata !DIExpression()), !dbg !21
chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length, metadata !12, metadata !DIExpression()), !dbg !22
chris-worklist-bb: BB end:   %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !13, metadata !DIExpression()), !dbg !23
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-worklist-bb: BB end:   %x.inc1 = or i32 %x, 1, !dbg !25
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-worklist-bb: BB end:   %x.inc2 = or i32 %x, 2, !dbg !28
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-worklist-bb: BB end:   %x.inc3 = or i32 %x, 3, !dbg !31
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-worklist-bb: BB end:   ret void, !dbg !34
IC: ADDING: 14 instrs to worklist
chris-AddInitialGroup: I:   ret void, !dbg !34
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-AddInitialGroup: I:   %x.inc3 = or i32 %x, 3, !dbg !31
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-AddInitialGroup: I:   %x.inc2 = or i32 %x, 2, !dbg !28
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-AddInitialGroup: I:   %x.inc1 = or i32 %x, 1, !dbg !25
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-AddInitialGroup: I:   %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-AddInitialGroup: I:   %x = and i32 %a, -256, !dbg !20
RemoveOne!!!
chris-RemoveOne:   %x = and i32 %a, -256, !dbg !20
chris-RemoveOne: return I  %x = and i32 %a, -256, !dbg !20
run: WorkList:   %x = and i32 %a, -256, !dbg !20
chris-run: I=  %x = and i32 %a, -256, !dbg !20
chris-run: I-end=  %x = and i32 %a, -256, !dbg !20
IC: Visiting:   %x = and i32 %a, -256, !dbg !20
test1: I=  %x = and i32 %a, -256, !dbg !20
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
test1: I=  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-RemoveOne: return I  %chk0 = icmp ult i32 %x, %length, !dbg !23
run: WorkList:   %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-run: I=  %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-run: I-end=  %chk0 = icmp ult i32 %x, %length, !dbg !23
IC: Visiting:   %chk0 = icmp ult i32 %x, %length, !dbg !23
test1: I=  %chk0 = icmp ult i32 %x, %length, !dbg !23
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = or i32 %x, 1, !dbg !25
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
NextInst[1]   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = or i32 %x, 1, !dbg !25
chris-RemoveOne: return I  %x.inc1 = or i32 %x, 1, !dbg !25
run: WorkList:   %x.inc1 = or i32 %x, 1, !dbg !25
chris-run: I=  %x.inc1 = or i32 %x, 1, !dbg !25
chris-run: I-end=  %x.inc1 = or i32 %x, 1, !dbg !25
IC: Visiting:   %x.inc1 = or i32 %x, 1, !dbg !25
test1: I=  %x.inc1 = or i32 %x, 1, !dbg !25
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = or i32 %x, 2, !dbg !28
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
NextInst[1]   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = or i32 %x, 2, !dbg !28
chris-RemoveOne: return I  %x.inc2 = or i32 %x, 2, !dbg !28
run: WorkList:   %x.inc2 = or i32 %x, 2, !dbg !28
chris-run: I=  %x.inc2 = or i32 %x, 2, !dbg !28
chris-run: I-end=  %x.inc2 = or i32 %x, 2, !dbg !28
IC: Visiting:   %x.inc2 = or i32 %x, 2, !dbg !28
test1: I=  %x.inc2 = or i32 %x, 2, !dbg !28
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = or i32 %x, 3, !dbg !31
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
NextInst[1]   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = or i32 %x, 3, !dbg !31
chris-RemoveOne: return I  %x.inc3 = or i32 %x, 3, !dbg !31
run: WorkList:   %x.inc3 = or i32 %x, 3, !dbg !31
chris-run: I=  %x.inc3 = or i32 %x, 3, !dbg !31
chris-run: I-end=  %x.inc3 = or i32 %x, 3, !dbg !31
IC: Visiting:   %x.inc3 = or i32 %x, 3, !dbg !31
test1: I=  %x.inc3 = or i32 %x, 3, !dbg !31
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void, !dbg !34
 ok, break
Inst[end]:   ret void, !dbg !34
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void, !dbg !34
chris-RemoveOne: return I  ret void, !dbg !34
run: WorkList:   ret void, !dbg !34
chris-run: I=  ret void, !dbg !34
chris-run: I-end=  ret void, !dbg !34
IC: Visiting:   ret void, !dbg !34
test1: I=  ret void, !dbg !34
visit: nullptr 
test3
test4
CheckFunctionDebugify [Combine redundant instructions]: PASS
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %x = and i32 %a, -256, !dbg !20
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x, metadata !10, metadata !DIExpression()), !dbg !21
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %length, metadata !12, metadata !DIExpression()), !dbg !22
runOnFunction: I:  %chk0 = icmp ult i32 %x, %length, !dbg !23
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !13, metadata !DIExpression()), !dbg !23
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
runOnFunction: I:  %x.inc1 = or i32 %x, 1, !dbg !25
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
runOnFunction: I:  %x.inc2 = or i32 %x, 2, !dbg !28
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
runOnFunction: I:  %x.inc3 = or i32 %x, 3, !dbg !31
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
runOnFunction: I:  ret void, !dbg !34
INSTCOMBINE ITERATION: Inst(start):  %x = and i32 %a, -256, !dbg !20
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x, metadata !10, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %length, metadata !12, metadata !DIExpression()), !dbg !22
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ult i32 %x, %length, !dbg !23
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !13, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = or i32 %x, 1, !dbg !25
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = or i32 %x, 2, !dbg !28
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = or i32 %x, 3, !dbg !31
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
INSTCOMBINE ITERATION: Inst(start):  ret void, !dbg !34


INSTCOMBINE ITERATION #1 on f_2
INSTCOMBINE ITERATION: Inst(end):  %x = and i32 %a, -256, !dbg !20
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x, metadata !10, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length, metadata !12, metadata !DIExpression()), !dbg !22
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ult i32 %x, %length, !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !13, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = or i32 %x, 1, !dbg !25
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = or i32 %x, 2, !dbg !28
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = or i32 %x, 3, !dbg !31
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
INSTCOMBINE ITERATION: Inst(end):  ret void, !dbg !34
chris-worklist-bb: bb: 
entry:
  %x = and i32 %a, -256, !dbg !20
  call void @llvm.dbg.value(metadata i32 %x, metadata !9, metadata !DIExpression()), !dbg !20
  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
  call void @llvm.dbg.value(metadata i32 %length, metadata !11, metadata !DIExpression()), !dbg !21
  %chk0 = icmp ult i32 %x, %length, !dbg !23
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !23
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
  %x.inc1 = or i32 %x, 1, !dbg !25
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !25
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !26
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
  %x.inc2 = or i32 %x, 2, !dbg !28
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !28
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !29
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
  %x.inc3 = or i32 %x, 3, !dbg !31
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !31
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !32
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
  ret void, !dbg !34

chris-worklist-bb: BB: 
entry:
  %x = and i32 %a, -256, !dbg !20
  call void @llvm.dbg.value(metadata i32 %x, metadata !9, metadata !DIExpression()), !dbg !20
  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
  call void @llvm.dbg.value(metadata i32 %length, metadata !11, metadata !DIExpression()), !dbg !21
  %chk0 = icmp ult i32 %x, %length, !dbg !23
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !23
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
  %x.inc1 = or i32 %x, 1, !dbg !25
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !25
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !26
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
  %x.inc2 = or i32 %x, 2, !dbg !28
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !28
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !29
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
  %x.inc3 = or i32 %x, 3, !dbg !31
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !31
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !32
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
  ret void, !dbg !34

chris-worklist-bb: BB end:   %x = and i32 %a, -256, !dbg !20
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x, metadata !10, metadata !DIExpression()), !dbg !21
chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length, metadata !12, metadata !DIExpression()), !dbg !22
chris-worklist-bb: BB end:   %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !13, metadata !DIExpression()), !dbg !23
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-worklist-bb: BB end:   %x.inc1 = or i32 %x, 1, !dbg !25
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-worklist-bb: BB end:   %x.inc2 = or i32 %x, 2, !dbg !28
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-worklist-bb: BB end:   %x.inc3 = or i32 %x, 3, !dbg !31
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-worklist-bb: BB end:   ret void, !dbg !34
IC: ADDING: 14 instrs to worklist
chris-AddInitialGroup: I:   ret void, !dbg !34
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-AddInitialGroup: I:   %x.inc3 = or i32 %x, 3, !dbg !31
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-AddInitialGroup: I:   %x.inc2 = or i32 %x, 2, !dbg !28
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-AddInitialGroup: I:   %x.inc1 = or i32 %x, 1, !dbg !25
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-AddInitialGroup: I:   %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-AddInitialGroup: I:   %x = and i32 %a, -256, !dbg !20
RemoveOne!!!
chris-RemoveOne:   %x = and i32 %a, -256, !dbg !20
chris-RemoveOne: return I  %x = and i32 %a, -256, !dbg !20
run: WorkList:   %x = and i32 %a, -256, !dbg !20
chris-run: I=  %x = and i32 %a, -256, !dbg !20
chris-run: I-end=  %x = and i32 %a, -256, !dbg !20
IC: Visiting:   %x = and i32 %a, -256, !dbg !20
test1: I=  %x = and i32 %a, -256, !dbg !20
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
test1: I=  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-RemoveOne: return I  %chk0 = icmp ult i32 %x, %length, !dbg !23
run: WorkList:   %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-run: I=  %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-run: I-end=  %chk0 = icmp ult i32 %x, %length, !dbg !23
IC: Visiting:   %chk0 = icmp ult i32 %x, %length, !dbg !23
test1: I=  %chk0 = icmp ult i32 %x, %length, !dbg !23
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = or i32 %x, 1, !dbg !25
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
NextInst[1]   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = or i32 %x, 1, !dbg !25
chris-RemoveOne: return I  %x.inc1 = or i32 %x, 1, !dbg !25
run: WorkList:   %x.inc1 = or i32 %x, 1, !dbg !25
chris-run: I=  %x.inc1 = or i32 %x, 1, !dbg !25
chris-run: I-end=  %x.inc1 = or i32 %x, 1, !dbg !25
IC: Visiting:   %x.inc1 = or i32 %x, 1, !dbg !25
test1: I=  %x.inc1 = or i32 %x, 1, !dbg !25
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = or i32 %x, 2, !dbg !28
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
NextInst[1]   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = or i32 %x, 2, !dbg !28
chris-RemoveOne: return I  %x.inc2 = or i32 %x, 2, !dbg !28
run: WorkList:   %x.inc2 = or i32 %x, 2, !dbg !28
chris-run: I=  %x.inc2 = or i32 %x, 2, !dbg !28
chris-run: I-end=  %x.inc2 = or i32 %x, 2, !dbg !28
IC: Visiting:   %x.inc2 = or i32 %x, 2, !dbg !28
test1: I=  %x.inc2 = or i32 %x, 2, !dbg !28
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = or i32 %x, 3, !dbg !31
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
NextInst[1]   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = or i32 %x, 3, !dbg !31
chris-RemoveOne: return I  %x.inc3 = or i32 %x, 3, !dbg !31
run: WorkList:   %x.inc3 = or i32 %x, 3, !dbg !31
chris-run: I=  %x.inc3 = or i32 %x, 3, !dbg !31
chris-run: I-end=  %x.inc3 = or i32 %x, 3, !dbg !31
IC: Visiting:   %x.inc3 = or i32 %x, 3, !dbg !31
test1: I=  %x.inc3 = or i32 %x, 3, !dbg !31
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void, !dbg !34
 ok, break
Inst[end]:   ret void, !dbg !34
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void, !dbg !34
chris-RemoveOne: return I  ret void, !dbg !34
run: WorkList:   ret void, !dbg !34
chris-run: I=  ret void, !dbg !34
chris-run: I-end=  ret void, !dbg !34
IC: Visiting:   ret void, !dbg !34
test1: I=  ret void, !dbg !34
visit: nullptr 
test3
test4
CheckFunctionDebugify [Combine redundant instructions]: PASS
CheckFunctionDebugify [Warn about non-applied transformations]: PASS
CheckFunctionDebugify [Alignment from assumptions]: PASS
CheckFunctionDebugify [Float to int]: PASS
CheckFunctionDebugify [Loop Distribution]: PASS
CheckFunctionDebugify [Loop Vectorization]: PASS
CheckFunctionDebugify [Loop Load Elimination]: PASS
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %x = and i32 %a, -256, !dbg !20
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x, metadata !10, metadata !DIExpression()), !dbg !21
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %length, metadata !12, metadata !DIExpression()), !dbg !22
runOnFunction: I:  %chk0 = icmp ult i32 %x, %length, !dbg !23
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !13, metadata !DIExpression()), !dbg !23
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
runOnFunction: I:  %x.inc1 = or i32 %x, 1, !dbg !25
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
runOnFunction: I:  %x.inc2 = or i32 %x, 3, !dbg !28
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
runOnFunction: I:  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
runOnFunction: I:  ret void, !dbg !34
INSTCOMBINE ITERATION: Inst(start):  %x = and i32 %a, -256, !dbg !20
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x, metadata !10, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %length, metadata !12, metadata !DIExpression()), !dbg !22
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ult i32 %x, %length, !dbg !23
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !13, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = or i32 %x, 1, !dbg !25
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = or i32 %x, 3, !dbg !28
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
INSTCOMBINE ITERATION: Inst(start):  ret void, !dbg !34


INSTCOMBINE ITERATION #1 on f_3
INSTCOMBINE ITERATION: Inst(end):  %x = and i32 %a, -256, !dbg !20
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x, metadata !10, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length, metadata !12, metadata !DIExpression()), !dbg !22
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ult i32 %x, %length, !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !13, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = or i32 %x, 1, !dbg !25
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = or i32 %x, 3, !dbg !28
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
INSTCOMBINE ITERATION: Inst(end):  ret void, !dbg !34
chris-worklist-bb: bb: 
entry:
  %x = and i32 %a, -256, !dbg !20
  call void @llvm.dbg.value(metadata i32 %x, metadata !9, metadata !DIExpression()), !dbg !20
  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
  call void @llvm.dbg.value(metadata i32 %length, metadata !11, metadata !DIExpression()), !dbg !21
  %chk0 = icmp ult i32 %x, %length, !dbg !23
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !23
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
  %x.inc1 = or i32 %x, 1, !dbg !25
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !25
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !26
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
  %x.inc2 = or i32 %x, 3, !dbg !28
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !28
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !29
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !31
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !32
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
  ret void, !dbg !34

chris-worklist-bb: BB: 
entry:
  %x = and i32 %a, -256, !dbg !20
  call void @llvm.dbg.value(metadata i32 %x, metadata !9, metadata !DIExpression()), !dbg !20
  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
  call void @llvm.dbg.value(metadata i32 %length, metadata !11, metadata !DIExpression()), !dbg !21
  %chk0 = icmp ult i32 %x, %length, !dbg !23
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !23
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
  %x.inc1 = or i32 %x, 1, !dbg !25
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !25
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !26
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
  %x.inc2 = or i32 %x, 3, !dbg !28
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !28
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !29
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !31
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !32
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
  ret void, !dbg !34

chris-worklist-bb: BB end:   %x = and i32 %a, -256, !dbg !20
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x, metadata !10, metadata !DIExpression()), !dbg !21
chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length, metadata !12, metadata !DIExpression()), !dbg !22
chris-worklist-bb: BB end:   %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !13, metadata !DIExpression()), !dbg !23
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-worklist-bb: BB end:   %x.inc1 = or i32 %x, 1, !dbg !25
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-worklist-bb: BB end:   %x.inc2 = or i32 %x, 3, !dbg !28
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-worklist-bb: BB end:   %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-worklist-bb: BB end:   ret void, !dbg !34
IC: ADDING: 14 instrs to worklist
chris-AddInitialGroup: I:   ret void, !dbg !34
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-AddInitialGroup: I:   %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-AddInitialGroup: I:   %x.inc2 = or i32 %x, 3, !dbg !28
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-AddInitialGroup: I:   %x.inc1 = or i32 %x, 1, !dbg !25
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-AddInitialGroup: I:   %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-AddInitialGroup: I:   %x = and i32 %a, -256, !dbg !20
RemoveOne!!!
chris-RemoveOne:   %x = and i32 %a, -256, !dbg !20
chris-RemoveOne: return I  %x = and i32 %a, -256, !dbg !20
run: WorkList:   %x = and i32 %a, -256, !dbg !20
chris-run: I=  %x = and i32 %a, -256, !dbg !20
chris-run: I-end=  %x = and i32 %a, -256, !dbg !20
IC: Visiting:   %x = and i32 %a, -256, !dbg !20
test1: I=  %x = and i32 %a, -256, !dbg !20
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
test1: I=  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-RemoveOne: return I  %chk0 = icmp ult i32 %x, %length, !dbg !23
run: WorkList:   %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-run: I=  %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-run: I-end=  %chk0 = icmp ult i32 %x, %length, !dbg !23
IC: Visiting:   %chk0 = icmp ult i32 %x, %length, !dbg !23
test1: I=  %chk0 = icmp ult i32 %x, %length, !dbg !23
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = or i32 %x, 1, !dbg !25
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
NextInst[1]   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = or i32 %x, 1, !dbg !25
chris-RemoveOne: return I  %x.inc1 = or i32 %x, 1, !dbg !25
run: WorkList:   %x.inc1 = or i32 %x, 1, !dbg !25
chris-run: I=  %x.inc1 = or i32 %x, 1, !dbg !25
chris-run: I-end=  %x.inc1 = or i32 %x, 1, !dbg !25
IC: Visiting:   %x.inc1 = or i32 %x, 1, !dbg !25
test1: I=  %x.inc1 = or i32 %x, 1, !dbg !25
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = or i32 %x, 3, !dbg !28
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
NextInst[1]   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = or i32 %x, 3, !dbg !28
chris-RemoveOne: return I  %x.inc2 = or i32 %x, 3, !dbg !28
run: WorkList:   %x.inc2 = or i32 %x, 3, !dbg !28
chris-run: I=  %x.inc2 = or i32 %x, 3, !dbg !28
chris-run: I-end=  %x.inc2 = or i32 %x, 3, !dbg !28
IC: Visiting:   %x.inc2 = or i32 %x, 3, !dbg !28
test1: I=  %x.inc2 = or i32 %x, 3, !dbg !28
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
NextInst[1]   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
chris-RemoveOne: return I  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
run: WorkList:   %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
chris-run: I=  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
chris-run: I-end=  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
IC: Visiting:   %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
test1: I=  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void, !dbg !34
 ok, break
Inst[end]:   ret void, !dbg !34
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void, !dbg !34
chris-RemoveOne: return I  ret void, !dbg !34
run: WorkList:   ret void, !dbg !34
chris-run: I=  ret void, !dbg !34
chris-run: I-end=  ret void, !dbg !34
IC: Visiting:   ret void, !dbg !34
test1: I=  ret void, !dbg !34
visit: nullptr 
test3
test4
CheckFunctionDebugify [Combine redundant instructions]: PASS
CheckFunctionDebugify [Simplify the CFG]: PASS
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %x = and i32 %a, -256, !dbg !20
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x, metadata !10, metadata !DIExpression()), !dbg !21
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %length, metadata !12, metadata !DIExpression()), !dbg !22
runOnFunction: I:  %chk0 = icmp ult i32 %x, %length, !dbg !23
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !13, metadata !DIExpression()), !dbg !23
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
runOnFunction: I:  %x.inc1 = or i32 %x, 1, !dbg !25
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
runOnFunction: I:  %x.inc2 = or i32 %x, 3, !dbg !28
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
runOnFunction: I:  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
runOnFunction: I:  ret void, !dbg !34
INSTCOMBINE ITERATION: Inst(start):  %x = and i32 %a, -256, !dbg !20
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x, metadata !10, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %length, metadata !12, metadata !DIExpression()), !dbg !22
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ult i32 %x, %length, !dbg !23
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !13, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = or i32 %x, 1, !dbg !25
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = or i32 %x, 3, !dbg !28
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
INSTCOMBINE ITERATION: Inst(start):  ret void, !dbg !34


INSTCOMBINE ITERATION #1 on f_3
INSTCOMBINE ITERATION: Inst(end):  %x = and i32 %a, -256, !dbg !20
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x, metadata !10, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length, metadata !12, metadata !DIExpression()), !dbg !22
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ult i32 %x, %length, !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !13, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = or i32 %x, 1, !dbg !25
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = or i32 %x, 3, !dbg !28
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
INSTCOMBINE ITERATION: Inst(end):  ret void, !dbg !34
chris-worklist-bb: bb: 
entry:
  %x = and i32 %a, -256, !dbg !20
  call void @llvm.dbg.value(metadata i32 %x, metadata !9, metadata !DIExpression()), !dbg !20
  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
  call void @llvm.dbg.value(metadata i32 %length, metadata !11, metadata !DIExpression()), !dbg !21
  %chk0 = icmp ult i32 %x, %length, !dbg !23
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !23
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
  %x.inc1 = or i32 %x, 1, !dbg !25
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !25
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !26
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
  %x.inc2 = or i32 %x, 3, !dbg !28
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !28
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !29
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !31
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !32
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
  ret void, !dbg !34

chris-worklist-bb: BB: 
entry:
  %x = and i32 %a, -256, !dbg !20
  call void @llvm.dbg.value(metadata i32 %x, metadata !9, metadata !DIExpression()), !dbg !20
  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
  call void @llvm.dbg.value(metadata i32 %length, metadata !11, metadata !DIExpression()), !dbg !21
  %chk0 = icmp ult i32 %x, %length, !dbg !23
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !23
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
  %x.inc1 = or i32 %x, 1, !dbg !25
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !25
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !26
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
  %x.inc2 = or i32 %x, 3, !dbg !28
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !28
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !29
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !31
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !32
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
  ret void, !dbg !34

chris-worklist-bb: BB end:   %x = and i32 %a, -256, !dbg !20
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x, metadata !10, metadata !DIExpression()), !dbg !21
chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length, metadata !12, metadata !DIExpression()), !dbg !22
chris-worklist-bb: BB end:   %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !13, metadata !DIExpression()), !dbg !23
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-worklist-bb: BB end:   %x.inc1 = or i32 %x, 1, !dbg !25
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-worklist-bb: BB end:   %x.inc2 = or i32 %x, 3, !dbg !28
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-worklist-bb: BB end:   %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-worklist-bb: BB end:   ret void, !dbg !34
IC: ADDING: 14 instrs to worklist
chris-AddInitialGroup: I:   ret void, !dbg !34
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-AddInitialGroup: I:   %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-AddInitialGroup: I:   %x.inc2 = or i32 %x, 3, !dbg !28
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-AddInitialGroup: I:   %x.inc1 = or i32 %x, 1, !dbg !25
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-AddInitialGroup: I:   %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-AddInitialGroup: I:   %x = and i32 %a, -256, !dbg !20
RemoveOne!!!
chris-RemoveOne:   %x = and i32 %a, -256, !dbg !20
chris-RemoveOne: return I  %x = and i32 %a, -256, !dbg !20
run: WorkList:   %x = and i32 %a, -256, !dbg !20
chris-run: I=  %x = and i32 %a, -256, !dbg !20
chris-run: I-end=  %x = and i32 %a, -256, !dbg !20
IC: Visiting:   %x = and i32 %a, -256, !dbg !20
test1: I=  %x = and i32 %a, -256, !dbg !20
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
test1: I=  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-RemoveOne: return I  %chk0 = icmp ult i32 %x, %length, !dbg !23
run: WorkList:   %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-run: I=  %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-run: I-end=  %chk0 = icmp ult i32 %x, %length, !dbg !23
IC: Visiting:   %chk0 = icmp ult i32 %x, %length, !dbg !23
test1: I=  %chk0 = icmp ult i32 %x, %length, !dbg !23
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = or i32 %x, 1, !dbg !25
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
NextInst[1]   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = or i32 %x, 1, !dbg !25
chris-RemoveOne: return I  %x.inc1 = or i32 %x, 1, !dbg !25
run: WorkList:   %x.inc1 = or i32 %x, 1, !dbg !25
chris-run: I=  %x.inc1 = or i32 %x, 1, !dbg !25
chris-run: I-end=  %x.inc1 = or i32 %x, 1, !dbg !25
IC: Visiting:   %x.inc1 = or i32 %x, 1, !dbg !25
test1: I=  %x.inc1 = or i32 %x, 1, !dbg !25
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = or i32 %x, 3, !dbg !28
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
NextInst[1]   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = or i32 %x, 3, !dbg !28
chris-RemoveOne: return I  %x.inc2 = or i32 %x, 3, !dbg !28
run: WorkList:   %x.inc2 = or i32 %x, 3, !dbg !28
chris-run: I=  %x.inc2 = or i32 %x, 3, !dbg !28
chris-run: I-end=  %x.inc2 = or i32 %x, 3, !dbg !28
IC: Visiting:   %x.inc2 = or i32 %x, 3, !dbg !28
test1: I=  %x.inc2 = or i32 %x, 3, !dbg !28
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
NextInst[1]   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
chris-RemoveOne: return I  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
run: WorkList:   %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
chris-run: I=  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
chris-run: I-end=  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
IC: Visiting:   %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
test1: I=  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void, !dbg !34
 ok, break
Inst[end]:   ret void, !dbg !34
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void, !dbg !34
chris-RemoveOne: return I  ret void, !dbg !34
run: WorkList:   ret void, !dbg !34
chris-run: I=  ret void, !dbg !34
chris-run: I-end=  ret void, !dbg !34
IC: Visiting:   ret void, !dbg !34
test1: I=  ret void, !dbg !34
visit: nullptr 
test3
test4
CheckFunctionDebugify [Combine redundant instructions]: PASS
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %x = and i32 %a, -256, !dbg !20
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x, metadata !10, metadata !DIExpression()), !dbg !21
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %length, metadata !12, metadata !DIExpression()), !dbg !22
runOnFunction: I:  %chk0 = icmp ult i32 %x, %length, !dbg !23
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !13, metadata !DIExpression()), !dbg !23
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
runOnFunction: I:  %x.inc1 = or i32 %x, 1, !dbg !25
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
runOnFunction: I:  %x.inc2 = or i32 %x, 3, !dbg !28
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
runOnFunction: I:  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
runOnFunction: I:  ret void, !dbg !34
INSTCOMBINE ITERATION: Inst(start):  %x = and i32 %a, -256, !dbg !20
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x, metadata !10, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %length, metadata !12, metadata !DIExpression()), !dbg !22
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ult i32 %x, %length, !dbg !23
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !13, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = or i32 %x, 1, !dbg !25
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = or i32 %x, 3, !dbg !28
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
INSTCOMBINE ITERATION: Inst(start):  ret void, !dbg !34


INSTCOMBINE ITERATION #1 on f_3
INSTCOMBINE ITERATION: Inst(end):  %x = and i32 %a, -256, !dbg !20
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x, metadata !10, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length, metadata !12, metadata !DIExpression()), !dbg !22
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ult i32 %x, %length, !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !13, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = or i32 %x, 1, !dbg !25
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = or i32 %x, 3, !dbg !28
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
INSTCOMBINE ITERATION: Inst(end):  ret void, !dbg !34
chris-worklist-bb: bb: 
entry:
  %x = and i32 %a, -256, !dbg !20
  call void @llvm.dbg.value(metadata i32 %x, metadata !9, metadata !DIExpression()), !dbg !20
  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
  call void @llvm.dbg.value(metadata i32 %length, metadata !11, metadata !DIExpression()), !dbg !21
  %chk0 = icmp ult i32 %x, %length, !dbg !23
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !23
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
  %x.inc1 = or i32 %x, 1, !dbg !25
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !25
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !26
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
  %x.inc2 = or i32 %x, 3, !dbg !28
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !28
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !29
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !31
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !32
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
  ret void, !dbg !34

chris-worklist-bb: BB: 
entry:
  %x = and i32 %a, -256, !dbg !20
  call void @llvm.dbg.value(metadata i32 %x, metadata !9, metadata !DIExpression()), !dbg !20
  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
  call void @llvm.dbg.value(metadata i32 %length, metadata !11, metadata !DIExpression()), !dbg !21
  %chk0 = icmp ult i32 %x, %length, !dbg !23
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !23
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
  %x.inc1 = or i32 %x, 1, !dbg !25
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !25
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !26
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
  %x.inc2 = or i32 %x, 3, !dbg !28
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !28
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !29
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !31
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !32
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
  ret void, !dbg !34

chris-worklist-bb: BB end:   %x = and i32 %a, -256, !dbg !20
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x, metadata !10, metadata !DIExpression()), !dbg !21
chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length, metadata !12, metadata !DIExpression()), !dbg !22
chris-worklist-bb: BB end:   %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !13, metadata !DIExpression()), !dbg !23
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-worklist-bb: BB end:   %x.inc1 = or i32 %x, 1, !dbg !25
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-worklist-bb: BB end:   %x.inc2 = or i32 %x, 3, !dbg !28
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-worklist-bb: BB end:   %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-worklist-bb: BB end:   ret void, !dbg !34
IC: ADDING: 14 instrs to worklist
chris-AddInitialGroup: I:   ret void, !dbg !34
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-AddInitialGroup: I:   %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-AddInitialGroup: I:   %x.inc2 = or i32 %x, 3, !dbg !28
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-AddInitialGroup: I:   %x.inc1 = or i32 %x, 1, !dbg !25
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-AddInitialGroup: I:   %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-AddInitialGroup: I:   %x = and i32 %a, -256, !dbg !20
RemoveOne!!!
chris-RemoveOne:   %x = and i32 %a, -256, !dbg !20
chris-RemoveOne: return I  %x = and i32 %a, -256, !dbg !20
run: WorkList:   %x = and i32 %a, -256, !dbg !20
chris-run: I=  %x = and i32 %a, -256, !dbg !20
chris-run: I-end=  %x = and i32 %a, -256, !dbg !20
IC: Visiting:   %x = and i32 %a, -256, !dbg !20
test1: I=  %x = and i32 %a, -256, !dbg !20
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
test1: I=  %length = load i32, i32* %length_buf, align 4, !dbg !21, !range !22
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-RemoveOne: return I  %chk0 = icmp ult i32 %x, %length, !dbg !23
run: WorkList:   %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-run: I=  %chk0 = icmp ult i32 %x, %length, !dbg !23
chris-run: I-end=  %chk0 = icmp ult i32 %x, %length, !dbg !23
IC: Visiting:   %chk0 = icmp ult i32 %x, %length, !dbg !23
test1: I=  %chk0 = icmp ult i32 %x, %length, !dbg !23
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !24
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = or i32 %x, 1, !dbg !25
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !15, metadata !DIExpression()), !dbg !25
NextInst[1]   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk1, metadata !16, metadata !DIExpression()), !dbg !26
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = or i32 %x, 1, !dbg !25
chris-RemoveOne: return I  %x.inc1 = or i32 %x, 1, !dbg !25
run: WorkList:   %x.inc1 = or i32 %x, 1, !dbg !25
chris-run: I=  %x.inc1 = or i32 %x, 1, !dbg !25
chris-run: I-end=  %x.inc1 = or i32 %x, 1, !dbg !25
IC: Visiting:   %x.inc1 = or i32 %x, 1, !dbg !25
test1: I=  %x.inc1 = or i32 %x, 1, !dbg !25
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !26
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !27
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = or i32 %x, 3, !dbg !28
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !17, metadata !DIExpression()), !dbg !28
NextInst[1]   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk2, metadata !18, metadata !DIExpression()), !dbg !29
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = or i32 %x, 3, !dbg !28
chris-RemoveOne: return I  %x.inc2 = or i32 %x, 3, !dbg !28
run: WorkList:   %x.inc2 = or i32 %x, 3, !dbg !28
chris-run: I=  %x.inc2 = or i32 %x, 3, !dbg !28
chris-run: I-end=  %x.inc2 = or i32 %x, 3, !dbg !28
IC: Visiting:   %x.inc2 = or i32 %x, 3, !dbg !28
test1: I=  %x.inc2 = or i32 %x, 3, !dbg !28
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !30
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !19, metadata !DIExpression()), !dbg !31
NextInst[1]   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk3, metadata !20, metadata !DIExpression()), !dbg !32
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
chris-RemoveOne: return I  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
run: WorkList:   %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
chris-run: I=  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
chris-run: I-end=  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
IC: Visiting:   %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
test1: I=  %x.inc3 = add nuw nsw i32 %x.inc2, 3, !dbg !31
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !32
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !33
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void, !dbg !34
 ok, break
Inst[end]:   ret void, !dbg !34
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void, !dbg !34
chris-RemoveOne: return I  ret void, !dbg !34
run: WorkList:   ret void, !dbg !34
chris-run: I=  ret void, !dbg !34
chris-run: I-end=  ret void, !dbg !34
IC: Visiting:   ret void, !dbg !34
test1: I=  ret void, !dbg !34
visit: nullptr 
test3
test4
CheckFunctionDebugify [Combine redundant instructions]: PASS
CheckFunctionDebugify [Warn about non-applied transformations]: PASS
CheckFunctionDebugify [Alignment from assumptions]: PASS
CheckFunctionDebugify [Float to int]: PASS
CheckFunctionDebugify [Loop Distribution]: PASS
CheckFunctionDebugify [Loop Vectorization]: PASS
CheckFunctionDebugify [Loop Load Elimination]: PASS
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
runOnFunction: I:  %chk0 = icmp ugt i32 %length, %x, !dbg !21
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
runOnFunction: I:  %x.inc1 = add nsw i32 %x, -1024, !dbg !23
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
runOnFunction: I:  %x.inc2 = add nuw i32 %x, 2, !dbg !26
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
runOnFunction: I:  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
runOnFunction: I:  ret void, !dbg !32
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add nsw i32 %x, -1024, !dbg !23
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add nuw i32 %x, 2, !dbg !26
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(start):  ret void, !dbg !32


INSTCOMBINE ITERATION #1 on f_4
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add nsw i32 %x, -1024, !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add nuw i32 %x, 2, !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(end):  ret void, !dbg !32
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add nsw i32 %x, -1024, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add nuw i32 %x, 2, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add nsw i32 %x, -1024, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add nuw i32 %x, 2, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-worklist-bb: BB end:   %x.inc1 = add nsw i32 %x, -1024, !dbg !23
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-worklist-bb: BB end:   %x.inc2 = add nuw i32 %x, 2, !dbg !26
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-worklist-bb: BB end:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-worklist-bb: BB end:   ret void, !dbg !32
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void, !dbg !32
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-AddInitialGroup: I:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-AddInitialGroup: I:   %x.inc2 = add nuw i32 %x, 2, !dbg !26
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-AddInitialGroup: I:   %x.inc1 = add nsw i32 %x, -1024, !dbg !23
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
test1: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x, !dbg !21
run: WorkList:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
test1: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = add nsw i32 %x, -1024, !dbg !23
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
NextInst[1]   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add nsw i32 %x, -1024, !dbg !23
chris-RemoveOne: return I  %x.inc1 = add nsw i32 %x, -1024, !dbg !23
run: WorkList:   %x.inc1 = add nsw i32 %x, -1024, !dbg !23
chris-run: I=  %x.inc1 = add nsw i32 %x, -1024, !dbg !23
chris-run: I-end=  %x.inc1 = add nsw i32 %x, -1024, !dbg !23
IC: Visiting:   %x.inc1 = add nsw i32 %x, -1024, !dbg !23
test1: I=  %x.inc1 = add nsw i32 %x, -1024, !dbg !23
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add nuw i32 %x, 2, !dbg !26
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
NextInst[1]   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add nuw i32 %x, 2, !dbg !26
chris-RemoveOne: return I  %x.inc2 = add nuw i32 %x, 2, !dbg !26
run: WorkList:   %x.inc2 = add nuw i32 %x, 2, !dbg !26
chris-run: I=  %x.inc2 = add nuw i32 %x, 2, !dbg !26
chris-run: I-end=  %x.inc2 = add nuw i32 %x, 2, !dbg !26
IC: Visiting:   %x.inc2 = add nuw i32 %x, 2, !dbg !26
test1: I=  %x.inc2 = add nuw i32 %x, 2, !dbg !26
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
NextInst[1]   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
chris-RemoveOne: return I  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
run: WorkList:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
chris-run: I=  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
chris-run: I-end=  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
IC: Visiting:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
test1: I=  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void, !dbg !32
 ok, break
Inst[end]:   ret void, !dbg !32
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void, !dbg !32
chris-RemoveOne: return I  ret void, !dbg !32
run: WorkList:   ret void, !dbg !32
chris-run: I=  ret void, !dbg !32
chris-run: I-end=  ret void, !dbg !32
IC: Visiting:   ret void, !dbg !32
test1: I=  ret void, !dbg !32
visit: nullptr 
test3
test4
CheckFunctionDebugify [Combine redundant instructions]: PASS
CheckFunctionDebugify [Simplify the CFG]: PASS
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
runOnFunction: I:  %chk0 = icmp ugt i32 %length, %x, !dbg !21
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
runOnFunction: I:  %x.inc1 = add nsw i32 %x, -1024, !dbg !23
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
runOnFunction: I:  %x.inc2 = add nuw i32 %x, 2, !dbg !26
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
runOnFunction: I:  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
runOnFunction: I:  ret void, !dbg !32
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add nsw i32 %x, -1024, !dbg !23
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add nuw i32 %x, 2, !dbg !26
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(start):  ret void, !dbg !32


INSTCOMBINE ITERATION #1 on f_4
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add nsw i32 %x, -1024, !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add nuw i32 %x, 2, !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(end):  ret void, !dbg !32
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add nsw i32 %x, -1024, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add nuw i32 %x, 2, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add nsw i32 %x, -1024, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add nuw i32 %x, 2, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-worklist-bb: BB end:   %x.inc1 = add nsw i32 %x, -1024, !dbg !23
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-worklist-bb: BB end:   %x.inc2 = add nuw i32 %x, 2, !dbg !26
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-worklist-bb: BB end:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-worklist-bb: BB end:   ret void, !dbg !32
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void, !dbg !32
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-AddInitialGroup: I:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-AddInitialGroup: I:   %x.inc2 = add nuw i32 %x, 2, !dbg !26
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-AddInitialGroup: I:   %x.inc1 = add nsw i32 %x, -1024, !dbg !23
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
test1: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x, !dbg !21
run: WorkList:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
test1: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = add nsw i32 %x, -1024, !dbg !23
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
NextInst[1]   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add nsw i32 %x, -1024, !dbg !23
chris-RemoveOne: return I  %x.inc1 = add nsw i32 %x, -1024, !dbg !23
run: WorkList:   %x.inc1 = add nsw i32 %x, -1024, !dbg !23
chris-run: I=  %x.inc1 = add nsw i32 %x, -1024, !dbg !23
chris-run: I-end=  %x.inc1 = add nsw i32 %x, -1024, !dbg !23
IC: Visiting:   %x.inc1 = add nsw i32 %x, -1024, !dbg !23
test1: I=  %x.inc1 = add nsw i32 %x, -1024, !dbg !23
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add nuw i32 %x, 2, !dbg !26
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
NextInst[1]   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add nuw i32 %x, 2, !dbg !26
chris-RemoveOne: return I  %x.inc2 = add nuw i32 %x, 2, !dbg !26
run: WorkList:   %x.inc2 = add nuw i32 %x, 2, !dbg !26
chris-run: I=  %x.inc2 = add nuw i32 %x, 2, !dbg !26
chris-run: I-end=  %x.inc2 = add nuw i32 %x, 2, !dbg !26
IC: Visiting:   %x.inc2 = add nuw i32 %x, 2, !dbg !26
test1: I=  %x.inc2 = add nuw i32 %x, 2, !dbg !26
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
NextInst[1]   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
chris-RemoveOne: return I  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
run: WorkList:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
chris-run: I=  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
chris-run: I-end=  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
IC: Visiting:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
test1: I=  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void, !dbg !32
 ok, break
Inst[end]:   ret void, !dbg !32
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void, !dbg !32
chris-RemoveOne: return I  ret void, !dbg !32
run: WorkList:   ret void, !dbg !32
chris-run: I=  ret void, !dbg !32
chris-run: I-end=  ret void, !dbg !32
IC: Visiting:   ret void, !dbg !32
test1: I=  ret void, !dbg !32
visit: nullptr 
test3
test4
CheckFunctionDebugify [Combine redundant instructions]: PASS
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
runOnFunction: I:  %chk0 = icmp ugt i32 %length, %x, !dbg !21
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
runOnFunction: I:  %x.inc1 = add nsw i32 %x, -1024, !dbg !23
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
runOnFunction: I:  %x.inc2 = add nuw i32 %x, 2, !dbg !26
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
runOnFunction: I:  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
runOnFunction: I:  ret void, !dbg !32
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add nsw i32 %x, -1024, !dbg !23
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add nuw i32 %x, 2, !dbg !26
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(start):  ret void, !dbg !32


INSTCOMBINE ITERATION #1 on f_4
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add nsw i32 %x, -1024, !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add nuw i32 %x, 2, !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(end):  ret void, !dbg !32
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add nsw i32 %x, -1024, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add nuw i32 %x, 2, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add nsw i32 %x, -1024, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add nuw i32 %x, 2, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-worklist-bb: BB end:   %x.inc1 = add nsw i32 %x, -1024, !dbg !23
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-worklist-bb: BB end:   %x.inc2 = add nuw i32 %x, 2, !dbg !26
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-worklist-bb: BB end:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-worklist-bb: BB end:   ret void, !dbg !32
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void, !dbg !32
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-AddInitialGroup: I:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-AddInitialGroup: I:   %x.inc2 = add nuw i32 %x, 2, !dbg !26
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-AddInitialGroup: I:   %x.inc1 = add nsw i32 %x, -1024, !dbg !23
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
test1: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x, !dbg !21
run: WorkList:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
test1: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = add nsw i32 %x, -1024, !dbg !23
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
NextInst[1]   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add nsw i32 %x, -1024, !dbg !23
chris-RemoveOne: return I  %x.inc1 = add nsw i32 %x, -1024, !dbg !23
run: WorkList:   %x.inc1 = add nsw i32 %x, -1024, !dbg !23
chris-run: I=  %x.inc1 = add nsw i32 %x, -1024, !dbg !23
chris-run: I-end=  %x.inc1 = add nsw i32 %x, -1024, !dbg !23
IC: Visiting:   %x.inc1 = add nsw i32 %x, -1024, !dbg !23
test1: I=  %x.inc1 = add nsw i32 %x, -1024, !dbg !23
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add nuw i32 %x, 2, !dbg !26
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
NextInst[1]   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add nuw i32 %x, 2, !dbg !26
chris-RemoveOne: return I  %x.inc2 = add nuw i32 %x, 2, !dbg !26
run: WorkList:   %x.inc2 = add nuw i32 %x, 2, !dbg !26
chris-run: I=  %x.inc2 = add nuw i32 %x, 2, !dbg !26
chris-run: I-end=  %x.inc2 = add nuw i32 %x, 2, !dbg !26
IC: Visiting:   %x.inc2 = add nuw i32 %x, 2, !dbg !26
test1: I=  %x.inc2 = add nuw i32 %x, 2, !dbg !26
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
NextInst[1]   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
chris-RemoveOne: return I  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
run: WorkList:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
chris-run: I=  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
chris-run: I-end=  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
IC: Visiting:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
test1: I=  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void, !dbg !32
 ok, break
Inst[end]:   ret void, !dbg !32
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void, !dbg !32
chris-RemoveOne: return I  ret void, !dbg !32
run: WorkList:   ret void, !dbg !32
chris-run: I=  ret void, !dbg !32
chris-run: I-end=  ret void, !dbg !32
IC: Visiting:   ret void, !dbg !32
test1: I=  ret void, !dbg !32
visit: nullptr 
test3
test4
CheckFunctionDebugify [Combine redundant instructions]: PASS
CheckFunctionDebugify [Warn about non-applied transformations]: PASS
CheckFunctionDebugify [Alignment from assumptions]: PASS
CheckFunctionDebugify [Float to int]: PASS
CheckFunctionDebugify [Loop Distribution]: PASS
CheckFunctionDebugify [Loop Vectorization]: PASS
CheckFunctionDebugify [Loop Load Elimination]: PASS
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
runOnFunction: I:  %chk0 = icmp ugt i32 %length, %x, !dbg !21
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
runOnFunction: I:  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
runOnFunction: I:  %x.inc2 = add nsw i32 %x, -199, !dbg !26
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
runOnFunction: I:  %x.inc3 = add nsw i32 %x, -196, !dbg !29
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
runOnFunction: I:  ret void, !dbg !32
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add nsw i32 %x, -199, !dbg !26
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nsw i32 %x, -196, !dbg !29
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(start):  ret void, !dbg !32


INSTCOMBINE ITERATION #1 on f_5
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add nsw i32 %x, -199, !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nsw i32 %x, -196, !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(end):  ret void, !dbg !32
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add nsw i32 %x, -199, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add nsw i32 %x, -196, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add nsw i32 %x, -199, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add nsw i32 %x, -196, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-worklist-bb: BB end:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-worklist-bb: BB end:   %x.inc2 = add nsw i32 %x, -199, !dbg !26
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-worklist-bb: BB end:   %x.inc3 = add nsw i32 %x, -196, !dbg !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-worklist-bb: BB end:   ret void, !dbg !32
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void, !dbg !32
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-AddInitialGroup: I:   %x.inc3 = add nsw i32 %x, -196, !dbg !29
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-AddInitialGroup: I:   %x.inc2 = add nsw i32 %x, -199, !dbg !26
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-AddInitialGroup: I:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
test1: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x, !dbg !21
run: WorkList:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
test1: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
NextInst[1]   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-RemoveOne: return I  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
run: WorkList:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-run: I=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-run: I-end=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
IC: Visiting:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
test1: I=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add nsw i32 %x, -199, !dbg !26
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
NextInst[1]   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add nsw i32 %x, -199, !dbg !26
chris-RemoveOne: return I  %x.inc2 = add nsw i32 %x, -199, !dbg !26
run: WorkList:   %x.inc2 = add nsw i32 %x, -199, !dbg !26
chris-run: I=  %x.inc2 = add nsw i32 %x, -199, !dbg !26
chris-run: I-end=  %x.inc2 = add nsw i32 %x, -199, !dbg !26
IC: Visiting:   %x.inc2 = add nsw i32 %x, -199, !dbg !26
test1: I=  %x.inc2 = add nsw i32 %x, -199, !dbg !26
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add nsw i32 %x, -196, !dbg !29
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
NextInst[1]   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nsw i32 %x, -196, !dbg !29
chris-RemoveOne: return I  %x.inc3 = add nsw i32 %x, -196, !dbg !29
run: WorkList:   %x.inc3 = add nsw i32 %x, -196, !dbg !29
chris-run: I=  %x.inc3 = add nsw i32 %x, -196, !dbg !29
chris-run: I-end=  %x.inc3 = add nsw i32 %x, -196, !dbg !29
IC: Visiting:   %x.inc3 = add nsw i32 %x, -196, !dbg !29
test1: I=  %x.inc3 = add nsw i32 %x, -196, !dbg !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void, !dbg !32
 ok, break
Inst[end]:   ret void, !dbg !32
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void, !dbg !32
chris-RemoveOne: return I  ret void, !dbg !32
run: WorkList:   ret void, !dbg !32
chris-run: I=  ret void, !dbg !32
chris-run: I-end=  ret void, !dbg !32
IC: Visiting:   ret void, !dbg !32
test1: I=  ret void, !dbg !32
visit: nullptr 
test3
test4
CheckFunctionDebugify [Combine redundant instructions]: PASS
CheckFunctionDebugify [Simplify the CFG]: PASS
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
runOnFunction: I:  %chk0 = icmp ugt i32 %length, %x, !dbg !21
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
runOnFunction: I:  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
runOnFunction: I:  %x.inc2 = add nsw i32 %x, -199, !dbg !26
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
runOnFunction: I:  %x.inc3 = add nsw i32 %x, -196, !dbg !29
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
runOnFunction: I:  ret void, !dbg !32
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add nsw i32 %x, -199, !dbg !26
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nsw i32 %x, -196, !dbg !29
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(start):  ret void, !dbg !32


INSTCOMBINE ITERATION #1 on f_5
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add nsw i32 %x, -199, !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nsw i32 %x, -196, !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(end):  ret void, !dbg !32
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add nsw i32 %x, -199, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add nsw i32 %x, -196, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add nsw i32 %x, -199, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add nsw i32 %x, -196, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-worklist-bb: BB end:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-worklist-bb: BB end:   %x.inc2 = add nsw i32 %x, -199, !dbg !26
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-worklist-bb: BB end:   %x.inc3 = add nsw i32 %x, -196, !dbg !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-worklist-bb: BB end:   ret void, !dbg !32
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void, !dbg !32
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-AddInitialGroup: I:   %x.inc3 = add nsw i32 %x, -196, !dbg !29
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-AddInitialGroup: I:   %x.inc2 = add nsw i32 %x, -199, !dbg !26
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-AddInitialGroup: I:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
test1: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x, !dbg !21
run: WorkList:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
test1: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
NextInst[1]   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-RemoveOne: return I  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
run: WorkList:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-run: I=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-run: I-end=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
IC: Visiting:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
test1: I=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add nsw i32 %x, -199, !dbg !26
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
NextInst[1]   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add nsw i32 %x, -199, !dbg !26
chris-RemoveOne: return I  %x.inc2 = add nsw i32 %x, -199, !dbg !26
run: WorkList:   %x.inc2 = add nsw i32 %x, -199, !dbg !26
chris-run: I=  %x.inc2 = add nsw i32 %x, -199, !dbg !26
chris-run: I-end=  %x.inc2 = add nsw i32 %x, -199, !dbg !26
IC: Visiting:   %x.inc2 = add nsw i32 %x, -199, !dbg !26
test1: I=  %x.inc2 = add nsw i32 %x, -199, !dbg !26
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add nsw i32 %x, -196, !dbg !29
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
NextInst[1]   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nsw i32 %x, -196, !dbg !29
chris-RemoveOne: return I  %x.inc3 = add nsw i32 %x, -196, !dbg !29
run: WorkList:   %x.inc3 = add nsw i32 %x, -196, !dbg !29
chris-run: I=  %x.inc3 = add nsw i32 %x, -196, !dbg !29
chris-run: I-end=  %x.inc3 = add nsw i32 %x, -196, !dbg !29
IC: Visiting:   %x.inc3 = add nsw i32 %x, -196, !dbg !29
test1: I=  %x.inc3 = add nsw i32 %x, -196, !dbg !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void, !dbg !32
 ok, break
Inst[end]:   ret void, !dbg !32
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void, !dbg !32
chris-RemoveOne: return I  ret void, !dbg !32
run: WorkList:   ret void, !dbg !32
chris-run: I=  ret void, !dbg !32
chris-run: I-end=  ret void, !dbg !32
IC: Visiting:   ret void, !dbg !32
test1: I=  ret void, !dbg !32
visit: nullptr 
test3
test4
CheckFunctionDebugify [Combine redundant instructions]: PASS
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
runOnFunction: I:  %chk0 = icmp ugt i32 %length, %x, !dbg !21
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
runOnFunction: I:  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
runOnFunction: I:  %x.inc2 = add nsw i32 %x, -199, !dbg !26
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
runOnFunction: I:  %x.inc3 = add nsw i32 %x, -196, !dbg !29
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
runOnFunction: I:  ret void, !dbg !32
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add nsw i32 %x, -199, !dbg !26
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nsw i32 %x, -196, !dbg !29
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(start):  ret void, !dbg !32


INSTCOMBINE ITERATION #1 on f_5
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add nsw i32 %x, -199, !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nsw i32 %x, -196, !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(end):  ret void, !dbg !32
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add nsw i32 %x, -199, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add nsw i32 %x, -196, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add nsw i32 %x, -199, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add nsw i32 %x, -196, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-worklist-bb: BB end:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-worklist-bb: BB end:   %x.inc2 = add nsw i32 %x, -199, !dbg !26
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-worklist-bb: BB end:   %x.inc3 = add nsw i32 %x, -196, !dbg !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-worklist-bb: BB end:   ret void, !dbg !32
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void, !dbg !32
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-AddInitialGroup: I:   %x.inc3 = add nsw i32 %x, -196, !dbg !29
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-AddInitialGroup: I:   %x.inc2 = add nsw i32 %x, -199, !dbg !26
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-AddInitialGroup: I:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
test1: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x, !dbg !21
run: WorkList:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
test1: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
NextInst[1]   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-RemoveOne: return I  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
run: WorkList:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-run: I=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
chris-run: I-end=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
IC: Visiting:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
test1: I=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !23
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add nsw i32 %x, -199, !dbg !26
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
NextInst[1]   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add nsw i32 %x, -199, !dbg !26
chris-RemoveOne: return I  %x.inc2 = add nsw i32 %x, -199, !dbg !26
run: WorkList:   %x.inc2 = add nsw i32 %x, -199, !dbg !26
chris-run: I=  %x.inc2 = add nsw i32 %x, -199, !dbg !26
chris-run: I-end=  %x.inc2 = add nsw i32 %x, -199, !dbg !26
IC: Visiting:   %x.inc2 = add nsw i32 %x, -199, !dbg !26
test1: I=  %x.inc2 = add nsw i32 %x, -199, !dbg !26
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add nsw i32 %x, -196, !dbg !29
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
NextInst[1]   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nsw i32 %x, -196, !dbg !29
chris-RemoveOne: return I  %x.inc3 = add nsw i32 %x, -196, !dbg !29
run: WorkList:   %x.inc3 = add nsw i32 %x, -196, !dbg !29
chris-run: I=  %x.inc3 = add nsw i32 %x, -196, !dbg !29
chris-run: I-end=  %x.inc3 = add nsw i32 %x, -196, !dbg !29
IC: Visiting:   %x.inc3 = add nsw i32 %x, -196, !dbg !29
test1: I=  %x.inc3 = add nsw i32 %x, -196, !dbg !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void, !dbg !32
 ok, break
Inst[end]:   ret void, !dbg !32
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void, !dbg !32
chris-RemoveOne: return I  ret void, !dbg !32
run: WorkList:   ret void, !dbg !32
chris-run: I=  ret void, !dbg !32
chris-run: I-end=  ret void, !dbg !32
IC: Visiting:   ret void, !dbg !32
test1: I=  ret void, !dbg !32
visit: nullptr 
test3
test4
CheckFunctionDebugify [Combine redundant instructions]: PASS
CheckFunctionDebugify [Warn about non-applied transformations]: PASS
CheckFunctionDebugify [Alignment from assumptions]: PASS
CheckFunctionDebugify [Float to int]: PASS
CheckFunctionDebugify [Loop Distribution]: PASS
CheckFunctionDebugify [Loop Vectorization]: PASS
CheckFunctionDebugify [Loop Load Elimination]: PASS
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
runOnFunction: I:  %chk0 = icmp ugt i32 %length, %x, !dbg !21
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
runOnFunction: I:  %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
runOnFunction: I:  %x.inc2 = add i32 %x, 2, !dbg !26
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
runOnFunction: I:  %x.inc3 = add nuw i32 %x, 3, !dbg !29
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
runOnFunction: I:  ret void, !dbg !32
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add i32 %x, 2, !dbg !26
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw i32 %x, 3, !dbg !29
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(start):  ret void, !dbg !32


INSTCOMBINE ITERATION #1 on f_6
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add i32 %x, 2, !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw i32 %x, 3, !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(end):  ret void, !dbg !32
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add i32 %x, 2, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add nuw i32 %x, 3, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add i32 %x, 2, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add nuw i32 %x, 3, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-worklist-bb: BB end:   %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-worklist-bb: BB end:   %x.inc2 = add i32 %x, 2, !dbg !26
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-worklist-bb: BB end:   %x.inc3 = add nuw i32 %x, 3, !dbg !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-worklist-bb: BB end:   ret void, !dbg !32
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void, !dbg !32
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-AddInitialGroup: I:   %x.inc3 = add nuw i32 %x, 3, !dbg !29
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-AddInitialGroup: I:   %x.inc2 = add i32 %x, 2, !dbg !26
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-AddInitialGroup: I:   %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
test1: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x, !dbg !21
run: WorkList:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
test1: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
NextInst[1]   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
chris-RemoveOne: return I  %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
run: WorkList:   %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
chris-run: I=  %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
chris-run: I-end=  %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
IC: Visiting:   %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
test1: I=  %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add i32 %x, 2, !dbg !26
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
NextInst[1]   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add i32 %x, 2, !dbg !26
chris-RemoveOne: return I  %x.inc2 = add i32 %x, 2, !dbg !26
run: WorkList:   %x.inc2 = add i32 %x, 2, !dbg !26
chris-run: I=  %x.inc2 = add i32 %x, 2, !dbg !26
chris-run: I-end=  %x.inc2 = add i32 %x, 2, !dbg !26
IC: Visiting:   %x.inc2 = add i32 %x, 2, !dbg !26
test1: I=  %x.inc2 = add i32 %x, 2, !dbg !26
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add nuw i32 %x, 3, !dbg !29
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
NextInst[1]   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw i32 %x, 3, !dbg !29
chris-RemoveOne: return I  %x.inc3 = add nuw i32 %x, 3, !dbg !29
run: WorkList:   %x.inc3 = add nuw i32 %x, 3, !dbg !29
chris-run: I=  %x.inc3 = add nuw i32 %x, 3, !dbg !29
chris-run: I-end=  %x.inc3 = add nuw i32 %x, 3, !dbg !29
IC: Visiting:   %x.inc3 = add nuw i32 %x, 3, !dbg !29
test1: I=  %x.inc3 = add nuw i32 %x, 3, !dbg !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void, !dbg !32
 ok, break
Inst[end]:   ret void, !dbg !32
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void, !dbg !32
chris-RemoveOne: return I  ret void, !dbg !32
run: WorkList:   ret void, !dbg !32
chris-run: I=  ret void, !dbg !32
chris-run: I-end=  ret void, !dbg !32
IC: Visiting:   ret void, !dbg !32
test1: I=  ret void, !dbg !32
visit: nullptr 
test3
test4
CheckFunctionDebugify [Combine redundant instructions]: PASS
CheckFunctionDebugify [Simplify the CFG]: PASS
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
runOnFunction: I:  %chk0 = icmp ugt i32 %length, %x, !dbg !21
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
runOnFunction: I:  %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
runOnFunction: I:  %x.inc2 = add i32 %x, 2, !dbg !26
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
runOnFunction: I:  %x.inc3 = add nuw i32 %x, 3, !dbg !29
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
runOnFunction: I:  ret void, !dbg !32
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add i32 %x, 2, !dbg !26
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw i32 %x, 3, !dbg !29
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(start):  ret void, !dbg !32


INSTCOMBINE ITERATION #1 on f_6
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add i32 %x, 2, !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw i32 %x, 3, !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(end):  ret void, !dbg !32
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add i32 %x, 2, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add nuw i32 %x, 3, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add i32 %x, 2, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add nuw i32 %x, 3, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-worklist-bb: BB end:   %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-worklist-bb: BB end:   %x.inc2 = add i32 %x, 2, !dbg !26
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-worklist-bb: BB end:   %x.inc3 = add nuw i32 %x, 3, !dbg !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-worklist-bb: BB end:   ret void, !dbg !32
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void, !dbg !32
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-AddInitialGroup: I:   %x.inc3 = add nuw i32 %x, 3, !dbg !29
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-AddInitialGroup: I:   %x.inc2 = add i32 %x, 2, !dbg !26
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-AddInitialGroup: I:   %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
test1: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x, !dbg !21
run: WorkList:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
test1: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
NextInst[1]   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
chris-RemoveOne: return I  %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
run: WorkList:   %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
chris-run: I=  %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
chris-run: I-end=  %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
IC: Visiting:   %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
test1: I=  %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add i32 %x, 2, !dbg !26
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
NextInst[1]   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add i32 %x, 2, !dbg !26
chris-RemoveOne: return I  %x.inc2 = add i32 %x, 2, !dbg !26
run: WorkList:   %x.inc2 = add i32 %x, 2, !dbg !26
chris-run: I=  %x.inc2 = add i32 %x, 2, !dbg !26
chris-run: I-end=  %x.inc2 = add i32 %x, 2, !dbg !26
IC: Visiting:   %x.inc2 = add i32 %x, 2, !dbg !26
test1: I=  %x.inc2 = add i32 %x, 2, !dbg !26
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add nuw i32 %x, 3, !dbg !29
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
NextInst[1]   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw i32 %x, 3, !dbg !29
chris-RemoveOne: return I  %x.inc3 = add nuw i32 %x, 3, !dbg !29
run: WorkList:   %x.inc3 = add nuw i32 %x, 3, !dbg !29
chris-run: I=  %x.inc3 = add nuw i32 %x, 3, !dbg !29
chris-run: I-end=  %x.inc3 = add nuw i32 %x, 3, !dbg !29
IC: Visiting:   %x.inc3 = add nuw i32 %x, 3, !dbg !29
test1: I=  %x.inc3 = add nuw i32 %x, 3, !dbg !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void, !dbg !32
 ok, break
Inst[end]:   ret void, !dbg !32
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void, !dbg !32
chris-RemoveOne: return I  ret void, !dbg !32
run: WorkList:   ret void, !dbg !32
chris-run: I=  ret void, !dbg !32
chris-run: I-end=  ret void, !dbg !32
IC: Visiting:   ret void, !dbg !32
test1: I=  ret void, !dbg !32
visit: nullptr 
test3
test4
CheckFunctionDebugify [Combine redundant instructions]: PASS
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
runOnFunction: I:  %chk0 = icmp ugt i32 %length, %x, !dbg !21
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
runOnFunction: I:  %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
runOnFunction: I:  %x.inc2 = add i32 %x, 2, !dbg !26
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
runOnFunction: I:  %x.inc3 = add nuw i32 %x, 3, !dbg !29
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
runOnFunction: I:  ret void, !dbg !32
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add i32 %x, 2, !dbg !26
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw i32 %x, 3, !dbg !29
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(start):  ret void, !dbg !32


INSTCOMBINE ITERATION #1 on f_6
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x, !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add i32 %x, 2, !dbg !26
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw i32 %x, 3, !dbg !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
INSTCOMBINE ITERATION: Inst(end):  ret void, !dbg !32
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add i32 %x, 2, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add nuw i32 %x, 3, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
  call void @llvm.dbg.value(metadata i32 %length, metadata !9, metadata !DIExpression()), !dbg !19
  %chk0 = icmp ugt i32 %length, %x, !dbg !21
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !11, metadata !DIExpression()), !dbg !21
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !13, metadata !DIExpression()), !dbg !23
  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !14, metadata !DIExpression()), !dbg !24
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  %x.inc2 = add i32 %x, 2, !dbg !26
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !15, metadata !DIExpression()), !dbg !26
  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !16, metadata !DIExpression()), !dbg !27
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  %x.inc3 = add nuw i32 %x, 3, !dbg !29
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !17, metadata !DIExpression()), !dbg !29
  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !18, metadata !DIExpression()), !dbg !30
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  ret void, !dbg !32

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length, metadata !10, metadata !DIExpression()), !dbg !20
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !12, metadata !DIExpression()), !dbg !21
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-worklist-bb: BB end:   %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-worklist-bb: BB end:   %x.inc2 = add i32 %x, 2, !dbg !26
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-worklist-bb: BB end:   %x.inc3 = add nuw i32 %x, 3, !dbg !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-worklist-bb: BB end:   ret void, !dbg !32
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void, !dbg !32
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-AddInitialGroup: I:   %x.inc3 = add nuw i32 %x, 3, !dbg !29
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-AddInitialGroup: I:   %x.inc2 = add i32 %x, 2, !dbg !26
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-AddInitialGroup: I:   %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
test1: I=  %length = load i32, i32* %length_buf, align 4, !dbg !19, !range !20
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x, !dbg !21
run: WorkList:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x, !dbg !21
test1: I=  %chk0 = icmp ugt i32 %length, %x, !dbg !21
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !22
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !14, metadata !DIExpression()), !dbg !23
NextInst[1]   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk1, metadata !15, metadata !DIExpression()), !dbg !24
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
chris-RemoveOne: return I  %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
run: WorkList:   %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
chris-run: I=  %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
chris-run: I-end=  %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
IC: Visiting:   %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
test1: I=  %x.inc1 = add nuw nsw i32 %x, -2147483647, !dbg !23
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length, !dbg !24
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !25
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add i32 %x, 2, !dbg !26
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !16, metadata !DIExpression()), !dbg !26
NextInst[1]   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk2, metadata !17, metadata !DIExpression()), !dbg !27
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add i32 %x, 2, !dbg !26
chris-RemoveOne: return I  %x.inc2 = add i32 %x, 2, !dbg !26
run: WorkList:   %x.inc2 = add i32 %x, 2, !dbg !26
chris-run: I=  %x.inc2 = add i32 %x, 2, !dbg !26
chris-run: I-end=  %x.inc2 = add i32 %x, 2, !dbg !26
IC: Visiting:   %x.inc2 = add i32 %x, 2, !dbg !26
test1: I=  %x.inc2 = add i32 %x, 2, !dbg !26
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length, !dbg !27
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !28
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add nuw i32 %x, 3, !dbg !29
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !18, metadata !DIExpression()), !dbg !29
NextInst[1]   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk3, metadata !19, metadata !DIExpression()), !dbg !30
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw i32 %x, 3, !dbg !29
chris-RemoveOne: return I  %x.inc3 = add nuw i32 %x, 3, !dbg !29
run: WorkList:   %x.inc3 = add nuw i32 %x, 3, !dbg !29
chris-run: I=  %x.inc3 = add nuw i32 %x, 3, !dbg !29
chris-run: I-end=  %x.inc3 = add nuw i32 %x, 3, !dbg !29
IC: Visiting:   %x.inc3 = add nuw i32 %x, 3, !dbg !29
test1: I=  %x.inc3 = add nuw i32 %x, 3, !dbg !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length, !dbg !30
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !31
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void, !dbg !32
 ok, break
Inst[end]:   ret void, !dbg !32
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void, !dbg !32
chris-RemoveOne: return I  ret void, !dbg !32
run: WorkList:   ret void, !dbg !32
chris-run: I=  ret void, !dbg !32
chris-run: I-end=  ret void, !dbg !32
IC: Visiting:   ret void, !dbg !32
test1: I=  ret void, !dbg !32
visit: nullptr 
test3
test4
CheckFunctionDebugify [Combine redundant instructions]: PASS
CheckFunctionDebugify [Warn about non-applied transformations]: PASS
CheckFunctionDebugify [Alignment from assumptions]: PASS
CheckFunctionDebugify [Float to int]: PASS
CheckFunctionDebugify [Loop Distribution]: PASS
CheckFunctionDebugify [Loop Vectorization]: PASS
CheckFunctionDebugify [Loop Load Elimination]: PASS
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %length_a, metadata !10, metadata !DIExpression()), !dbg !29
runOnFunction: I:  %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %length_b, metadata !12, metadata !DIExpression()), !dbg !30
runOnFunction: I:  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0.a, metadata !13, metadata !DIExpression()), !dbg !31
runOnFunction: I:  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0.b, metadata !15, metadata !DIExpression()), !dbg !32
runOnFunction: I:  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !16, metadata !DIExpression()), !dbg !33
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
runOnFunction: I:  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !17, metadata !DIExpression()), !dbg !35
runOnFunction: I:  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1.a, metadata !18, metadata !DIExpression()), !dbg !36
runOnFunction: I:  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1.b, metadata !19, metadata !DIExpression()), !dbg !37
runOnFunction: I:  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !20, metadata !DIExpression()), !dbg !38
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
runOnFunction: I:  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !21, metadata !DIExpression()), !dbg !40
runOnFunction: I:  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2.a, metadata !22, metadata !DIExpression()), !dbg !41
runOnFunction: I:  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2.b, metadata !23, metadata !DIExpression()), !dbg !42
runOnFunction: I:  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !24, metadata !DIExpression()), !dbg !43
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
runOnFunction: I:  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !25, metadata !DIExpression()), !dbg !45
runOnFunction: I:  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3.a, metadata !26, metadata !DIExpression()), !dbg !46
runOnFunction: I:  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3.b, metadata !27, metadata !DIExpression()), !dbg !47
runOnFunction: I:  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !28, metadata !DIExpression()), !dbg !48
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
runOnFunction: I:  ret void, !dbg !50
INSTCOMBINE ITERATION: Inst(start):  %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %length_a, metadata !10, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(start):  %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %length_b, metadata !12, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(start):  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0.a, metadata !13, metadata !DIExpression()), !dbg !31
INSTCOMBINE ITERATION: Inst(start):  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0.b, metadata !15, metadata !DIExpression()), !dbg !32
INSTCOMBINE ITERATION: Inst(start):  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !16, metadata !DIExpression()), !dbg !33
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !17, metadata !DIExpression()), !dbg !35
INSTCOMBINE ITERATION: Inst(start):  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1.a, metadata !18, metadata !DIExpression()), !dbg !36
INSTCOMBINE ITERATION: Inst(start):  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1.b, metadata !19, metadata !DIExpression()), !dbg !37
INSTCOMBINE ITERATION: Inst(start):  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !20, metadata !DIExpression()), !dbg !38
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !21, metadata !DIExpression()), !dbg !40
INSTCOMBINE ITERATION: Inst(start):  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2.a, metadata !22, metadata !DIExpression()), !dbg !41
INSTCOMBINE ITERATION: Inst(start):  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2.b, metadata !23, metadata !DIExpression()), !dbg !42
INSTCOMBINE ITERATION: Inst(start):  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !24, metadata !DIExpression()), !dbg !43
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !25, metadata !DIExpression()), !dbg !45
INSTCOMBINE ITERATION: Inst(start):  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3.a, metadata !26, metadata !DIExpression()), !dbg !46
INSTCOMBINE ITERATION: Inst(start):  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3.b, metadata !27, metadata !DIExpression()), !dbg !47
INSTCOMBINE ITERATION: Inst(start):  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !28, metadata !DIExpression()), !dbg !48
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
INSTCOMBINE ITERATION: Inst(start):  ret void, !dbg !50


INSTCOMBINE ITERATION #1 on f_7
INSTCOMBINE ITERATION: Inst(end):  %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length_a, metadata !10, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(end):  %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length_b, metadata !12, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(end):  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0.a, metadata !13, metadata !DIExpression()), !dbg !31
INSTCOMBINE ITERATION: Inst(end):  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0.b, metadata !15, metadata !DIExpression()), !dbg !32
INSTCOMBINE ITERATION: Inst(end):  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !16, metadata !DIExpression()), !dbg !33
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !17, metadata !DIExpression()), !dbg !35
INSTCOMBINE ITERATION: Inst(end):  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1.a, metadata !18, metadata !DIExpression()), !dbg !36
INSTCOMBINE ITERATION: Inst(end):  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1.b, metadata !19, metadata !DIExpression()), !dbg !37
INSTCOMBINE ITERATION: Inst(end):  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !20, metadata !DIExpression()), !dbg !38
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !21, metadata !DIExpression()), !dbg !40
INSTCOMBINE ITERATION: Inst(end):  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2.a, metadata !22, metadata !DIExpression()), !dbg !41
INSTCOMBINE ITERATION: Inst(end):  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2.b, metadata !23, metadata !DIExpression()), !dbg !42
INSTCOMBINE ITERATION: Inst(end):  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !24, metadata !DIExpression()), !dbg !43
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !25, metadata !DIExpression()), !dbg !45
INSTCOMBINE ITERATION: Inst(end):  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3.a, metadata !26, metadata !DIExpression()), !dbg !46
INSTCOMBINE ITERATION: Inst(end):  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3.b, metadata !27, metadata !DIExpression()), !dbg !47
INSTCOMBINE ITERATION: Inst(end):  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !28, metadata !DIExpression()), !dbg !48
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
INSTCOMBINE ITERATION: Inst(end):  ret void, !dbg !50
chris-worklist-bb: bb: 
entry:
  %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
  call void @llvm.dbg.value(metadata i32 %length_a, metadata !9, metadata !DIExpression()), !dbg !28
  %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
  call void @llvm.dbg.value(metadata i32 %length_b, metadata !11, metadata !DIExpression()), !dbg !30
  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
  call void @llvm.dbg.value(metadata i1 %chk0.a, metadata !12, metadata !DIExpression()), !dbg !31
  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
  call void @llvm.dbg.value(metadata i1 %chk0.b, metadata !14, metadata !DIExpression()), !dbg !32
  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !15, metadata !DIExpression()), !dbg !33
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !16, metadata !DIExpression()), !dbg !35
  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
  call void @llvm.dbg.value(metadata i1 %chk1.a, metadata !17, metadata !DIExpression()), !dbg !36
  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
  call void @llvm.dbg.value(metadata i1 %chk1.b, metadata !18, metadata !DIExpression()), !dbg !37
  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !19, metadata !DIExpression()), !dbg !38
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !20, metadata !DIExpression()), !dbg !40
  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
  call void @llvm.dbg.value(metadata i1 %chk2.a, metadata !21, metadata !DIExpression()), !dbg !41
  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
  call void @llvm.dbg.value(metadata i1 %chk2.b, metadata !22, metadata !DIExpression()), !dbg !42
  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !23, metadata !DIExpression()), !dbg !43
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !24, metadata !DIExpression()), !dbg !45
  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
  call void @llvm.dbg.value(metadata i1 %chk3.a, metadata !25, metadata !DIExpression()), !dbg !46
  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
  call void @llvm.dbg.value(metadata i1 %chk3.b, metadata !26, metadata !DIExpression()), !dbg !47
  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !27, metadata !DIExpression()), !dbg !48
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
  ret void, !dbg !50

chris-worklist-bb: BB: 
entry:
  %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
  call void @llvm.dbg.value(metadata i32 %length_a, metadata !9, metadata !DIExpression()), !dbg !28
  %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
  call void @llvm.dbg.value(metadata i32 %length_b, metadata !11, metadata !DIExpression()), !dbg !30
  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
  call void @llvm.dbg.value(metadata i1 %chk0.a, metadata !12, metadata !DIExpression()), !dbg !31
  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
  call void @llvm.dbg.value(metadata i1 %chk0.b, metadata !14, metadata !DIExpression()), !dbg !32
  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !15, metadata !DIExpression()), !dbg !33
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !16, metadata !DIExpression()), !dbg !35
  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
  call void @llvm.dbg.value(metadata i1 %chk1.a, metadata !17, metadata !DIExpression()), !dbg !36
  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
  call void @llvm.dbg.value(metadata i1 %chk1.b, metadata !18, metadata !DIExpression()), !dbg !37
  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !19, metadata !DIExpression()), !dbg !38
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !20, metadata !DIExpression()), !dbg !40
  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
  call void @llvm.dbg.value(metadata i1 %chk2.a, metadata !21, metadata !DIExpression()), !dbg !41
  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
  call void @llvm.dbg.value(metadata i1 %chk2.b, metadata !22, metadata !DIExpression()), !dbg !42
  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !23, metadata !DIExpression()), !dbg !43
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !24, metadata !DIExpression()), !dbg !45
  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
  call void @llvm.dbg.value(metadata i1 %chk3.a, metadata !25, metadata !DIExpression()), !dbg !46
  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
  call void @llvm.dbg.value(metadata i1 %chk3.b, metadata !26, metadata !DIExpression()), !dbg !47
  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !27, metadata !DIExpression()), !dbg !48
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
  ret void, !dbg !50

chris-worklist-bb: BB end:   %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length_a, metadata !10, metadata !DIExpression()), !dbg !29
chris-worklist-bb: BB end:   %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length_b, metadata !12, metadata !DIExpression()), !dbg !30
chris-worklist-bb: BB end:   %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0.a, metadata !13, metadata !DIExpression()), !dbg !31
chris-worklist-bb: BB end:   %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0.b, metadata !15, metadata !DIExpression()), !dbg !32
chris-worklist-bb: BB end:   %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !16, metadata !DIExpression()), !dbg !33
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
chris-worklist-bb: BB end:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !17, metadata !DIExpression()), !dbg !35
chris-worklist-bb: BB end:   %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1.a, metadata !18, metadata !DIExpression()), !dbg !36
chris-worklist-bb: BB end:   %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1.b, metadata !19, metadata !DIExpression()), !dbg !37
chris-worklist-bb: BB end:   %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !20, metadata !DIExpression()), !dbg !38
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
chris-worklist-bb: BB end:   %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !21, metadata !DIExpression()), !dbg !40
chris-worklist-bb: BB end:   %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2.a, metadata !22, metadata !DIExpression()), !dbg !41
chris-worklist-bb: BB end:   %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2.b, metadata !23, metadata !DIExpression()), !dbg !42
chris-worklist-bb: BB end:   %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !24, metadata !DIExpression()), !dbg !43
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
chris-worklist-bb: BB end:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !25, metadata !DIExpression()), !dbg !45
chris-worklist-bb: BB end:   %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3.a, metadata !26, metadata !DIExpression()), !dbg !46
chris-worklist-bb: BB end:   %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3.b, metadata !27, metadata !DIExpression()), !dbg !47
chris-worklist-bb: BB end:   %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !28, metadata !DIExpression()), !dbg !48
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
chris-worklist-bb: BB end:   ret void, !dbg !50
IC: ADDING: 22 instrs to worklist
chris-AddInitialGroup: I:   ret void, !dbg !50
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
chris-AddInitialGroup: I:   %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
chris-AddInitialGroup: I:   %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
chris-AddInitialGroup: I:   %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
chris-AddInitialGroup: I:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
chris-AddInitialGroup: I:   %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
chris-AddInitialGroup: I:   %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
chris-AddInitialGroup: I:   %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
chris-AddInitialGroup: I:   %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
chris-AddInitialGroup: I:   %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
chris-AddInitialGroup: I:   %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
chris-AddInitialGroup: I:   %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
chris-AddInitialGroup: I:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
chris-AddInitialGroup: I:   %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
chris-AddInitialGroup: I:   %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
chris-AddInitialGroup: I:   %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
chris-AddInitialGroup: I:   %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
chris-AddInitialGroup: I:   %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
RemoveOne!!!
chris-RemoveOne:   %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
chris-RemoveOne: return I  %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
run: WorkList:   %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
chris-run: I=  %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
chris-run: I-end=  %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
IC: Visiting:   %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
test1: I=  %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
chris-RemoveOne: return I  %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
run: WorkList:   %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
chris-run: I=  %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
chris-run: I-end=  %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
IC: Visiting:   %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
test1: I=  %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
chris-RemoveOne: return I  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
run: WorkList:   %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
chris-run: I=  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
chris-run: I-end=  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
IC: Visiting:   %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
test1: I=  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
chris-RemoveOne: return I  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
run: WorkList:   %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
chris-run: I=  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
chris-run: I-end=  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
IC: Visiting:   %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
test1: I=  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
chris-RemoveOne: return I  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
run: WorkList:   %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
chris-run: I=  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
chris-run: I-end=  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
IC: Visiting:   %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
test1: I=  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !17, metadata !DIExpression()), !dbg !35
NextInst[1]   %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk1.a, metadata !18, metadata !DIExpression()), !dbg !36
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk1.a, metadata !18, metadata !DIExpression()), !dbg !36
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
chris-RemoveOne: return I  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
run: WorkList:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
chris-run: I=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
chris-run: I-end=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
IC: Visiting:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
test1: I=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
chris-RemoveOne: return I  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
run: WorkList:   %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
chris-run: I=  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
chris-run: I-end=  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
IC: Visiting:   %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
test1: I=  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
chris-RemoveOne: return I  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
run: WorkList:   %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
chris-run: I=  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
chris-run: I-end=  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
IC: Visiting:   %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
test1: I=  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
chris-RemoveOne: return I  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
run: WorkList:   %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
chris-run: I=  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
chris-run: I-end=  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
IC: Visiting:   %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
test1: I=  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !21, metadata !DIExpression()), !dbg !40
NextInst[1]   %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk2.a, metadata !22, metadata !DIExpression()), !dbg !41
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk2.a, metadata !22, metadata !DIExpression()), !dbg !41
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
chris-RemoveOne: return I  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
run: WorkList:   %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
chris-run: I=  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
chris-run: I-end=  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
IC: Visiting:   %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
test1: I=  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
chris-RemoveOne: return I  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
run: WorkList:   %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
chris-run: I=  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
chris-run: I-end=  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
IC: Visiting:   %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
test1: I=  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
chris-RemoveOne: return I  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
run: WorkList:   %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
chris-run: I=  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
chris-run: I-end=  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
IC: Visiting:   %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
test1: I=  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
chris-RemoveOne: return I  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
run: WorkList:   %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
chris-run: I=  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
chris-run: I-end=  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
IC: Visiting:   %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
test1: I=  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !25, metadata !DIExpression()), !dbg !45
NextInst[1]   %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk3.a, metadata !26, metadata !DIExpression()), !dbg !46
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk3.a, metadata !26, metadata !DIExpression()), !dbg !46
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
chris-RemoveOne: return I  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
run: WorkList:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
chris-run: I=  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
chris-run: I-end=  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
IC: Visiting:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
test1: I=  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
chris-RemoveOne: return I  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
run: WorkList:   %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
chris-run: I=  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
chris-run: I-end=  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
IC: Visiting:   %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
test1: I=  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
chris-RemoveOne: return I  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
run: WorkList:   %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
chris-run: I=  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
chris-run: I-end=  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
IC: Visiting:   %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
test1: I=  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
chris-RemoveOne: return I  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
run: WorkList:   %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
chris-run: I=  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
chris-run: I-end=  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
IC: Visiting:   %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
test1: I=  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void, !dbg !50
 ok, break
Inst[end]:   ret void, !dbg !50
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void, !dbg !50
chris-RemoveOne: return I  ret void, !dbg !50
run: WorkList:   ret void, !dbg !50
chris-run: I=  ret void, !dbg !50
chris-run: I-end=  ret void, !dbg !50
IC: Visiting:   ret void, !dbg !50
test1: I=  ret void, !dbg !50
visit: nullptr 
test3
test4
CheckFunctionDebugify [Combine redundant instructions]: PASS
CheckFunctionDebugify [Simplify the CFG]: PASS
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %length_a, metadata !10, metadata !DIExpression()), !dbg !29
runOnFunction: I:  %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %length_b, metadata !12, metadata !DIExpression()), !dbg !30
runOnFunction: I:  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0.a, metadata !13, metadata !DIExpression()), !dbg !31
runOnFunction: I:  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0.b, metadata !15, metadata !DIExpression()), !dbg !32
runOnFunction: I:  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !16, metadata !DIExpression()), !dbg !33
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
runOnFunction: I:  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !17, metadata !DIExpression()), !dbg !35
runOnFunction: I:  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1.a, metadata !18, metadata !DIExpression()), !dbg !36
runOnFunction: I:  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1.b, metadata !19, metadata !DIExpression()), !dbg !37
runOnFunction: I:  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !20, metadata !DIExpression()), !dbg !38
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
runOnFunction: I:  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !21, metadata !DIExpression()), !dbg !40
runOnFunction: I:  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2.a, metadata !22, metadata !DIExpression()), !dbg !41
runOnFunction: I:  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2.b, metadata !23, metadata !DIExpression()), !dbg !42
runOnFunction: I:  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !24, metadata !DIExpression()), !dbg !43
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
runOnFunction: I:  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !25, metadata !DIExpression()), !dbg !45
runOnFunction: I:  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3.a, metadata !26, metadata !DIExpression()), !dbg !46
runOnFunction: I:  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3.b, metadata !27, metadata !DIExpression()), !dbg !47
runOnFunction: I:  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !28, metadata !DIExpression()), !dbg !48
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
runOnFunction: I:  ret void, !dbg !50
INSTCOMBINE ITERATION: Inst(start):  %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %length_a, metadata !10, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(start):  %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %length_b, metadata !12, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(start):  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0.a, metadata !13, metadata !DIExpression()), !dbg !31
INSTCOMBINE ITERATION: Inst(start):  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0.b, metadata !15, metadata !DIExpression()), !dbg !32
INSTCOMBINE ITERATION: Inst(start):  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !16, metadata !DIExpression()), !dbg !33
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !17, metadata !DIExpression()), !dbg !35
INSTCOMBINE ITERATION: Inst(start):  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1.a, metadata !18, metadata !DIExpression()), !dbg !36
INSTCOMBINE ITERATION: Inst(start):  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1.b, metadata !19, metadata !DIExpression()), !dbg !37
INSTCOMBINE ITERATION: Inst(start):  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !20, metadata !DIExpression()), !dbg !38
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !21, metadata !DIExpression()), !dbg !40
INSTCOMBINE ITERATION: Inst(start):  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2.a, metadata !22, metadata !DIExpression()), !dbg !41
INSTCOMBINE ITERATION: Inst(start):  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2.b, metadata !23, metadata !DIExpression()), !dbg !42
INSTCOMBINE ITERATION: Inst(start):  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !24, metadata !DIExpression()), !dbg !43
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !25, metadata !DIExpression()), !dbg !45
INSTCOMBINE ITERATION: Inst(start):  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3.a, metadata !26, metadata !DIExpression()), !dbg !46
INSTCOMBINE ITERATION: Inst(start):  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3.b, metadata !27, metadata !DIExpression()), !dbg !47
INSTCOMBINE ITERATION: Inst(start):  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !28, metadata !DIExpression()), !dbg !48
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
INSTCOMBINE ITERATION: Inst(start):  ret void, !dbg !50


INSTCOMBINE ITERATION #1 on f_7
INSTCOMBINE ITERATION: Inst(end):  %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length_a, metadata !10, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(end):  %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length_b, metadata !12, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(end):  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0.a, metadata !13, metadata !DIExpression()), !dbg !31
INSTCOMBINE ITERATION: Inst(end):  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0.b, metadata !15, metadata !DIExpression()), !dbg !32
INSTCOMBINE ITERATION: Inst(end):  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !16, metadata !DIExpression()), !dbg !33
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !17, metadata !DIExpression()), !dbg !35
INSTCOMBINE ITERATION: Inst(end):  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1.a, metadata !18, metadata !DIExpression()), !dbg !36
INSTCOMBINE ITERATION: Inst(end):  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1.b, metadata !19, metadata !DIExpression()), !dbg !37
INSTCOMBINE ITERATION: Inst(end):  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !20, metadata !DIExpression()), !dbg !38
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !21, metadata !DIExpression()), !dbg !40
INSTCOMBINE ITERATION: Inst(end):  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2.a, metadata !22, metadata !DIExpression()), !dbg !41
INSTCOMBINE ITERATION: Inst(end):  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2.b, metadata !23, metadata !DIExpression()), !dbg !42
INSTCOMBINE ITERATION: Inst(end):  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !24, metadata !DIExpression()), !dbg !43
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !25, metadata !DIExpression()), !dbg !45
INSTCOMBINE ITERATION: Inst(end):  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3.a, metadata !26, metadata !DIExpression()), !dbg !46
INSTCOMBINE ITERATION: Inst(end):  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3.b, metadata !27, metadata !DIExpression()), !dbg !47
INSTCOMBINE ITERATION: Inst(end):  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !28, metadata !DIExpression()), !dbg !48
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
INSTCOMBINE ITERATION: Inst(end):  ret void, !dbg !50
chris-worklist-bb: bb: 
entry:
  %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
  call void @llvm.dbg.value(metadata i32 %length_a, metadata !9, metadata !DIExpression()), !dbg !28
  %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
  call void @llvm.dbg.value(metadata i32 %length_b, metadata !11, metadata !DIExpression()), !dbg !30
  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
  call void @llvm.dbg.value(metadata i1 %chk0.a, metadata !12, metadata !DIExpression()), !dbg !31
  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
  call void @llvm.dbg.value(metadata i1 %chk0.b, metadata !14, metadata !DIExpression()), !dbg !32
  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !15, metadata !DIExpression()), !dbg !33
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !16, metadata !DIExpression()), !dbg !35
  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
  call void @llvm.dbg.value(metadata i1 %chk1.a, metadata !17, metadata !DIExpression()), !dbg !36
  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
  call void @llvm.dbg.value(metadata i1 %chk1.b, metadata !18, metadata !DIExpression()), !dbg !37
  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !19, metadata !DIExpression()), !dbg !38
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !20, metadata !DIExpression()), !dbg !40
  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
  call void @llvm.dbg.value(metadata i1 %chk2.a, metadata !21, metadata !DIExpression()), !dbg !41
  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
  call void @llvm.dbg.value(metadata i1 %chk2.b, metadata !22, metadata !DIExpression()), !dbg !42
  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !23, metadata !DIExpression()), !dbg !43
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !24, metadata !DIExpression()), !dbg !45
  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
  call void @llvm.dbg.value(metadata i1 %chk3.a, metadata !25, metadata !DIExpression()), !dbg !46
  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
  call void @llvm.dbg.value(metadata i1 %chk3.b, metadata !26, metadata !DIExpression()), !dbg !47
  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !27, metadata !DIExpression()), !dbg !48
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
  ret void, !dbg !50

chris-worklist-bb: BB: 
entry:
  %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
  call void @llvm.dbg.value(metadata i32 %length_a, metadata !9, metadata !DIExpression()), !dbg !28
  %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
  call void @llvm.dbg.value(metadata i32 %length_b, metadata !11, metadata !DIExpression()), !dbg !30
  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
  call void @llvm.dbg.value(metadata i1 %chk0.a, metadata !12, metadata !DIExpression()), !dbg !31
  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
  call void @llvm.dbg.value(metadata i1 %chk0.b, metadata !14, metadata !DIExpression()), !dbg !32
  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !15, metadata !DIExpression()), !dbg !33
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !16, metadata !DIExpression()), !dbg !35
  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
  call void @llvm.dbg.value(metadata i1 %chk1.a, metadata !17, metadata !DIExpression()), !dbg !36
  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
  call void @llvm.dbg.value(metadata i1 %chk1.b, metadata !18, metadata !DIExpression()), !dbg !37
  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !19, metadata !DIExpression()), !dbg !38
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !20, metadata !DIExpression()), !dbg !40
  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
  call void @llvm.dbg.value(metadata i1 %chk2.a, metadata !21, metadata !DIExpression()), !dbg !41
  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
  call void @llvm.dbg.value(metadata i1 %chk2.b, metadata !22, metadata !DIExpression()), !dbg !42
  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !23, metadata !DIExpression()), !dbg !43
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !24, metadata !DIExpression()), !dbg !45
  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
  call void @llvm.dbg.value(metadata i1 %chk3.a, metadata !25, metadata !DIExpression()), !dbg !46
  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
  call void @llvm.dbg.value(metadata i1 %chk3.b, metadata !26, metadata !DIExpression()), !dbg !47
  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !27, metadata !DIExpression()), !dbg !48
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
  ret void, !dbg !50

chris-worklist-bb: BB end:   %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length_a, metadata !10, metadata !DIExpression()), !dbg !29
chris-worklist-bb: BB end:   %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length_b, metadata !12, metadata !DIExpression()), !dbg !30
chris-worklist-bb: BB end:   %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0.a, metadata !13, metadata !DIExpression()), !dbg !31
chris-worklist-bb: BB end:   %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0.b, metadata !15, metadata !DIExpression()), !dbg !32
chris-worklist-bb: BB end:   %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !16, metadata !DIExpression()), !dbg !33
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
chris-worklist-bb: BB end:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !17, metadata !DIExpression()), !dbg !35
chris-worklist-bb: BB end:   %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1.a, metadata !18, metadata !DIExpression()), !dbg !36
chris-worklist-bb: BB end:   %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1.b, metadata !19, metadata !DIExpression()), !dbg !37
chris-worklist-bb: BB end:   %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !20, metadata !DIExpression()), !dbg !38
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
chris-worklist-bb: BB end:   %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !21, metadata !DIExpression()), !dbg !40
chris-worklist-bb: BB end:   %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2.a, metadata !22, metadata !DIExpression()), !dbg !41
chris-worklist-bb: BB end:   %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2.b, metadata !23, metadata !DIExpression()), !dbg !42
chris-worklist-bb: BB end:   %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !24, metadata !DIExpression()), !dbg !43
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
chris-worklist-bb: BB end:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !25, metadata !DIExpression()), !dbg !45
chris-worklist-bb: BB end:   %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3.a, metadata !26, metadata !DIExpression()), !dbg !46
chris-worklist-bb: BB end:   %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3.b, metadata !27, metadata !DIExpression()), !dbg !47
chris-worklist-bb: BB end:   %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !28, metadata !DIExpression()), !dbg !48
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
chris-worklist-bb: BB end:   ret void, !dbg !50
IC: ADDING: 22 instrs to worklist
chris-AddInitialGroup: I:   ret void, !dbg !50
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
chris-AddInitialGroup: I:   %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
chris-AddInitialGroup: I:   %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
chris-AddInitialGroup: I:   %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
chris-AddInitialGroup: I:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
chris-AddInitialGroup: I:   %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
chris-AddInitialGroup: I:   %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
chris-AddInitialGroup: I:   %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
chris-AddInitialGroup: I:   %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
chris-AddInitialGroup: I:   %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
chris-AddInitialGroup: I:   %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
chris-AddInitialGroup: I:   %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
chris-AddInitialGroup: I:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
chris-AddInitialGroup: I:   %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
chris-AddInitialGroup: I:   %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
chris-AddInitialGroup: I:   %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
chris-AddInitialGroup: I:   %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
chris-AddInitialGroup: I:   %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
RemoveOne!!!
chris-RemoveOne:   %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
chris-RemoveOne: return I  %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
run: WorkList:   %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
chris-run: I=  %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
chris-run: I-end=  %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
IC: Visiting:   %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
test1: I=  %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
chris-RemoveOne: return I  %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
run: WorkList:   %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
chris-run: I=  %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
chris-run: I-end=  %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
IC: Visiting:   %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
test1: I=  %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
chris-RemoveOne: return I  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
run: WorkList:   %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
chris-run: I=  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
chris-run: I-end=  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
IC: Visiting:   %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
test1: I=  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
chris-RemoveOne: return I  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
run: WorkList:   %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
chris-run: I=  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
chris-run: I-end=  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
IC: Visiting:   %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
test1: I=  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
chris-RemoveOne: return I  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
run: WorkList:   %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
chris-run: I=  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
chris-run: I-end=  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
IC: Visiting:   %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
test1: I=  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !17, metadata !DIExpression()), !dbg !35
NextInst[1]   %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk1.a, metadata !18, metadata !DIExpression()), !dbg !36
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk1.a, metadata !18, metadata !DIExpression()), !dbg !36
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
chris-RemoveOne: return I  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
run: WorkList:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
chris-run: I=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
chris-run: I-end=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
IC: Visiting:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
test1: I=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
chris-RemoveOne: return I  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
run: WorkList:   %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
chris-run: I=  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
chris-run: I-end=  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
IC: Visiting:   %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
test1: I=  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
chris-RemoveOne: return I  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
run: WorkList:   %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
chris-run: I=  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
chris-run: I-end=  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
IC: Visiting:   %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
test1: I=  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
chris-RemoveOne: return I  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
run: WorkList:   %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
chris-run: I=  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
chris-run: I-end=  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
IC: Visiting:   %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
test1: I=  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !21, metadata !DIExpression()), !dbg !40
NextInst[1]   %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk2.a, metadata !22, metadata !DIExpression()), !dbg !41
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk2.a, metadata !22, metadata !DIExpression()), !dbg !41
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
chris-RemoveOne: return I  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
run: WorkList:   %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
chris-run: I=  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
chris-run: I-end=  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
IC: Visiting:   %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
test1: I=  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
chris-RemoveOne: return I  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
run: WorkList:   %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
chris-run: I=  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
chris-run: I-end=  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
IC: Visiting:   %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
test1: I=  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
chris-RemoveOne: return I  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
run: WorkList:   %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
chris-run: I=  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
chris-run: I-end=  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
IC: Visiting:   %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
test1: I=  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
chris-RemoveOne: return I  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
run: WorkList:   %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
chris-run: I=  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
chris-run: I-end=  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
IC: Visiting:   %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
test1: I=  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !25, metadata !DIExpression()), !dbg !45
NextInst[1]   %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk3.a, metadata !26, metadata !DIExpression()), !dbg !46
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk3.a, metadata !26, metadata !DIExpression()), !dbg !46
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
chris-RemoveOne: return I  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
run: WorkList:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
chris-run: I=  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
chris-run: I-end=  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
IC: Visiting:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
test1: I=  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
chris-RemoveOne: return I  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
run: WorkList:   %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
chris-run: I=  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
chris-run: I-end=  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
IC: Visiting:   %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
test1: I=  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
chris-RemoveOne: return I  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
run: WorkList:   %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
chris-run: I=  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
chris-run: I-end=  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
IC: Visiting:   %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
test1: I=  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
chris-RemoveOne: return I  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
run: WorkList:   %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
chris-run: I=  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
chris-run: I-end=  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
IC: Visiting:   %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
test1: I=  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void, !dbg !50
 ok, break
Inst[end]:   ret void, !dbg !50
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void, !dbg !50
chris-RemoveOne: return I  ret void, !dbg !50
run: WorkList:   ret void, !dbg !50
chris-run: I=  ret void, !dbg !50
chris-run: I-end=  ret void, !dbg !50
IC: Visiting:   ret void, !dbg !50
test1: I=  ret void, !dbg !50
visit: nullptr 
test3
test4
CheckFunctionDebugify [Combine redundant instructions]: PASS
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %length_a, metadata !10, metadata !DIExpression()), !dbg !29
runOnFunction: I:  %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %length_b, metadata !12, metadata !DIExpression()), !dbg !30
runOnFunction: I:  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0.a, metadata !13, metadata !DIExpression()), !dbg !31
runOnFunction: I:  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0.b, metadata !15, metadata !DIExpression()), !dbg !32
runOnFunction: I:  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !16, metadata !DIExpression()), !dbg !33
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
runOnFunction: I:  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !17, metadata !DIExpression()), !dbg !35
runOnFunction: I:  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1.a, metadata !18, metadata !DIExpression()), !dbg !36
runOnFunction: I:  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1.b, metadata !19, metadata !DIExpression()), !dbg !37
runOnFunction: I:  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !20, metadata !DIExpression()), !dbg !38
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
runOnFunction: I:  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !21, metadata !DIExpression()), !dbg !40
runOnFunction: I:  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2.a, metadata !22, metadata !DIExpression()), !dbg !41
runOnFunction: I:  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2.b, metadata !23, metadata !DIExpression()), !dbg !42
runOnFunction: I:  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !24, metadata !DIExpression()), !dbg !43
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
runOnFunction: I:  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
runOnFunction: I:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !25, metadata !DIExpression()), !dbg !45
runOnFunction: I:  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3.a, metadata !26, metadata !DIExpression()), !dbg !46
runOnFunction: I:  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3.b, metadata !27, metadata !DIExpression()), !dbg !47
runOnFunction: I:  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
runOnFunction: I:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !28, metadata !DIExpression()), !dbg !48
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
runOnFunction: I:  ret void, !dbg !50
INSTCOMBINE ITERATION: Inst(start):  %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %length_a, metadata !10, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(start):  %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %length_b, metadata !12, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(start):  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0.a, metadata !13, metadata !DIExpression()), !dbg !31
INSTCOMBINE ITERATION: Inst(start):  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0.b, metadata !15, metadata !DIExpression()), !dbg !32
INSTCOMBINE ITERATION: Inst(start):  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !16, metadata !DIExpression()), !dbg !33
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !17, metadata !DIExpression()), !dbg !35
INSTCOMBINE ITERATION: Inst(start):  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1.a, metadata !18, metadata !DIExpression()), !dbg !36
INSTCOMBINE ITERATION: Inst(start):  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1.b, metadata !19, metadata !DIExpression()), !dbg !37
INSTCOMBINE ITERATION: Inst(start):  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !20, metadata !DIExpression()), !dbg !38
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !21, metadata !DIExpression()), !dbg !40
INSTCOMBINE ITERATION: Inst(start):  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2.a, metadata !22, metadata !DIExpression()), !dbg !41
INSTCOMBINE ITERATION: Inst(start):  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2.b, metadata !23, metadata !DIExpression()), !dbg !42
INSTCOMBINE ITERATION: Inst(start):  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !24, metadata !DIExpression()), !dbg !43
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !25, metadata !DIExpression()), !dbg !45
INSTCOMBINE ITERATION: Inst(start):  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3.a, metadata !26, metadata !DIExpression()), !dbg !46
INSTCOMBINE ITERATION: Inst(start):  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3.b, metadata !27, metadata !DIExpression()), !dbg !47
INSTCOMBINE ITERATION: Inst(start):  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
INSTCOMBINE ITERATION: Inst(start):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !28, metadata !DIExpression()), !dbg !48
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
INSTCOMBINE ITERATION: Inst(start):  ret void, !dbg !50


INSTCOMBINE ITERATION #1 on f_7
INSTCOMBINE ITERATION: Inst(end):  %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length_a, metadata !10, metadata !DIExpression()), !dbg !29
INSTCOMBINE ITERATION: Inst(end):  %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %length_b, metadata !12, metadata !DIExpression()), !dbg !30
INSTCOMBINE ITERATION: Inst(end):  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0.a, metadata !13, metadata !DIExpression()), !dbg !31
INSTCOMBINE ITERATION: Inst(end):  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0.b, metadata !15, metadata !DIExpression()), !dbg !32
INSTCOMBINE ITERATION: Inst(end):  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk0, metadata !16, metadata !DIExpression()), !dbg !33
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !17, metadata !DIExpression()), !dbg !35
INSTCOMBINE ITERATION: Inst(end):  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1.a, metadata !18, metadata !DIExpression()), !dbg !36
INSTCOMBINE ITERATION: Inst(end):  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1.b, metadata !19, metadata !DIExpression()), !dbg !37
INSTCOMBINE ITERATION: Inst(end):  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk1, metadata !20, metadata !DIExpression()), !dbg !38
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !21, metadata !DIExpression()), !dbg !40
INSTCOMBINE ITERATION: Inst(end):  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2.a, metadata !22, metadata !DIExpression()), !dbg !41
INSTCOMBINE ITERATION: Inst(end):  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2.b, metadata !23, metadata !DIExpression()), !dbg !42
INSTCOMBINE ITERATION: Inst(end):  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk2, metadata !24, metadata !DIExpression()), !dbg !43
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !25, metadata !DIExpression()), !dbg !45
INSTCOMBINE ITERATION: Inst(end):  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3.a, metadata !26, metadata !DIExpression()), !dbg !46
INSTCOMBINE ITERATION: Inst(end):  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3.b, metadata !27, metadata !DIExpression()), !dbg !47
INSTCOMBINE ITERATION: Inst(end):  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
INSTCOMBINE ITERATION: Inst(end):  call void @llvm.dbg.value(metadata i1 %chk3, metadata !28, metadata !DIExpression()), !dbg !48
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
INSTCOMBINE ITERATION: Inst(end):  ret void, !dbg !50
chris-worklist-bb: bb: 
entry:
  %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
  call void @llvm.dbg.value(metadata i32 %length_a, metadata !9, metadata !DIExpression()), !dbg !28
  %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
  call void @llvm.dbg.value(metadata i32 %length_b, metadata !11, metadata !DIExpression()), !dbg !30
  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
  call void @llvm.dbg.value(metadata i1 %chk0.a, metadata !12, metadata !DIExpression()), !dbg !31
  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
  call void @llvm.dbg.value(metadata i1 %chk0.b, metadata !14, metadata !DIExpression()), !dbg !32
  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !15, metadata !DIExpression()), !dbg !33
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !16, metadata !DIExpression()), !dbg !35
  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
  call void @llvm.dbg.value(metadata i1 %chk1.a, metadata !17, metadata !DIExpression()), !dbg !36
  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
  call void @llvm.dbg.value(metadata i1 %chk1.b, metadata !18, metadata !DIExpression()), !dbg !37
  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !19, metadata !DIExpression()), !dbg !38
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !20, metadata !DIExpression()), !dbg !40
  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
  call void @llvm.dbg.value(metadata i1 %chk2.a, metadata !21, metadata !DIExpression()), !dbg !41
  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
  call void @llvm.dbg.value(metadata i1 %chk2.b, metadata !22, metadata !DIExpression()), !dbg !42
  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !23, metadata !DIExpression()), !dbg !43
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !24, metadata !DIExpression()), !dbg !45
  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
  call void @llvm.dbg.value(metadata i1 %chk3.a, metadata !25, metadata !DIExpression()), !dbg !46
  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
  call void @llvm.dbg.value(metadata i1 %chk3.b, metadata !26, metadata !DIExpression()), !dbg !47
  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !27, metadata !DIExpression()), !dbg !48
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
  ret void, !dbg !50

chris-worklist-bb: BB: 
entry:
  %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
  call void @llvm.dbg.value(metadata i32 %length_a, metadata !9, metadata !DIExpression()), !dbg !28
  %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
  call void @llvm.dbg.value(metadata i32 %length_b, metadata !11, metadata !DIExpression()), !dbg !30
  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
  call void @llvm.dbg.value(metadata i1 %chk0.a, metadata !12, metadata !DIExpression()), !dbg !31
  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
  call void @llvm.dbg.value(metadata i1 %chk0.b, metadata !14, metadata !DIExpression()), !dbg !32
  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
  call void @llvm.dbg.value(metadata i1 %chk0, metadata !15, metadata !DIExpression()), !dbg !33
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !16, metadata !DIExpression()), !dbg !35
  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
  call void @llvm.dbg.value(metadata i1 %chk1.a, metadata !17, metadata !DIExpression()), !dbg !36
  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
  call void @llvm.dbg.value(metadata i1 %chk1.b, metadata !18, metadata !DIExpression()), !dbg !37
  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
  call void @llvm.dbg.value(metadata i1 %chk1, metadata !19, metadata !DIExpression()), !dbg !38
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !20, metadata !DIExpression()), !dbg !40
  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
  call void @llvm.dbg.value(metadata i1 %chk2.a, metadata !21, metadata !DIExpression()), !dbg !41
  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
  call void @llvm.dbg.value(metadata i1 %chk2.b, metadata !22, metadata !DIExpression()), !dbg !42
  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
  call void @llvm.dbg.value(metadata i1 %chk2, metadata !23, metadata !DIExpression()), !dbg !43
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !24, metadata !DIExpression()), !dbg !45
  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
  call void @llvm.dbg.value(metadata i1 %chk3.a, metadata !25, metadata !DIExpression()), !dbg !46
  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
  call void @llvm.dbg.value(metadata i1 %chk3.b, metadata !26, metadata !DIExpression()), !dbg !47
  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
  call void @llvm.dbg.value(metadata i1 %chk3, metadata !27, metadata !DIExpression()), !dbg !48
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
  ret void, !dbg !50

chris-worklist-bb: BB end:   %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length_a, metadata !10, metadata !DIExpression()), !dbg !29
chris-worklist-bb: BB end:   %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %length_b, metadata !12, metadata !DIExpression()), !dbg !30
chris-worklist-bb: BB end:   %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0.a, metadata !13, metadata !DIExpression()), !dbg !31
chris-worklist-bb: BB end:   %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0.b, metadata !15, metadata !DIExpression()), !dbg !32
chris-worklist-bb: BB end:   %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk0, metadata !16, metadata !DIExpression()), !dbg !33
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
chris-worklist-bb: BB end:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !17, metadata !DIExpression()), !dbg !35
chris-worklist-bb: BB end:   %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1.a, metadata !18, metadata !DIExpression()), !dbg !36
chris-worklist-bb: BB end:   %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1.b, metadata !19, metadata !DIExpression()), !dbg !37
chris-worklist-bb: BB end:   %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk1, metadata !20, metadata !DIExpression()), !dbg !38
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
chris-worklist-bb: BB end:   %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !21, metadata !DIExpression()), !dbg !40
chris-worklist-bb: BB end:   %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2.a, metadata !22, metadata !DIExpression()), !dbg !41
chris-worklist-bb: BB end:   %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2.b, metadata !23, metadata !DIExpression()), !dbg !42
chris-worklist-bb: BB end:   %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk2, metadata !24, metadata !DIExpression()), !dbg !43
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
chris-worklist-bb: BB end:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !25, metadata !DIExpression()), !dbg !45
chris-worklist-bb: BB end:   %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3.a, metadata !26, metadata !DIExpression()), !dbg !46
chris-worklist-bb: BB end:   %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3.b, metadata !27, metadata !DIExpression()), !dbg !47
chris-worklist-bb: BB end:   %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
chris-worklist-bb: BB end: not push back:  call void @llvm.dbg.value(metadata i1 %chk3, metadata !28, metadata !DIExpression()), !dbg !48
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
chris-worklist-bb: BB end:   ret void, !dbg !50
IC: ADDING: 22 instrs to worklist
chris-AddInitialGroup: I:   ret void, !dbg !50
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
chris-AddInitialGroup: I:   %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
chris-AddInitialGroup: I:   %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
chris-AddInitialGroup: I:   %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
chris-AddInitialGroup: I:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
chris-AddInitialGroup: I:   %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
chris-AddInitialGroup: I:   %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
chris-AddInitialGroup: I:   %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
chris-AddInitialGroup: I:   %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
chris-AddInitialGroup: I:   %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
chris-AddInitialGroup: I:   %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
chris-AddInitialGroup: I:   %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
chris-AddInitialGroup: I:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
chris-AddInitialGroup: I:   %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
chris-AddInitialGroup: I:   %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
chris-AddInitialGroup: I:   %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
chris-AddInitialGroup: I:   %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
chris-AddInitialGroup: I:   %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
RemoveOne!!!
chris-RemoveOne:   %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
chris-RemoveOne: return I  %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
run: WorkList:   %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
chris-run: I=  %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
chris-run: I-end=  %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
IC: Visiting:   %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
test1: I=  %length_a = load volatile i32, i32* %length_buf, align 4, !dbg !28, !range !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
chris-RemoveOne: return I  %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
run: WorkList:   %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
chris-run: I=  %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
chris-run: I-end=  %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
IC: Visiting:   %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
test1: I=  %length_b = load volatile i32, i32* %length_buf, align 4, !dbg !30, !range !29
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
chris-RemoveOne: return I  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
run: WorkList:   %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
chris-run: I=  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
chris-run: I-end=  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
IC: Visiting:   %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
test1: I=  %chk0.a = icmp ugt i32 %length_a, %x, !dbg !31
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
chris-RemoveOne: return I  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
run: WorkList:   %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
chris-run: I=  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
chris-run: I-end=  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
IC: Visiting:   %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
test1: I=  %chk0.b = icmp ugt i32 %length_b, %x, !dbg !32
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
chris-RemoveOne: return I  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
run: WorkList:   %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
chris-run: I=  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
chris-run: I-end=  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
IC: Visiting:   %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
test1: I=  %chk0 = and i1 %chk0.a, %chk0.b, !dbg !33
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ], !dbg !34
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc1, metadata !17, metadata !DIExpression()), !dbg !35
NextInst[1]   %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk1.a, metadata !18, metadata !DIExpression()), !dbg !36
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk1.a, metadata !18, metadata !DIExpression()), !dbg !36
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
chris-RemoveOne: return I  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
run: WorkList:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
chris-run: I=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
chris-run: I-end=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
IC: Visiting:   %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
test1: I=  %x.inc1 = add nuw nsw i32 %x, 1, !dbg !35
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
chris-RemoveOne: return I  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
run: WorkList:   %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
chris-run: I=  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
chris-run: I-end=  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
IC: Visiting:   %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
test1: I=  %chk1.a = icmp ult i32 %x.inc1, %length_a, !dbg !36
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
chris-RemoveOne: return I  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
run: WorkList:   %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
chris-run: I=  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
chris-run: I-end=  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
IC: Visiting:   %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
test1: I=  %chk1.b = icmp ult i32 %x.inc1, %length_b, !dbg !37
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
chris-RemoveOne: return I  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
run: WorkList:   %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
chris-run: I=  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
chris-run: I-end=  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
IC: Visiting:   %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
test1: I=  %chk1 = and i1 %chk1.a, %chk1.b, !dbg !38
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ], !dbg !39
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc2, metadata !21, metadata !DIExpression()), !dbg !40
NextInst[1]   %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk2.a, metadata !22, metadata !DIExpression()), !dbg !41
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk2.a, metadata !22, metadata !DIExpression()), !dbg !41
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
chris-RemoveOne: return I  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
run: WorkList:   %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
chris-run: I=  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
chris-run: I-end=  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
IC: Visiting:   %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
test1: I=  %x.inc2 = add nuw nsw i32 %x, 2, !dbg !40
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
chris-RemoveOne: return I  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
run: WorkList:   %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
chris-run: I=  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
chris-run: I-end=  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
IC: Visiting:   %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
test1: I=  %chk2.a = icmp ult i32 %x.inc2, %length_a, !dbg !41
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
chris-RemoveOne: return I  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
run: WorkList:   %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
chris-run: I=  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
chris-run: I-end=  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
IC: Visiting:   %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
test1: I=  %chk2.b = icmp ult i32 %x.inc2, %length_b, !dbg !42
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
chris-RemoveOne: return I  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
run: WorkList:   %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
chris-run: I=  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
chris-run: I-end=  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
IC: Visiting:   %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
test1: I=  %chk2 = and i1 %chk2.a, %chk2.b, !dbg !43
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ], !dbg !44
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
NextInst[0]   call void @llvm.dbg.value(metadata i32 %x.inc3, metadata !25, metadata !DIExpression()), !dbg !45
NextInst[1]   %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
NextInst[2]   call void @llvm.dbg.value(metadata i1 %chk3.a, metadata !26, metadata !DIExpression()), !dbg !46
Inst[end]:   call void @llvm.dbg.value(metadata i1 %chk3.a, metadata !26, metadata !DIExpression()), !dbg !46
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
chris-RemoveOne: return I  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
run: WorkList:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
chris-run: I=  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
chris-run: I-end=  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
IC: Visiting:   %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
test1: I=  %x.inc3 = add nuw nsw i32 %x, 3, !dbg !45
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
chris-RemoveOne: return I  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
run: WorkList:   %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
chris-run: I=  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
chris-run: I-end=  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
IC: Visiting:   %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
test1: I=  %chk3.a = icmp ult i32 %x.inc3, %length_a, !dbg !46
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
chris-RemoveOne: return I  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
run: WorkList:   %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
chris-run: I=  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
chris-run: I-end=  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
IC: Visiting:   %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
test1: I=  %chk3.b = icmp ult i32 %x.inc3, %length_b, !dbg !47
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
chris-RemoveOne: return I  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
run: WorkList:   %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
chris-run: I=  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
chris-run: I-end=  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
IC: Visiting:   %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
test1: I=  %chk3 = and i1 %chk3.a, %chk3.b, !dbg !48
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ], !dbg !49
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void, !dbg !50
 ok, break
Inst[end]:   ret void, !dbg !50
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void, !dbg !50
chris-RemoveOne: return I  ret void, !dbg !50
run: WorkList:   ret void, !dbg !50
chris-run: I=  ret void, !dbg !50
chris-run: I-end=  ret void, !dbg !50
IC: Visiting:   ret void, !dbg !50
test1: I=  ret void, !dbg !50
visit: nullptr 
test3
test4
CheckFunctionDebugify [Combine redundant instructions]: PASS
CheckFunctionDebugify [Warn about non-applied transformations]: PASS
CheckFunctionDebugify [Alignment from assumptions]: PASS
CheckModuleDebugify [Strip Unused Function Prototypes]: PASS
CheckFunctionDebugify [Remove redundant instructions]: PASS
CheckFunctionDebugify [Hoist/decompose integer division and remainder]: PASS
CheckFunctionDebugify [Simplify the CFG]: PASS
CheckFunctionDebugify [Module Verifier]: PASS
CheckFunctionDebugify [Remove redundant instructions]: PASS
CheckFunctionDebugify [Hoist/decompose integer division and remainder]: PASS
CheckFunctionDebugify [Simplify the CFG]: PASS
CheckFunctionDebugify [Module Verifier]: PASS
CheckFunctionDebugify [Remove redundant instructions]: PASS
CheckFunctionDebugify [Hoist/decompose integer division and remainder]: PASS
CheckFunctionDebugify [Simplify the CFG]: PASS
CheckFunctionDebugify [Module Verifier]: PASS
CheckFunctionDebugify [Remove redundant instructions]: PASS
CheckFunctionDebugify [Hoist/decompose integer division and remainder]: PASS
CheckFunctionDebugify [Simplify the CFG]: PASS
CheckFunctionDebugify [Module Verifier]: PASS
CheckFunctionDebugify [Remove redundant instructions]: PASS
CheckFunctionDebugify [Hoist/decompose integer division and remainder]: PASS
CheckFunctionDebugify [Simplify the CFG]: PASS
CheckFunctionDebugify [Module Verifier]: PASS
CheckFunctionDebugify [Remove redundant instructions]: PASS
CheckFunctionDebugify [Hoist/decompose integer division and remainder]: PASS
CheckFunctionDebugify [Simplify the CFG]: PASS
CheckFunctionDebugify [Module Verifier]: PASS
CheckFunctionDebugify [Remove redundant instructions]: PASS
CheckFunctionDebugify [Hoist/decompose integer division and remainder]: PASS
CheckFunctionDebugify [Simplify the CFG]: PASS
CheckFunctionDebugify [Module Verifier]: PASS
CheckFunctionDebugify [Remove redundant instructions]: PASS
CheckFunctionDebugify [Hoist/decompose integer division and remainder]: PASS
CheckFunctionDebugify [Simplify the CFG]: PASS
CheckFunctionDebugify [Module Verifier]: PASS
