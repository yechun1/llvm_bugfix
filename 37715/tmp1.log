chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, !range !0
runOnFunction: I:  %chk0 = icmp ult i32 %x, %length
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
runOnFunction: I:  %x.inc1 = add i32 %x, 1
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
runOnFunction: I:  %x.inc2 = add i32 %x, 2
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
runOnFunction: I:  %x.inc3 = add i32 %x, 3
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
runOnFunction: I:  ret void
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, !range !0
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ult i32 %x, %length
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add i32 %x, 1
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add i32 %x, 2
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add i32 %x, 3
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  ret void


INSTCOMBINE ITERATION #1 on f_0
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, !range !0
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ult i32 %x, %length
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add i32 %x, 1
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add i32 %x, 2
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add i32 %x, 3
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  ret void
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, !range !0
  %chk0 = icmp ult i32 %x, %length
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
  %x.inc1 = add i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
  %x.inc2 = add i32 %x, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
  %x.inc3 = add i32 %x, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
  ret void

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, !range !0
  %chk0 = icmp ult i32 %x, %length
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
  %x.inc1 = add i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
  %x.inc2 = add i32 %x, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
  %x.inc3 = add i32 %x, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
  ret void

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, !range !0
chris-worklist-bb: BB end:   %chk0 = icmp ult i32 %x, %length
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc1 = add i32 %x, 1
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc2 = add i32 %x, 2
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc3 = add i32 %x, 3
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
chris-worklist-bb: BB end:   ret void
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length
chris-AddInitialGroup: I:   %x.inc3 = add i32 %x, 3
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length
chris-AddInitialGroup: I:   %x.inc2 = add i32 %x, 2
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length
chris-AddInitialGroup: I:   %x.inc1 = add i32 %x, 1
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-AddInitialGroup: I:   %chk0 = icmp ult i32 %x, %length
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, !range !0
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, !range !0
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, !range !0
run: WorkList:   %length = load i32, i32* %length_buf, !range !0
chris-run: I=  %length = load i32, i32* %length_buf, !range !0
chris-run: I-end=  %length = load i32, i32* %length_buf, !range !0
IC: Visiting:   %length = load i32, i32* %length_buf, !range !0
test1: I=  %length = load i32, i32* %length_buf, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ult i32 %x, %length
chris-RemoveOne: return I  %chk0 = icmp ult i32 %x, %length
run: WorkList:   %chk0 = icmp ult i32 %x, %length
chris-run: I=  %chk0 = icmp ult i32 %x, %length
chris-run: I-end=  %chk0 = icmp ult i32 %x, %length
IC: Visiting:   %chk0 = icmp ult i32 %x, %length
test1: I=  %chk0 = icmp ult i32 %x, %length
visit: has:   %chk0 = icmp ugt i32 %length, %x
test2
after visiting: Result =   %chk0 = icmp ugt i32 %length, %x
after visiting: I =   %chk0 = icmp ugt i32 %length, %x
IC: Mod =   %chk0 = icmp ult i32 %x, %length
    New =   %chk0 = icmp ugt i32 %length, %x
chris-Worklist.AddUsersToWorkList 2:   %chk0 = icmp ugt i32 %length, %x
chris-add2:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris add f
IC: ADD:   %chk0 = icmp ugt i32 %length, %x
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x
run: WorkList:   %chk0 = icmp ugt i32 %length, %x
chris-run: I=  %chk0 = icmp ugt i32 %length, %x
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x
test1: I=  %chk0 = icmp ugt i32 %length, %x
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = add i32 %x, 1
NextInst[0]   %chk1 = icmp ult i32 %x.inc1, %length
NextInst[1]   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
 ok, break
Inst[end]:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
MoveI:   %x.inc1 = add i32 %x, 1
chris add g: I:  %0 = and i1 %chk0, %chk1
IC: ADD:   %0 = and i1 %chk0, %chk1
IC: ERASE   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %0 = and i1 %chk0, %chk1
chris-RemoveOne: return I  %0 = and i1 %chk0, %chk1
run: WorkList:   %0 = and i1 %chk0, %chk1
chris-run: I=  %0 = and i1 %chk0, %chk1
chris-run: I-end=  %0 = and i1 %chk0, %chk1
IC: Visiting:   %0 = and i1 %chk0, %chk1
test1: I=  %0 = and i1 %chk0, %chk1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add i32 %x, 1
chris-RemoveOne: return I  %x.inc1 = add i32 %x, 1
run: WorkList:   %x.inc1 = add i32 %x, 1
chris-run: I=  %x.inc1 = add i32 %x, 1
chris-run: I-end=  %x.inc1 = add i32 %x, 1
IC: Visiting:   %x.inc1 = add i32 %x, 1
test1: I=  %x.inc1 = add i32 %x, 1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length
visit: nullptr 
test3
RemoveOne!!!
run: WorkList: null
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add i32 %x, 2
chris-RemoveOne: return I  %x.inc2 = add i32 %x, 2
run: WorkList:   %x.inc2 = add i32 %x, 2
chris-run: I=  %x.inc2 = add i32 %x, 2
chris-run: I-end=  %x.inc2 = add i32 %x, 2
IC: Visiting:   %x.inc2 = add i32 %x, 2
test1: I=  %x.inc2 = add i32 %x, 2
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add i32 %x, 3
NextInst[0]   %chk3 = icmp ult i32 %x.inc3, %length
NextInst[1]   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
 ok, break
Inst[end]:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
MoveI:   %x.inc3 = add i32 %x, 3
chris add g: I:  %1 = and i1 %chk2, %chk3
IC: ADD:   %1 = and i1 %chk2, %chk3
IC: ERASE   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %1 = and i1 %chk2, %chk3
chris-RemoveOne: return I  %1 = and i1 %chk2, %chk3
run: WorkList:   %1 = and i1 %chk2, %chk3
chris-run: I=  %1 = and i1 %chk2, %chk3
chris-run: I-end=  %1 = and i1 %chk2, %chk3
IC: Visiting:   %1 = and i1 %chk2, %chk3
test1: I=  %1 = and i1 %chk2, %chk3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add i32 %x, 3
chris-RemoveOne: return I  %x.inc3 = add i32 %x, 3
run: WorkList:   %x.inc3 = add i32 %x, 3
chris-run: I=  %x.inc3 = add i32 %x, 3
chris-run: I-end=  %x.inc3 = add i32 %x, 3
IC: Visiting:   %x.inc3 = add i32 %x, 3
test1: I=  %x.inc3 = add i32 %x, 3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length
visit: nullptr 
test3
RemoveOne!!!
run: WorkList: null
RemoveOne!!!
chris-RemoveOne:   ret void
chris-RemoveOne: return I  ret void
run: WorkList:   ret void
chris-run: I=  ret void
chris-run: I-end=  ret void
IC: Visiting:   ret void
test1: I=  ret void
visit: nullptr 
test3
test4


INSTCOMBINE ITERATION #2 on f_0
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add i32 %x, 1
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(end):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add i32 %x, 2
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add i32 %x, 3
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(end):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  ret void
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add i32 %x, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add i32 %x, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add i32 %x, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add i32 %x, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x
chris-worklist-bb: BB end:   %x.inc1 = add i32 %x, 1
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length
chris-worklist-bb: BB end:   %0 = and i1 %chk0, %chk1
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc2 = add i32 %x, 2
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length
chris-worklist-bb: BB end:   %x.inc3 = add i32 %x, 3
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length
chris-worklist-bb: BB end:   %1 = and i1 %chk2, %chk3
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-worklist-bb: BB end:   ret void
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-AddInitialGroup: I:   %1 = and i1 %chk2, %chk3
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length
chris-AddInitialGroup: I:   %x.inc3 = add i32 %x, 3
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length
chris-AddInitialGroup: I:   %x.inc2 = add i32 %x, 2
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-AddInitialGroup: I:   %0 = and i1 %chk0, %chk1
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length
chris-AddInitialGroup: I:   %x.inc1 = add i32 %x, 1
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !range !0
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !range !0
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !range !0
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !range !0
test1: I=  %length = load i32, i32* %length_buf, align 4, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x
run: WorkList:   %chk0 = icmp ugt i32 %length, %x
chris-run: I=  %chk0 = icmp ugt i32 %length, %x
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x
test1: I=  %chk0 = icmp ugt i32 %length, %x
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add i32 %x, 1
chris-RemoveOne: return I  %x.inc1 = add i32 %x, 1
run: WorkList:   %x.inc1 = add i32 %x, 1
chris-run: I=  %x.inc1 = add i32 %x, 1
chris-run: I-end=  %x.inc1 = add i32 %x, 1
IC: Visiting:   %x.inc1 = add i32 %x, 1
test1: I=  %x.inc1 = add i32 %x, 1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %0 = and i1 %chk0, %chk1
chris-RemoveOne: return I  %0 = and i1 %chk0, %chk1
run: WorkList:   %0 = and i1 %chk0, %chk1
chris-run: I=  %0 = and i1 %chk0, %chk1
chris-run: I-end=  %0 = and i1 %chk0, %chk1
IC: Visiting:   %0 = and i1 %chk0, %chk1
test1: I=  %0 = and i1 %chk0, %chk1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add i32 %x, 2
NextInst[0]   %chk2 = icmp ult i32 %x.inc2, %length
NextInst[1]   %x.inc3 = add i32 %x, 3
NextInst[2]   %chk3 = icmp ult i32 %x.inc3, %length
Inst[end]:   %chk3 = icmp ult i32 %x.inc3, %length
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add i32 %x, 2
chris-RemoveOne: return I  %x.inc2 = add i32 %x, 2
run: WorkList:   %x.inc2 = add i32 %x, 2
chris-run: I=  %x.inc2 = add i32 %x, 2
chris-run: I-end=  %x.inc2 = add i32 %x, 2
IC: Visiting:   %x.inc2 = add i32 %x, 2
test1: I=  %x.inc2 = add i32 %x, 2
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add i32 %x, 3
chris-RemoveOne: return I  %x.inc3 = add i32 %x, 3
run: WorkList:   %x.inc3 = add i32 %x, 3
chris-run: I=  %x.inc3 = add i32 %x, 3
chris-run: I-end=  %x.inc3 = add i32 %x, 3
IC: Visiting:   %x.inc3 = add i32 %x, 3
test1: I=  %x.inc3 = add i32 %x, 3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %1 = and i1 %chk2, %chk3
chris-RemoveOne: return I  %1 = and i1 %chk2, %chk3
run: WorkList:   %1 = and i1 %chk2, %chk3
chris-run: I=  %1 = and i1 %chk2, %chk3
chris-run: I-end=  %1 = and i1 %chk2, %chk3
IC: Visiting:   %1 = and i1 %chk2, %chk3
test1: I=  %1 = and i1 %chk2, %chk3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void
 ok, break
Inst[end]:   ret void
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void
chris-RemoveOne: return I  ret void
run: WorkList:   ret void
chris-run: I=  ret void
chris-run: I-end=  ret void
IC: Visiting:   ret void
test1: I=  ret void
visit: nullptr 
test3
test4
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, !range !0
runOnFunction: I:  %chk0 = icmp ult i32 %x, %length
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
runOnFunction: I:  %x.inc1 = add i32 %x, 1
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
runOnFunction: I:  %x.inc2 = add i32 %x.inc1, 2
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
runOnFunction: I:  %x.inc3 = add i32 %x.inc2, 3
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
runOnFunction: I:  ret void
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, !range !0
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ult i32 %x, %length
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add i32 %x, 1
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add i32 %x.inc1, 2
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add i32 %x.inc2, 3
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  ret void


INSTCOMBINE ITERATION #1 on f_1
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, !range !0
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ult i32 %x, %length
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add i32 %x, 1
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add i32 %x.inc1, 2
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add i32 %x.inc2, 3
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  ret void
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, !range !0
  %chk0 = icmp ult i32 %x, %length
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
  %x.inc1 = add i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
  %x.inc2 = add i32 %x.inc1, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
  %x.inc3 = add i32 %x.inc2, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
  ret void

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, !range !0
  %chk0 = icmp ult i32 %x, %length
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
  %x.inc1 = add i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
  %x.inc2 = add i32 %x.inc1, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
  %x.inc3 = add i32 %x.inc2, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
  ret void

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, !range !0
chris-worklist-bb: BB end:   %chk0 = icmp ult i32 %x, %length
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc1 = add i32 %x, 1
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc2 = add i32 %x.inc1, 2
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc3 = add i32 %x.inc2, 3
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
chris-worklist-bb: BB end:   ret void
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length
chris-AddInitialGroup: I:   %x.inc3 = add i32 %x.inc2, 3
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length
chris-AddInitialGroup: I:   %x.inc2 = add i32 %x.inc1, 2
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length
chris-AddInitialGroup: I:   %x.inc1 = add i32 %x, 1
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-AddInitialGroup: I:   %chk0 = icmp ult i32 %x, %length
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, !range !0
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, !range !0
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, !range !0
run: WorkList:   %length = load i32, i32* %length_buf, !range !0
chris-run: I=  %length = load i32, i32* %length_buf, !range !0
chris-run: I-end=  %length = load i32, i32* %length_buf, !range !0
IC: Visiting:   %length = load i32, i32* %length_buf, !range !0
test1: I=  %length = load i32, i32* %length_buf, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ult i32 %x, %length
chris-RemoveOne: return I  %chk0 = icmp ult i32 %x, %length
run: WorkList:   %chk0 = icmp ult i32 %x, %length
chris-run: I=  %chk0 = icmp ult i32 %x, %length
chris-run: I-end=  %chk0 = icmp ult i32 %x, %length
IC: Visiting:   %chk0 = icmp ult i32 %x, %length
test1: I=  %chk0 = icmp ult i32 %x, %length
visit: has:   %chk0 = icmp ugt i32 %length, %x
test2
after visiting: Result =   %chk0 = icmp ugt i32 %length, %x
after visiting: I =   %chk0 = icmp ugt i32 %length, %x
IC: Mod =   %chk0 = icmp ult i32 %x, %length
    New =   %chk0 = icmp ugt i32 %length, %x
chris-Worklist.AddUsersToWorkList 2:   %chk0 = icmp ugt i32 %length, %x
chris-add2:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris add f
IC: ADD:   %chk0 = icmp ugt i32 %length, %x
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x
run: WorkList:   %chk0 = icmp ugt i32 %length, %x
chris-run: I=  %chk0 = icmp ugt i32 %length, %x
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x
test1: I=  %chk0 = icmp ugt i32 %length, %x
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = add i32 %x, 1
NextInst[0]   %chk1 = icmp ult i32 %x.inc1, %length
NextInst[1]   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
 ok, break
Inst[end]:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
MoveI:   %x.inc1 = add i32 %x, 1
chris add g: I:  %0 = and i1 %chk0, %chk1
IC: ADD:   %0 = and i1 %chk0, %chk1
IC: ERASE   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %0 = and i1 %chk0, %chk1
chris-RemoveOne: return I  %0 = and i1 %chk0, %chk1
run: WorkList:   %0 = and i1 %chk0, %chk1
chris-run: I=  %0 = and i1 %chk0, %chk1
chris-run: I-end=  %0 = and i1 %chk0, %chk1
IC: Visiting:   %0 = and i1 %chk0, %chk1
test1: I=  %0 = and i1 %chk0, %chk1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add i32 %x, 1
chris-RemoveOne: return I  %x.inc1 = add i32 %x, 1
run: WorkList:   %x.inc1 = add i32 %x, 1
chris-run: I=  %x.inc1 = add i32 %x, 1
chris-run: I-end=  %x.inc1 = add i32 %x, 1
IC: Visiting:   %x.inc1 = add i32 %x, 1
test1: I=  %x.inc1 = add i32 %x, 1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length
visit: nullptr 
test3
RemoveOne!!!
run: WorkList: null
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add i32 %x.inc1, 2
chris-RemoveOne: return I  %x.inc2 = add i32 %x.inc1, 2
run: WorkList:   %x.inc2 = add i32 %x.inc1, 2
chris-run: I=  %x.inc2 = add i32 %x.inc1, 2
chris-run: I-end=  %x.inc2 = add i32 %x.inc1, 2
IC: Visiting:   %x.inc2 = add i32 %x.inc1, 2
test1: I=  %x.inc2 = add i32 %x.inc1, 2
visit: has:   %x.inc2 = add i32 %x, 3
test2
after visiting: Result =   %x.inc2 = add i32 %x, 3
after visiting: I =   %x.inc2 = add i32 %x, 3
IC: Mod =   %x.inc2 = add i32 %x.inc1, 2
    New =   %x.inc2 = add i32 %x, 3
chris-Worklist.AddUsersToWorkList 2:   %x.inc2 = add i32 %x, 3
chris-add2:   %x.inc3 = add i32 %x.inc2, 3
chris-add2:   %chk2 = icmp ult i32 %x.inc2, %length
chris add f
IC: ADD:   %x.inc2 = add i32 %x, 3
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add i32 %x, 3
chris-RemoveOne: return I  %x.inc2 = add i32 %x, 3
run: WorkList:   %x.inc2 = add i32 %x, 3
chris-run: I=  %x.inc2 = add i32 %x, 3
chris-run: I-end=  %x.inc2 = add i32 %x, 3
IC: Visiting:   %x.inc2 = add i32 %x, 3
test1: I=  %x.inc2 = add i32 %x, 3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add i32 %x.inc2, 3
NextInst[0]   %chk3 = icmp ult i32 %x.inc3, %length
NextInst[1]   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
 ok, break
Inst[end]:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
MoveI:   %x.inc3 = add i32 %x.inc2, 3
chris add g: I:  %1 = and i1 %chk2, %chk3
IC: ADD:   %1 = and i1 %chk2, %chk3
IC: ERASE   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %1 = and i1 %chk2, %chk3
chris-RemoveOne: return I  %1 = and i1 %chk2, %chk3
run: WorkList:   %1 = and i1 %chk2, %chk3
chris-run: I=  %1 = and i1 %chk2, %chk3
chris-run: I-end=  %1 = and i1 %chk2, %chk3
IC: Visiting:   %1 = and i1 %chk2, %chk3
test1: I=  %1 = and i1 %chk2, %chk3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add i32 %x.inc2, 3
chris-RemoveOne: return I  %x.inc3 = add i32 %x.inc2, 3
run: WorkList:   %x.inc3 = add i32 %x.inc2, 3
chris-run: I=  %x.inc3 = add i32 %x.inc2, 3
chris-run: I-end=  %x.inc3 = add i32 %x.inc2, 3
IC: Visiting:   %x.inc3 = add i32 %x.inc2, 3
test1: I=  %x.inc3 = add i32 %x.inc2, 3
visit: has:   %x.inc3 = add i32 %x, 6
test2
after visiting: Result =   %x.inc3 = add i32 %x, 6
after visiting: I =   %x.inc3 = add i32 %x, 6
IC: Mod =   %x.inc3 = add i32 %x.inc2, 3
    New =   %x.inc3 = add i32 %x, 6
chris-Worklist.AddUsersToWorkList 2:   %x.inc3 = add i32 %x, 6
chris-add2:   %chk3 = icmp ult i32 %x.inc3, %length
chris add f
IC: ADD:   %x.inc3 = add i32 %x, 6
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add i32 %x, 6
chris-RemoveOne: return I  %x.inc3 = add i32 %x, 6
run: WorkList:   %x.inc3 = add i32 %x, 6
chris-run: I=  %x.inc3 = add i32 %x, 6
chris-run: I-end=  %x.inc3 = add i32 %x, 6
IC: Visiting:   %x.inc3 = add i32 %x, 6
test1: I=  %x.inc3 = add i32 %x, 6
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length
visit: nullptr 
test3
RemoveOne!!!
run: WorkList: null
RemoveOne!!!
chris-RemoveOne:   ret void
chris-RemoveOne: return I  ret void
run: WorkList:   ret void
chris-run: I=  ret void
chris-run: I-end=  ret void
IC: Visiting:   ret void
test1: I=  ret void
visit: nullptr 
test3
test4


INSTCOMBINE ITERATION #2 on f_1
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add i32 %x, 1
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(end):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add i32 %x, 3
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add i32 %x, 6
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(end):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  ret void
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add i32 %x, 3
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add i32 %x, 6
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add i32 %x, 3
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add i32 %x, 6
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x
chris-worklist-bb: BB end:   %x.inc1 = add i32 %x, 1
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length
chris-worklist-bb: BB end:   %0 = and i1 %chk0, %chk1
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc2 = add i32 %x, 3
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length
chris-worklist-bb: BB end:   %x.inc3 = add i32 %x, 6
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length
chris-worklist-bb: BB end:   %1 = and i1 %chk2, %chk3
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-worklist-bb: BB end:   ret void
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-AddInitialGroup: I:   %1 = and i1 %chk2, %chk3
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length
chris-AddInitialGroup: I:   %x.inc3 = add i32 %x, 6
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length
chris-AddInitialGroup: I:   %x.inc2 = add i32 %x, 3
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-AddInitialGroup: I:   %0 = and i1 %chk0, %chk1
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length
chris-AddInitialGroup: I:   %x.inc1 = add i32 %x, 1
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !range !0
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !range !0
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !range !0
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !range !0
test1: I=  %length = load i32, i32* %length_buf, align 4, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x
run: WorkList:   %chk0 = icmp ugt i32 %length, %x
chris-run: I=  %chk0 = icmp ugt i32 %length, %x
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x
test1: I=  %chk0 = icmp ugt i32 %length, %x
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add i32 %x, 1
chris-RemoveOne: return I  %x.inc1 = add i32 %x, 1
run: WorkList:   %x.inc1 = add i32 %x, 1
chris-run: I=  %x.inc1 = add i32 %x, 1
chris-run: I-end=  %x.inc1 = add i32 %x, 1
IC: Visiting:   %x.inc1 = add i32 %x, 1
test1: I=  %x.inc1 = add i32 %x, 1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %0 = and i1 %chk0, %chk1
chris-RemoveOne: return I  %0 = and i1 %chk0, %chk1
run: WorkList:   %0 = and i1 %chk0, %chk1
chris-run: I=  %0 = and i1 %chk0, %chk1
chris-run: I-end=  %0 = and i1 %chk0, %chk1
IC: Visiting:   %0 = and i1 %chk0, %chk1
test1: I=  %0 = and i1 %chk0, %chk1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add i32 %x, 3
NextInst[0]   %chk2 = icmp ult i32 %x.inc2, %length
NextInst[1]   %x.inc3 = add i32 %x, 6
NextInst[2]   %chk3 = icmp ult i32 %x.inc3, %length
Inst[end]:   %chk3 = icmp ult i32 %x.inc3, %length
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add i32 %x, 3
chris-RemoveOne: return I  %x.inc2 = add i32 %x, 3
run: WorkList:   %x.inc2 = add i32 %x, 3
chris-run: I=  %x.inc2 = add i32 %x, 3
chris-run: I-end=  %x.inc2 = add i32 %x, 3
IC: Visiting:   %x.inc2 = add i32 %x, 3
test1: I=  %x.inc2 = add i32 %x, 3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add i32 %x, 6
chris-RemoveOne: return I  %x.inc3 = add i32 %x, 6
run: WorkList:   %x.inc3 = add i32 %x, 6
chris-run: I=  %x.inc3 = add i32 %x, 6
chris-run: I-end=  %x.inc3 = add i32 %x, 6
IC: Visiting:   %x.inc3 = add i32 %x, 6
test1: I=  %x.inc3 = add i32 %x, 6
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %1 = and i1 %chk2, %chk3
chris-RemoveOne: return I  %1 = and i1 %chk2, %chk3
run: WorkList:   %1 = and i1 %chk2, %chk3
chris-run: I=  %1 = and i1 %chk2, %chk3
chris-run: I-end=  %1 = and i1 %chk2, %chk3
IC: Visiting:   %1 = and i1 %chk2, %chk3
test1: I=  %1 = and i1 %chk2, %chk3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void
 ok, break
Inst[end]:   ret void
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void
chris-RemoveOne: return I  ret void
run: WorkList:   ret void
chris-run: I=  ret void
chris-run: I-end=  ret void
IC: Visiting:   ret void
test1: I=  ret void
visit: nullptr 
test3
test4
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %x = and i32 %a, -256
runOnFunction: I:  %length = load i32, i32* %length_buf, !range !0
runOnFunction: I:  %chk0 = icmp ult i32 %x, %length
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
runOnFunction: I:  %x.inc1 = or i32 %x, 1
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
runOnFunction: I:  %x.inc2 = or i32 %x, 2
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
runOnFunction: I:  %x.inc3 = or i32 %x, 3
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
runOnFunction: I:  ret void
INSTCOMBINE ITERATION: Inst(start):  %x = and i32 %a, -256
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, !range !0
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ult i32 %x, %length
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = or i32 %x, 1
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = or i32 %x, 2
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = or i32 %x, 3
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  ret void


INSTCOMBINE ITERATION #1 on f_2
INSTCOMBINE ITERATION: Inst(end):  %x = and i32 %a, -256
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, !range !0
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ult i32 %x, %length
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = or i32 %x, 1
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = or i32 %x, 2
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = or i32 %x, 3
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  ret void
chris-worklist-bb: bb: 
entry:
  %x = and i32 %a, -256
  %length = load i32, i32* %length_buf, !range !0
  %chk0 = icmp ult i32 %x, %length
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
  %x.inc1 = or i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
  %x.inc2 = or i32 %x, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
  %x.inc3 = or i32 %x, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
  ret void

chris-worklist-bb: BB: 
entry:
  %x = and i32 %a, -256
  %length = load i32, i32* %length_buf, !range !0
  %chk0 = icmp ult i32 %x, %length
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
  %x.inc1 = or i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
  %x.inc2 = or i32 %x, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
  %x.inc3 = or i32 %x, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
  ret void

chris-worklist-bb: BB end:   %x = and i32 %a, -256
chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, !range !0
chris-worklist-bb: BB end:   %chk0 = icmp ult i32 %x, %length
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc1 = or i32 %x, 1
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc2 = or i32 %x, 2
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc3 = or i32 %x, 3
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
chris-worklist-bb: BB end:   ret void
IC: ADDING: 14 instrs to worklist
chris-AddInitialGroup: I:   ret void
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length
chris-AddInitialGroup: I:   %x.inc3 = or i32 %x, 3
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length
chris-AddInitialGroup: I:   %x.inc2 = or i32 %x, 2
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length
chris-AddInitialGroup: I:   %x.inc1 = or i32 %x, 1
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-AddInitialGroup: I:   %chk0 = icmp ult i32 %x, %length
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, !range !0
chris-AddInitialGroup: I:   %x = and i32 %a, -256
RemoveOne!!!
chris-RemoveOne:   %x = and i32 %a, -256
chris-RemoveOne: return I  %x = and i32 %a, -256
run: WorkList:   %x = and i32 %a, -256
chris-run: I=  %x = and i32 %a, -256
chris-run: I-end=  %x = and i32 %a, -256
IC: Visiting:   %x = and i32 %a, -256
test1: I=  %x = and i32 %a, -256
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, !range !0
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, !range !0
run: WorkList:   %length = load i32, i32* %length_buf, !range !0
chris-run: I=  %length = load i32, i32* %length_buf, !range !0
chris-run: I-end=  %length = load i32, i32* %length_buf, !range !0
IC: Visiting:   %length = load i32, i32* %length_buf, !range !0
test1: I=  %length = load i32, i32* %length_buf, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ult i32 %x, %length
chris-RemoveOne: return I  %chk0 = icmp ult i32 %x, %length
run: WorkList:   %chk0 = icmp ult i32 %x, %length
chris-run: I=  %chk0 = icmp ult i32 %x, %length
chris-run: I-end=  %chk0 = icmp ult i32 %x, %length
IC: Visiting:   %chk0 = icmp ult i32 %x, %length
test1: I=  %chk0 = icmp ult i32 %x, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = or i32 %x, 1
NextInst[0]   %chk1 = icmp ult i32 %x.inc1, %length
NextInst[1]   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
 ok, break
Inst[end]:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
MoveI:   %x.inc1 = or i32 %x, 1
chris add g: I:  %0 = and i1 %chk0, %chk1
IC: ADD:   %0 = and i1 %chk0, %chk1
IC: ERASE   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %0 = and i1 %chk0, %chk1
chris-RemoveOne: return I  %0 = and i1 %chk0, %chk1
run: WorkList:   %0 = and i1 %chk0, %chk1
chris-run: I=  %0 = and i1 %chk0, %chk1
chris-run: I-end=  %0 = and i1 %chk0, %chk1
IC: Visiting:   %0 = and i1 %chk0, %chk1
test1: I=  %0 = and i1 %chk0, %chk1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = or i32 %x, 1
chris-RemoveOne: return I  %x.inc1 = or i32 %x, 1
run: WorkList:   %x.inc1 = or i32 %x, 1
chris-run: I=  %x.inc1 = or i32 %x, 1
chris-run: I-end=  %x.inc1 = or i32 %x, 1
IC: Visiting:   %x.inc1 = or i32 %x, 1
test1: I=  %x.inc1 = or i32 %x, 1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length
visit: nullptr 
test3
RemoveOne!!!
run: WorkList: null
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = or i32 %x, 2
chris-RemoveOne: return I  %x.inc2 = or i32 %x, 2
run: WorkList:   %x.inc2 = or i32 %x, 2
chris-run: I=  %x.inc2 = or i32 %x, 2
chris-run: I-end=  %x.inc2 = or i32 %x, 2
IC: Visiting:   %x.inc2 = or i32 %x, 2
test1: I=  %x.inc2 = or i32 %x, 2
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = or i32 %x, 3
NextInst[0]   %chk3 = icmp ult i32 %x.inc3, %length
NextInst[1]   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
 ok, break
Inst[end]:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
MoveI:   %x.inc3 = or i32 %x, 3
chris add g: I:  %1 = and i1 %chk2, %chk3
IC: ADD:   %1 = and i1 %chk2, %chk3
IC: ERASE   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %1 = and i1 %chk2, %chk3
chris-RemoveOne: return I  %1 = and i1 %chk2, %chk3
run: WorkList:   %1 = and i1 %chk2, %chk3
chris-run: I=  %1 = and i1 %chk2, %chk3
chris-run: I-end=  %1 = and i1 %chk2, %chk3
IC: Visiting:   %1 = and i1 %chk2, %chk3
test1: I=  %1 = and i1 %chk2, %chk3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = or i32 %x, 3
chris-RemoveOne: return I  %x.inc3 = or i32 %x, 3
run: WorkList:   %x.inc3 = or i32 %x, 3
chris-run: I=  %x.inc3 = or i32 %x, 3
chris-run: I-end=  %x.inc3 = or i32 %x, 3
IC: Visiting:   %x.inc3 = or i32 %x, 3
test1: I=  %x.inc3 = or i32 %x, 3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length
visit: nullptr 
test3
RemoveOne!!!
run: WorkList: null
RemoveOne!!!
chris-RemoveOne:   ret void
chris-RemoveOne: return I  ret void
run: WorkList:   ret void
chris-run: I=  ret void
chris-run: I-end=  ret void
IC: Visiting:   ret void
test1: I=  ret void
visit: nullptr 
test3
test4


INSTCOMBINE ITERATION #2 on f_2
INSTCOMBINE ITERATION: Inst(end):  %x = and i32 %a, -256
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ult i32 %x, %length
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = or i32 %x, 1
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(end):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = or i32 %x, 2
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = or i32 %x, 3
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(end):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  ret void
chris-worklist-bb: bb: 
entry:
  %x = and i32 %a, -256
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ult i32 %x, %length
  %x.inc1 = or i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = or i32 %x, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = or i32 %x, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB: 
entry:
  %x = and i32 %a, -256
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ult i32 %x, %length
  %x.inc1 = or i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = or i32 %x, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = or i32 %x, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB end:   %x = and i32 %a, -256
chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-worklist-bb: BB end:   %chk0 = icmp ult i32 %x, %length
chris-worklist-bb: BB end:   %x.inc1 = or i32 %x, 1
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length
chris-worklist-bb: BB end:   %0 = and i1 %chk0, %chk1
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc2 = or i32 %x, 2
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length
chris-worklist-bb: BB end:   %x.inc3 = or i32 %x, 3
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length
chris-worklist-bb: BB end:   %1 = and i1 %chk2, %chk3
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-worklist-bb: BB end:   ret void
IC: ADDING: 14 instrs to worklist
chris-AddInitialGroup: I:   ret void
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-AddInitialGroup: I:   %1 = and i1 %chk2, %chk3
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length
chris-AddInitialGroup: I:   %x.inc3 = or i32 %x, 3
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length
chris-AddInitialGroup: I:   %x.inc2 = or i32 %x, 2
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-AddInitialGroup: I:   %0 = and i1 %chk0, %chk1
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length
chris-AddInitialGroup: I:   %x.inc1 = or i32 %x, 1
chris-AddInitialGroup: I:   %chk0 = icmp ult i32 %x, %length
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-AddInitialGroup: I:   %x = and i32 %a, -256
RemoveOne!!!
chris-RemoveOne:   %x = and i32 %a, -256
chris-RemoveOne: return I  %x = and i32 %a, -256
run: WorkList:   %x = and i32 %a, -256
chris-run: I=  %x = and i32 %a, -256
chris-run: I-end=  %x = and i32 %a, -256
IC: Visiting:   %x = and i32 %a, -256
test1: I=  %x = and i32 %a, -256
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !range !0
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !range !0
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !range !0
test1: I=  %length = load i32, i32* %length_buf, align 4, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ult i32 %x, %length
chris-RemoveOne: return I  %chk0 = icmp ult i32 %x, %length
run: WorkList:   %chk0 = icmp ult i32 %x, %length
chris-run: I=  %chk0 = icmp ult i32 %x, %length
chris-run: I-end=  %chk0 = icmp ult i32 %x, %length
IC: Visiting:   %chk0 = icmp ult i32 %x, %length
test1: I=  %chk0 = icmp ult i32 %x, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = or i32 %x, 1
chris-RemoveOne: return I  %x.inc1 = or i32 %x, 1
run: WorkList:   %x.inc1 = or i32 %x, 1
chris-run: I=  %x.inc1 = or i32 %x, 1
chris-run: I-end=  %x.inc1 = or i32 %x, 1
IC: Visiting:   %x.inc1 = or i32 %x, 1
test1: I=  %x.inc1 = or i32 %x, 1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %0 = and i1 %chk0, %chk1
chris-RemoveOne: return I  %0 = and i1 %chk0, %chk1
run: WorkList:   %0 = and i1 %chk0, %chk1
chris-run: I=  %0 = and i1 %chk0, %chk1
chris-run: I-end=  %0 = and i1 %chk0, %chk1
IC: Visiting:   %0 = and i1 %chk0, %chk1
test1: I=  %0 = and i1 %chk0, %chk1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = or i32 %x, 2
NextInst[0]   %chk2 = icmp ult i32 %x.inc2, %length
NextInst[1]   %x.inc3 = or i32 %x, 3
NextInst[2]   %chk3 = icmp ult i32 %x.inc3, %length
Inst[end]:   %chk3 = icmp ult i32 %x.inc3, %length
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = or i32 %x, 2
chris-RemoveOne: return I  %x.inc2 = or i32 %x, 2
run: WorkList:   %x.inc2 = or i32 %x, 2
chris-run: I=  %x.inc2 = or i32 %x, 2
chris-run: I-end=  %x.inc2 = or i32 %x, 2
IC: Visiting:   %x.inc2 = or i32 %x, 2
test1: I=  %x.inc2 = or i32 %x, 2
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = or i32 %x, 3
chris-RemoveOne: return I  %x.inc3 = or i32 %x, 3
run: WorkList:   %x.inc3 = or i32 %x, 3
chris-run: I=  %x.inc3 = or i32 %x, 3
chris-run: I-end=  %x.inc3 = or i32 %x, 3
IC: Visiting:   %x.inc3 = or i32 %x, 3
test1: I=  %x.inc3 = or i32 %x, 3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %1 = and i1 %chk2, %chk3
chris-RemoveOne: return I  %1 = and i1 %chk2, %chk3
run: WorkList:   %1 = and i1 %chk2, %chk3
chris-run: I=  %1 = and i1 %chk2, %chk3
chris-run: I-end=  %1 = and i1 %chk2, %chk3
IC: Visiting:   %1 = and i1 %chk2, %chk3
test1: I=  %1 = and i1 %chk2, %chk3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void
 ok, break
Inst[end]:   ret void
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void
chris-RemoveOne: return I  ret void
run: WorkList:   ret void
chris-run: I=  ret void
chris-run: I-end=  ret void
IC: Visiting:   ret void
test1: I=  ret void
visit: nullptr 
test3
test4
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %x = and i32 %a, -256
runOnFunction: I:  %length = load i32, i32* %length_buf, !range !0
runOnFunction: I:  %chk0 = icmp ult i32 %x, %length
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
runOnFunction: I:  %x.inc1 = add i32 %x, 1
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
runOnFunction: I:  %x.inc2 = or i32 %x.inc1, 2
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
runOnFunction: I:  %x.inc3 = add i32 %x.inc2, 3
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
runOnFunction: I:  ret void
INSTCOMBINE ITERATION: Inst(start):  %x = and i32 %a, -256
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, !range !0
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ult i32 %x, %length
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add i32 %x, 1
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = or i32 %x.inc1, 2
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add i32 %x.inc2, 3
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  ret void


INSTCOMBINE ITERATION #1 on f_3
INSTCOMBINE ITERATION: Inst(end):  %x = and i32 %a, -256
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, !range !0
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ult i32 %x, %length
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add i32 %x, 1
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = or i32 %x.inc1, 2
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add i32 %x.inc2, 3
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  ret void
chris-worklist-bb: bb: 
entry:
  %x = and i32 %a, -256
  %length = load i32, i32* %length_buf, !range !0
  %chk0 = icmp ult i32 %x, %length
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
  %x.inc1 = add i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
  %x.inc2 = or i32 %x.inc1, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
  %x.inc3 = add i32 %x.inc2, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
  ret void

chris-worklist-bb: BB: 
entry:
  %x = and i32 %a, -256
  %length = load i32, i32* %length_buf, !range !0
  %chk0 = icmp ult i32 %x, %length
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
  %x.inc1 = add i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
  %x.inc2 = or i32 %x.inc1, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
  %x.inc3 = add i32 %x.inc2, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
  ret void

chris-worklist-bb: BB end:   %x = and i32 %a, -256
chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, !range !0
chris-worklist-bb: BB end:   %chk0 = icmp ult i32 %x, %length
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc1 = add i32 %x, 1
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc2 = or i32 %x.inc1, 2
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc3 = add i32 %x.inc2, 3
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
chris-worklist-bb: BB end:   ret void
IC: ADDING: 14 instrs to worklist
chris-AddInitialGroup: I:   ret void
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length
chris-AddInitialGroup: I:   %x.inc3 = add i32 %x.inc2, 3
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length
chris-AddInitialGroup: I:   %x.inc2 = or i32 %x.inc1, 2
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length
chris-AddInitialGroup: I:   %x.inc1 = add i32 %x, 1
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-AddInitialGroup: I:   %chk0 = icmp ult i32 %x, %length
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, !range !0
chris-AddInitialGroup: I:   %x = and i32 %a, -256
RemoveOne!!!
chris-RemoveOne:   %x = and i32 %a, -256
chris-RemoveOne: return I  %x = and i32 %a, -256
run: WorkList:   %x = and i32 %a, -256
chris-run: I=  %x = and i32 %a, -256
chris-run: I-end=  %x = and i32 %a, -256
IC: Visiting:   %x = and i32 %a, -256
test1: I=  %x = and i32 %a, -256
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, !range !0
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, !range !0
run: WorkList:   %length = load i32, i32* %length_buf, !range !0
chris-run: I=  %length = load i32, i32* %length_buf, !range !0
chris-run: I-end=  %length = load i32, i32* %length_buf, !range !0
IC: Visiting:   %length = load i32, i32* %length_buf, !range !0
test1: I=  %length = load i32, i32* %length_buf, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ult i32 %x, %length
chris-RemoveOne: return I  %chk0 = icmp ult i32 %x, %length
run: WorkList:   %chk0 = icmp ult i32 %x, %length
chris-run: I=  %chk0 = icmp ult i32 %x, %length
chris-run: I-end=  %chk0 = icmp ult i32 %x, %length
IC: Visiting:   %chk0 = icmp ult i32 %x, %length
test1: I=  %chk0 = icmp ult i32 %x, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = add i32 %x, 1
NextInst[0]   %chk1 = icmp ult i32 %x.inc1, %length
NextInst[1]   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
 ok, break
Inst[end]:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
MoveI:   %x.inc1 = add i32 %x, 1
chris add g: I:  %0 = and i1 %chk0, %chk1
IC: ADD:   %0 = and i1 %chk0, %chk1
IC: ERASE   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %0 = and i1 %chk0, %chk1
chris-RemoveOne: return I  %0 = and i1 %chk0, %chk1
run: WorkList:   %0 = and i1 %chk0, %chk1
chris-run: I=  %0 = and i1 %chk0, %chk1
chris-run: I-end=  %0 = and i1 %chk0, %chk1
IC: Visiting:   %0 = and i1 %chk0, %chk1
test1: I=  %0 = and i1 %chk0, %chk1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add i32 %x, 1
chris-RemoveOne: return I  %x.inc1 = add i32 %x, 1
run: WorkList:   %x.inc1 = add i32 %x, 1
chris-run: I=  %x.inc1 = add i32 %x, 1
chris-run: I-end=  %x.inc1 = add i32 %x, 1
IC: Visiting:   %x.inc1 = add i32 %x, 1
test1: I=  %x.inc1 = add i32 %x, 1
visit: has:   <badref> = or i32 %x, 1
test2
after visiting: Result =   <badref> = or i32 %x, 1
after visiting: I =   %x.inc1 = add i32 %x, 1
IC: Old =   %x.inc1 = add i32 %x, 1
    New =   <badref> = or i32 %x, 1
chris-Worklist.AddUsersToWorkList 1
chris-add2:   %chk1 = icmp ult i32 %x.inc1, %length
chris-add2:   %x.inc2 = or i32 %x.inc1, 2
chris add e
IC: ADD:   %x.inc1 = or i32 %x, 1
IC: ERASE   %0 = add i32 %x, 1
IC: ADD:   %x = and i32 %a, -256
test3
RemoveOne!!!
chris-RemoveOne:   %x = and i32 %a, -256
chris-RemoveOne: return I  %x = and i32 %a, -256
run: WorkList:   %x = and i32 %a, -256
chris-run: I=  %x = and i32 %a, -256
chris-run: I-end=  %x = and i32 %a, -256
IC: Visiting:   %x = and i32 %a, -256
test1: I=  %x = and i32 %a, -256
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = or i32 %x, 1
chris-RemoveOne: return I  %x.inc1 = or i32 %x, 1
run: WorkList:   %x.inc1 = or i32 %x, 1
chris-run: I=  %x.inc1 = or i32 %x, 1
chris-run: I-end=  %x.inc1 = or i32 %x, 1
IC: Visiting:   %x.inc1 = or i32 %x, 1
test1: I=  %x.inc1 = or i32 %x, 1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length
visit: nullptr 
test3
RemoveOne!!!
run: WorkList: null
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = or i32 %x.inc1, 2
chris-RemoveOne: return I  %x.inc2 = or i32 %x.inc1, 2
run: WorkList:   %x.inc2 = or i32 %x.inc1, 2
chris-run: I=  %x.inc2 = or i32 %x.inc1, 2
chris-run: I-end=  %x.inc2 = or i32 %x.inc1, 2
IC: Visiting:   %x.inc2 = or i32 %x.inc1, 2
test1: I=  %x.inc2 = or i32 %x.inc1, 2
visit: has:   %x.inc2 = or i32 %x, 3
test2
after visiting: Result =   %x.inc2 = or i32 %x, 3
after visiting: I =   %x.inc2 = or i32 %x, 3
IC: Mod =   %x.inc2 = or i32 %x.inc1, 2
    New =   %x.inc2 = or i32 %x, 3
chris-Worklist.AddUsersToWorkList 2:   %x.inc2 = or i32 %x, 3
chris-add2:   %x.inc3 = add i32 %x.inc2, 3
chris-add2:   %chk2 = icmp ult i32 %x.inc2, %length
chris add f
IC: ADD:   %x.inc2 = or i32 %x, 3
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = or i32 %x, 3
chris-RemoveOne: return I  %x.inc2 = or i32 %x, 3
run: WorkList:   %x.inc2 = or i32 %x, 3
chris-run: I=  %x.inc2 = or i32 %x, 3
chris-run: I-end=  %x.inc2 = or i32 %x, 3
IC: Visiting:   %x.inc2 = or i32 %x, 3
test1: I=  %x.inc2 = or i32 %x, 3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add i32 %x.inc2, 3
NextInst[0]   %chk3 = icmp ult i32 %x.inc3, %length
NextInst[1]   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
 ok, break
Inst[end]:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
MoveI:   %x.inc3 = add i32 %x.inc2, 3
chris add g: I:  %1 = and i1 %chk2, %chk3
IC: ADD:   %1 = and i1 %chk2, %chk3
IC: ERASE   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %1 = and i1 %chk2, %chk3
chris-RemoveOne: return I  %1 = and i1 %chk2, %chk3
run: WorkList:   %1 = and i1 %chk2, %chk3
chris-run: I=  %1 = and i1 %chk2, %chk3
chris-run: I-end=  %1 = and i1 %chk2, %chk3
IC: Visiting:   %1 = and i1 %chk2, %chk3
test1: I=  %1 = and i1 %chk2, %chk3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add i32 %x.inc2, 3
chris-RemoveOne: return I  %x.inc3 = add i32 %x.inc2, 3
run: WorkList:   %x.inc3 = add i32 %x.inc2, 3
chris-run: I=  %x.inc3 = add i32 %x.inc2, 3
chris-run: I-end=  %x.inc3 = add i32 %x.inc2, 3
IC: Visiting:   %x.inc3 = add i32 %x.inc2, 3
test1: I=  %x.inc3 = add i32 %x.inc2, 3
visit: has:   %x.inc3 = add nuw nsw i32 %x.inc2, 3
test2
after visiting: Result =   %x.inc3 = add nuw nsw i32 %x.inc2, 3
after visiting: I =   %x.inc3 = add nuw nsw i32 %x.inc2, 3
IC: Mod =   %x.inc3 = add i32 %x.inc2, 3
    New =   %x.inc3 = add nuw nsw i32 %x.inc2, 3
chris-Worklist.AddUsersToWorkList 2:   %x.inc3 = add nuw nsw i32 %x.inc2, 3
chris-add2:   %chk3 = icmp ult i32 %x.inc3, %length
chris add f
IC: ADD:   %x.inc3 = add nuw nsw i32 %x.inc2, 3
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw nsw i32 %x.inc2, 3
chris-RemoveOne: return I  %x.inc3 = add nuw nsw i32 %x.inc2, 3
run: WorkList:   %x.inc3 = add nuw nsw i32 %x.inc2, 3
chris-run: I=  %x.inc3 = add nuw nsw i32 %x.inc2, 3
chris-run: I-end=  %x.inc3 = add nuw nsw i32 %x.inc2, 3
IC: Visiting:   %x.inc3 = add nuw nsw i32 %x.inc2, 3
test1: I=  %x.inc3 = add nuw nsw i32 %x.inc2, 3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length
visit: nullptr 
test3
RemoveOne!!!
run: WorkList: null
RemoveOne!!!
chris-RemoveOne:   ret void
chris-RemoveOne: return I  ret void
run: WorkList:   ret void
chris-run: I=  ret void
chris-run: I-end=  ret void
IC: Visiting:   ret void
test1: I=  ret void
visit: nullptr 
test3
test4


INSTCOMBINE ITERATION #2 on f_3
INSTCOMBINE ITERATION: Inst(end):  %x = and i32 %a, -256
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ult i32 %x, %length
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = or i32 %x, 1
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(end):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = or i32 %x, 3
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw nsw i32 %x.inc2, 3
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(end):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  ret void
chris-worklist-bb: bb: 
entry:
  %x = and i32 %a, -256
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ult i32 %x, %length
  %x.inc1 = or i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = or i32 %x, 3
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add nuw nsw i32 %x.inc2, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB: 
entry:
  %x = and i32 %a, -256
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ult i32 %x, %length
  %x.inc1 = or i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = or i32 %x, 3
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add nuw nsw i32 %x.inc2, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB end:   %x = and i32 %a, -256
chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-worklist-bb: BB end:   %chk0 = icmp ult i32 %x, %length
chris-worklist-bb: BB end:   %x.inc1 = or i32 %x, 1
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length
chris-worklist-bb: BB end:   %0 = and i1 %chk0, %chk1
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc2 = or i32 %x, 3
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length
chris-worklist-bb: BB end:   %x.inc3 = add nuw nsw i32 %x.inc2, 3
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length
chris-worklist-bb: BB end:   %1 = and i1 %chk2, %chk3
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-worklist-bb: BB end:   ret void
IC: ADDING: 14 instrs to worklist
chris-AddInitialGroup: I:   ret void
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-AddInitialGroup: I:   %1 = and i1 %chk2, %chk3
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length
chris-AddInitialGroup: I:   %x.inc3 = add nuw nsw i32 %x.inc2, 3
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length
chris-AddInitialGroup: I:   %x.inc2 = or i32 %x, 3
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-AddInitialGroup: I:   %0 = and i1 %chk0, %chk1
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length
chris-AddInitialGroup: I:   %x.inc1 = or i32 %x, 1
chris-AddInitialGroup: I:   %chk0 = icmp ult i32 %x, %length
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-AddInitialGroup: I:   %x = and i32 %a, -256
RemoveOne!!!
chris-RemoveOne:   %x = and i32 %a, -256
chris-RemoveOne: return I  %x = and i32 %a, -256
run: WorkList:   %x = and i32 %a, -256
chris-run: I=  %x = and i32 %a, -256
chris-run: I-end=  %x = and i32 %a, -256
IC: Visiting:   %x = and i32 %a, -256
test1: I=  %x = and i32 %a, -256
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !range !0
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !range !0
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !range !0
test1: I=  %length = load i32, i32* %length_buf, align 4, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ult i32 %x, %length
chris-RemoveOne: return I  %chk0 = icmp ult i32 %x, %length
run: WorkList:   %chk0 = icmp ult i32 %x, %length
chris-run: I=  %chk0 = icmp ult i32 %x, %length
chris-run: I-end=  %chk0 = icmp ult i32 %x, %length
IC: Visiting:   %chk0 = icmp ult i32 %x, %length
test1: I=  %chk0 = icmp ult i32 %x, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = or i32 %x, 1
chris-RemoveOne: return I  %x.inc1 = or i32 %x, 1
run: WorkList:   %x.inc1 = or i32 %x, 1
chris-run: I=  %x.inc1 = or i32 %x, 1
chris-run: I-end=  %x.inc1 = or i32 %x, 1
IC: Visiting:   %x.inc1 = or i32 %x, 1
test1: I=  %x.inc1 = or i32 %x, 1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %0 = and i1 %chk0, %chk1
chris-RemoveOne: return I  %0 = and i1 %chk0, %chk1
run: WorkList:   %0 = and i1 %chk0, %chk1
chris-run: I=  %0 = and i1 %chk0, %chk1
chris-run: I-end=  %0 = and i1 %chk0, %chk1
IC: Visiting:   %0 = and i1 %chk0, %chk1
test1: I=  %0 = and i1 %chk0, %chk1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = or i32 %x, 3
NextInst[0]   %chk2 = icmp ult i32 %x.inc2, %length
NextInst[1]   %x.inc3 = add nuw nsw i32 %x.inc2, 3
NextInst[2]   %chk3 = icmp ult i32 %x.inc3, %length
Inst[end]:   %chk3 = icmp ult i32 %x.inc3, %length
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = or i32 %x, 3
chris-RemoveOne: return I  %x.inc2 = or i32 %x, 3
run: WorkList:   %x.inc2 = or i32 %x, 3
chris-run: I=  %x.inc2 = or i32 %x, 3
chris-run: I-end=  %x.inc2 = or i32 %x, 3
IC: Visiting:   %x.inc2 = or i32 %x, 3
test1: I=  %x.inc2 = or i32 %x, 3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw nsw i32 %x.inc2, 3
chris-RemoveOne: return I  %x.inc3 = add nuw nsw i32 %x.inc2, 3
run: WorkList:   %x.inc3 = add nuw nsw i32 %x.inc2, 3
chris-run: I=  %x.inc3 = add nuw nsw i32 %x.inc2, 3
chris-run: I-end=  %x.inc3 = add nuw nsw i32 %x.inc2, 3
IC: Visiting:   %x.inc3 = add nuw nsw i32 %x.inc2, 3
test1: I=  %x.inc3 = add nuw nsw i32 %x.inc2, 3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %1 = and i1 %chk2, %chk3
chris-RemoveOne: return I  %1 = and i1 %chk2, %chk3
run: WorkList:   %1 = and i1 %chk2, %chk3
chris-run: I=  %1 = and i1 %chk2, %chk3
chris-run: I-end=  %1 = and i1 %chk2, %chk3
IC: Visiting:   %1 = and i1 %chk2, %chk3
test1: I=  %1 = and i1 %chk2, %chk3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void
 ok, break
Inst[end]:   ret void
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void
chris-RemoveOne: return I  ret void
run: WorkList:   ret void
chris-run: I=  ret void
chris-run: I-end=  ret void
IC: Visiting:   ret void
test1: I=  ret void
visit: nullptr 
test3
test4
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, !range !0
runOnFunction: I:  %chk0 = icmp ult i32 %x, %length
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
runOnFunction: I:  %x.inc1 = add i32 %x, -1024
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
runOnFunction: I:  %x.inc2 = add i32 %x, 2
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
runOnFunction: I:  %x.inc3 = add i32 %x, 3
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
runOnFunction: I:  ret void
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, !range !0
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ult i32 %x, %length
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add i32 %x, -1024
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add i32 %x, 2
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add i32 %x, 3
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  ret void


INSTCOMBINE ITERATION #1 on f_4
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, !range !0
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ult i32 %x, %length
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add i32 %x, -1024
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add i32 %x, 2
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add i32 %x, 3
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  ret void
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, !range !0
  %chk0 = icmp ult i32 %x, %length
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
  %x.inc1 = add i32 %x, -1024
  %chk1 = icmp ult i32 %x.inc1, %length
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
  %x.inc2 = add i32 %x, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
  %x.inc3 = add i32 %x, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
  ret void

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, !range !0
  %chk0 = icmp ult i32 %x, %length
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
  %x.inc1 = add i32 %x, -1024
  %chk1 = icmp ult i32 %x.inc1, %length
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
  %x.inc2 = add i32 %x, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
  %x.inc3 = add i32 %x, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
  ret void

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, !range !0
chris-worklist-bb: BB end:   %chk0 = icmp ult i32 %x, %length
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc1 = add i32 %x, -1024
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc2 = add i32 %x, 2
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc3 = add i32 %x, 3
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
chris-worklist-bb: BB end:   ret void
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length
chris-AddInitialGroup: I:   %x.inc3 = add i32 %x, 3
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length
chris-AddInitialGroup: I:   %x.inc2 = add i32 %x, 2
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length
chris-AddInitialGroup: I:   %x.inc1 = add i32 %x, -1024
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-AddInitialGroup: I:   %chk0 = icmp ult i32 %x, %length
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, !range !0
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, !range !0
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, !range !0
run: WorkList:   %length = load i32, i32* %length_buf, !range !0
chris-run: I=  %length = load i32, i32* %length_buf, !range !0
chris-run: I-end=  %length = load i32, i32* %length_buf, !range !0
IC: Visiting:   %length = load i32, i32* %length_buf, !range !0
test1: I=  %length = load i32, i32* %length_buf, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ult i32 %x, %length
chris-RemoveOne: return I  %chk0 = icmp ult i32 %x, %length
run: WorkList:   %chk0 = icmp ult i32 %x, %length
chris-run: I=  %chk0 = icmp ult i32 %x, %length
chris-run: I-end=  %chk0 = icmp ult i32 %x, %length
IC: Visiting:   %chk0 = icmp ult i32 %x, %length
test1: I=  %chk0 = icmp ult i32 %x, %length
visit: has:   %chk0 = icmp ugt i32 %length, %x
test2
after visiting: Result =   %chk0 = icmp ugt i32 %length, %x
after visiting: I =   %chk0 = icmp ugt i32 %length, %x
IC: Mod =   %chk0 = icmp ult i32 %x, %length
    New =   %chk0 = icmp ugt i32 %length, %x
chris-Worklist.AddUsersToWorkList 2:   %chk0 = icmp ugt i32 %length, %x
chris-add2:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris add f
IC: ADD:   %chk0 = icmp ugt i32 %length, %x
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x
run: WorkList:   %chk0 = icmp ugt i32 %length, %x
chris-run: I=  %chk0 = icmp ugt i32 %length, %x
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x
test1: I=  %chk0 = icmp ugt i32 %length, %x
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = add i32 %x, -1024
NextInst[0]   %chk1 = icmp ult i32 %x.inc1, %length
NextInst[1]   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
 ok, break
Inst[end]:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
MoveI:   %x.inc1 = add i32 %x, -1024
chris add g: I:  %0 = and i1 %chk0, %chk1
IC: ADD:   %0 = and i1 %chk0, %chk1
IC: ERASE   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %0 = and i1 %chk0, %chk1
chris-RemoveOne: return I  %0 = and i1 %chk0, %chk1
run: WorkList:   %0 = and i1 %chk0, %chk1
chris-run: I=  %0 = and i1 %chk0, %chk1
chris-run: I-end=  %0 = and i1 %chk0, %chk1
IC: Visiting:   %0 = and i1 %chk0, %chk1
test1: I=  %0 = and i1 %chk0, %chk1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add i32 %x, -1024
chris-RemoveOne: return I  %x.inc1 = add i32 %x, -1024
run: WorkList:   %x.inc1 = add i32 %x, -1024
chris-run: I=  %x.inc1 = add i32 %x, -1024
chris-run: I-end=  %x.inc1 = add i32 %x, -1024
IC: Visiting:   %x.inc1 = add i32 %x, -1024
test1: I=  %x.inc1 = add i32 %x, -1024
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length
visit: nullptr 
test3
RemoveOne!!!
run: WorkList: null
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add i32 %x, 2
chris-RemoveOne: return I  %x.inc2 = add i32 %x, 2
run: WorkList:   %x.inc2 = add i32 %x, 2
chris-run: I=  %x.inc2 = add i32 %x, 2
chris-run: I-end=  %x.inc2 = add i32 %x, 2
IC: Visiting:   %x.inc2 = add i32 %x, 2
test1: I=  %x.inc2 = add i32 %x, 2
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add i32 %x, 3
NextInst[0]   %chk3 = icmp ult i32 %x.inc3, %length
NextInst[1]   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
 ok, break
Inst[end]:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
MoveI:   %x.inc3 = add i32 %x, 3
chris add g: I:  %1 = and i1 %chk2, %chk3
IC: ADD:   %1 = and i1 %chk2, %chk3
IC: ERASE   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %1 = and i1 %chk2, %chk3
chris-RemoveOne: return I  %1 = and i1 %chk2, %chk3
run: WorkList:   %1 = and i1 %chk2, %chk3
chris-run: I=  %1 = and i1 %chk2, %chk3
chris-run: I-end=  %1 = and i1 %chk2, %chk3
IC: Visiting:   %1 = and i1 %chk2, %chk3
test1: I=  %1 = and i1 %chk2, %chk3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add i32 %x, 3
chris-RemoveOne: return I  %x.inc3 = add i32 %x, 3
run: WorkList:   %x.inc3 = add i32 %x, 3
chris-run: I=  %x.inc3 = add i32 %x, 3
chris-run: I-end=  %x.inc3 = add i32 %x, 3
IC: Visiting:   %x.inc3 = add i32 %x, 3
test1: I=  %x.inc3 = add i32 %x, 3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length
visit: nullptr 
test3
RemoveOne!!!
run: WorkList: null
RemoveOne!!!
chris-RemoveOne:   ret void
chris-RemoveOne: return I  ret void
run: WorkList:   ret void
chris-run: I=  ret void
chris-run: I-end=  ret void
IC: Visiting:   ret void
test1: I=  ret void
visit: nullptr 
test3
test4


INSTCOMBINE ITERATION #2 on f_4
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add i32 %x, -1024
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(end):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add i32 %x, 2
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add i32 %x, 3
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(end):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  ret void
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, -1024
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add i32 %x, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add i32 %x, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, -1024
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add i32 %x, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add i32 %x, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x
chris-worklist-bb: BB end:   %x.inc1 = add i32 %x, -1024
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length
chris-worklist-bb: BB end:   %0 = and i1 %chk0, %chk1
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc2 = add i32 %x, 2
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length
chris-worklist-bb: BB end:   %x.inc3 = add i32 %x, 3
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length
chris-worklist-bb: BB end:   %1 = and i1 %chk2, %chk3
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-worklist-bb: BB end:   ret void
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-AddInitialGroup: I:   %1 = and i1 %chk2, %chk3
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length
chris-AddInitialGroup: I:   %x.inc3 = add i32 %x, 3
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length
chris-AddInitialGroup: I:   %x.inc2 = add i32 %x, 2
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-AddInitialGroup: I:   %0 = and i1 %chk0, %chk1
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length
chris-AddInitialGroup: I:   %x.inc1 = add i32 %x, -1024
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !range !0
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !range !0
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !range !0
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !range !0
test1: I=  %length = load i32, i32* %length_buf, align 4, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x
run: WorkList:   %chk0 = icmp ugt i32 %length, %x
chris-run: I=  %chk0 = icmp ugt i32 %length, %x
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x
test1: I=  %chk0 = icmp ugt i32 %length, %x
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add i32 %x, -1024
chris-RemoveOne: return I  %x.inc1 = add i32 %x, -1024
run: WorkList:   %x.inc1 = add i32 %x, -1024
chris-run: I=  %x.inc1 = add i32 %x, -1024
chris-run: I-end=  %x.inc1 = add i32 %x, -1024
IC: Visiting:   %x.inc1 = add i32 %x, -1024
test1: I=  %x.inc1 = add i32 %x, -1024
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %0 = and i1 %chk0, %chk1
chris-RemoveOne: return I  %0 = and i1 %chk0, %chk1
run: WorkList:   %0 = and i1 %chk0, %chk1
chris-run: I=  %0 = and i1 %chk0, %chk1
chris-run: I-end=  %0 = and i1 %chk0, %chk1
IC: Visiting:   %0 = and i1 %chk0, %chk1
test1: I=  %0 = and i1 %chk0, %chk1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add i32 %x, 2
NextInst[0]   %chk2 = icmp ult i32 %x.inc2, %length
NextInst[1]   %x.inc3 = add i32 %x, 3
NextInst[2]   %chk3 = icmp ult i32 %x.inc3, %length
Inst[end]:   %chk3 = icmp ult i32 %x.inc3, %length
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add i32 %x, 2
chris-RemoveOne: return I  %x.inc2 = add i32 %x, 2
run: WorkList:   %x.inc2 = add i32 %x, 2
chris-run: I=  %x.inc2 = add i32 %x, 2
chris-run: I-end=  %x.inc2 = add i32 %x, 2
IC: Visiting:   %x.inc2 = add i32 %x, 2
test1: I=  %x.inc2 = add i32 %x, 2
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add i32 %x, 3
chris-RemoveOne: return I  %x.inc3 = add i32 %x, 3
run: WorkList:   %x.inc3 = add i32 %x, 3
chris-run: I=  %x.inc3 = add i32 %x, 3
chris-run: I-end=  %x.inc3 = add i32 %x, 3
IC: Visiting:   %x.inc3 = add i32 %x, 3
test1: I=  %x.inc3 = add i32 %x, 3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %1 = and i1 %chk2, %chk3
chris-RemoveOne: return I  %1 = and i1 %chk2, %chk3
run: WorkList:   %1 = and i1 %chk2, %chk3
chris-run: I=  %1 = and i1 %chk2, %chk3
chris-run: I-end=  %1 = and i1 %chk2, %chk3
IC: Visiting:   %1 = and i1 %chk2, %chk3
test1: I=  %1 = and i1 %chk2, %chk3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void
 ok, break
Inst[end]:   ret void
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void
chris-RemoveOne: return I  ret void
run: WorkList:   ret void
chris-run: I=  ret void
chris-run: I-end=  ret void
IC: Visiting:   ret void
test1: I=  ret void
visit: nullptr 
test3
test4
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, !range !0
runOnFunction: I:  %chk0 = icmp ult i32 %x, %length
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
runOnFunction: I:  %x.inc1 = add i32 %x, 1
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
runOnFunction: I:  %x.inc2 = add i32 %x.inc1, -200
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
runOnFunction: I:  %x.inc3 = add i32 %x.inc2, 3
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
runOnFunction: I:  ret void
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, !range !0
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ult i32 %x, %length
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add i32 %x, 1
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add i32 %x.inc1, -200
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add i32 %x.inc2, 3
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  ret void


INSTCOMBINE ITERATION #1 on f_5
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, !range !0
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ult i32 %x, %length
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add i32 %x, 1
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add i32 %x.inc1, -200
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add i32 %x.inc2, 3
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  ret void
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, !range !0
  %chk0 = icmp ult i32 %x, %length
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
  %x.inc1 = add i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
  %x.inc2 = add i32 %x.inc1, -200
  %chk2 = icmp ult i32 %x.inc2, %length
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
  %x.inc3 = add i32 %x.inc2, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
  ret void

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, !range !0
  %chk0 = icmp ult i32 %x, %length
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
  %x.inc1 = add i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
  %x.inc2 = add i32 %x.inc1, -200
  %chk2 = icmp ult i32 %x.inc2, %length
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
  %x.inc3 = add i32 %x.inc2, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
  ret void

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, !range !0
chris-worklist-bb: BB end:   %chk0 = icmp ult i32 %x, %length
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc1 = add i32 %x, 1
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc2 = add i32 %x.inc1, -200
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc3 = add i32 %x.inc2, 3
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
chris-worklist-bb: BB end:   ret void
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length
chris-AddInitialGroup: I:   %x.inc3 = add i32 %x.inc2, 3
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length
chris-AddInitialGroup: I:   %x.inc2 = add i32 %x.inc1, -200
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length
chris-AddInitialGroup: I:   %x.inc1 = add i32 %x, 1
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-AddInitialGroup: I:   %chk0 = icmp ult i32 %x, %length
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, !range !0
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, !range !0
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, !range !0
run: WorkList:   %length = load i32, i32* %length_buf, !range !0
chris-run: I=  %length = load i32, i32* %length_buf, !range !0
chris-run: I-end=  %length = load i32, i32* %length_buf, !range !0
IC: Visiting:   %length = load i32, i32* %length_buf, !range !0
test1: I=  %length = load i32, i32* %length_buf, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ult i32 %x, %length
chris-RemoveOne: return I  %chk0 = icmp ult i32 %x, %length
run: WorkList:   %chk0 = icmp ult i32 %x, %length
chris-run: I=  %chk0 = icmp ult i32 %x, %length
chris-run: I-end=  %chk0 = icmp ult i32 %x, %length
IC: Visiting:   %chk0 = icmp ult i32 %x, %length
test1: I=  %chk0 = icmp ult i32 %x, %length
visit: has:   %chk0 = icmp ugt i32 %length, %x
test2
after visiting: Result =   %chk0 = icmp ugt i32 %length, %x
after visiting: I =   %chk0 = icmp ugt i32 %length, %x
IC: Mod =   %chk0 = icmp ult i32 %x, %length
    New =   %chk0 = icmp ugt i32 %length, %x
chris-Worklist.AddUsersToWorkList 2:   %chk0 = icmp ugt i32 %length, %x
chris-add2:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris add f
IC: ADD:   %chk0 = icmp ugt i32 %length, %x
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x
run: WorkList:   %chk0 = icmp ugt i32 %length, %x
chris-run: I=  %chk0 = icmp ugt i32 %length, %x
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x
test1: I=  %chk0 = icmp ugt i32 %length, %x
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = add i32 %x, 1
NextInst[0]   %chk1 = icmp ult i32 %x.inc1, %length
NextInst[1]   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
 ok, break
Inst[end]:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
MoveI:   %x.inc1 = add i32 %x, 1
chris add g: I:  %0 = and i1 %chk0, %chk1
IC: ADD:   %0 = and i1 %chk0, %chk1
IC: ERASE   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %0 = and i1 %chk0, %chk1
chris-RemoveOne: return I  %0 = and i1 %chk0, %chk1
run: WorkList:   %0 = and i1 %chk0, %chk1
chris-run: I=  %0 = and i1 %chk0, %chk1
chris-run: I-end=  %0 = and i1 %chk0, %chk1
IC: Visiting:   %0 = and i1 %chk0, %chk1
test1: I=  %0 = and i1 %chk0, %chk1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add i32 %x, 1
chris-RemoveOne: return I  %x.inc1 = add i32 %x, 1
run: WorkList:   %x.inc1 = add i32 %x, 1
chris-run: I=  %x.inc1 = add i32 %x, 1
chris-run: I-end=  %x.inc1 = add i32 %x, 1
IC: Visiting:   %x.inc1 = add i32 %x, 1
test1: I=  %x.inc1 = add i32 %x, 1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length
visit: nullptr 
test3
RemoveOne!!!
run: WorkList: null
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add i32 %x.inc1, -200
chris-RemoveOne: return I  %x.inc2 = add i32 %x.inc1, -200
run: WorkList:   %x.inc2 = add i32 %x.inc1, -200
chris-run: I=  %x.inc2 = add i32 %x.inc1, -200
chris-run: I-end=  %x.inc2 = add i32 %x.inc1, -200
IC: Visiting:   %x.inc2 = add i32 %x.inc1, -200
test1: I=  %x.inc2 = add i32 %x.inc1, -200
visit: has:   %x.inc2 = add i32 %x, -199
test2
after visiting: Result =   %x.inc2 = add i32 %x, -199
after visiting: I =   %x.inc2 = add i32 %x, -199
IC: Mod =   %x.inc2 = add i32 %x.inc1, -200
    New =   %x.inc2 = add i32 %x, -199
chris-Worklist.AddUsersToWorkList 2:   %x.inc2 = add i32 %x, -199
chris-add2:   %x.inc3 = add i32 %x.inc2, 3
chris-add2:   %chk2 = icmp ult i32 %x.inc2, %length
chris add f
IC: ADD:   %x.inc2 = add i32 %x, -199
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add i32 %x, -199
chris-RemoveOne: return I  %x.inc2 = add i32 %x, -199
run: WorkList:   %x.inc2 = add i32 %x, -199
chris-run: I=  %x.inc2 = add i32 %x, -199
chris-run: I-end=  %x.inc2 = add i32 %x, -199
IC: Visiting:   %x.inc2 = add i32 %x, -199
test1: I=  %x.inc2 = add i32 %x, -199
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add i32 %x.inc2, 3
NextInst[0]   %chk3 = icmp ult i32 %x.inc3, %length
NextInst[1]   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
 ok, break
Inst[end]:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
MoveI:   %x.inc3 = add i32 %x.inc2, 3
chris add g: I:  %1 = and i1 %chk2, %chk3
IC: ADD:   %1 = and i1 %chk2, %chk3
IC: ERASE   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %1 = and i1 %chk2, %chk3
chris-RemoveOne: return I  %1 = and i1 %chk2, %chk3
run: WorkList:   %1 = and i1 %chk2, %chk3
chris-run: I=  %1 = and i1 %chk2, %chk3
chris-run: I-end=  %1 = and i1 %chk2, %chk3
IC: Visiting:   %1 = and i1 %chk2, %chk3
test1: I=  %1 = and i1 %chk2, %chk3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add i32 %x.inc2, 3
chris-RemoveOne: return I  %x.inc3 = add i32 %x.inc2, 3
run: WorkList:   %x.inc3 = add i32 %x.inc2, 3
chris-run: I=  %x.inc3 = add i32 %x.inc2, 3
chris-run: I-end=  %x.inc3 = add i32 %x.inc2, 3
IC: Visiting:   %x.inc3 = add i32 %x.inc2, 3
test1: I=  %x.inc3 = add i32 %x.inc2, 3
visit: has:   %x.inc3 = add i32 %x, -196
test2
after visiting: Result =   %x.inc3 = add i32 %x, -196
after visiting: I =   %x.inc3 = add i32 %x, -196
IC: Mod =   %x.inc3 = add i32 %x.inc2, 3
    New =   %x.inc3 = add i32 %x, -196
chris-Worklist.AddUsersToWorkList 2:   %x.inc3 = add i32 %x, -196
chris-add2:   %chk3 = icmp ult i32 %x.inc3, %length
chris add f
IC: ADD:   %x.inc3 = add i32 %x, -196
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add i32 %x, -196
chris-RemoveOne: return I  %x.inc3 = add i32 %x, -196
run: WorkList:   %x.inc3 = add i32 %x, -196
chris-run: I=  %x.inc3 = add i32 %x, -196
chris-run: I-end=  %x.inc3 = add i32 %x, -196
IC: Visiting:   %x.inc3 = add i32 %x, -196
test1: I=  %x.inc3 = add i32 %x, -196
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length
visit: nullptr 
test3
RemoveOne!!!
run: WorkList: null
RemoveOne!!!
chris-RemoveOne:   ret void
chris-RemoveOne: return I  ret void
run: WorkList:   ret void
chris-run: I=  ret void
chris-run: I-end=  ret void
IC: Visiting:   ret void
test1: I=  ret void
visit: nullptr 
test3
test4


INSTCOMBINE ITERATION #2 on f_5
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add i32 %x, 1
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(end):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add i32 %x, -199
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add i32 %x, -196
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(end):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  ret void
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add i32 %x, -199
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add i32 %x, -196
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add i32 %x, -199
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add i32 %x, -196
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x
chris-worklist-bb: BB end:   %x.inc1 = add i32 %x, 1
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length
chris-worklist-bb: BB end:   %0 = and i1 %chk0, %chk1
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc2 = add i32 %x, -199
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length
chris-worklist-bb: BB end:   %x.inc3 = add i32 %x, -196
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length
chris-worklist-bb: BB end:   %1 = and i1 %chk2, %chk3
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-worklist-bb: BB end:   ret void
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-AddInitialGroup: I:   %1 = and i1 %chk2, %chk3
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length
chris-AddInitialGroup: I:   %x.inc3 = add i32 %x, -196
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length
chris-AddInitialGroup: I:   %x.inc2 = add i32 %x, -199
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-AddInitialGroup: I:   %0 = and i1 %chk0, %chk1
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length
chris-AddInitialGroup: I:   %x.inc1 = add i32 %x, 1
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !range !0
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !range !0
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !range !0
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !range !0
test1: I=  %length = load i32, i32* %length_buf, align 4, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x
run: WorkList:   %chk0 = icmp ugt i32 %length, %x
chris-run: I=  %chk0 = icmp ugt i32 %length, %x
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x
test1: I=  %chk0 = icmp ugt i32 %length, %x
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add i32 %x, 1
chris-RemoveOne: return I  %x.inc1 = add i32 %x, 1
run: WorkList:   %x.inc1 = add i32 %x, 1
chris-run: I=  %x.inc1 = add i32 %x, 1
chris-run: I-end=  %x.inc1 = add i32 %x, 1
IC: Visiting:   %x.inc1 = add i32 %x, 1
test1: I=  %x.inc1 = add i32 %x, 1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %0 = and i1 %chk0, %chk1
chris-RemoveOne: return I  %0 = and i1 %chk0, %chk1
run: WorkList:   %0 = and i1 %chk0, %chk1
chris-run: I=  %0 = and i1 %chk0, %chk1
chris-run: I-end=  %0 = and i1 %chk0, %chk1
IC: Visiting:   %0 = and i1 %chk0, %chk1
test1: I=  %0 = and i1 %chk0, %chk1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add i32 %x, -199
NextInst[0]   %chk2 = icmp ult i32 %x.inc2, %length
NextInst[1]   %x.inc3 = add i32 %x, -196
NextInst[2]   %chk3 = icmp ult i32 %x.inc3, %length
Inst[end]:   %chk3 = icmp ult i32 %x.inc3, %length
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add i32 %x, -199
chris-RemoveOne: return I  %x.inc2 = add i32 %x, -199
run: WorkList:   %x.inc2 = add i32 %x, -199
chris-run: I=  %x.inc2 = add i32 %x, -199
chris-run: I-end=  %x.inc2 = add i32 %x, -199
IC: Visiting:   %x.inc2 = add i32 %x, -199
test1: I=  %x.inc2 = add i32 %x, -199
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add i32 %x, -196
chris-RemoveOne: return I  %x.inc3 = add i32 %x, -196
run: WorkList:   %x.inc3 = add i32 %x, -196
chris-run: I=  %x.inc3 = add i32 %x, -196
chris-run: I-end=  %x.inc3 = add i32 %x, -196
IC: Visiting:   %x.inc3 = add i32 %x, -196
test1: I=  %x.inc3 = add i32 %x, -196
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %1 = and i1 %chk2, %chk3
chris-RemoveOne: return I  %1 = and i1 %chk2, %chk3
run: WorkList:   %1 = and i1 %chk2, %chk3
chris-run: I=  %1 = and i1 %chk2, %chk3
chris-run: I-end=  %1 = and i1 %chk2, %chk3
IC: Visiting:   %1 = and i1 %chk2, %chk3
test1: I=  %1 = and i1 %chk2, %chk3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void
 ok, break
Inst[end]:   ret void
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void
chris-RemoveOne: return I  ret void
run: WorkList:   ret void
chris-run: I=  ret void
chris-run: I-end=  ret void
IC: Visiting:   ret void
test1: I=  ret void
visit: nullptr 
test3
test4
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, !range !0
runOnFunction: I:  %chk0 = icmp ult i32 %x, %length
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
runOnFunction: I:  %x.inc1 = add i32 %x, -2147483647
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
runOnFunction: I:  %x.inc2 = add i32 %x, 2
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
runOnFunction: I:  %x.inc3 = add i32 %x, 3
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
runOnFunction: I:  ret void
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, !range !0
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ult i32 %x, %length
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add i32 %x, -2147483647
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add i32 %x, 2
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add i32 %x, 3
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  ret void


INSTCOMBINE ITERATION #1 on f_6
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, !range !0
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ult i32 %x, %length
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add i32 %x, -2147483647
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add i32 %x, 2
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add i32 %x, 3
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  ret void
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, !range !0
  %chk0 = icmp ult i32 %x, %length
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
  %x.inc1 = add i32 %x, -2147483647
  %chk1 = icmp ult i32 %x.inc1, %length
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
  %x.inc2 = add i32 %x, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
  %x.inc3 = add i32 %x, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
  ret void

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, !range !0
  %chk0 = icmp ult i32 %x, %length
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
  %x.inc1 = add i32 %x, -2147483647
  %chk1 = icmp ult i32 %x.inc1, %length
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
  %x.inc2 = add i32 %x, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
  %x.inc3 = add i32 %x, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
  ret void

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, !range !0
chris-worklist-bb: BB end:   %chk0 = icmp ult i32 %x, %length
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc1 = add i32 %x, -2147483647
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc2 = add i32 %x, 2
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc3 = add i32 %x, 3
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
chris-worklist-bb: BB end:   ret void
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length
chris-AddInitialGroup: I:   %x.inc3 = add i32 %x, 3
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length
chris-AddInitialGroup: I:   %x.inc2 = add i32 %x, 2
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length
chris-AddInitialGroup: I:   %x.inc1 = add i32 %x, -2147483647
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-AddInitialGroup: I:   %chk0 = icmp ult i32 %x, %length
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, !range !0
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, !range !0
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, !range !0
run: WorkList:   %length = load i32, i32* %length_buf, !range !0
chris-run: I=  %length = load i32, i32* %length_buf, !range !0
chris-run: I-end=  %length = load i32, i32* %length_buf, !range !0
IC: Visiting:   %length = load i32, i32* %length_buf, !range !0
test1: I=  %length = load i32, i32* %length_buf, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ult i32 %x, %length
chris-RemoveOne: return I  %chk0 = icmp ult i32 %x, %length
run: WorkList:   %chk0 = icmp ult i32 %x, %length
chris-run: I=  %chk0 = icmp ult i32 %x, %length
chris-run: I-end=  %chk0 = icmp ult i32 %x, %length
IC: Visiting:   %chk0 = icmp ult i32 %x, %length
test1: I=  %chk0 = icmp ult i32 %x, %length
visit: has:   %chk0 = icmp ugt i32 %length, %x
test2
after visiting: Result =   %chk0 = icmp ugt i32 %length, %x
after visiting: I =   %chk0 = icmp ugt i32 %length, %x
IC: Mod =   %chk0 = icmp ult i32 %x, %length
    New =   %chk0 = icmp ugt i32 %length, %x
chris-Worklist.AddUsersToWorkList 2:   %chk0 = icmp ugt i32 %length, %x
chris-add2:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris add f
IC: ADD:   %chk0 = icmp ugt i32 %length, %x
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x
run: WorkList:   %chk0 = icmp ugt i32 %length, %x
chris-run: I=  %chk0 = icmp ugt i32 %length, %x
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x
test1: I=  %chk0 = icmp ugt i32 %length, %x
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = add i32 %x, -2147483647
NextInst[0]   %chk1 = icmp ult i32 %x.inc1, %length
NextInst[1]   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
 ok, break
Inst[end]:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
MoveI:   %x.inc1 = add i32 %x, -2147483647
chris add g: I:  %0 = and i1 %chk0, %chk1
IC: ADD:   %0 = and i1 %chk0, %chk1
IC: ERASE   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %0 = and i1 %chk0, %chk1
chris-RemoveOne: return I  %0 = and i1 %chk0, %chk1
run: WorkList:   %0 = and i1 %chk0, %chk1
chris-run: I=  %0 = and i1 %chk0, %chk1
chris-run: I-end=  %0 = and i1 %chk0, %chk1
IC: Visiting:   %0 = and i1 %chk0, %chk1
test1: I=  %0 = and i1 %chk0, %chk1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add i32 %x, -2147483647
chris-RemoveOne: return I  %x.inc1 = add i32 %x, -2147483647
run: WorkList:   %x.inc1 = add i32 %x, -2147483647
chris-run: I=  %x.inc1 = add i32 %x, -2147483647
chris-run: I-end=  %x.inc1 = add i32 %x, -2147483647
IC: Visiting:   %x.inc1 = add i32 %x, -2147483647
test1: I=  %x.inc1 = add i32 %x, -2147483647
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length
visit: nullptr 
test3
RemoveOne!!!
run: WorkList: null
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add i32 %x, 2
chris-RemoveOne: return I  %x.inc2 = add i32 %x, 2
run: WorkList:   %x.inc2 = add i32 %x, 2
chris-run: I=  %x.inc2 = add i32 %x, 2
chris-run: I-end=  %x.inc2 = add i32 %x, 2
IC: Visiting:   %x.inc2 = add i32 %x, 2
test1: I=  %x.inc2 = add i32 %x, 2
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add i32 %x, 3
NextInst[0]   %chk3 = icmp ult i32 %x.inc3, %length
NextInst[1]   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
 ok, break
Inst[end]:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
MoveI:   %x.inc3 = add i32 %x, 3
chris add g: I:  %1 = and i1 %chk2, %chk3
IC: ADD:   %1 = and i1 %chk2, %chk3
IC: ERASE   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %1 = and i1 %chk2, %chk3
chris-RemoveOne: return I  %1 = and i1 %chk2, %chk3
run: WorkList:   %1 = and i1 %chk2, %chk3
chris-run: I=  %1 = and i1 %chk2, %chk3
chris-run: I-end=  %1 = and i1 %chk2, %chk3
IC: Visiting:   %1 = and i1 %chk2, %chk3
test1: I=  %1 = and i1 %chk2, %chk3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add i32 %x, 3
chris-RemoveOne: return I  %x.inc3 = add i32 %x, 3
run: WorkList:   %x.inc3 = add i32 %x, 3
chris-run: I=  %x.inc3 = add i32 %x, 3
chris-run: I-end=  %x.inc3 = add i32 %x, 3
IC: Visiting:   %x.inc3 = add i32 %x, 3
test1: I=  %x.inc3 = add i32 %x, 3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length
visit: nullptr 
test3
RemoveOne!!!
run: WorkList: null
RemoveOne!!!
chris-RemoveOne:   ret void
chris-RemoveOne: return I  ret void
run: WorkList:   ret void
chris-run: I=  ret void
chris-run: I-end=  ret void
IC: Visiting:   ret void
test1: I=  ret void
visit: nullptr 
test3
test4


INSTCOMBINE ITERATION #2 on f_6
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add i32 %x, -2147483647
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(end):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add i32 %x, 2
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add i32 %x, 3
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(end):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  ret void
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, -2147483647
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add i32 %x, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add i32 %x, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, -2147483647
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add i32 %x, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add i32 %x, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x
chris-worklist-bb: BB end:   %x.inc1 = add i32 %x, -2147483647
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length
chris-worklist-bb: BB end:   %0 = and i1 %chk0, %chk1
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc2 = add i32 %x, 2
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length
chris-worklist-bb: BB end:   %x.inc3 = add i32 %x, 3
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length
chris-worklist-bb: BB end:   %1 = and i1 %chk2, %chk3
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-worklist-bb: BB end:   ret void
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-AddInitialGroup: I:   %1 = and i1 %chk2, %chk3
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length
chris-AddInitialGroup: I:   %x.inc3 = add i32 %x, 3
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length
chris-AddInitialGroup: I:   %x.inc2 = add i32 %x, 2
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-AddInitialGroup: I:   %0 = and i1 %chk0, %chk1
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length
chris-AddInitialGroup: I:   %x.inc1 = add i32 %x, -2147483647
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !range !0
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !range !0
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !range !0
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !range !0
test1: I=  %length = load i32, i32* %length_buf, align 4, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x
run: WorkList:   %chk0 = icmp ugt i32 %length, %x
chris-run: I=  %chk0 = icmp ugt i32 %length, %x
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x
test1: I=  %chk0 = icmp ugt i32 %length, %x
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add i32 %x, -2147483647
chris-RemoveOne: return I  %x.inc1 = add i32 %x, -2147483647
run: WorkList:   %x.inc1 = add i32 %x, -2147483647
chris-run: I=  %x.inc1 = add i32 %x, -2147483647
chris-run: I-end=  %x.inc1 = add i32 %x, -2147483647
IC: Visiting:   %x.inc1 = add i32 %x, -2147483647
test1: I=  %x.inc1 = add i32 %x, -2147483647
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %0 = and i1 %chk0, %chk1
chris-RemoveOne: return I  %0 = and i1 %chk0, %chk1
run: WorkList:   %0 = and i1 %chk0, %chk1
chris-run: I=  %0 = and i1 %chk0, %chk1
chris-run: I-end=  %0 = and i1 %chk0, %chk1
IC: Visiting:   %0 = and i1 %chk0, %chk1
test1: I=  %0 = and i1 %chk0, %chk1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add i32 %x, 2
NextInst[0]   %chk2 = icmp ult i32 %x.inc2, %length
NextInst[1]   %x.inc3 = add i32 %x, 3
NextInst[2]   %chk3 = icmp ult i32 %x.inc3, %length
Inst[end]:   %chk3 = icmp ult i32 %x.inc3, %length
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add i32 %x, 2
chris-RemoveOne: return I  %x.inc2 = add i32 %x, 2
run: WorkList:   %x.inc2 = add i32 %x, 2
chris-run: I=  %x.inc2 = add i32 %x, 2
chris-run: I-end=  %x.inc2 = add i32 %x, 2
IC: Visiting:   %x.inc2 = add i32 %x, 2
test1: I=  %x.inc2 = add i32 %x, 2
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add i32 %x, 3
chris-RemoveOne: return I  %x.inc3 = add i32 %x, 3
run: WorkList:   %x.inc3 = add i32 %x, 3
chris-run: I=  %x.inc3 = add i32 %x, 3
chris-run: I-end=  %x.inc3 = add i32 %x, 3
IC: Visiting:   %x.inc3 = add i32 %x, 3
test1: I=  %x.inc3 = add i32 %x, 3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %1 = and i1 %chk2, %chk3
chris-RemoveOne: return I  %1 = and i1 %chk2, %chk3
run: WorkList:   %1 = and i1 %chk2, %chk3
chris-run: I=  %1 = and i1 %chk2, %chk3
chris-run: I-end=  %1 = and i1 %chk2, %chk3
IC: Visiting:   %1 = and i1 %chk2, %chk3
test1: I=  %1 = and i1 %chk2, %chk3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void
 ok, break
Inst[end]:   ret void
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void
chris-RemoveOne: return I  ret void
run: WorkList:   ret void
chris-run: I=  ret void
chris-run: I-end=  ret void
IC: Visiting:   ret void
test1: I=  ret void
visit: nullptr 
test3
test4
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length_a = load volatile i32, i32* %length_buf, !range !0
runOnFunction: I:  %length_b = load volatile i32, i32* %length_buf, !range !0
runOnFunction: I:  %chk0.a = icmp ult i32 %x, %length_a
runOnFunction: I:  %chk0.b = icmp ult i32 %x, %length_b
runOnFunction: I:  %chk0 = and i1 %chk0.a, %chk0.b
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
runOnFunction: I:  %x.inc1 = add i32 %x, 1
runOnFunction: I:  %chk1.a = icmp ult i32 %x.inc1, %length_a
runOnFunction: I:  %chk1.b = icmp ult i32 %x.inc1, %length_b
runOnFunction: I:  %chk1 = and i1 %chk1.a, %chk1.b
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
runOnFunction: I:  %x.inc2 = add i32 %x, 2
runOnFunction: I:  %chk2.a = icmp ult i32 %x.inc2, %length_a
runOnFunction: I:  %chk2.b = icmp ult i32 %x.inc2, %length_b
runOnFunction: I:  %chk2 = and i1 %chk2.a, %chk2.b
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
runOnFunction: I:  %x.inc3 = add i32 %x, 3
runOnFunction: I:  %chk3.a = icmp ult i32 %x.inc3, %length_a
runOnFunction: I:  %chk3.b = icmp ult i32 %x.inc3, %length_b
runOnFunction: I:  %chk3 = and i1 %chk3.a, %chk3.b
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
runOnFunction: I:  ret void
INSTCOMBINE ITERATION: Inst(start):  %length_a = load volatile i32, i32* %length_buf, !range !0
INSTCOMBINE ITERATION: Inst(start):  %length_b = load volatile i32, i32* %length_buf, !range !0
INSTCOMBINE ITERATION: Inst(start):  %chk0.a = icmp ult i32 %x, %length_a
INSTCOMBINE ITERATION: Inst(start):  %chk0.b = icmp ult i32 %x, %length_b
INSTCOMBINE ITERATION: Inst(start):  %chk0 = and i1 %chk0.a, %chk0.b
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add i32 %x, 1
INSTCOMBINE ITERATION: Inst(start):  %chk1.a = icmp ult i32 %x.inc1, %length_a
INSTCOMBINE ITERATION: Inst(start):  %chk1.b = icmp ult i32 %x.inc1, %length_b
INSTCOMBINE ITERATION: Inst(start):  %chk1 = and i1 %chk1.a, %chk1.b
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add i32 %x, 2
INSTCOMBINE ITERATION: Inst(start):  %chk2.a = icmp ult i32 %x.inc2, %length_a
INSTCOMBINE ITERATION: Inst(start):  %chk2.b = icmp ult i32 %x.inc2, %length_b
INSTCOMBINE ITERATION: Inst(start):  %chk2 = and i1 %chk2.a, %chk2.b
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add i32 %x, 3
INSTCOMBINE ITERATION: Inst(start):  %chk3.a = icmp ult i32 %x.inc3, %length_a
INSTCOMBINE ITERATION: Inst(start):  %chk3.b = icmp ult i32 %x.inc3, %length_b
INSTCOMBINE ITERATION: Inst(start):  %chk3 = and i1 %chk3.a, %chk3.b
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  ret void


INSTCOMBINE ITERATION #1 on f_7
INSTCOMBINE ITERATION: Inst(end):  %length_a = load volatile i32, i32* %length_buf, !range !0
INSTCOMBINE ITERATION: Inst(end):  %length_b = load volatile i32, i32* %length_buf, !range !0
INSTCOMBINE ITERATION: Inst(end):  %chk0.a = icmp ult i32 %x, %length_a
INSTCOMBINE ITERATION: Inst(end):  %chk0.b = icmp ult i32 %x, %length_b
INSTCOMBINE ITERATION: Inst(end):  %chk0 = and i1 %chk0.a, %chk0.b
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add i32 %x, 1
INSTCOMBINE ITERATION: Inst(end):  %chk1.a = icmp ult i32 %x.inc1, %length_a
INSTCOMBINE ITERATION: Inst(end):  %chk1.b = icmp ult i32 %x.inc1, %length_b
INSTCOMBINE ITERATION: Inst(end):  %chk1 = and i1 %chk1.a, %chk1.b
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add i32 %x, 2
INSTCOMBINE ITERATION: Inst(end):  %chk2.a = icmp ult i32 %x.inc2, %length_a
INSTCOMBINE ITERATION: Inst(end):  %chk2.b = icmp ult i32 %x.inc2, %length_b
INSTCOMBINE ITERATION: Inst(end):  %chk2 = and i1 %chk2.a, %chk2.b
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add i32 %x, 3
INSTCOMBINE ITERATION: Inst(end):  %chk3.a = icmp ult i32 %x.inc3, %length_a
INSTCOMBINE ITERATION: Inst(end):  %chk3.b = icmp ult i32 %x.inc3, %length_b
INSTCOMBINE ITERATION: Inst(end):  %chk3 = and i1 %chk3.a, %chk3.b
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  ret void
chris-worklist-bb: bb: 
entry:
  %length_a = load volatile i32, i32* %length_buf, !range !0
  %length_b = load volatile i32, i32* %length_buf, !range !0
  %chk0.a = icmp ult i32 %x, %length_a
  %chk0.b = icmp ult i32 %x, %length_b
  %chk0 = and i1 %chk0.a, %chk0.b
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
  %x.inc1 = add i32 %x, 1
  %chk1.a = icmp ult i32 %x.inc1, %length_a
  %chk1.b = icmp ult i32 %x.inc1, %length_b
  %chk1 = and i1 %chk1.a, %chk1.b
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
  %x.inc2 = add i32 %x, 2
  %chk2.a = icmp ult i32 %x.inc2, %length_a
  %chk2.b = icmp ult i32 %x.inc2, %length_b
  %chk2 = and i1 %chk2.a, %chk2.b
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
  %x.inc3 = add i32 %x, 3
  %chk3.a = icmp ult i32 %x.inc3, %length_a
  %chk3.b = icmp ult i32 %x.inc3, %length_b
  %chk3 = and i1 %chk3.a, %chk3.b
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
  ret void

chris-worklist-bb: BB: 
entry:
  %length_a = load volatile i32, i32* %length_buf, !range !0
  %length_b = load volatile i32, i32* %length_buf, !range !0
  %chk0.a = icmp ult i32 %x, %length_a
  %chk0.b = icmp ult i32 %x, %length_b
  %chk0 = and i1 %chk0.a, %chk0.b
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
  %x.inc1 = add i32 %x, 1
  %chk1.a = icmp ult i32 %x.inc1, %length_a
  %chk1.b = icmp ult i32 %x.inc1, %length_b
  %chk1 = and i1 %chk1.a, %chk1.b
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
  %x.inc2 = add i32 %x, 2
  %chk2.a = icmp ult i32 %x.inc2, %length_a
  %chk2.b = icmp ult i32 %x.inc2, %length_b
  %chk2 = and i1 %chk2.a, %chk2.b
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
  %x.inc3 = add i32 %x, 3
  %chk3.a = icmp ult i32 %x.inc3, %length_a
  %chk3.b = icmp ult i32 %x.inc3, %length_b
  %chk3 = and i1 %chk3.a, %chk3.b
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
  ret void

chris-worklist-bb: BB end:   %length_a = load volatile i32, i32* %length_buf, !range !0
chris-worklist-bb: BB end:   %length_b = load volatile i32, i32* %length_buf, !range !0
chris-worklist-bb: BB end:   %chk0.a = icmp ult i32 %x, %length_a
chris-worklist-bb: BB end:   %chk0.b = icmp ult i32 %x, %length_b
chris-worklist-bb: BB end:   %chk0 = and i1 %chk0.a, %chk0.b
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc1 = add i32 %x, 1
chris-worklist-bb: BB end:   %chk1.a = icmp ult i32 %x.inc1, %length_a
chris-worklist-bb: BB end:   %chk1.b = icmp ult i32 %x.inc1, %length_b
chris-worklist-bb: BB end:   %chk1 = and i1 %chk1.a, %chk1.b
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc2 = add i32 %x, 2
chris-worklist-bb: BB end:   %chk2.a = icmp ult i32 %x.inc2, %length_a
chris-worklist-bb: BB end:   %chk2.b = icmp ult i32 %x.inc2, %length_b
chris-worklist-bb: BB end:   %chk2 = and i1 %chk2.a, %chk2.b
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc3 = add i32 %x, 3
chris-worklist-bb: BB end:   %chk3.a = icmp ult i32 %x.inc3, %length_a
chris-worklist-bb: BB end:   %chk3.b = icmp ult i32 %x.inc3, %length_b
chris-worklist-bb: BB end:   %chk3 = and i1 %chk3.a, %chk3.b
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
chris-worklist-bb: BB end:   ret void
IC: ADDING: 22 instrs to worklist
chris-AddInitialGroup: I:   ret void
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
chris-AddInitialGroup: I:   %chk3 = and i1 %chk3.a, %chk3.b
chris-AddInitialGroup: I:   %chk3.b = icmp ult i32 %x.inc3, %length_b
chris-AddInitialGroup: I:   %chk3.a = icmp ult i32 %x.inc3, %length_a
chris-AddInitialGroup: I:   %x.inc3 = add i32 %x, 3
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-AddInitialGroup: I:   %chk2 = and i1 %chk2.a, %chk2.b
chris-AddInitialGroup: I:   %chk2.b = icmp ult i32 %x.inc2, %length_b
chris-AddInitialGroup: I:   %chk2.a = icmp ult i32 %x.inc2, %length_a
chris-AddInitialGroup: I:   %x.inc2 = add i32 %x, 2
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
chris-AddInitialGroup: I:   %chk1 = and i1 %chk1.a, %chk1.b
chris-AddInitialGroup: I:   %chk1.b = icmp ult i32 %x.inc1, %length_b
chris-AddInitialGroup: I:   %chk1.a = icmp ult i32 %x.inc1, %length_a
chris-AddInitialGroup: I:   %x.inc1 = add i32 %x, 1
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-AddInitialGroup: I:   %chk0 = and i1 %chk0.a, %chk0.b
chris-AddInitialGroup: I:   %chk0.b = icmp ult i32 %x, %length_b
chris-AddInitialGroup: I:   %chk0.a = icmp ult i32 %x, %length_a
chris-AddInitialGroup: I:   %length_b = load volatile i32, i32* %length_buf, !range !0
chris-AddInitialGroup: I:   %length_a = load volatile i32, i32* %length_buf, !range !0
RemoveOne!!!
chris-RemoveOne:   %length_a = load volatile i32, i32* %length_buf, !range !0
chris-RemoveOne: return I  %length_a = load volatile i32, i32* %length_buf, !range !0
run: WorkList:   %length_a = load volatile i32, i32* %length_buf, !range !0
chris-run: I=  %length_a = load volatile i32, i32* %length_buf, !range !0
chris-run: I-end=  %length_a = load volatile i32, i32* %length_buf, !range !0
IC: Visiting:   %length_a = load volatile i32, i32* %length_buf, !range !0
test1: I=  %length_a = load volatile i32, i32* %length_buf, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %length_b = load volatile i32, i32* %length_buf, !range !0
chris-RemoveOne: return I  %length_b = load volatile i32, i32* %length_buf, !range !0
run: WorkList:   %length_b = load volatile i32, i32* %length_buf, !range !0
chris-run: I=  %length_b = load volatile i32, i32* %length_buf, !range !0
chris-run: I-end=  %length_b = load volatile i32, i32* %length_buf, !range !0
IC: Visiting:   %length_b = load volatile i32, i32* %length_buf, !range !0
test1: I=  %length_b = load volatile i32, i32* %length_buf, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0.a = icmp ult i32 %x, %length_a
chris-RemoveOne: return I  %chk0.a = icmp ult i32 %x, %length_a
run: WorkList:   %chk0.a = icmp ult i32 %x, %length_a
chris-run: I=  %chk0.a = icmp ult i32 %x, %length_a
chris-run: I-end=  %chk0.a = icmp ult i32 %x, %length_a
IC: Visiting:   %chk0.a = icmp ult i32 %x, %length_a
test1: I=  %chk0.a = icmp ult i32 %x, %length_a
visit: has:   %chk0.a = icmp ugt i32 %length_a, %x
test2
after visiting: Result =   %chk0.a = icmp ugt i32 %length_a, %x
after visiting: I =   %chk0.a = icmp ugt i32 %length_a, %x
IC: Mod =   %chk0.a = icmp ult i32 %x, %length_a
    New =   %chk0.a = icmp ugt i32 %length_a, %x
chris-Worklist.AddUsersToWorkList 2:   %chk0.a = icmp ugt i32 %length_a, %x
chris-add2:   %chk0 = and i1 %chk0.a, %chk0.b
chris add f
IC: ADD:   %chk0.a = icmp ugt i32 %length_a, %x
test3
RemoveOne!!!
chris-RemoveOne:   %chk0.a = icmp ugt i32 %length_a, %x
chris-RemoveOne: return I  %chk0.a = icmp ugt i32 %length_a, %x
run: WorkList:   %chk0.a = icmp ugt i32 %length_a, %x
chris-run: I=  %chk0.a = icmp ugt i32 %length_a, %x
chris-run: I-end=  %chk0.a = icmp ugt i32 %length_a, %x
IC: Visiting:   %chk0.a = icmp ugt i32 %length_a, %x
test1: I=  %chk0.a = icmp ugt i32 %length_a, %x
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0.b = icmp ult i32 %x, %length_b
chris-RemoveOne: return I  %chk0.b = icmp ult i32 %x, %length_b
run: WorkList:   %chk0.b = icmp ult i32 %x, %length_b
chris-run: I=  %chk0.b = icmp ult i32 %x, %length_b
chris-run: I-end=  %chk0.b = icmp ult i32 %x, %length_b
IC: Visiting:   %chk0.b = icmp ult i32 %x, %length_b
test1: I=  %chk0.b = icmp ult i32 %x, %length_b
visit: has:   %chk0.b = icmp ugt i32 %length_b, %x
test2
after visiting: Result =   %chk0.b = icmp ugt i32 %length_b, %x
after visiting: I =   %chk0.b = icmp ugt i32 %length_b, %x
IC: Mod =   %chk0.b = icmp ult i32 %x, %length_b
    New =   %chk0.b = icmp ugt i32 %length_b, %x
chris-Worklist.AddUsersToWorkList 2:   %chk0.b = icmp ugt i32 %length_b, %x
chris-add2:   %chk0 = and i1 %chk0.a, %chk0.b
chris add f
IC: ADD:   %chk0.b = icmp ugt i32 %length_b, %x
test3
RemoveOne!!!
chris-RemoveOne:   %chk0.b = icmp ugt i32 %length_b, %x
chris-RemoveOne: return I  %chk0.b = icmp ugt i32 %length_b, %x
run: WorkList:   %chk0.b = icmp ugt i32 %length_b, %x
chris-run: I=  %chk0.b = icmp ugt i32 %length_b, %x
chris-run: I-end=  %chk0.b = icmp ugt i32 %length_b, %x
IC: Visiting:   %chk0.b = icmp ugt i32 %length_b, %x
test1: I=  %chk0.b = icmp ugt i32 %length_b, %x
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = and i1 %chk0.a, %chk0.b
chris-RemoveOne: return I  %chk0 = and i1 %chk0.a, %chk0.b
run: WorkList:   %chk0 = and i1 %chk0.a, %chk0.b
chris-run: I=  %chk0 = and i1 %chk0.a, %chk0.b
chris-run: I-end=  %chk0 = and i1 %chk0.a, %chk0.b
IC: Visiting:   %chk0 = and i1 %chk0.a, %chk0.b
test1: I=  %chk0 = and i1 %chk0.a, %chk0.b
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = add i32 %x, 1
NextInst[0]   %chk1.a = icmp ult i32 %x.inc1, %length_a
NextInst[1]   %chk1.b = icmp ult i32 %x.inc1, %length_b
NextInst[2]   %chk1 = and i1 %chk1.a, %chk1.b
Inst[end]:   %chk1 = and i1 %chk1.a, %chk1.b
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add i32 %x, 1
chris-RemoveOne: return I  %x.inc1 = add i32 %x, 1
run: WorkList:   %x.inc1 = add i32 %x, 1
chris-run: I=  %x.inc1 = add i32 %x, 1
chris-run: I-end=  %x.inc1 = add i32 %x, 1
IC: Visiting:   %x.inc1 = add i32 %x, 1
test1: I=  %x.inc1 = add i32 %x, 1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1.a = icmp ult i32 %x.inc1, %length_a
chris-RemoveOne: return I  %chk1.a = icmp ult i32 %x.inc1, %length_a
run: WorkList:   %chk1.a = icmp ult i32 %x.inc1, %length_a
chris-run: I=  %chk1.a = icmp ult i32 %x.inc1, %length_a
chris-run: I-end=  %chk1.a = icmp ult i32 %x.inc1, %length_a
IC: Visiting:   %chk1.a = icmp ult i32 %x.inc1, %length_a
test1: I=  %chk1.a = icmp ult i32 %x.inc1, %length_a
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1.b = icmp ult i32 %x.inc1, %length_b
chris-RemoveOne: return I  %chk1.b = icmp ult i32 %x.inc1, %length_b
run: WorkList:   %chk1.b = icmp ult i32 %x.inc1, %length_b
chris-run: I=  %chk1.b = icmp ult i32 %x.inc1, %length_b
chris-run: I-end=  %chk1.b = icmp ult i32 %x.inc1, %length_b
IC: Visiting:   %chk1.b = icmp ult i32 %x.inc1, %length_b
test1: I=  %chk1.b = icmp ult i32 %x.inc1, %length_b
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = and i1 %chk1.a, %chk1.b
chris-RemoveOne: return I  %chk1 = and i1 %chk1.a, %chk1.b
run: WorkList:   %chk1 = and i1 %chk1.a, %chk1.b
chris-run: I=  %chk1 = and i1 %chk1.a, %chk1.b
chris-run: I-end=  %chk1 = and i1 %chk1.a, %chk1.b
IC: Visiting:   %chk1 = and i1 %chk1.a, %chk1.b
test1: I=  %chk1 = and i1 %chk1.a, %chk1.b
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add i32 %x, 2
NextInst[0]   %chk2.a = icmp ult i32 %x.inc2, %length_a
NextInst[1]   %chk2.b = icmp ult i32 %x.inc2, %length_b
NextInst[2]   %chk2 = and i1 %chk2.a, %chk2.b
Inst[end]:   %chk2 = and i1 %chk2.a, %chk2.b
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add i32 %x, 2
chris-RemoveOne: return I  %x.inc2 = add i32 %x, 2
run: WorkList:   %x.inc2 = add i32 %x, 2
chris-run: I=  %x.inc2 = add i32 %x, 2
chris-run: I-end=  %x.inc2 = add i32 %x, 2
IC: Visiting:   %x.inc2 = add i32 %x, 2
test1: I=  %x.inc2 = add i32 %x, 2
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2.a = icmp ult i32 %x.inc2, %length_a
chris-RemoveOne: return I  %chk2.a = icmp ult i32 %x.inc2, %length_a
run: WorkList:   %chk2.a = icmp ult i32 %x.inc2, %length_a
chris-run: I=  %chk2.a = icmp ult i32 %x.inc2, %length_a
chris-run: I-end=  %chk2.a = icmp ult i32 %x.inc2, %length_a
IC: Visiting:   %chk2.a = icmp ult i32 %x.inc2, %length_a
test1: I=  %chk2.a = icmp ult i32 %x.inc2, %length_a
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2.b = icmp ult i32 %x.inc2, %length_b
chris-RemoveOne: return I  %chk2.b = icmp ult i32 %x.inc2, %length_b
run: WorkList:   %chk2.b = icmp ult i32 %x.inc2, %length_b
chris-run: I=  %chk2.b = icmp ult i32 %x.inc2, %length_b
chris-run: I-end=  %chk2.b = icmp ult i32 %x.inc2, %length_b
IC: Visiting:   %chk2.b = icmp ult i32 %x.inc2, %length_b
test1: I=  %chk2.b = icmp ult i32 %x.inc2, %length_b
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = and i1 %chk2.a, %chk2.b
chris-RemoveOne: return I  %chk2 = and i1 %chk2.a, %chk2.b
run: WorkList:   %chk2 = and i1 %chk2.a, %chk2.b
chris-run: I=  %chk2 = and i1 %chk2.a, %chk2.b
chris-run: I-end=  %chk2 = and i1 %chk2.a, %chk2.b
IC: Visiting:   %chk2 = and i1 %chk2.a, %chk2.b
test1: I=  %chk2 = and i1 %chk2.a, %chk2.b
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add i32 %x, 3
NextInst[0]   %chk3.a = icmp ult i32 %x.inc3, %length_a
NextInst[1]   %chk3.b = icmp ult i32 %x.inc3, %length_b
NextInst[2]   %chk3 = and i1 %chk3.a, %chk3.b
Inst[end]:   %chk3 = and i1 %chk3.a, %chk3.b
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add i32 %x, 3
chris-RemoveOne: return I  %x.inc3 = add i32 %x, 3
run: WorkList:   %x.inc3 = add i32 %x, 3
chris-run: I=  %x.inc3 = add i32 %x, 3
chris-run: I-end=  %x.inc3 = add i32 %x, 3
IC: Visiting:   %x.inc3 = add i32 %x, 3
test1: I=  %x.inc3 = add i32 %x, 3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3.a = icmp ult i32 %x.inc3, %length_a
chris-RemoveOne: return I  %chk3.a = icmp ult i32 %x.inc3, %length_a
run: WorkList:   %chk3.a = icmp ult i32 %x.inc3, %length_a
chris-run: I=  %chk3.a = icmp ult i32 %x.inc3, %length_a
chris-run: I-end=  %chk3.a = icmp ult i32 %x.inc3, %length_a
IC: Visiting:   %chk3.a = icmp ult i32 %x.inc3, %length_a
test1: I=  %chk3.a = icmp ult i32 %x.inc3, %length_a
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3.b = icmp ult i32 %x.inc3, %length_b
chris-RemoveOne: return I  %chk3.b = icmp ult i32 %x.inc3, %length_b
run: WorkList:   %chk3.b = icmp ult i32 %x.inc3, %length_b
chris-run: I=  %chk3.b = icmp ult i32 %x.inc3, %length_b
chris-run: I-end=  %chk3.b = icmp ult i32 %x.inc3, %length_b
IC: Visiting:   %chk3.b = icmp ult i32 %x.inc3, %length_b
test1: I=  %chk3.b = icmp ult i32 %x.inc3, %length_b
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = and i1 %chk3.a, %chk3.b
chris-RemoveOne: return I  %chk3 = and i1 %chk3.a, %chk3.b
run: WorkList:   %chk3 = and i1 %chk3.a, %chk3.b
chris-run: I=  %chk3 = and i1 %chk3.a, %chk3.b
chris-run: I-end=  %chk3 = and i1 %chk3.a, %chk3.b
IC: Visiting:   %chk3 = and i1 %chk3.a, %chk3.b
test1: I=  %chk3 = and i1 %chk3.a, %chk3.b
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void
 ok, break
Inst[end]:   ret void
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void
chris-RemoveOne: return I  ret void
run: WorkList:   ret void
chris-run: I=  ret void
chris-run: I-end=  ret void
IC: Visiting:   ret void
test1: I=  ret void
visit: nullptr 
test3
test4


INSTCOMBINE ITERATION #2 on f_7
INSTCOMBINE ITERATION: Inst(end):  %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(end):  %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(end):  %chk0.a = icmp ugt i32 %length_a, %x
INSTCOMBINE ITERATION: Inst(end):  %chk0.b = icmp ugt i32 %length_b, %x
INSTCOMBINE ITERATION: Inst(end):  %chk0 = and i1 %chk0.a, %chk0.b
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add i32 %x, 1
INSTCOMBINE ITERATION: Inst(end):  %chk1.a = icmp ult i32 %x.inc1, %length_a
INSTCOMBINE ITERATION: Inst(end):  %chk1.b = icmp ult i32 %x.inc1, %length_b
INSTCOMBINE ITERATION: Inst(end):  %chk1 = and i1 %chk1.a, %chk1.b
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add i32 %x, 2
INSTCOMBINE ITERATION: Inst(end):  %chk2.a = icmp ult i32 %x.inc2, %length_a
INSTCOMBINE ITERATION: Inst(end):  %chk2.b = icmp ult i32 %x.inc2, %length_b
INSTCOMBINE ITERATION: Inst(end):  %chk2 = and i1 %chk2.a, %chk2.b
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add i32 %x, 3
INSTCOMBINE ITERATION: Inst(end):  %chk3.a = icmp ult i32 %x.inc3, %length_a
INSTCOMBINE ITERATION: Inst(end):  %chk3.b = icmp ult i32 %x.inc3, %length_b
INSTCOMBINE ITERATION: Inst(end):  %chk3 = and i1 %chk3.a, %chk3.b
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  ret void
chris-worklist-bb: bb: 
entry:
  %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
  %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
  %chk0.a = icmp ugt i32 %length_a, %x
  %chk0.b = icmp ugt i32 %length_b, %x
  %chk0 = and i1 %chk0.a, %chk0.b
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
  %x.inc1 = add i32 %x, 1
  %chk1.a = icmp ult i32 %x.inc1, %length_a
  %chk1.b = icmp ult i32 %x.inc1, %length_b
  %chk1 = and i1 %chk1.a, %chk1.b
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
  %x.inc2 = add i32 %x, 2
  %chk2.a = icmp ult i32 %x.inc2, %length_a
  %chk2.b = icmp ult i32 %x.inc2, %length_b
  %chk2 = and i1 %chk2.a, %chk2.b
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
  %x.inc3 = add i32 %x, 3
  %chk3.a = icmp ult i32 %x.inc3, %length_a
  %chk3.b = icmp ult i32 %x.inc3, %length_b
  %chk3 = and i1 %chk3.a, %chk3.b
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
  ret void

chris-worklist-bb: BB: 
entry:
  %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
  %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
  %chk0.a = icmp ugt i32 %length_a, %x
  %chk0.b = icmp ugt i32 %length_b, %x
  %chk0 = and i1 %chk0.a, %chk0.b
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
  %x.inc1 = add i32 %x, 1
  %chk1.a = icmp ult i32 %x.inc1, %length_a
  %chk1.b = icmp ult i32 %x.inc1, %length_b
  %chk1 = and i1 %chk1.a, %chk1.b
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
  %x.inc2 = add i32 %x, 2
  %chk2.a = icmp ult i32 %x.inc2, %length_a
  %chk2.b = icmp ult i32 %x.inc2, %length_b
  %chk2 = and i1 %chk2.a, %chk2.b
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
  %x.inc3 = add i32 %x, 3
  %chk3.a = icmp ult i32 %x.inc3, %length_a
  %chk3.b = icmp ult i32 %x.inc3, %length_b
  %chk3 = and i1 %chk3.a, %chk3.b
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
  ret void

chris-worklist-bb: BB end:   %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
chris-worklist-bb: BB end:   %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
chris-worklist-bb: BB end:   %chk0.a = icmp ugt i32 %length_a, %x
chris-worklist-bb: BB end:   %chk0.b = icmp ugt i32 %length_b, %x
chris-worklist-bb: BB end:   %chk0 = and i1 %chk0.a, %chk0.b
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc1 = add i32 %x, 1
chris-worklist-bb: BB end:   %chk1.a = icmp ult i32 %x.inc1, %length_a
chris-worklist-bb: BB end:   %chk1.b = icmp ult i32 %x.inc1, %length_b
chris-worklist-bb: BB end:   %chk1 = and i1 %chk1.a, %chk1.b
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc2 = add i32 %x, 2
chris-worklist-bb: BB end:   %chk2.a = icmp ult i32 %x.inc2, %length_a
chris-worklist-bb: BB end:   %chk2.b = icmp ult i32 %x.inc2, %length_b
chris-worklist-bb: BB end:   %chk2 = and i1 %chk2.a, %chk2.b
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc3 = add i32 %x, 3
chris-worklist-bb: BB end:   %chk3.a = icmp ult i32 %x.inc3, %length_a
chris-worklist-bb: BB end:   %chk3.b = icmp ult i32 %x.inc3, %length_b
chris-worklist-bb: BB end:   %chk3 = and i1 %chk3.a, %chk3.b
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
chris-worklist-bb: BB end:   ret void
IC: ADDING: 22 instrs to worklist
chris-AddInitialGroup: I:   ret void
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
chris-AddInitialGroup: I:   %chk3 = and i1 %chk3.a, %chk3.b
chris-AddInitialGroup: I:   %chk3.b = icmp ult i32 %x.inc3, %length_b
chris-AddInitialGroup: I:   %chk3.a = icmp ult i32 %x.inc3, %length_a
chris-AddInitialGroup: I:   %x.inc3 = add i32 %x, 3
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-AddInitialGroup: I:   %chk2 = and i1 %chk2.a, %chk2.b
chris-AddInitialGroup: I:   %chk2.b = icmp ult i32 %x.inc2, %length_b
chris-AddInitialGroup: I:   %chk2.a = icmp ult i32 %x.inc2, %length_a
chris-AddInitialGroup: I:   %x.inc2 = add i32 %x, 2
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
chris-AddInitialGroup: I:   %chk1 = and i1 %chk1.a, %chk1.b
chris-AddInitialGroup: I:   %chk1.b = icmp ult i32 %x.inc1, %length_b
chris-AddInitialGroup: I:   %chk1.a = icmp ult i32 %x.inc1, %length_a
chris-AddInitialGroup: I:   %x.inc1 = add i32 %x, 1
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-AddInitialGroup: I:   %chk0 = and i1 %chk0.a, %chk0.b
chris-AddInitialGroup: I:   %chk0.b = icmp ugt i32 %length_b, %x
chris-AddInitialGroup: I:   %chk0.a = icmp ugt i32 %length_a, %x
chris-AddInitialGroup: I:   %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
chris-AddInitialGroup: I:   %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
RemoveOne!!!
chris-RemoveOne:   %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
chris-RemoveOne: return I  %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
run: WorkList:   %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
chris-run: I=  %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
chris-run: I-end=  %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
IC: Visiting:   %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
test1: I=  %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
chris-RemoveOne: return I  %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
run: WorkList:   %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
chris-run: I=  %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
chris-run: I-end=  %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
IC: Visiting:   %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
test1: I=  %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0.a = icmp ugt i32 %length_a, %x
chris-RemoveOne: return I  %chk0.a = icmp ugt i32 %length_a, %x
run: WorkList:   %chk0.a = icmp ugt i32 %length_a, %x
chris-run: I=  %chk0.a = icmp ugt i32 %length_a, %x
chris-run: I-end=  %chk0.a = icmp ugt i32 %length_a, %x
IC: Visiting:   %chk0.a = icmp ugt i32 %length_a, %x
test1: I=  %chk0.a = icmp ugt i32 %length_a, %x
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0.b = icmp ugt i32 %length_b, %x
chris-RemoveOne: return I  %chk0.b = icmp ugt i32 %length_b, %x
run: WorkList:   %chk0.b = icmp ugt i32 %length_b, %x
chris-run: I=  %chk0.b = icmp ugt i32 %length_b, %x
chris-run: I-end=  %chk0.b = icmp ugt i32 %length_b, %x
IC: Visiting:   %chk0.b = icmp ugt i32 %length_b, %x
test1: I=  %chk0.b = icmp ugt i32 %length_b, %x
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = and i1 %chk0.a, %chk0.b
chris-RemoveOne: return I  %chk0 = and i1 %chk0.a, %chk0.b
run: WorkList:   %chk0 = and i1 %chk0.a, %chk0.b
chris-run: I=  %chk0 = and i1 %chk0.a, %chk0.b
chris-run: I-end=  %chk0 = and i1 %chk0.a, %chk0.b
IC: Visiting:   %chk0 = and i1 %chk0.a, %chk0.b
test1: I=  %chk0 = and i1 %chk0.a, %chk0.b
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = add i32 %x, 1
NextInst[0]   %chk1.a = icmp ult i32 %x.inc1, %length_a
NextInst[1]   %chk1.b = icmp ult i32 %x.inc1, %length_b
NextInst[2]   %chk1 = and i1 %chk1.a, %chk1.b
Inst[end]:   %chk1 = and i1 %chk1.a, %chk1.b
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add i32 %x, 1
chris-RemoveOne: return I  %x.inc1 = add i32 %x, 1
run: WorkList:   %x.inc1 = add i32 %x, 1
chris-run: I=  %x.inc1 = add i32 %x, 1
chris-run: I-end=  %x.inc1 = add i32 %x, 1
IC: Visiting:   %x.inc1 = add i32 %x, 1
test1: I=  %x.inc1 = add i32 %x, 1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1.a = icmp ult i32 %x.inc1, %length_a
chris-RemoveOne: return I  %chk1.a = icmp ult i32 %x.inc1, %length_a
run: WorkList:   %chk1.a = icmp ult i32 %x.inc1, %length_a
chris-run: I=  %chk1.a = icmp ult i32 %x.inc1, %length_a
chris-run: I-end=  %chk1.a = icmp ult i32 %x.inc1, %length_a
IC: Visiting:   %chk1.a = icmp ult i32 %x.inc1, %length_a
test1: I=  %chk1.a = icmp ult i32 %x.inc1, %length_a
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1.b = icmp ult i32 %x.inc1, %length_b
chris-RemoveOne: return I  %chk1.b = icmp ult i32 %x.inc1, %length_b
run: WorkList:   %chk1.b = icmp ult i32 %x.inc1, %length_b
chris-run: I=  %chk1.b = icmp ult i32 %x.inc1, %length_b
chris-run: I-end=  %chk1.b = icmp ult i32 %x.inc1, %length_b
IC: Visiting:   %chk1.b = icmp ult i32 %x.inc1, %length_b
test1: I=  %chk1.b = icmp ult i32 %x.inc1, %length_b
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = and i1 %chk1.a, %chk1.b
chris-RemoveOne: return I  %chk1 = and i1 %chk1.a, %chk1.b
run: WorkList:   %chk1 = and i1 %chk1.a, %chk1.b
chris-run: I=  %chk1 = and i1 %chk1.a, %chk1.b
chris-run: I-end=  %chk1 = and i1 %chk1.a, %chk1.b
IC: Visiting:   %chk1 = and i1 %chk1.a, %chk1.b
test1: I=  %chk1 = and i1 %chk1.a, %chk1.b
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add i32 %x, 2
NextInst[0]   %chk2.a = icmp ult i32 %x.inc2, %length_a
NextInst[1]   %chk2.b = icmp ult i32 %x.inc2, %length_b
NextInst[2]   %chk2 = and i1 %chk2.a, %chk2.b
Inst[end]:   %chk2 = and i1 %chk2.a, %chk2.b
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add i32 %x, 2
chris-RemoveOne: return I  %x.inc2 = add i32 %x, 2
run: WorkList:   %x.inc2 = add i32 %x, 2
chris-run: I=  %x.inc2 = add i32 %x, 2
chris-run: I-end=  %x.inc2 = add i32 %x, 2
IC: Visiting:   %x.inc2 = add i32 %x, 2
test1: I=  %x.inc2 = add i32 %x, 2
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2.a = icmp ult i32 %x.inc2, %length_a
chris-RemoveOne: return I  %chk2.a = icmp ult i32 %x.inc2, %length_a
run: WorkList:   %chk2.a = icmp ult i32 %x.inc2, %length_a
chris-run: I=  %chk2.a = icmp ult i32 %x.inc2, %length_a
chris-run: I-end=  %chk2.a = icmp ult i32 %x.inc2, %length_a
IC: Visiting:   %chk2.a = icmp ult i32 %x.inc2, %length_a
test1: I=  %chk2.a = icmp ult i32 %x.inc2, %length_a
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2.b = icmp ult i32 %x.inc2, %length_b
chris-RemoveOne: return I  %chk2.b = icmp ult i32 %x.inc2, %length_b
run: WorkList:   %chk2.b = icmp ult i32 %x.inc2, %length_b
chris-run: I=  %chk2.b = icmp ult i32 %x.inc2, %length_b
chris-run: I-end=  %chk2.b = icmp ult i32 %x.inc2, %length_b
IC: Visiting:   %chk2.b = icmp ult i32 %x.inc2, %length_b
test1: I=  %chk2.b = icmp ult i32 %x.inc2, %length_b
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = and i1 %chk2.a, %chk2.b
chris-RemoveOne: return I  %chk2 = and i1 %chk2.a, %chk2.b
run: WorkList:   %chk2 = and i1 %chk2.a, %chk2.b
chris-run: I=  %chk2 = and i1 %chk2.a, %chk2.b
chris-run: I-end=  %chk2 = and i1 %chk2.a, %chk2.b
IC: Visiting:   %chk2 = and i1 %chk2.a, %chk2.b
test1: I=  %chk2 = and i1 %chk2.a, %chk2.b
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add i32 %x, 3
NextInst[0]   %chk3.a = icmp ult i32 %x.inc3, %length_a
NextInst[1]   %chk3.b = icmp ult i32 %x.inc3, %length_b
NextInst[2]   %chk3 = and i1 %chk3.a, %chk3.b
Inst[end]:   %chk3 = and i1 %chk3.a, %chk3.b
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add i32 %x, 3
chris-RemoveOne: return I  %x.inc3 = add i32 %x, 3
run: WorkList:   %x.inc3 = add i32 %x, 3
chris-run: I=  %x.inc3 = add i32 %x, 3
chris-run: I-end=  %x.inc3 = add i32 %x, 3
IC: Visiting:   %x.inc3 = add i32 %x, 3
test1: I=  %x.inc3 = add i32 %x, 3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3.a = icmp ult i32 %x.inc3, %length_a
chris-RemoveOne: return I  %chk3.a = icmp ult i32 %x.inc3, %length_a
run: WorkList:   %chk3.a = icmp ult i32 %x.inc3, %length_a
chris-run: I=  %chk3.a = icmp ult i32 %x.inc3, %length_a
chris-run: I-end=  %chk3.a = icmp ult i32 %x.inc3, %length_a
IC: Visiting:   %chk3.a = icmp ult i32 %x.inc3, %length_a
test1: I=  %chk3.a = icmp ult i32 %x.inc3, %length_a
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3.b = icmp ult i32 %x.inc3, %length_b
chris-RemoveOne: return I  %chk3.b = icmp ult i32 %x.inc3, %length_b
run: WorkList:   %chk3.b = icmp ult i32 %x.inc3, %length_b
chris-run: I=  %chk3.b = icmp ult i32 %x.inc3, %length_b
chris-run: I-end=  %chk3.b = icmp ult i32 %x.inc3, %length_b
IC: Visiting:   %chk3.b = icmp ult i32 %x.inc3, %length_b
test1: I=  %chk3.b = icmp ult i32 %x.inc3, %length_b
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = and i1 %chk3.a, %chk3.b
chris-RemoveOne: return I  %chk3 = and i1 %chk3.a, %chk3.b
run: WorkList:   %chk3 = and i1 %chk3.a, %chk3.b
chris-run: I=  %chk3 = and i1 %chk3.a, %chk3.b
chris-run: I-end=  %chk3 = and i1 %chk3.a, %chk3.b
IC: Visiting:   %chk3 = and i1 %chk3.a, %chk3.b
test1: I=  %chk3 = and i1 %chk3.a, %chk3.b
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void
 ok, break
Inst[end]:   ret void
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void
chris-RemoveOne: return I  ret void
run: WorkList:   ret void
chris-run: I=  ret void
chris-run: I-end=  ret void
IC: Visiting:   ret void
test1: I=  ret void
visit: nullptr 
test3
test4
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !range !0
runOnFunction: I:  %chk0 = icmp ugt i32 %length, %x
runOnFunction: I:  %x.inc1 = add i32 %x, 1
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length
runOnFunction: I:  %0 = and i1 %chk0, %chk1
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
runOnFunction: I:  %x.inc2 = add nuw nsw i32 %x, 2
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length
runOnFunction: I:  %x.inc3 = add nuw i32 %x, 3
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length
runOnFunction: I:  %1 = and i1 %chk2, %chk3
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
runOnFunction: I:  ret void
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add i32 %x, 1
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(start):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add nuw nsw i32 %x, 2
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw i32 %x, 3
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(start):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  ret void


INSTCOMBINE ITERATION #1 on f_0
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add i32 %x, 1
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(end):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add nuw nsw i32 %x, 2
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw i32 %x, 3
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(end):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  ret void
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add nuw nsw i32 %x, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add nuw i32 %x, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add nuw nsw i32 %x, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add nuw i32 %x, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x
chris-worklist-bb: BB end:   %x.inc1 = add i32 %x, 1
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length
chris-worklist-bb: BB end:   %0 = and i1 %chk0, %chk1
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc2 = add nuw nsw i32 %x, 2
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length
chris-worklist-bb: BB end:   %x.inc3 = add nuw i32 %x, 3
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length
chris-worklist-bb: BB end:   %1 = and i1 %chk2, %chk3
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-worklist-bb: BB end:   ret void
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-AddInitialGroup: I:   %1 = and i1 %chk2, %chk3
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length
chris-AddInitialGroup: I:   %x.inc3 = add nuw i32 %x, 3
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length
chris-AddInitialGroup: I:   %x.inc2 = add nuw nsw i32 %x, 2
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-AddInitialGroup: I:   %0 = and i1 %chk0, %chk1
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length
chris-AddInitialGroup: I:   %x.inc1 = add i32 %x, 1
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !range !0
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !range !0
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !range !0
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !range !0
test1: I=  %length = load i32, i32* %length_buf, align 4, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x
run: WorkList:   %chk0 = icmp ugt i32 %length, %x
chris-run: I=  %chk0 = icmp ugt i32 %length, %x
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x
test1: I=  %chk0 = icmp ugt i32 %length, %x
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add i32 %x, 1
chris-RemoveOne: return I  %x.inc1 = add i32 %x, 1
run: WorkList:   %x.inc1 = add i32 %x, 1
chris-run: I=  %x.inc1 = add i32 %x, 1
chris-run: I-end=  %x.inc1 = add i32 %x, 1
IC: Visiting:   %x.inc1 = add i32 %x, 1
test1: I=  %x.inc1 = add i32 %x, 1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %0 = and i1 %chk0, %chk1
chris-RemoveOne: return I  %0 = and i1 %chk0, %chk1
run: WorkList:   %0 = and i1 %chk0, %chk1
chris-run: I=  %0 = and i1 %chk0, %chk1
chris-run: I-end=  %0 = and i1 %chk0, %chk1
IC: Visiting:   %0 = and i1 %chk0, %chk1
test1: I=  %0 = and i1 %chk0, %chk1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add nuw nsw i32 %x, 2
NextInst[0]   %chk2 = icmp ult i32 %x.inc2, %length
NextInst[1]   %x.inc3 = add nuw i32 %x, 3
NextInst[2]   %chk3 = icmp ult i32 %x.inc3, %length
Inst[end]:   %chk3 = icmp ult i32 %x.inc3, %length
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add nuw nsw i32 %x, 2
chris-RemoveOne: return I  %x.inc2 = add nuw nsw i32 %x, 2
run: WorkList:   %x.inc2 = add nuw nsw i32 %x, 2
chris-run: I=  %x.inc2 = add nuw nsw i32 %x, 2
chris-run: I-end=  %x.inc2 = add nuw nsw i32 %x, 2
IC: Visiting:   %x.inc2 = add nuw nsw i32 %x, 2
test1: I=  %x.inc2 = add nuw nsw i32 %x, 2
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw i32 %x, 3
chris-RemoveOne: return I  %x.inc3 = add nuw i32 %x, 3
run: WorkList:   %x.inc3 = add nuw i32 %x, 3
chris-run: I=  %x.inc3 = add nuw i32 %x, 3
chris-run: I-end=  %x.inc3 = add nuw i32 %x, 3
IC: Visiting:   %x.inc3 = add nuw i32 %x, 3
test1: I=  %x.inc3 = add nuw i32 %x, 3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %1 = and i1 %chk2, %chk3
chris-RemoveOne: return I  %1 = and i1 %chk2, %chk3
run: WorkList:   %1 = and i1 %chk2, %chk3
chris-run: I=  %1 = and i1 %chk2, %chk3
chris-run: I-end=  %1 = and i1 %chk2, %chk3
IC: Visiting:   %1 = and i1 %chk2, %chk3
test1: I=  %1 = and i1 %chk2, %chk3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void
 ok, break
Inst[end]:   ret void
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void
chris-RemoveOne: return I  ret void
run: WorkList:   ret void
chris-run: I=  ret void
chris-run: I-end=  ret void
IC: Visiting:   ret void
test1: I=  ret void
visit: nullptr 
test3
test4
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !range !0
runOnFunction: I:  %chk0 = icmp ugt i32 %length, %x
runOnFunction: I:  %x.inc1 = add i32 %x, 1
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length
runOnFunction: I:  %0 = and i1 %chk0, %chk1
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
runOnFunction: I:  %x.inc2 = add nuw nsw i32 %x, 2
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length
runOnFunction: I:  %x.inc3 = add nuw i32 %x, 3
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length
runOnFunction: I:  %1 = and i1 %chk2, %chk3
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
runOnFunction: I:  ret void
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add i32 %x, 1
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(start):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add nuw nsw i32 %x, 2
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw i32 %x, 3
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(start):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  ret void


INSTCOMBINE ITERATION #1 on f_0
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add i32 %x, 1
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(end):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add nuw nsw i32 %x, 2
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw i32 %x, 3
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(end):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  ret void
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add nuw nsw i32 %x, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add nuw i32 %x, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add nuw nsw i32 %x, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add nuw i32 %x, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x
chris-worklist-bb: BB end:   %x.inc1 = add i32 %x, 1
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length
chris-worklist-bb: BB end:   %0 = and i1 %chk0, %chk1
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc2 = add nuw nsw i32 %x, 2
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length
chris-worklist-bb: BB end:   %x.inc3 = add nuw i32 %x, 3
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length
chris-worklist-bb: BB end:   %1 = and i1 %chk2, %chk3
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-worklist-bb: BB end:   ret void
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-AddInitialGroup: I:   %1 = and i1 %chk2, %chk3
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length
chris-AddInitialGroup: I:   %x.inc3 = add nuw i32 %x, 3
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length
chris-AddInitialGroup: I:   %x.inc2 = add nuw nsw i32 %x, 2
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-AddInitialGroup: I:   %0 = and i1 %chk0, %chk1
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length
chris-AddInitialGroup: I:   %x.inc1 = add i32 %x, 1
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !range !0
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !range !0
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !range !0
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !range !0
test1: I=  %length = load i32, i32* %length_buf, align 4, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x
run: WorkList:   %chk0 = icmp ugt i32 %length, %x
chris-run: I=  %chk0 = icmp ugt i32 %length, %x
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x
test1: I=  %chk0 = icmp ugt i32 %length, %x
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add i32 %x, 1
chris-RemoveOne: return I  %x.inc1 = add i32 %x, 1
run: WorkList:   %x.inc1 = add i32 %x, 1
chris-run: I=  %x.inc1 = add i32 %x, 1
chris-run: I-end=  %x.inc1 = add i32 %x, 1
IC: Visiting:   %x.inc1 = add i32 %x, 1
test1: I=  %x.inc1 = add i32 %x, 1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %0 = and i1 %chk0, %chk1
chris-RemoveOne: return I  %0 = and i1 %chk0, %chk1
run: WorkList:   %0 = and i1 %chk0, %chk1
chris-run: I=  %0 = and i1 %chk0, %chk1
chris-run: I-end=  %0 = and i1 %chk0, %chk1
IC: Visiting:   %0 = and i1 %chk0, %chk1
test1: I=  %0 = and i1 %chk0, %chk1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add nuw nsw i32 %x, 2
NextInst[0]   %chk2 = icmp ult i32 %x.inc2, %length
NextInst[1]   %x.inc3 = add nuw i32 %x, 3
NextInst[2]   %chk3 = icmp ult i32 %x.inc3, %length
Inst[end]:   %chk3 = icmp ult i32 %x.inc3, %length
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add nuw nsw i32 %x, 2
chris-RemoveOne: return I  %x.inc2 = add nuw nsw i32 %x, 2
run: WorkList:   %x.inc2 = add nuw nsw i32 %x, 2
chris-run: I=  %x.inc2 = add nuw nsw i32 %x, 2
chris-run: I-end=  %x.inc2 = add nuw nsw i32 %x, 2
IC: Visiting:   %x.inc2 = add nuw nsw i32 %x, 2
test1: I=  %x.inc2 = add nuw nsw i32 %x, 2
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw i32 %x, 3
chris-RemoveOne: return I  %x.inc3 = add nuw i32 %x, 3
run: WorkList:   %x.inc3 = add nuw i32 %x, 3
chris-run: I=  %x.inc3 = add nuw i32 %x, 3
chris-run: I-end=  %x.inc3 = add nuw i32 %x, 3
IC: Visiting:   %x.inc3 = add nuw i32 %x, 3
test1: I=  %x.inc3 = add nuw i32 %x, 3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %1 = and i1 %chk2, %chk3
chris-RemoveOne: return I  %1 = and i1 %chk2, %chk3
run: WorkList:   %1 = and i1 %chk2, %chk3
chris-run: I=  %1 = and i1 %chk2, %chk3
chris-run: I-end=  %1 = and i1 %chk2, %chk3
IC: Visiting:   %1 = and i1 %chk2, %chk3
test1: I=  %1 = and i1 %chk2, %chk3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void
 ok, break
Inst[end]:   ret void
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void
chris-RemoveOne: return I  ret void
run: WorkList:   ret void
chris-run: I=  ret void
chris-run: I-end=  ret void
IC: Visiting:   ret void
test1: I=  ret void
visit: nullptr 
test3
test4
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !range !0
runOnFunction: I:  %chk0 = icmp ugt i32 %length, %x
runOnFunction: I:  %x.inc1 = add i32 %x, 1
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length
runOnFunction: I:  %0 = and i1 %chk0, %chk1
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
runOnFunction: I:  %x.inc2 = add nuw nsw i32 %x, 2
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length
runOnFunction: I:  %x.inc3 = add nuw i32 %x, 3
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length
runOnFunction: I:  %1 = and i1 %chk2, %chk3
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
runOnFunction: I:  ret void
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add i32 %x, 1
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(start):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add nuw nsw i32 %x, 2
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw i32 %x, 3
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(start):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  ret void


INSTCOMBINE ITERATION #1 on f_0
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add i32 %x, 1
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(end):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add nuw nsw i32 %x, 2
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw i32 %x, 3
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(end):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  ret void
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add nuw nsw i32 %x, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add nuw i32 %x, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add nuw nsw i32 %x, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add nuw i32 %x, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x
chris-worklist-bb: BB end:   %x.inc1 = add i32 %x, 1
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length
chris-worklist-bb: BB end:   %0 = and i1 %chk0, %chk1
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc2 = add nuw nsw i32 %x, 2
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length
chris-worklist-bb: BB end:   %x.inc3 = add nuw i32 %x, 3
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length
chris-worklist-bb: BB end:   %1 = and i1 %chk2, %chk3
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-worklist-bb: BB end:   ret void
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-AddInitialGroup: I:   %1 = and i1 %chk2, %chk3
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length
chris-AddInitialGroup: I:   %x.inc3 = add nuw i32 %x, 3
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length
chris-AddInitialGroup: I:   %x.inc2 = add nuw nsw i32 %x, 2
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-AddInitialGroup: I:   %0 = and i1 %chk0, %chk1
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length
chris-AddInitialGroup: I:   %x.inc1 = add i32 %x, 1
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !range !0
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !range !0
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !range !0
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !range !0
test1: I=  %length = load i32, i32* %length_buf, align 4, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x
run: WorkList:   %chk0 = icmp ugt i32 %length, %x
chris-run: I=  %chk0 = icmp ugt i32 %length, %x
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x
test1: I=  %chk0 = icmp ugt i32 %length, %x
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add i32 %x, 1
chris-RemoveOne: return I  %x.inc1 = add i32 %x, 1
run: WorkList:   %x.inc1 = add i32 %x, 1
chris-run: I=  %x.inc1 = add i32 %x, 1
chris-run: I-end=  %x.inc1 = add i32 %x, 1
IC: Visiting:   %x.inc1 = add i32 %x, 1
test1: I=  %x.inc1 = add i32 %x, 1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %0 = and i1 %chk0, %chk1
chris-RemoveOne: return I  %0 = and i1 %chk0, %chk1
run: WorkList:   %0 = and i1 %chk0, %chk1
chris-run: I=  %0 = and i1 %chk0, %chk1
chris-run: I-end=  %0 = and i1 %chk0, %chk1
IC: Visiting:   %0 = and i1 %chk0, %chk1
test1: I=  %0 = and i1 %chk0, %chk1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add nuw nsw i32 %x, 2
NextInst[0]   %chk2 = icmp ult i32 %x.inc2, %length
NextInst[1]   %x.inc3 = add nuw i32 %x, 3
NextInst[2]   %chk3 = icmp ult i32 %x.inc3, %length
Inst[end]:   %chk3 = icmp ult i32 %x.inc3, %length
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add nuw nsw i32 %x, 2
chris-RemoveOne: return I  %x.inc2 = add nuw nsw i32 %x, 2
run: WorkList:   %x.inc2 = add nuw nsw i32 %x, 2
chris-run: I=  %x.inc2 = add nuw nsw i32 %x, 2
chris-run: I-end=  %x.inc2 = add nuw nsw i32 %x, 2
IC: Visiting:   %x.inc2 = add nuw nsw i32 %x, 2
test1: I=  %x.inc2 = add nuw nsw i32 %x, 2
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw i32 %x, 3
chris-RemoveOne: return I  %x.inc3 = add nuw i32 %x, 3
run: WorkList:   %x.inc3 = add nuw i32 %x, 3
chris-run: I=  %x.inc3 = add nuw i32 %x, 3
chris-run: I-end=  %x.inc3 = add nuw i32 %x, 3
IC: Visiting:   %x.inc3 = add nuw i32 %x, 3
test1: I=  %x.inc3 = add nuw i32 %x, 3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %1 = and i1 %chk2, %chk3
chris-RemoveOne: return I  %1 = and i1 %chk2, %chk3
run: WorkList:   %1 = and i1 %chk2, %chk3
chris-run: I=  %1 = and i1 %chk2, %chk3
chris-run: I-end=  %1 = and i1 %chk2, %chk3
IC: Visiting:   %1 = and i1 %chk2, %chk3
test1: I=  %1 = and i1 %chk2, %chk3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void
 ok, break
Inst[end]:   ret void
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void
chris-RemoveOne: return I  ret void
run: WorkList:   ret void
chris-run: I=  ret void
chris-run: I-end=  ret void
IC: Visiting:   ret void
test1: I=  ret void
visit: nullptr 
test3
test4
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !range !0
runOnFunction: I:  %chk0 = icmp ugt i32 %length, %x
runOnFunction: I:  %x.inc1 = add i32 %x, 1
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length
runOnFunction: I:  %0 = and i1 %chk0, %chk1
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
runOnFunction: I:  %x.inc2 = add nuw nsw i32 %x, 2
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length
runOnFunction: I:  %x.inc3 = add nuw i32 %x, 3
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length
runOnFunction: I:  %1 = and i1 %chk2, %chk3
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
runOnFunction: I:  ret void
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add i32 %x, 1
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(start):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add nuw nsw i32 %x, 2
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw i32 %x, 3
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(start):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  ret void


INSTCOMBINE ITERATION #1 on f_0
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add i32 %x, 1
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(end):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add nuw nsw i32 %x, 2
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw i32 %x, 3
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(end):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  ret void
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add nuw nsw i32 %x, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add nuw i32 %x, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add nuw nsw i32 %x, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add nuw i32 %x, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x
chris-worklist-bb: BB end:   %x.inc1 = add i32 %x, 1
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length
chris-worklist-bb: BB end:   %0 = and i1 %chk0, %chk1
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc2 = add nuw nsw i32 %x, 2
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length
chris-worklist-bb: BB end:   %x.inc3 = add nuw i32 %x, 3
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length
chris-worklist-bb: BB end:   %1 = and i1 %chk2, %chk3
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-worklist-bb: BB end:   ret void
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-AddInitialGroup: I:   %1 = and i1 %chk2, %chk3
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length
chris-AddInitialGroup: I:   %x.inc3 = add nuw i32 %x, 3
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length
chris-AddInitialGroup: I:   %x.inc2 = add nuw nsw i32 %x, 2
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-AddInitialGroup: I:   %0 = and i1 %chk0, %chk1
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length
chris-AddInitialGroup: I:   %x.inc1 = add i32 %x, 1
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !range !0
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !range !0
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !range !0
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !range !0
test1: I=  %length = load i32, i32* %length_buf, align 4, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x
run: WorkList:   %chk0 = icmp ugt i32 %length, %x
chris-run: I=  %chk0 = icmp ugt i32 %length, %x
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x
test1: I=  %chk0 = icmp ugt i32 %length, %x
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add i32 %x, 1
chris-RemoveOne: return I  %x.inc1 = add i32 %x, 1
run: WorkList:   %x.inc1 = add i32 %x, 1
chris-run: I=  %x.inc1 = add i32 %x, 1
chris-run: I-end=  %x.inc1 = add i32 %x, 1
IC: Visiting:   %x.inc1 = add i32 %x, 1
test1: I=  %x.inc1 = add i32 %x, 1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %0 = and i1 %chk0, %chk1
chris-RemoveOne: return I  %0 = and i1 %chk0, %chk1
run: WorkList:   %0 = and i1 %chk0, %chk1
chris-run: I=  %0 = and i1 %chk0, %chk1
chris-run: I-end=  %0 = and i1 %chk0, %chk1
IC: Visiting:   %0 = and i1 %chk0, %chk1
test1: I=  %0 = and i1 %chk0, %chk1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add nuw nsw i32 %x, 2
NextInst[0]   %chk2 = icmp ult i32 %x.inc2, %length
NextInst[1]   %x.inc3 = add nuw i32 %x, 3
NextInst[2]   %chk3 = icmp ult i32 %x.inc3, %length
Inst[end]:   %chk3 = icmp ult i32 %x.inc3, %length
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add nuw nsw i32 %x, 2
chris-RemoveOne: return I  %x.inc2 = add nuw nsw i32 %x, 2
run: WorkList:   %x.inc2 = add nuw nsw i32 %x, 2
chris-run: I=  %x.inc2 = add nuw nsw i32 %x, 2
chris-run: I-end=  %x.inc2 = add nuw nsw i32 %x, 2
IC: Visiting:   %x.inc2 = add nuw nsw i32 %x, 2
test1: I=  %x.inc2 = add nuw nsw i32 %x, 2
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw i32 %x, 3
chris-RemoveOne: return I  %x.inc3 = add nuw i32 %x, 3
run: WorkList:   %x.inc3 = add nuw i32 %x, 3
chris-run: I=  %x.inc3 = add nuw i32 %x, 3
chris-run: I-end=  %x.inc3 = add nuw i32 %x, 3
IC: Visiting:   %x.inc3 = add nuw i32 %x, 3
test1: I=  %x.inc3 = add nuw i32 %x, 3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %1 = and i1 %chk2, %chk3
chris-RemoveOne: return I  %1 = and i1 %chk2, %chk3
run: WorkList:   %1 = and i1 %chk2, %chk3
chris-run: I=  %1 = and i1 %chk2, %chk3
chris-run: I-end=  %1 = and i1 %chk2, %chk3
IC: Visiting:   %1 = and i1 %chk2, %chk3
test1: I=  %1 = and i1 %chk2, %chk3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void
 ok, break
Inst[end]:   ret void
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void
chris-RemoveOne: return I  ret void
run: WorkList:   ret void
chris-run: I=  ret void
chris-run: I-end=  ret void
IC: Visiting:   ret void
test1: I=  ret void
visit: nullptr 
test3
test4
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !range !0
runOnFunction: I:  %chk0 = icmp ugt i32 %length, %x
runOnFunction: I:  %x.inc1 = add i32 %x, 1
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length
runOnFunction: I:  %0 = and i1 %chk0, %chk1
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
runOnFunction: I:  %x.inc2 = add nuw i32 %x, 3
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length
runOnFunction: I:  %x.inc3 = add nuw i32 %x, 6
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length
runOnFunction: I:  %1 = and i1 %chk2, %chk3
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
runOnFunction: I:  ret void
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add i32 %x, 1
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(start):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add nuw i32 %x, 3
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw i32 %x, 6
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(start):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  ret void


INSTCOMBINE ITERATION #1 on f_1
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add i32 %x, 1
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(end):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add nuw i32 %x, 3
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw i32 %x, 6
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(end):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  ret void
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add nuw i32 %x, 3
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add nuw i32 %x, 6
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add nuw i32 %x, 3
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add nuw i32 %x, 6
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x
chris-worklist-bb: BB end:   %x.inc1 = add i32 %x, 1
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length
chris-worklist-bb: BB end:   %0 = and i1 %chk0, %chk1
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc2 = add nuw i32 %x, 3
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length
chris-worklist-bb: BB end:   %x.inc3 = add nuw i32 %x, 6
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length
chris-worklist-bb: BB end:   %1 = and i1 %chk2, %chk3
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-worklist-bb: BB end:   ret void
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-AddInitialGroup: I:   %1 = and i1 %chk2, %chk3
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length
chris-AddInitialGroup: I:   %x.inc3 = add nuw i32 %x, 6
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length
chris-AddInitialGroup: I:   %x.inc2 = add nuw i32 %x, 3
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-AddInitialGroup: I:   %0 = and i1 %chk0, %chk1
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length
chris-AddInitialGroup: I:   %x.inc1 = add i32 %x, 1
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !range !0
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !range !0
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !range !0
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !range !0
test1: I=  %length = load i32, i32* %length_buf, align 4, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x
run: WorkList:   %chk0 = icmp ugt i32 %length, %x
chris-run: I=  %chk0 = icmp ugt i32 %length, %x
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x
test1: I=  %chk0 = icmp ugt i32 %length, %x
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add i32 %x, 1
chris-RemoveOne: return I  %x.inc1 = add i32 %x, 1
run: WorkList:   %x.inc1 = add i32 %x, 1
chris-run: I=  %x.inc1 = add i32 %x, 1
chris-run: I-end=  %x.inc1 = add i32 %x, 1
IC: Visiting:   %x.inc1 = add i32 %x, 1
test1: I=  %x.inc1 = add i32 %x, 1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %0 = and i1 %chk0, %chk1
chris-RemoveOne: return I  %0 = and i1 %chk0, %chk1
run: WorkList:   %0 = and i1 %chk0, %chk1
chris-run: I=  %0 = and i1 %chk0, %chk1
chris-run: I-end=  %0 = and i1 %chk0, %chk1
IC: Visiting:   %0 = and i1 %chk0, %chk1
test1: I=  %0 = and i1 %chk0, %chk1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add nuw i32 %x, 3
NextInst[0]   %chk2 = icmp ult i32 %x.inc2, %length
NextInst[1]   %x.inc3 = add nuw i32 %x, 6
NextInst[2]   %chk3 = icmp ult i32 %x.inc3, %length
Inst[end]:   %chk3 = icmp ult i32 %x.inc3, %length
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add nuw i32 %x, 3
chris-RemoveOne: return I  %x.inc2 = add nuw i32 %x, 3
run: WorkList:   %x.inc2 = add nuw i32 %x, 3
chris-run: I=  %x.inc2 = add nuw i32 %x, 3
chris-run: I-end=  %x.inc2 = add nuw i32 %x, 3
IC: Visiting:   %x.inc2 = add nuw i32 %x, 3
test1: I=  %x.inc2 = add nuw i32 %x, 3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw i32 %x, 6
chris-RemoveOne: return I  %x.inc3 = add nuw i32 %x, 6
run: WorkList:   %x.inc3 = add nuw i32 %x, 6
chris-run: I=  %x.inc3 = add nuw i32 %x, 6
chris-run: I-end=  %x.inc3 = add nuw i32 %x, 6
IC: Visiting:   %x.inc3 = add nuw i32 %x, 6
test1: I=  %x.inc3 = add nuw i32 %x, 6
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %1 = and i1 %chk2, %chk3
chris-RemoveOne: return I  %1 = and i1 %chk2, %chk3
run: WorkList:   %1 = and i1 %chk2, %chk3
chris-run: I=  %1 = and i1 %chk2, %chk3
chris-run: I-end=  %1 = and i1 %chk2, %chk3
IC: Visiting:   %1 = and i1 %chk2, %chk3
test1: I=  %1 = and i1 %chk2, %chk3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void
 ok, break
Inst[end]:   ret void
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void
chris-RemoveOne: return I  ret void
run: WorkList:   ret void
chris-run: I=  ret void
chris-run: I-end=  ret void
IC: Visiting:   ret void
test1: I=  ret void
visit: nullptr 
test3
test4
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !range !0
runOnFunction: I:  %chk0 = icmp ugt i32 %length, %x
runOnFunction: I:  %x.inc1 = add i32 %x, 1
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length
runOnFunction: I:  %0 = and i1 %chk0, %chk1
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
runOnFunction: I:  %x.inc2 = add nuw i32 %x, 3
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length
runOnFunction: I:  %x.inc3 = add nuw i32 %x, 6
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length
runOnFunction: I:  %1 = and i1 %chk2, %chk3
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
runOnFunction: I:  ret void
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add i32 %x, 1
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(start):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add nuw i32 %x, 3
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw i32 %x, 6
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(start):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  ret void


INSTCOMBINE ITERATION #1 on f_1
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add i32 %x, 1
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(end):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add nuw i32 %x, 3
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw i32 %x, 6
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(end):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  ret void
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add nuw i32 %x, 3
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add nuw i32 %x, 6
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add nuw i32 %x, 3
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add nuw i32 %x, 6
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x
chris-worklist-bb: BB end:   %x.inc1 = add i32 %x, 1
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length
chris-worklist-bb: BB end:   %0 = and i1 %chk0, %chk1
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc2 = add nuw i32 %x, 3
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length
chris-worklist-bb: BB end:   %x.inc3 = add nuw i32 %x, 6
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length
chris-worklist-bb: BB end:   %1 = and i1 %chk2, %chk3
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-worklist-bb: BB end:   ret void
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-AddInitialGroup: I:   %1 = and i1 %chk2, %chk3
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length
chris-AddInitialGroup: I:   %x.inc3 = add nuw i32 %x, 6
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length
chris-AddInitialGroup: I:   %x.inc2 = add nuw i32 %x, 3
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-AddInitialGroup: I:   %0 = and i1 %chk0, %chk1
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length
chris-AddInitialGroup: I:   %x.inc1 = add i32 %x, 1
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !range !0
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !range !0
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !range !0
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !range !0
test1: I=  %length = load i32, i32* %length_buf, align 4, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x
run: WorkList:   %chk0 = icmp ugt i32 %length, %x
chris-run: I=  %chk0 = icmp ugt i32 %length, %x
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x
test1: I=  %chk0 = icmp ugt i32 %length, %x
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add i32 %x, 1
chris-RemoveOne: return I  %x.inc1 = add i32 %x, 1
run: WorkList:   %x.inc1 = add i32 %x, 1
chris-run: I=  %x.inc1 = add i32 %x, 1
chris-run: I-end=  %x.inc1 = add i32 %x, 1
IC: Visiting:   %x.inc1 = add i32 %x, 1
test1: I=  %x.inc1 = add i32 %x, 1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %0 = and i1 %chk0, %chk1
chris-RemoveOne: return I  %0 = and i1 %chk0, %chk1
run: WorkList:   %0 = and i1 %chk0, %chk1
chris-run: I=  %0 = and i1 %chk0, %chk1
chris-run: I-end=  %0 = and i1 %chk0, %chk1
IC: Visiting:   %0 = and i1 %chk0, %chk1
test1: I=  %0 = and i1 %chk0, %chk1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add nuw i32 %x, 3
NextInst[0]   %chk2 = icmp ult i32 %x.inc2, %length
NextInst[1]   %x.inc3 = add nuw i32 %x, 6
NextInst[2]   %chk3 = icmp ult i32 %x.inc3, %length
Inst[end]:   %chk3 = icmp ult i32 %x.inc3, %length
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add nuw i32 %x, 3
chris-RemoveOne: return I  %x.inc2 = add nuw i32 %x, 3
run: WorkList:   %x.inc2 = add nuw i32 %x, 3
chris-run: I=  %x.inc2 = add nuw i32 %x, 3
chris-run: I-end=  %x.inc2 = add nuw i32 %x, 3
IC: Visiting:   %x.inc2 = add nuw i32 %x, 3
test1: I=  %x.inc2 = add nuw i32 %x, 3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw i32 %x, 6
chris-RemoveOne: return I  %x.inc3 = add nuw i32 %x, 6
run: WorkList:   %x.inc3 = add nuw i32 %x, 6
chris-run: I=  %x.inc3 = add nuw i32 %x, 6
chris-run: I-end=  %x.inc3 = add nuw i32 %x, 6
IC: Visiting:   %x.inc3 = add nuw i32 %x, 6
test1: I=  %x.inc3 = add nuw i32 %x, 6
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %1 = and i1 %chk2, %chk3
chris-RemoveOne: return I  %1 = and i1 %chk2, %chk3
run: WorkList:   %1 = and i1 %chk2, %chk3
chris-run: I=  %1 = and i1 %chk2, %chk3
chris-run: I-end=  %1 = and i1 %chk2, %chk3
IC: Visiting:   %1 = and i1 %chk2, %chk3
test1: I=  %1 = and i1 %chk2, %chk3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void
 ok, break
Inst[end]:   ret void
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void
chris-RemoveOne: return I  ret void
run: WorkList:   ret void
chris-run: I=  ret void
chris-run: I-end=  ret void
IC: Visiting:   ret void
test1: I=  ret void
visit: nullptr 
test3
test4
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !range !0
runOnFunction: I:  %chk0 = icmp ugt i32 %length, %x
runOnFunction: I:  %x.inc1 = add i32 %x, 1
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length
runOnFunction: I:  %0 = and i1 %chk0, %chk1
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
runOnFunction: I:  %x.inc2 = add nuw i32 %x, 3
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length
runOnFunction: I:  %x.inc3 = add nuw i32 %x, 6
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length
runOnFunction: I:  %1 = and i1 %chk2, %chk3
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
runOnFunction: I:  ret void
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add i32 %x, 1
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(start):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add nuw i32 %x, 3
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw i32 %x, 6
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(start):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  ret void


INSTCOMBINE ITERATION #1 on f_1
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add i32 %x, 1
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(end):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add nuw i32 %x, 3
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw i32 %x, 6
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(end):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  ret void
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add nuw i32 %x, 3
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add nuw i32 %x, 6
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add nuw i32 %x, 3
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add nuw i32 %x, 6
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x
chris-worklist-bb: BB end:   %x.inc1 = add i32 %x, 1
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length
chris-worklist-bb: BB end:   %0 = and i1 %chk0, %chk1
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc2 = add nuw i32 %x, 3
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length
chris-worklist-bb: BB end:   %x.inc3 = add nuw i32 %x, 6
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length
chris-worklist-bb: BB end:   %1 = and i1 %chk2, %chk3
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-worklist-bb: BB end:   ret void
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-AddInitialGroup: I:   %1 = and i1 %chk2, %chk3
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length
chris-AddInitialGroup: I:   %x.inc3 = add nuw i32 %x, 6
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length
chris-AddInitialGroup: I:   %x.inc2 = add nuw i32 %x, 3
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-AddInitialGroup: I:   %0 = and i1 %chk0, %chk1
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length
chris-AddInitialGroup: I:   %x.inc1 = add i32 %x, 1
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !range !0
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !range !0
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !range !0
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !range !0
test1: I=  %length = load i32, i32* %length_buf, align 4, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x
run: WorkList:   %chk0 = icmp ugt i32 %length, %x
chris-run: I=  %chk0 = icmp ugt i32 %length, %x
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x
test1: I=  %chk0 = icmp ugt i32 %length, %x
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add i32 %x, 1
chris-RemoveOne: return I  %x.inc1 = add i32 %x, 1
run: WorkList:   %x.inc1 = add i32 %x, 1
chris-run: I=  %x.inc1 = add i32 %x, 1
chris-run: I-end=  %x.inc1 = add i32 %x, 1
IC: Visiting:   %x.inc1 = add i32 %x, 1
test1: I=  %x.inc1 = add i32 %x, 1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %0 = and i1 %chk0, %chk1
chris-RemoveOne: return I  %0 = and i1 %chk0, %chk1
run: WorkList:   %0 = and i1 %chk0, %chk1
chris-run: I=  %0 = and i1 %chk0, %chk1
chris-run: I-end=  %0 = and i1 %chk0, %chk1
IC: Visiting:   %0 = and i1 %chk0, %chk1
test1: I=  %0 = and i1 %chk0, %chk1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add nuw i32 %x, 3
NextInst[0]   %chk2 = icmp ult i32 %x.inc2, %length
NextInst[1]   %x.inc3 = add nuw i32 %x, 6
NextInst[2]   %chk3 = icmp ult i32 %x.inc3, %length
Inst[end]:   %chk3 = icmp ult i32 %x.inc3, %length
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add nuw i32 %x, 3
chris-RemoveOne: return I  %x.inc2 = add nuw i32 %x, 3
run: WorkList:   %x.inc2 = add nuw i32 %x, 3
chris-run: I=  %x.inc2 = add nuw i32 %x, 3
chris-run: I-end=  %x.inc2 = add nuw i32 %x, 3
IC: Visiting:   %x.inc2 = add nuw i32 %x, 3
test1: I=  %x.inc2 = add nuw i32 %x, 3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw i32 %x, 6
chris-RemoveOne: return I  %x.inc3 = add nuw i32 %x, 6
run: WorkList:   %x.inc3 = add nuw i32 %x, 6
chris-run: I=  %x.inc3 = add nuw i32 %x, 6
chris-run: I-end=  %x.inc3 = add nuw i32 %x, 6
IC: Visiting:   %x.inc3 = add nuw i32 %x, 6
test1: I=  %x.inc3 = add nuw i32 %x, 6
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %1 = and i1 %chk2, %chk3
chris-RemoveOne: return I  %1 = and i1 %chk2, %chk3
run: WorkList:   %1 = and i1 %chk2, %chk3
chris-run: I=  %1 = and i1 %chk2, %chk3
chris-run: I-end=  %1 = and i1 %chk2, %chk3
IC: Visiting:   %1 = and i1 %chk2, %chk3
test1: I=  %1 = and i1 %chk2, %chk3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void
 ok, break
Inst[end]:   ret void
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void
chris-RemoveOne: return I  ret void
run: WorkList:   ret void
chris-run: I=  ret void
chris-run: I-end=  ret void
IC: Visiting:   ret void
test1: I=  ret void
visit: nullptr 
test3
test4
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !range !0
runOnFunction: I:  %chk0 = icmp ugt i32 %length, %x
runOnFunction: I:  %x.inc1 = add i32 %x, 1
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length
runOnFunction: I:  %0 = and i1 %chk0, %chk1
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
runOnFunction: I:  %x.inc2 = add nuw i32 %x, 3
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length
runOnFunction: I:  %x.inc3 = add nuw i32 %x, 6
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length
runOnFunction: I:  %1 = and i1 %chk2, %chk3
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
runOnFunction: I:  ret void
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add i32 %x, 1
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(start):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add nuw i32 %x, 3
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw i32 %x, 6
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(start):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  ret void


INSTCOMBINE ITERATION #1 on f_1
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add i32 %x, 1
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(end):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add nuw i32 %x, 3
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw i32 %x, 6
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(end):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  ret void
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add nuw i32 %x, 3
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add nuw i32 %x, 6
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add nuw i32 %x, 3
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add nuw i32 %x, 6
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x
chris-worklist-bb: BB end:   %x.inc1 = add i32 %x, 1
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length
chris-worklist-bb: BB end:   %0 = and i1 %chk0, %chk1
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc2 = add nuw i32 %x, 3
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length
chris-worklist-bb: BB end:   %x.inc3 = add nuw i32 %x, 6
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length
chris-worklist-bb: BB end:   %1 = and i1 %chk2, %chk3
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-worklist-bb: BB end:   ret void
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-AddInitialGroup: I:   %1 = and i1 %chk2, %chk3
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length
chris-AddInitialGroup: I:   %x.inc3 = add nuw i32 %x, 6
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length
chris-AddInitialGroup: I:   %x.inc2 = add nuw i32 %x, 3
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-AddInitialGroup: I:   %0 = and i1 %chk0, %chk1
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length
chris-AddInitialGroup: I:   %x.inc1 = add i32 %x, 1
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !range !0
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !range !0
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !range !0
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !range !0
test1: I=  %length = load i32, i32* %length_buf, align 4, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x
run: WorkList:   %chk0 = icmp ugt i32 %length, %x
chris-run: I=  %chk0 = icmp ugt i32 %length, %x
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x
test1: I=  %chk0 = icmp ugt i32 %length, %x
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add i32 %x, 1
chris-RemoveOne: return I  %x.inc1 = add i32 %x, 1
run: WorkList:   %x.inc1 = add i32 %x, 1
chris-run: I=  %x.inc1 = add i32 %x, 1
chris-run: I-end=  %x.inc1 = add i32 %x, 1
IC: Visiting:   %x.inc1 = add i32 %x, 1
test1: I=  %x.inc1 = add i32 %x, 1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %0 = and i1 %chk0, %chk1
chris-RemoveOne: return I  %0 = and i1 %chk0, %chk1
run: WorkList:   %0 = and i1 %chk0, %chk1
chris-run: I=  %0 = and i1 %chk0, %chk1
chris-run: I-end=  %0 = and i1 %chk0, %chk1
IC: Visiting:   %0 = and i1 %chk0, %chk1
test1: I=  %0 = and i1 %chk0, %chk1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add nuw i32 %x, 3
NextInst[0]   %chk2 = icmp ult i32 %x.inc2, %length
NextInst[1]   %x.inc3 = add nuw i32 %x, 6
NextInst[2]   %chk3 = icmp ult i32 %x.inc3, %length
Inst[end]:   %chk3 = icmp ult i32 %x.inc3, %length
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add nuw i32 %x, 3
chris-RemoveOne: return I  %x.inc2 = add nuw i32 %x, 3
run: WorkList:   %x.inc2 = add nuw i32 %x, 3
chris-run: I=  %x.inc2 = add nuw i32 %x, 3
chris-run: I-end=  %x.inc2 = add nuw i32 %x, 3
IC: Visiting:   %x.inc2 = add nuw i32 %x, 3
test1: I=  %x.inc2 = add nuw i32 %x, 3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw i32 %x, 6
chris-RemoveOne: return I  %x.inc3 = add nuw i32 %x, 6
run: WorkList:   %x.inc3 = add nuw i32 %x, 6
chris-run: I=  %x.inc3 = add nuw i32 %x, 6
chris-run: I-end=  %x.inc3 = add nuw i32 %x, 6
IC: Visiting:   %x.inc3 = add nuw i32 %x, 6
test1: I=  %x.inc3 = add nuw i32 %x, 6
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %1 = and i1 %chk2, %chk3
chris-RemoveOne: return I  %1 = and i1 %chk2, %chk3
run: WorkList:   %1 = and i1 %chk2, %chk3
chris-run: I=  %1 = and i1 %chk2, %chk3
chris-run: I-end=  %1 = and i1 %chk2, %chk3
IC: Visiting:   %1 = and i1 %chk2, %chk3
test1: I=  %1 = and i1 %chk2, %chk3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void
 ok, break
Inst[end]:   ret void
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void
chris-RemoveOne: return I  ret void
run: WorkList:   ret void
chris-run: I=  ret void
chris-run: I-end=  ret void
IC: Visiting:   ret void
test1: I=  ret void
visit: nullptr 
test3
test4
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %x = and i32 %a, -256
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !range !0
runOnFunction: I:  %chk0 = icmp ult i32 %x, %length
runOnFunction: I:  %x.inc1 = or i32 %x, 1
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length
runOnFunction: I:  %0 = and i1 %chk0, %chk1
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
runOnFunction: I:  %x.inc2 = or i32 %x, 2
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length
runOnFunction: I:  %x.inc3 = or i32 %x, 3
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length
runOnFunction: I:  %1 = and i1 %chk2, %chk3
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
runOnFunction: I:  ret void
INSTCOMBINE ITERATION: Inst(start):  %x = and i32 %a, -256
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ult i32 %x, %length
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = or i32 %x, 1
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(start):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = or i32 %x, 2
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = or i32 %x, 3
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(start):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  ret void


INSTCOMBINE ITERATION #1 on f_2
INSTCOMBINE ITERATION: Inst(end):  %x = and i32 %a, -256
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ult i32 %x, %length
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = or i32 %x, 1
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(end):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = or i32 %x, 2
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = or i32 %x, 3
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(end):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  ret void
chris-worklist-bb: bb: 
entry:
  %x = and i32 %a, -256
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ult i32 %x, %length
  %x.inc1 = or i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = or i32 %x, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = or i32 %x, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB: 
entry:
  %x = and i32 %a, -256
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ult i32 %x, %length
  %x.inc1 = or i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = or i32 %x, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = or i32 %x, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB end:   %x = and i32 %a, -256
chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-worklist-bb: BB end:   %chk0 = icmp ult i32 %x, %length
chris-worklist-bb: BB end:   %x.inc1 = or i32 %x, 1
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length
chris-worklist-bb: BB end:   %0 = and i1 %chk0, %chk1
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc2 = or i32 %x, 2
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length
chris-worklist-bb: BB end:   %x.inc3 = or i32 %x, 3
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length
chris-worklist-bb: BB end:   %1 = and i1 %chk2, %chk3
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-worklist-bb: BB end:   ret void
IC: ADDING: 14 instrs to worklist
chris-AddInitialGroup: I:   ret void
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-AddInitialGroup: I:   %1 = and i1 %chk2, %chk3
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length
chris-AddInitialGroup: I:   %x.inc3 = or i32 %x, 3
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length
chris-AddInitialGroup: I:   %x.inc2 = or i32 %x, 2
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-AddInitialGroup: I:   %0 = and i1 %chk0, %chk1
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length
chris-AddInitialGroup: I:   %x.inc1 = or i32 %x, 1
chris-AddInitialGroup: I:   %chk0 = icmp ult i32 %x, %length
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-AddInitialGroup: I:   %x = and i32 %a, -256
RemoveOne!!!
chris-RemoveOne:   %x = and i32 %a, -256
chris-RemoveOne: return I  %x = and i32 %a, -256
run: WorkList:   %x = and i32 %a, -256
chris-run: I=  %x = and i32 %a, -256
chris-run: I-end=  %x = and i32 %a, -256
IC: Visiting:   %x = and i32 %a, -256
test1: I=  %x = and i32 %a, -256
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !range !0
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !range !0
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !range !0
test1: I=  %length = load i32, i32* %length_buf, align 4, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ult i32 %x, %length
chris-RemoveOne: return I  %chk0 = icmp ult i32 %x, %length
run: WorkList:   %chk0 = icmp ult i32 %x, %length
chris-run: I=  %chk0 = icmp ult i32 %x, %length
chris-run: I-end=  %chk0 = icmp ult i32 %x, %length
IC: Visiting:   %chk0 = icmp ult i32 %x, %length
test1: I=  %chk0 = icmp ult i32 %x, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = or i32 %x, 1
chris-RemoveOne: return I  %x.inc1 = or i32 %x, 1
run: WorkList:   %x.inc1 = or i32 %x, 1
chris-run: I=  %x.inc1 = or i32 %x, 1
chris-run: I-end=  %x.inc1 = or i32 %x, 1
IC: Visiting:   %x.inc1 = or i32 %x, 1
test1: I=  %x.inc1 = or i32 %x, 1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %0 = and i1 %chk0, %chk1
chris-RemoveOne: return I  %0 = and i1 %chk0, %chk1
run: WorkList:   %0 = and i1 %chk0, %chk1
chris-run: I=  %0 = and i1 %chk0, %chk1
chris-run: I-end=  %0 = and i1 %chk0, %chk1
IC: Visiting:   %0 = and i1 %chk0, %chk1
test1: I=  %0 = and i1 %chk0, %chk1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = or i32 %x, 2
NextInst[0]   %chk2 = icmp ult i32 %x.inc2, %length
NextInst[1]   %x.inc3 = or i32 %x, 3
NextInst[2]   %chk3 = icmp ult i32 %x.inc3, %length
Inst[end]:   %chk3 = icmp ult i32 %x.inc3, %length
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = or i32 %x, 2
chris-RemoveOne: return I  %x.inc2 = or i32 %x, 2
run: WorkList:   %x.inc2 = or i32 %x, 2
chris-run: I=  %x.inc2 = or i32 %x, 2
chris-run: I-end=  %x.inc2 = or i32 %x, 2
IC: Visiting:   %x.inc2 = or i32 %x, 2
test1: I=  %x.inc2 = or i32 %x, 2
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = or i32 %x, 3
chris-RemoveOne: return I  %x.inc3 = or i32 %x, 3
run: WorkList:   %x.inc3 = or i32 %x, 3
chris-run: I=  %x.inc3 = or i32 %x, 3
chris-run: I-end=  %x.inc3 = or i32 %x, 3
IC: Visiting:   %x.inc3 = or i32 %x, 3
test1: I=  %x.inc3 = or i32 %x, 3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %1 = and i1 %chk2, %chk3
chris-RemoveOne: return I  %1 = and i1 %chk2, %chk3
run: WorkList:   %1 = and i1 %chk2, %chk3
chris-run: I=  %1 = and i1 %chk2, %chk3
chris-run: I-end=  %1 = and i1 %chk2, %chk3
IC: Visiting:   %1 = and i1 %chk2, %chk3
test1: I=  %1 = and i1 %chk2, %chk3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void
 ok, break
Inst[end]:   ret void
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void
chris-RemoveOne: return I  ret void
run: WorkList:   ret void
chris-run: I=  ret void
chris-run: I-end=  ret void
IC: Visiting:   ret void
test1: I=  ret void
visit: nullptr 
test3
test4
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %x = and i32 %a, -256
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !range !0
runOnFunction: I:  %chk0 = icmp ult i32 %x, %length
runOnFunction: I:  %x.inc1 = or i32 %x, 1
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length
runOnFunction: I:  %0 = and i1 %chk0, %chk1
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
runOnFunction: I:  %x.inc2 = or i32 %x, 2
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length
runOnFunction: I:  %x.inc3 = or i32 %x, 3
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length
runOnFunction: I:  %1 = and i1 %chk2, %chk3
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
runOnFunction: I:  ret void
INSTCOMBINE ITERATION: Inst(start):  %x = and i32 %a, -256
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ult i32 %x, %length
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = or i32 %x, 1
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(start):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = or i32 %x, 2
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = or i32 %x, 3
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(start):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  ret void


INSTCOMBINE ITERATION #1 on f_2
INSTCOMBINE ITERATION: Inst(end):  %x = and i32 %a, -256
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ult i32 %x, %length
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = or i32 %x, 1
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(end):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = or i32 %x, 2
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = or i32 %x, 3
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(end):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  ret void
chris-worklist-bb: bb: 
entry:
  %x = and i32 %a, -256
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ult i32 %x, %length
  %x.inc1 = or i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = or i32 %x, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = or i32 %x, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB: 
entry:
  %x = and i32 %a, -256
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ult i32 %x, %length
  %x.inc1 = or i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = or i32 %x, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = or i32 %x, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB end:   %x = and i32 %a, -256
chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-worklist-bb: BB end:   %chk0 = icmp ult i32 %x, %length
chris-worklist-bb: BB end:   %x.inc1 = or i32 %x, 1
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length
chris-worklist-bb: BB end:   %0 = and i1 %chk0, %chk1
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc2 = or i32 %x, 2
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length
chris-worklist-bb: BB end:   %x.inc3 = or i32 %x, 3
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length
chris-worklist-bb: BB end:   %1 = and i1 %chk2, %chk3
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-worklist-bb: BB end:   ret void
IC: ADDING: 14 instrs to worklist
chris-AddInitialGroup: I:   ret void
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-AddInitialGroup: I:   %1 = and i1 %chk2, %chk3
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length
chris-AddInitialGroup: I:   %x.inc3 = or i32 %x, 3
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length
chris-AddInitialGroup: I:   %x.inc2 = or i32 %x, 2
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-AddInitialGroup: I:   %0 = and i1 %chk0, %chk1
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length
chris-AddInitialGroup: I:   %x.inc1 = or i32 %x, 1
chris-AddInitialGroup: I:   %chk0 = icmp ult i32 %x, %length
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-AddInitialGroup: I:   %x = and i32 %a, -256
RemoveOne!!!
chris-RemoveOne:   %x = and i32 %a, -256
chris-RemoveOne: return I  %x = and i32 %a, -256
run: WorkList:   %x = and i32 %a, -256
chris-run: I=  %x = and i32 %a, -256
chris-run: I-end=  %x = and i32 %a, -256
IC: Visiting:   %x = and i32 %a, -256
test1: I=  %x = and i32 %a, -256
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !range !0
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !range !0
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !range !0
test1: I=  %length = load i32, i32* %length_buf, align 4, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ult i32 %x, %length
chris-RemoveOne: return I  %chk0 = icmp ult i32 %x, %length
run: WorkList:   %chk0 = icmp ult i32 %x, %length
chris-run: I=  %chk0 = icmp ult i32 %x, %length
chris-run: I-end=  %chk0 = icmp ult i32 %x, %length
IC: Visiting:   %chk0 = icmp ult i32 %x, %length
test1: I=  %chk0 = icmp ult i32 %x, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = or i32 %x, 1
chris-RemoveOne: return I  %x.inc1 = or i32 %x, 1
run: WorkList:   %x.inc1 = or i32 %x, 1
chris-run: I=  %x.inc1 = or i32 %x, 1
chris-run: I-end=  %x.inc1 = or i32 %x, 1
IC: Visiting:   %x.inc1 = or i32 %x, 1
test1: I=  %x.inc1 = or i32 %x, 1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %0 = and i1 %chk0, %chk1
chris-RemoveOne: return I  %0 = and i1 %chk0, %chk1
run: WorkList:   %0 = and i1 %chk0, %chk1
chris-run: I=  %0 = and i1 %chk0, %chk1
chris-run: I-end=  %0 = and i1 %chk0, %chk1
IC: Visiting:   %0 = and i1 %chk0, %chk1
test1: I=  %0 = and i1 %chk0, %chk1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = or i32 %x, 2
NextInst[0]   %chk2 = icmp ult i32 %x.inc2, %length
NextInst[1]   %x.inc3 = or i32 %x, 3
NextInst[2]   %chk3 = icmp ult i32 %x.inc3, %length
Inst[end]:   %chk3 = icmp ult i32 %x.inc3, %length
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = or i32 %x, 2
chris-RemoveOne: return I  %x.inc2 = or i32 %x, 2
run: WorkList:   %x.inc2 = or i32 %x, 2
chris-run: I=  %x.inc2 = or i32 %x, 2
chris-run: I-end=  %x.inc2 = or i32 %x, 2
IC: Visiting:   %x.inc2 = or i32 %x, 2
test1: I=  %x.inc2 = or i32 %x, 2
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = or i32 %x, 3
chris-RemoveOne: return I  %x.inc3 = or i32 %x, 3
run: WorkList:   %x.inc3 = or i32 %x, 3
chris-run: I=  %x.inc3 = or i32 %x, 3
chris-run: I-end=  %x.inc3 = or i32 %x, 3
IC: Visiting:   %x.inc3 = or i32 %x, 3
test1: I=  %x.inc3 = or i32 %x, 3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %1 = and i1 %chk2, %chk3
chris-RemoveOne: return I  %1 = and i1 %chk2, %chk3
run: WorkList:   %1 = and i1 %chk2, %chk3
chris-run: I=  %1 = and i1 %chk2, %chk3
chris-run: I-end=  %1 = and i1 %chk2, %chk3
IC: Visiting:   %1 = and i1 %chk2, %chk3
test1: I=  %1 = and i1 %chk2, %chk3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void
 ok, break
Inst[end]:   ret void
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void
chris-RemoveOne: return I  ret void
run: WorkList:   ret void
chris-run: I=  ret void
chris-run: I-end=  ret void
IC: Visiting:   ret void
test1: I=  ret void
visit: nullptr 
test3
test4
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %x = and i32 %a, -256
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !range !0
runOnFunction: I:  %chk0 = icmp ult i32 %x, %length
runOnFunction: I:  %x.inc1 = or i32 %x, 1
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length
runOnFunction: I:  %0 = and i1 %chk0, %chk1
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
runOnFunction: I:  %x.inc2 = or i32 %x, 2
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length
runOnFunction: I:  %x.inc3 = or i32 %x, 3
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length
runOnFunction: I:  %1 = and i1 %chk2, %chk3
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
runOnFunction: I:  ret void
INSTCOMBINE ITERATION: Inst(start):  %x = and i32 %a, -256
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ult i32 %x, %length
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = or i32 %x, 1
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(start):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = or i32 %x, 2
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = or i32 %x, 3
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(start):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  ret void


INSTCOMBINE ITERATION #1 on f_2
INSTCOMBINE ITERATION: Inst(end):  %x = and i32 %a, -256
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ult i32 %x, %length
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = or i32 %x, 1
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(end):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = or i32 %x, 2
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = or i32 %x, 3
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(end):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  ret void
chris-worklist-bb: bb: 
entry:
  %x = and i32 %a, -256
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ult i32 %x, %length
  %x.inc1 = or i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = or i32 %x, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = or i32 %x, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB: 
entry:
  %x = and i32 %a, -256
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ult i32 %x, %length
  %x.inc1 = or i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = or i32 %x, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = or i32 %x, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB end:   %x = and i32 %a, -256
chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-worklist-bb: BB end:   %chk0 = icmp ult i32 %x, %length
chris-worklist-bb: BB end:   %x.inc1 = or i32 %x, 1
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length
chris-worklist-bb: BB end:   %0 = and i1 %chk0, %chk1
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc2 = or i32 %x, 2
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length
chris-worklist-bb: BB end:   %x.inc3 = or i32 %x, 3
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length
chris-worklist-bb: BB end:   %1 = and i1 %chk2, %chk3
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-worklist-bb: BB end:   ret void
IC: ADDING: 14 instrs to worklist
chris-AddInitialGroup: I:   ret void
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-AddInitialGroup: I:   %1 = and i1 %chk2, %chk3
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length
chris-AddInitialGroup: I:   %x.inc3 = or i32 %x, 3
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length
chris-AddInitialGroup: I:   %x.inc2 = or i32 %x, 2
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-AddInitialGroup: I:   %0 = and i1 %chk0, %chk1
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length
chris-AddInitialGroup: I:   %x.inc1 = or i32 %x, 1
chris-AddInitialGroup: I:   %chk0 = icmp ult i32 %x, %length
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-AddInitialGroup: I:   %x = and i32 %a, -256
RemoveOne!!!
chris-RemoveOne:   %x = and i32 %a, -256
chris-RemoveOne: return I  %x = and i32 %a, -256
run: WorkList:   %x = and i32 %a, -256
chris-run: I=  %x = and i32 %a, -256
chris-run: I-end=  %x = and i32 %a, -256
IC: Visiting:   %x = and i32 %a, -256
test1: I=  %x = and i32 %a, -256
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !range !0
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !range !0
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !range !0
test1: I=  %length = load i32, i32* %length_buf, align 4, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ult i32 %x, %length
chris-RemoveOne: return I  %chk0 = icmp ult i32 %x, %length
run: WorkList:   %chk0 = icmp ult i32 %x, %length
chris-run: I=  %chk0 = icmp ult i32 %x, %length
chris-run: I-end=  %chk0 = icmp ult i32 %x, %length
IC: Visiting:   %chk0 = icmp ult i32 %x, %length
test1: I=  %chk0 = icmp ult i32 %x, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = or i32 %x, 1
chris-RemoveOne: return I  %x.inc1 = or i32 %x, 1
run: WorkList:   %x.inc1 = or i32 %x, 1
chris-run: I=  %x.inc1 = or i32 %x, 1
chris-run: I-end=  %x.inc1 = or i32 %x, 1
IC: Visiting:   %x.inc1 = or i32 %x, 1
test1: I=  %x.inc1 = or i32 %x, 1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %0 = and i1 %chk0, %chk1
chris-RemoveOne: return I  %0 = and i1 %chk0, %chk1
run: WorkList:   %0 = and i1 %chk0, %chk1
chris-run: I=  %0 = and i1 %chk0, %chk1
chris-run: I-end=  %0 = and i1 %chk0, %chk1
IC: Visiting:   %0 = and i1 %chk0, %chk1
test1: I=  %0 = and i1 %chk0, %chk1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = or i32 %x, 2
NextInst[0]   %chk2 = icmp ult i32 %x.inc2, %length
NextInst[1]   %x.inc3 = or i32 %x, 3
NextInst[2]   %chk3 = icmp ult i32 %x.inc3, %length
Inst[end]:   %chk3 = icmp ult i32 %x.inc3, %length
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = or i32 %x, 2
chris-RemoveOne: return I  %x.inc2 = or i32 %x, 2
run: WorkList:   %x.inc2 = or i32 %x, 2
chris-run: I=  %x.inc2 = or i32 %x, 2
chris-run: I-end=  %x.inc2 = or i32 %x, 2
IC: Visiting:   %x.inc2 = or i32 %x, 2
test1: I=  %x.inc2 = or i32 %x, 2
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = or i32 %x, 3
chris-RemoveOne: return I  %x.inc3 = or i32 %x, 3
run: WorkList:   %x.inc3 = or i32 %x, 3
chris-run: I=  %x.inc3 = or i32 %x, 3
chris-run: I-end=  %x.inc3 = or i32 %x, 3
IC: Visiting:   %x.inc3 = or i32 %x, 3
test1: I=  %x.inc3 = or i32 %x, 3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %1 = and i1 %chk2, %chk3
chris-RemoveOne: return I  %1 = and i1 %chk2, %chk3
run: WorkList:   %1 = and i1 %chk2, %chk3
chris-run: I=  %1 = and i1 %chk2, %chk3
chris-run: I-end=  %1 = and i1 %chk2, %chk3
IC: Visiting:   %1 = and i1 %chk2, %chk3
test1: I=  %1 = and i1 %chk2, %chk3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void
 ok, break
Inst[end]:   ret void
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void
chris-RemoveOne: return I  ret void
run: WorkList:   ret void
chris-run: I=  ret void
chris-run: I-end=  ret void
IC: Visiting:   ret void
test1: I=  ret void
visit: nullptr 
test3
test4
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %x = and i32 %a, -256
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !range !0
runOnFunction: I:  %chk0 = icmp ult i32 %x, %length
runOnFunction: I:  %x.inc1 = or i32 %x, 1
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length
runOnFunction: I:  %0 = and i1 %chk0, %chk1
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
runOnFunction: I:  %x.inc2 = or i32 %x, 2
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length
runOnFunction: I:  %x.inc3 = or i32 %x, 3
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length
runOnFunction: I:  %1 = and i1 %chk2, %chk3
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
runOnFunction: I:  ret void
INSTCOMBINE ITERATION: Inst(start):  %x = and i32 %a, -256
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ult i32 %x, %length
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = or i32 %x, 1
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(start):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = or i32 %x, 2
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = or i32 %x, 3
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(start):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  ret void


INSTCOMBINE ITERATION #1 on f_2
INSTCOMBINE ITERATION: Inst(end):  %x = and i32 %a, -256
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ult i32 %x, %length
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = or i32 %x, 1
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(end):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = or i32 %x, 2
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = or i32 %x, 3
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(end):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  ret void
chris-worklist-bb: bb: 
entry:
  %x = and i32 %a, -256
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ult i32 %x, %length
  %x.inc1 = or i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = or i32 %x, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = or i32 %x, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB: 
entry:
  %x = and i32 %a, -256
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ult i32 %x, %length
  %x.inc1 = or i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = or i32 %x, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = or i32 %x, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB end:   %x = and i32 %a, -256
chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-worklist-bb: BB end:   %chk0 = icmp ult i32 %x, %length
chris-worklist-bb: BB end:   %x.inc1 = or i32 %x, 1
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length
chris-worklist-bb: BB end:   %0 = and i1 %chk0, %chk1
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc2 = or i32 %x, 2
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length
chris-worklist-bb: BB end:   %x.inc3 = or i32 %x, 3
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length
chris-worklist-bb: BB end:   %1 = and i1 %chk2, %chk3
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-worklist-bb: BB end:   ret void
IC: ADDING: 14 instrs to worklist
chris-AddInitialGroup: I:   ret void
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-AddInitialGroup: I:   %1 = and i1 %chk2, %chk3
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length
chris-AddInitialGroup: I:   %x.inc3 = or i32 %x, 3
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length
chris-AddInitialGroup: I:   %x.inc2 = or i32 %x, 2
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-AddInitialGroup: I:   %0 = and i1 %chk0, %chk1
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length
chris-AddInitialGroup: I:   %x.inc1 = or i32 %x, 1
chris-AddInitialGroup: I:   %chk0 = icmp ult i32 %x, %length
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-AddInitialGroup: I:   %x = and i32 %a, -256
RemoveOne!!!
chris-RemoveOne:   %x = and i32 %a, -256
chris-RemoveOne: return I  %x = and i32 %a, -256
run: WorkList:   %x = and i32 %a, -256
chris-run: I=  %x = and i32 %a, -256
chris-run: I-end=  %x = and i32 %a, -256
IC: Visiting:   %x = and i32 %a, -256
test1: I=  %x = and i32 %a, -256
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !range !0
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !range !0
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !range !0
test1: I=  %length = load i32, i32* %length_buf, align 4, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ult i32 %x, %length
chris-RemoveOne: return I  %chk0 = icmp ult i32 %x, %length
run: WorkList:   %chk0 = icmp ult i32 %x, %length
chris-run: I=  %chk0 = icmp ult i32 %x, %length
chris-run: I-end=  %chk0 = icmp ult i32 %x, %length
IC: Visiting:   %chk0 = icmp ult i32 %x, %length
test1: I=  %chk0 = icmp ult i32 %x, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = or i32 %x, 1
chris-RemoveOne: return I  %x.inc1 = or i32 %x, 1
run: WorkList:   %x.inc1 = or i32 %x, 1
chris-run: I=  %x.inc1 = or i32 %x, 1
chris-run: I-end=  %x.inc1 = or i32 %x, 1
IC: Visiting:   %x.inc1 = or i32 %x, 1
test1: I=  %x.inc1 = or i32 %x, 1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %0 = and i1 %chk0, %chk1
chris-RemoveOne: return I  %0 = and i1 %chk0, %chk1
run: WorkList:   %0 = and i1 %chk0, %chk1
chris-run: I=  %0 = and i1 %chk0, %chk1
chris-run: I-end=  %0 = and i1 %chk0, %chk1
IC: Visiting:   %0 = and i1 %chk0, %chk1
test1: I=  %0 = and i1 %chk0, %chk1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = or i32 %x, 2
NextInst[0]   %chk2 = icmp ult i32 %x.inc2, %length
NextInst[1]   %x.inc3 = or i32 %x, 3
NextInst[2]   %chk3 = icmp ult i32 %x.inc3, %length
Inst[end]:   %chk3 = icmp ult i32 %x.inc3, %length
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = or i32 %x, 2
chris-RemoveOne: return I  %x.inc2 = or i32 %x, 2
run: WorkList:   %x.inc2 = or i32 %x, 2
chris-run: I=  %x.inc2 = or i32 %x, 2
chris-run: I-end=  %x.inc2 = or i32 %x, 2
IC: Visiting:   %x.inc2 = or i32 %x, 2
test1: I=  %x.inc2 = or i32 %x, 2
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = or i32 %x, 3
chris-RemoveOne: return I  %x.inc3 = or i32 %x, 3
run: WorkList:   %x.inc3 = or i32 %x, 3
chris-run: I=  %x.inc3 = or i32 %x, 3
chris-run: I-end=  %x.inc3 = or i32 %x, 3
IC: Visiting:   %x.inc3 = or i32 %x, 3
test1: I=  %x.inc3 = or i32 %x, 3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %1 = and i1 %chk2, %chk3
chris-RemoveOne: return I  %1 = and i1 %chk2, %chk3
run: WorkList:   %1 = and i1 %chk2, %chk3
chris-run: I=  %1 = and i1 %chk2, %chk3
chris-run: I-end=  %1 = and i1 %chk2, %chk3
IC: Visiting:   %1 = and i1 %chk2, %chk3
test1: I=  %1 = and i1 %chk2, %chk3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void
 ok, break
Inst[end]:   ret void
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void
chris-RemoveOne: return I  ret void
run: WorkList:   ret void
chris-run: I=  ret void
chris-run: I-end=  ret void
IC: Visiting:   ret void
test1: I=  ret void
visit: nullptr 
test3
test4
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %x = and i32 %a, -256
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !range !0
runOnFunction: I:  %chk0 = icmp ult i32 %x, %length
runOnFunction: I:  %x.inc1 = or i32 %x, 1
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length
runOnFunction: I:  %0 = and i1 %chk0, %chk1
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
runOnFunction: I:  %x.inc2 = or i32 %x, 3
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length
runOnFunction: I:  %x.inc3 = add nuw nsw i32 %x.inc2, 3
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length
runOnFunction: I:  %1 = and i1 %chk2, %chk3
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
runOnFunction: I:  ret void
INSTCOMBINE ITERATION: Inst(start):  %x = and i32 %a, -256
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ult i32 %x, %length
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = or i32 %x, 1
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(start):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = or i32 %x, 3
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw nsw i32 %x.inc2, 3
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(start):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  ret void


INSTCOMBINE ITERATION #1 on f_3
INSTCOMBINE ITERATION: Inst(end):  %x = and i32 %a, -256
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ult i32 %x, %length
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = or i32 %x, 1
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(end):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = or i32 %x, 3
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw nsw i32 %x.inc2, 3
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(end):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  ret void
chris-worklist-bb: bb: 
entry:
  %x = and i32 %a, -256
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ult i32 %x, %length
  %x.inc1 = or i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = or i32 %x, 3
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add nuw nsw i32 %x.inc2, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB: 
entry:
  %x = and i32 %a, -256
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ult i32 %x, %length
  %x.inc1 = or i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = or i32 %x, 3
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add nuw nsw i32 %x.inc2, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB end:   %x = and i32 %a, -256
chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-worklist-bb: BB end:   %chk0 = icmp ult i32 %x, %length
chris-worklist-bb: BB end:   %x.inc1 = or i32 %x, 1
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length
chris-worklist-bb: BB end:   %0 = and i1 %chk0, %chk1
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc2 = or i32 %x, 3
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length
chris-worklist-bb: BB end:   %x.inc3 = add nuw nsw i32 %x.inc2, 3
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length
chris-worklist-bb: BB end:   %1 = and i1 %chk2, %chk3
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-worklist-bb: BB end:   ret void
IC: ADDING: 14 instrs to worklist
chris-AddInitialGroup: I:   ret void
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-AddInitialGroup: I:   %1 = and i1 %chk2, %chk3
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length
chris-AddInitialGroup: I:   %x.inc3 = add nuw nsw i32 %x.inc2, 3
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length
chris-AddInitialGroup: I:   %x.inc2 = or i32 %x, 3
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-AddInitialGroup: I:   %0 = and i1 %chk0, %chk1
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length
chris-AddInitialGroup: I:   %x.inc1 = or i32 %x, 1
chris-AddInitialGroup: I:   %chk0 = icmp ult i32 %x, %length
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-AddInitialGroup: I:   %x = and i32 %a, -256
RemoveOne!!!
chris-RemoveOne:   %x = and i32 %a, -256
chris-RemoveOne: return I  %x = and i32 %a, -256
run: WorkList:   %x = and i32 %a, -256
chris-run: I=  %x = and i32 %a, -256
chris-run: I-end=  %x = and i32 %a, -256
IC: Visiting:   %x = and i32 %a, -256
test1: I=  %x = and i32 %a, -256
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !range !0
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !range !0
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !range !0
test1: I=  %length = load i32, i32* %length_buf, align 4, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ult i32 %x, %length
chris-RemoveOne: return I  %chk0 = icmp ult i32 %x, %length
run: WorkList:   %chk0 = icmp ult i32 %x, %length
chris-run: I=  %chk0 = icmp ult i32 %x, %length
chris-run: I-end=  %chk0 = icmp ult i32 %x, %length
IC: Visiting:   %chk0 = icmp ult i32 %x, %length
test1: I=  %chk0 = icmp ult i32 %x, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = or i32 %x, 1
chris-RemoveOne: return I  %x.inc1 = or i32 %x, 1
run: WorkList:   %x.inc1 = or i32 %x, 1
chris-run: I=  %x.inc1 = or i32 %x, 1
chris-run: I-end=  %x.inc1 = or i32 %x, 1
IC: Visiting:   %x.inc1 = or i32 %x, 1
test1: I=  %x.inc1 = or i32 %x, 1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %0 = and i1 %chk0, %chk1
chris-RemoveOne: return I  %0 = and i1 %chk0, %chk1
run: WorkList:   %0 = and i1 %chk0, %chk1
chris-run: I=  %0 = and i1 %chk0, %chk1
chris-run: I-end=  %0 = and i1 %chk0, %chk1
IC: Visiting:   %0 = and i1 %chk0, %chk1
test1: I=  %0 = and i1 %chk0, %chk1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = or i32 %x, 3
NextInst[0]   %chk2 = icmp ult i32 %x.inc2, %length
NextInst[1]   %x.inc3 = add nuw nsw i32 %x.inc2, 3
NextInst[2]   %chk3 = icmp ult i32 %x.inc3, %length
Inst[end]:   %chk3 = icmp ult i32 %x.inc3, %length
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = or i32 %x, 3
chris-RemoveOne: return I  %x.inc2 = or i32 %x, 3
run: WorkList:   %x.inc2 = or i32 %x, 3
chris-run: I=  %x.inc2 = or i32 %x, 3
chris-run: I-end=  %x.inc2 = or i32 %x, 3
IC: Visiting:   %x.inc2 = or i32 %x, 3
test1: I=  %x.inc2 = or i32 %x, 3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw nsw i32 %x.inc2, 3
chris-RemoveOne: return I  %x.inc3 = add nuw nsw i32 %x.inc2, 3
run: WorkList:   %x.inc3 = add nuw nsw i32 %x.inc2, 3
chris-run: I=  %x.inc3 = add nuw nsw i32 %x.inc2, 3
chris-run: I-end=  %x.inc3 = add nuw nsw i32 %x.inc2, 3
IC: Visiting:   %x.inc3 = add nuw nsw i32 %x.inc2, 3
test1: I=  %x.inc3 = add nuw nsw i32 %x.inc2, 3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %1 = and i1 %chk2, %chk3
chris-RemoveOne: return I  %1 = and i1 %chk2, %chk3
run: WorkList:   %1 = and i1 %chk2, %chk3
chris-run: I=  %1 = and i1 %chk2, %chk3
chris-run: I-end=  %1 = and i1 %chk2, %chk3
IC: Visiting:   %1 = and i1 %chk2, %chk3
test1: I=  %1 = and i1 %chk2, %chk3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void
 ok, break
Inst[end]:   ret void
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void
chris-RemoveOne: return I  ret void
run: WorkList:   ret void
chris-run: I=  ret void
chris-run: I-end=  ret void
IC: Visiting:   ret void
test1: I=  ret void
visit: nullptr 
test3
test4
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %x = and i32 %a, -256
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !range !0
runOnFunction: I:  %chk0 = icmp ult i32 %x, %length
runOnFunction: I:  %x.inc1 = or i32 %x, 1
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length
runOnFunction: I:  %0 = and i1 %chk0, %chk1
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
runOnFunction: I:  %x.inc2 = or i32 %x, 3
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length
runOnFunction: I:  %x.inc3 = add nuw nsw i32 %x.inc2, 3
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length
runOnFunction: I:  %1 = and i1 %chk2, %chk3
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
runOnFunction: I:  ret void
INSTCOMBINE ITERATION: Inst(start):  %x = and i32 %a, -256
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ult i32 %x, %length
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = or i32 %x, 1
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(start):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = or i32 %x, 3
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw nsw i32 %x.inc2, 3
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(start):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  ret void


INSTCOMBINE ITERATION #1 on f_3
INSTCOMBINE ITERATION: Inst(end):  %x = and i32 %a, -256
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ult i32 %x, %length
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = or i32 %x, 1
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(end):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = or i32 %x, 3
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw nsw i32 %x.inc2, 3
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(end):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  ret void
chris-worklist-bb: bb: 
entry:
  %x = and i32 %a, -256
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ult i32 %x, %length
  %x.inc1 = or i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = or i32 %x, 3
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add nuw nsw i32 %x.inc2, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB: 
entry:
  %x = and i32 %a, -256
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ult i32 %x, %length
  %x.inc1 = or i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = or i32 %x, 3
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add nuw nsw i32 %x.inc2, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB end:   %x = and i32 %a, -256
chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-worklist-bb: BB end:   %chk0 = icmp ult i32 %x, %length
chris-worklist-bb: BB end:   %x.inc1 = or i32 %x, 1
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length
chris-worklist-bb: BB end:   %0 = and i1 %chk0, %chk1
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc2 = or i32 %x, 3
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length
chris-worklist-bb: BB end:   %x.inc3 = add nuw nsw i32 %x.inc2, 3
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length
chris-worklist-bb: BB end:   %1 = and i1 %chk2, %chk3
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-worklist-bb: BB end:   ret void
IC: ADDING: 14 instrs to worklist
chris-AddInitialGroup: I:   ret void
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-AddInitialGroup: I:   %1 = and i1 %chk2, %chk3
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length
chris-AddInitialGroup: I:   %x.inc3 = add nuw nsw i32 %x.inc2, 3
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length
chris-AddInitialGroup: I:   %x.inc2 = or i32 %x, 3
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-AddInitialGroup: I:   %0 = and i1 %chk0, %chk1
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length
chris-AddInitialGroup: I:   %x.inc1 = or i32 %x, 1
chris-AddInitialGroup: I:   %chk0 = icmp ult i32 %x, %length
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-AddInitialGroup: I:   %x = and i32 %a, -256
RemoveOne!!!
chris-RemoveOne:   %x = and i32 %a, -256
chris-RemoveOne: return I  %x = and i32 %a, -256
run: WorkList:   %x = and i32 %a, -256
chris-run: I=  %x = and i32 %a, -256
chris-run: I-end=  %x = and i32 %a, -256
IC: Visiting:   %x = and i32 %a, -256
test1: I=  %x = and i32 %a, -256
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !range !0
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !range !0
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !range !0
test1: I=  %length = load i32, i32* %length_buf, align 4, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ult i32 %x, %length
chris-RemoveOne: return I  %chk0 = icmp ult i32 %x, %length
run: WorkList:   %chk0 = icmp ult i32 %x, %length
chris-run: I=  %chk0 = icmp ult i32 %x, %length
chris-run: I-end=  %chk0 = icmp ult i32 %x, %length
IC: Visiting:   %chk0 = icmp ult i32 %x, %length
test1: I=  %chk0 = icmp ult i32 %x, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = or i32 %x, 1
chris-RemoveOne: return I  %x.inc1 = or i32 %x, 1
run: WorkList:   %x.inc1 = or i32 %x, 1
chris-run: I=  %x.inc1 = or i32 %x, 1
chris-run: I-end=  %x.inc1 = or i32 %x, 1
IC: Visiting:   %x.inc1 = or i32 %x, 1
test1: I=  %x.inc1 = or i32 %x, 1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %0 = and i1 %chk0, %chk1
chris-RemoveOne: return I  %0 = and i1 %chk0, %chk1
run: WorkList:   %0 = and i1 %chk0, %chk1
chris-run: I=  %0 = and i1 %chk0, %chk1
chris-run: I-end=  %0 = and i1 %chk0, %chk1
IC: Visiting:   %0 = and i1 %chk0, %chk1
test1: I=  %0 = and i1 %chk0, %chk1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = or i32 %x, 3
NextInst[0]   %chk2 = icmp ult i32 %x.inc2, %length
NextInst[1]   %x.inc3 = add nuw nsw i32 %x.inc2, 3
NextInst[2]   %chk3 = icmp ult i32 %x.inc3, %length
Inst[end]:   %chk3 = icmp ult i32 %x.inc3, %length
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = or i32 %x, 3
chris-RemoveOne: return I  %x.inc2 = or i32 %x, 3
run: WorkList:   %x.inc2 = or i32 %x, 3
chris-run: I=  %x.inc2 = or i32 %x, 3
chris-run: I-end=  %x.inc2 = or i32 %x, 3
IC: Visiting:   %x.inc2 = or i32 %x, 3
test1: I=  %x.inc2 = or i32 %x, 3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw nsw i32 %x.inc2, 3
chris-RemoveOne: return I  %x.inc3 = add nuw nsw i32 %x.inc2, 3
run: WorkList:   %x.inc3 = add nuw nsw i32 %x.inc2, 3
chris-run: I=  %x.inc3 = add nuw nsw i32 %x.inc2, 3
chris-run: I-end=  %x.inc3 = add nuw nsw i32 %x.inc2, 3
IC: Visiting:   %x.inc3 = add nuw nsw i32 %x.inc2, 3
test1: I=  %x.inc3 = add nuw nsw i32 %x.inc2, 3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %1 = and i1 %chk2, %chk3
chris-RemoveOne: return I  %1 = and i1 %chk2, %chk3
run: WorkList:   %1 = and i1 %chk2, %chk3
chris-run: I=  %1 = and i1 %chk2, %chk3
chris-run: I-end=  %1 = and i1 %chk2, %chk3
IC: Visiting:   %1 = and i1 %chk2, %chk3
test1: I=  %1 = and i1 %chk2, %chk3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void
 ok, break
Inst[end]:   ret void
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void
chris-RemoveOne: return I  ret void
run: WorkList:   ret void
chris-run: I=  ret void
chris-run: I-end=  ret void
IC: Visiting:   ret void
test1: I=  ret void
visit: nullptr 
test3
test4
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %x = and i32 %a, -256
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !range !0
runOnFunction: I:  %chk0 = icmp ult i32 %x, %length
runOnFunction: I:  %x.inc1 = or i32 %x, 1
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length
runOnFunction: I:  %0 = and i1 %chk0, %chk1
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
runOnFunction: I:  %x.inc2 = or i32 %x, 3
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length
runOnFunction: I:  %x.inc3 = add nuw nsw i32 %x.inc2, 3
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length
runOnFunction: I:  %1 = and i1 %chk2, %chk3
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
runOnFunction: I:  ret void
INSTCOMBINE ITERATION: Inst(start):  %x = and i32 %a, -256
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ult i32 %x, %length
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = or i32 %x, 1
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(start):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = or i32 %x, 3
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw nsw i32 %x.inc2, 3
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(start):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  ret void


INSTCOMBINE ITERATION #1 on f_3
INSTCOMBINE ITERATION: Inst(end):  %x = and i32 %a, -256
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ult i32 %x, %length
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = or i32 %x, 1
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(end):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = or i32 %x, 3
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw nsw i32 %x.inc2, 3
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(end):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  ret void
chris-worklist-bb: bb: 
entry:
  %x = and i32 %a, -256
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ult i32 %x, %length
  %x.inc1 = or i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = or i32 %x, 3
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add nuw nsw i32 %x.inc2, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB: 
entry:
  %x = and i32 %a, -256
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ult i32 %x, %length
  %x.inc1 = or i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = or i32 %x, 3
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add nuw nsw i32 %x.inc2, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB end:   %x = and i32 %a, -256
chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-worklist-bb: BB end:   %chk0 = icmp ult i32 %x, %length
chris-worklist-bb: BB end:   %x.inc1 = or i32 %x, 1
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length
chris-worklist-bb: BB end:   %0 = and i1 %chk0, %chk1
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc2 = or i32 %x, 3
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length
chris-worklist-bb: BB end:   %x.inc3 = add nuw nsw i32 %x.inc2, 3
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length
chris-worklist-bb: BB end:   %1 = and i1 %chk2, %chk3
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-worklist-bb: BB end:   ret void
IC: ADDING: 14 instrs to worklist
chris-AddInitialGroup: I:   ret void
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-AddInitialGroup: I:   %1 = and i1 %chk2, %chk3
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length
chris-AddInitialGroup: I:   %x.inc3 = add nuw nsw i32 %x.inc2, 3
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length
chris-AddInitialGroup: I:   %x.inc2 = or i32 %x, 3
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-AddInitialGroup: I:   %0 = and i1 %chk0, %chk1
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length
chris-AddInitialGroup: I:   %x.inc1 = or i32 %x, 1
chris-AddInitialGroup: I:   %chk0 = icmp ult i32 %x, %length
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-AddInitialGroup: I:   %x = and i32 %a, -256
RemoveOne!!!
chris-RemoveOne:   %x = and i32 %a, -256
chris-RemoveOne: return I  %x = and i32 %a, -256
run: WorkList:   %x = and i32 %a, -256
chris-run: I=  %x = and i32 %a, -256
chris-run: I-end=  %x = and i32 %a, -256
IC: Visiting:   %x = and i32 %a, -256
test1: I=  %x = and i32 %a, -256
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !range !0
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !range !0
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !range !0
test1: I=  %length = load i32, i32* %length_buf, align 4, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ult i32 %x, %length
chris-RemoveOne: return I  %chk0 = icmp ult i32 %x, %length
run: WorkList:   %chk0 = icmp ult i32 %x, %length
chris-run: I=  %chk0 = icmp ult i32 %x, %length
chris-run: I-end=  %chk0 = icmp ult i32 %x, %length
IC: Visiting:   %chk0 = icmp ult i32 %x, %length
test1: I=  %chk0 = icmp ult i32 %x, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = or i32 %x, 1
chris-RemoveOne: return I  %x.inc1 = or i32 %x, 1
run: WorkList:   %x.inc1 = or i32 %x, 1
chris-run: I=  %x.inc1 = or i32 %x, 1
chris-run: I-end=  %x.inc1 = or i32 %x, 1
IC: Visiting:   %x.inc1 = or i32 %x, 1
test1: I=  %x.inc1 = or i32 %x, 1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %0 = and i1 %chk0, %chk1
chris-RemoveOne: return I  %0 = and i1 %chk0, %chk1
run: WorkList:   %0 = and i1 %chk0, %chk1
chris-run: I=  %0 = and i1 %chk0, %chk1
chris-run: I-end=  %0 = and i1 %chk0, %chk1
IC: Visiting:   %0 = and i1 %chk0, %chk1
test1: I=  %0 = and i1 %chk0, %chk1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = or i32 %x, 3
NextInst[0]   %chk2 = icmp ult i32 %x.inc2, %length
NextInst[1]   %x.inc3 = add nuw nsw i32 %x.inc2, 3
NextInst[2]   %chk3 = icmp ult i32 %x.inc3, %length
Inst[end]:   %chk3 = icmp ult i32 %x.inc3, %length
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = or i32 %x, 3
chris-RemoveOne: return I  %x.inc2 = or i32 %x, 3
run: WorkList:   %x.inc2 = or i32 %x, 3
chris-run: I=  %x.inc2 = or i32 %x, 3
chris-run: I-end=  %x.inc2 = or i32 %x, 3
IC: Visiting:   %x.inc2 = or i32 %x, 3
test1: I=  %x.inc2 = or i32 %x, 3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw nsw i32 %x.inc2, 3
chris-RemoveOne: return I  %x.inc3 = add nuw nsw i32 %x.inc2, 3
run: WorkList:   %x.inc3 = add nuw nsw i32 %x.inc2, 3
chris-run: I=  %x.inc3 = add nuw nsw i32 %x.inc2, 3
chris-run: I-end=  %x.inc3 = add nuw nsw i32 %x.inc2, 3
IC: Visiting:   %x.inc3 = add nuw nsw i32 %x.inc2, 3
test1: I=  %x.inc3 = add nuw nsw i32 %x.inc2, 3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %1 = and i1 %chk2, %chk3
chris-RemoveOne: return I  %1 = and i1 %chk2, %chk3
run: WorkList:   %1 = and i1 %chk2, %chk3
chris-run: I=  %1 = and i1 %chk2, %chk3
chris-run: I-end=  %1 = and i1 %chk2, %chk3
IC: Visiting:   %1 = and i1 %chk2, %chk3
test1: I=  %1 = and i1 %chk2, %chk3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void
 ok, break
Inst[end]:   ret void
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void
chris-RemoveOne: return I  ret void
run: WorkList:   ret void
chris-run: I=  ret void
chris-run: I-end=  ret void
IC: Visiting:   ret void
test1: I=  ret void
visit: nullptr 
test3
test4
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %x = and i32 %a, -256
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !range !0
runOnFunction: I:  %chk0 = icmp ult i32 %x, %length
runOnFunction: I:  %x.inc1 = or i32 %x, 1
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length
runOnFunction: I:  %0 = and i1 %chk0, %chk1
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
runOnFunction: I:  %x.inc2 = or i32 %x, 3
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length
runOnFunction: I:  %x.inc3 = add nuw nsw i32 %x.inc2, 3
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length
runOnFunction: I:  %1 = and i1 %chk2, %chk3
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
runOnFunction: I:  ret void
INSTCOMBINE ITERATION: Inst(start):  %x = and i32 %a, -256
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ult i32 %x, %length
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = or i32 %x, 1
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(start):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = or i32 %x, 3
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw nsw i32 %x.inc2, 3
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(start):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  ret void


INSTCOMBINE ITERATION #1 on f_3
INSTCOMBINE ITERATION: Inst(end):  %x = and i32 %a, -256
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ult i32 %x, %length
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = or i32 %x, 1
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(end):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = or i32 %x, 3
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw nsw i32 %x.inc2, 3
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(end):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  ret void
chris-worklist-bb: bb: 
entry:
  %x = and i32 %a, -256
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ult i32 %x, %length
  %x.inc1 = or i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = or i32 %x, 3
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add nuw nsw i32 %x.inc2, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB: 
entry:
  %x = and i32 %a, -256
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ult i32 %x, %length
  %x.inc1 = or i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = or i32 %x, 3
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add nuw nsw i32 %x.inc2, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB end:   %x = and i32 %a, -256
chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-worklist-bb: BB end:   %chk0 = icmp ult i32 %x, %length
chris-worklist-bb: BB end:   %x.inc1 = or i32 %x, 1
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length
chris-worklist-bb: BB end:   %0 = and i1 %chk0, %chk1
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc2 = or i32 %x, 3
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length
chris-worklist-bb: BB end:   %x.inc3 = add nuw nsw i32 %x.inc2, 3
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length
chris-worklist-bb: BB end:   %1 = and i1 %chk2, %chk3
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-worklist-bb: BB end:   ret void
IC: ADDING: 14 instrs to worklist
chris-AddInitialGroup: I:   ret void
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-AddInitialGroup: I:   %1 = and i1 %chk2, %chk3
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length
chris-AddInitialGroup: I:   %x.inc3 = add nuw nsw i32 %x.inc2, 3
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length
chris-AddInitialGroup: I:   %x.inc2 = or i32 %x, 3
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-AddInitialGroup: I:   %0 = and i1 %chk0, %chk1
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length
chris-AddInitialGroup: I:   %x.inc1 = or i32 %x, 1
chris-AddInitialGroup: I:   %chk0 = icmp ult i32 %x, %length
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-AddInitialGroup: I:   %x = and i32 %a, -256
RemoveOne!!!
chris-RemoveOne:   %x = and i32 %a, -256
chris-RemoveOne: return I  %x = and i32 %a, -256
run: WorkList:   %x = and i32 %a, -256
chris-run: I=  %x = and i32 %a, -256
chris-run: I-end=  %x = and i32 %a, -256
IC: Visiting:   %x = and i32 %a, -256
test1: I=  %x = and i32 %a, -256
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !range !0
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !range !0
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !range !0
test1: I=  %length = load i32, i32* %length_buf, align 4, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ult i32 %x, %length
chris-RemoveOne: return I  %chk0 = icmp ult i32 %x, %length
run: WorkList:   %chk0 = icmp ult i32 %x, %length
chris-run: I=  %chk0 = icmp ult i32 %x, %length
chris-run: I-end=  %chk0 = icmp ult i32 %x, %length
IC: Visiting:   %chk0 = icmp ult i32 %x, %length
test1: I=  %chk0 = icmp ult i32 %x, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = or i32 %x, 1
chris-RemoveOne: return I  %x.inc1 = or i32 %x, 1
run: WorkList:   %x.inc1 = or i32 %x, 1
chris-run: I=  %x.inc1 = or i32 %x, 1
chris-run: I-end=  %x.inc1 = or i32 %x, 1
IC: Visiting:   %x.inc1 = or i32 %x, 1
test1: I=  %x.inc1 = or i32 %x, 1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %0 = and i1 %chk0, %chk1
chris-RemoveOne: return I  %0 = and i1 %chk0, %chk1
run: WorkList:   %0 = and i1 %chk0, %chk1
chris-run: I=  %0 = and i1 %chk0, %chk1
chris-run: I-end=  %0 = and i1 %chk0, %chk1
IC: Visiting:   %0 = and i1 %chk0, %chk1
test1: I=  %0 = and i1 %chk0, %chk1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = or i32 %x, 3
NextInst[0]   %chk2 = icmp ult i32 %x.inc2, %length
NextInst[1]   %x.inc3 = add nuw nsw i32 %x.inc2, 3
NextInst[2]   %chk3 = icmp ult i32 %x.inc3, %length
Inst[end]:   %chk3 = icmp ult i32 %x.inc3, %length
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = or i32 %x, 3
chris-RemoveOne: return I  %x.inc2 = or i32 %x, 3
run: WorkList:   %x.inc2 = or i32 %x, 3
chris-run: I=  %x.inc2 = or i32 %x, 3
chris-run: I-end=  %x.inc2 = or i32 %x, 3
IC: Visiting:   %x.inc2 = or i32 %x, 3
test1: I=  %x.inc2 = or i32 %x, 3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw nsw i32 %x.inc2, 3
chris-RemoveOne: return I  %x.inc3 = add nuw nsw i32 %x.inc2, 3
run: WorkList:   %x.inc3 = add nuw nsw i32 %x.inc2, 3
chris-run: I=  %x.inc3 = add nuw nsw i32 %x.inc2, 3
chris-run: I-end=  %x.inc3 = add nuw nsw i32 %x.inc2, 3
IC: Visiting:   %x.inc3 = add nuw nsw i32 %x.inc2, 3
test1: I=  %x.inc3 = add nuw nsw i32 %x.inc2, 3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %1 = and i1 %chk2, %chk3
chris-RemoveOne: return I  %1 = and i1 %chk2, %chk3
run: WorkList:   %1 = and i1 %chk2, %chk3
chris-run: I=  %1 = and i1 %chk2, %chk3
chris-run: I-end=  %1 = and i1 %chk2, %chk3
IC: Visiting:   %1 = and i1 %chk2, %chk3
test1: I=  %1 = and i1 %chk2, %chk3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void
 ok, break
Inst[end]:   ret void
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void
chris-RemoveOne: return I  ret void
run: WorkList:   ret void
chris-run: I=  ret void
chris-run: I-end=  ret void
IC: Visiting:   ret void
test1: I=  ret void
visit: nullptr 
test3
test4
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !range !0
runOnFunction: I:  %chk0 = icmp ugt i32 %length, %x
runOnFunction: I:  %x.inc1 = add i32 %x, -1024
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length
runOnFunction: I:  %0 = and i1 %chk0, %chk1
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
runOnFunction: I:  %x.inc2 = add nuw i32 %x, 2
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length
runOnFunction: I:  %x.inc3 = add nuw i32 %x, 3
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length
runOnFunction: I:  %1 = and i1 %chk2, %chk3
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
runOnFunction: I:  ret void
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add i32 %x, -1024
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(start):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add nuw i32 %x, 2
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw i32 %x, 3
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(start):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  ret void


INSTCOMBINE ITERATION #1 on f_4
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add i32 %x, -1024
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(end):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add nuw i32 %x, 2
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw i32 %x, 3
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(end):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  ret void
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, -1024
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add nuw i32 %x, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add nuw i32 %x, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, -1024
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add nuw i32 %x, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add nuw i32 %x, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x
chris-worklist-bb: BB end:   %x.inc1 = add i32 %x, -1024
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length
chris-worklist-bb: BB end:   %0 = and i1 %chk0, %chk1
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc2 = add nuw i32 %x, 2
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length
chris-worklist-bb: BB end:   %x.inc3 = add nuw i32 %x, 3
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length
chris-worklist-bb: BB end:   %1 = and i1 %chk2, %chk3
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-worklist-bb: BB end:   ret void
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-AddInitialGroup: I:   %1 = and i1 %chk2, %chk3
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length
chris-AddInitialGroup: I:   %x.inc3 = add nuw i32 %x, 3
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length
chris-AddInitialGroup: I:   %x.inc2 = add nuw i32 %x, 2
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-AddInitialGroup: I:   %0 = and i1 %chk0, %chk1
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length
chris-AddInitialGroup: I:   %x.inc1 = add i32 %x, -1024
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !range !0
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !range !0
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !range !0
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !range !0
test1: I=  %length = load i32, i32* %length_buf, align 4, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x
run: WorkList:   %chk0 = icmp ugt i32 %length, %x
chris-run: I=  %chk0 = icmp ugt i32 %length, %x
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x
test1: I=  %chk0 = icmp ugt i32 %length, %x
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add i32 %x, -1024
chris-RemoveOne: return I  %x.inc1 = add i32 %x, -1024
run: WorkList:   %x.inc1 = add i32 %x, -1024
chris-run: I=  %x.inc1 = add i32 %x, -1024
chris-run: I-end=  %x.inc1 = add i32 %x, -1024
IC: Visiting:   %x.inc1 = add i32 %x, -1024
test1: I=  %x.inc1 = add i32 %x, -1024
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %0 = and i1 %chk0, %chk1
chris-RemoveOne: return I  %0 = and i1 %chk0, %chk1
run: WorkList:   %0 = and i1 %chk0, %chk1
chris-run: I=  %0 = and i1 %chk0, %chk1
chris-run: I-end=  %0 = and i1 %chk0, %chk1
IC: Visiting:   %0 = and i1 %chk0, %chk1
test1: I=  %0 = and i1 %chk0, %chk1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add nuw i32 %x, 2
NextInst[0]   %chk2 = icmp ult i32 %x.inc2, %length
NextInst[1]   %x.inc3 = add nuw i32 %x, 3
NextInst[2]   %chk3 = icmp ult i32 %x.inc3, %length
Inst[end]:   %chk3 = icmp ult i32 %x.inc3, %length
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add nuw i32 %x, 2
chris-RemoveOne: return I  %x.inc2 = add nuw i32 %x, 2
run: WorkList:   %x.inc2 = add nuw i32 %x, 2
chris-run: I=  %x.inc2 = add nuw i32 %x, 2
chris-run: I-end=  %x.inc2 = add nuw i32 %x, 2
IC: Visiting:   %x.inc2 = add nuw i32 %x, 2
test1: I=  %x.inc2 = add nuw i32 %x, 2
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw i32 %x, 3
chris-RemoveOne: return I  %x.inc3 = add nuw i32 %x, 3
run: WorkList:   %x.inc3 = add nuw i32 %x, 3
chris-run: I=  %x.inc3 = add nuw i32 %x, 3
chris-run: I-end=  %x.inc3 = add nuw i32 %x, 3
IC: Visiting:   %x.inc3 = add nuw i32 %x, 3
test1: I=  %x.inc3 = add nuw i32 %x, 3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %1 = and i1 %chk2, %chk3
chris-RemoveOne: return I  %1 = and i1 %chk2, %chk3
run: WorkList:   %1 = and i1 %chk2, %chk3
chris-run: I=  %1 = and i1 %chk2, %chk3
chris-run: I-end=  %1 = and i1 %chk2, %chk3
IC: Visiting:   %1 = and i1 %chk2, %chk3
test1: I=  %1 = and i1 %chk2, %chk3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void
 ok, break
Inst[end]:   ret void
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void
chris-RemoveOne: return I  ret void
run: WorkList:   ret void
chris-run: I=  ret void
chris-run: I-end=  ret void
IC: Visiting:   ret void
test1: I=  ret void
visit: nullptr 
test3
test4
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !range !0
runOnFunction: I:  %chk0 = icmp ugt i32 %length, %x
runOnFunction: I:  %x.inc1 = add i32 %x, -1024
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length
runOnFunction: I:  %0 = and i1 %chk0, %chk1
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
runOnFunction: I:  %x.inc2 = add nuw i32 %x, 2
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length
runOnFunction: I:  %x.inc3 = add nuw i32 %x, 3
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length
runOnFunction: I:  %1 = and i1 %chk2, %chk3
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
runOnFunction: I:  ret void
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add i32 %x, -1024
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(start):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add nuw i32 %x, 2
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw i32 %x, 3
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(start):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  ret void


INSTCOMBINE ITERATION #1 on f_4
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add i32 %x, -1024
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(end):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add nuw i32 %x, 2
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw i32 %x, 3
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(end):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  ret void
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, -1024
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add nuw i32 %x, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add nuw i32 %x, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, -1024
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add nuw i32 %x, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add nuw i32 %x, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x
chris-worklist-bb: BB end:   %x.inc1 = add i32 %x, -1024
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length
chris-worklist-bb: BB end:   %0 = and i1 %chk0, %chk1
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc2 = add nuw i32 %x, 2
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length
chris-worklist-bb: BB end:   %x.inc3 = add nuw i32 %x, 3
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length
chris-worklist-bb: BB end:   %1 = and i1 %chk2, %chk3
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-worklist-bb: BB end:   ret void
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-AddInitialGroup: I:   %1 = and i1 %chk2, %chk3
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length
chris-AddInitialGroup: I:   %x.inc3 = add nuw i32 %x, 3
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length
chris-AddInitialGroup: I:   %x.inc2 = add nuw i32 %x, 2
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-AddInitialGroup: I:   %0 = and i1 %chk0, %chk1
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length
chris-AddInitialGroup: I:   %x.inc1 = add i32 %x, -1024
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !range !0
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !range !0
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !range !0
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !range !0
test1: I=  %length = load i32, i32* %length_buf, align 4, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x
run: WorkList:   %chk0 = icmp ugt i32 %length, %x
chris-run: I=  %chk0 = icmp ugt i32 %length, %x
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x
test1: I=  %chk0 = icmp ugt i32 %length, %x
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add i32 %x, -1024
chris-RemoveOne: return I  %x.inc1 = add i32 %x, -1024
run: WorkList:   %x.inc1 = add i32 %x, -1024
chris-run: I=  %x.inc1 = add i32 %x, -1024
chris-run: I-end=  %x.inc1 = add i32 %x, -1024
IC: Visiting:   %x.inc1 = add i32 %x, -1024
test1: I=  %x.inc1 = add i32 %x, -1024
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %0 = and i1 %chk0, %chk1
chris-RemoveOne: return I  %0 = and i1 %chk0, %chk1
run: WorkList:   %0 = and i1 %chk0, %chk1
chris-run: I=  %0 = and i1 %chk0, %chk1
chris-run: I-end=  %0 = and i1 %chk0, %chk1
IC: Visiting:   %0 = and i1 %chk0, %chk1
test1: I=  %0 = and i1 %chk0, %chk1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add nuw i32 %x, 2
NextInst[0]   %chk2 = icmp ult i32 %x.inc2, %length
NextInst[1]   %x.inc3 = add nuw i32 %x, 3
NextInst[2]   %chk3 = icmp ult i32 %x.inc3, %length
Inst[end]:   %chk3 = icmp ult i32 %x.inc3, %length
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add nuw i32 %x, 2
chris-RemoveOne: return I  %x.inc2 = add nuw i32 %x, 2
run: WorkList:   %x.inc2 = add nuw i32 %x, 2
chris-run: I=  %x.inc2 = add nuw i32 %x, 2
chris-run: I-end=  %x.inc2 = add nuw i32 %x, 2
IC: Visiting:   %x.inc2 = add nuw i32 %x, 2
test1: I=  %x.inc2 = add nuw i32 %x, 2
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw i32 %x, 3
chris-RemoveOne: return I  %x.inc3 = add nuw i32 %x, 3
run: WorkList:   %x.inc3 = add nuw i32 %x, 3
chris-run: I=  %x.inc3 = add nuw i32 %x, 3
chris-run: I-end=  %x.inc3 = add nuw i32 %x, 3
IC: Visiting:   %x.inc3 = add nuw i32 %x, 3
test1: I=  %x.inc3 = add nuw i32 %x, 3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %1 = and i1 %chk2, %chk3
chris-RemoveOne: return I  %1 = and i1 %chk2, %chk3
run: WorkList:   %1 = and i1 %chk2, %chk3
chris-run: I=  %1 = and i1 %chk2, %chk3
chris-run: I-end=  %1 = and i1 %chk2, %chk3
IC: Visiting:   %1 = and i1 %chk2, %chk3
test1: I=  %1 = and i1 %chk2, %chk3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void
 ok, break
Inst[end]:   ret void
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void
chris-RemoveOne: return I  ret void
run: WorkList:   ret void
chris-run: I=  ret void
chris-run: I-end=  ret void
IC: Visiting:   ret void
test1: I=  ret void
visit: nullptr 
test3
test4
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !range !0
runOnFunction: I:  %chk0 = icmp ugt i32 %length, %x
runOnFunction: I:  %x.inc1 = add i32 %x, -1024
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length
runOnFunction: I:  %0 = and i1 %chk0, %chk1
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
runOnFunction: I:  %x.inc2 = add nuw i32 %x, 2
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length
runOnFunction: I:  %x.inc3 = add nuw i32 %x, 3
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length
runOnFunction: I:  %1 = and i1 %chk2, %chk3
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
runOnFunction: I:  ret void
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add i32 %x, -1024
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(start):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add nuw i32 %x, 2
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw i32 %x, 3
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(start):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  ret void


INSTCOMBINE ITERATION #1 on f_4
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add i32 %x, -1024
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(end):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add nuw i32 %x, 2
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw i32 %x, 3
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(end):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  ret void
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, -1024
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add nuw i32 %x, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add nuw i32 %x, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, -1024
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add nuw i32 %x, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add nuw i32 %x, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x
chris-worklist-bb: BB end:   %x.inc1 = add i32 %x, -1024
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length
chris-worklist-bb: BB end:   %0 = and i1 %chk0, %chk1
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc2 = add nuw i32 %x, 2
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length
chris-worklist-bb: BB end:   %x.inc3 = add nuw i32 %x, 3
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length
chris-worklist-bb: BB end:   %1 = and i1 %chk2, %chk3
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-worklist-bb: BB end:   ret void
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-AddInitialGroup: I:   %1 = and i1 %chk2, %chk3
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length
chris-AddInitialGroup: I:   %x.inc3 = add nuw i32 %x, 3
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length
chris-AddInitialGroup: I:   %x.inc2 = add nuw i32 %x, 2
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-AddInitialGroup: I:   %0 = and i1 %chk0, %chk1
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length
chris-AddInitialGroup: I:   %x.inc1 = add i32 %x, -1024
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !range !0
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !range !0
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !range !0
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !range !0
test1: I=  %length = load i32, i32* %length_buf, align 4, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x
run: WorkList:   %chk0 = icmp ugt i32 %length, %x
chris-run: I=  %chk0 = icmp ugt i32 %length, %x
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x
test1: I=  %chk0 = icmp ugt i32 %length, %x
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add i32 %x, -1024
chris-RemoveOne: return I  %x.inc1 = add i32 %x, -1024
run: WorkList:   %x.inc1 = add i32 %x, -1024
chris-run: I=  %x.inc1 = add i32 %x, -1024
chris-run: I-end=  %x.inc1 = add i32 %x, -1024
IC: Visiting:   %x.inc1 = add i32 %x, -1024
test1: I=  %x.inc1 = add i32 %x, -1024
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %0 = and i1 %chk0, %chk1
chris-RemoveOne: return I  %0 = and i1 %chk0, %chk1
run: WorkList:   %0 = and i1 %chk0, %chk1
chris-run: I=  %0 = and i1 %chk0, %chk1
chris-run: I-end=  %0 = and i1 %chk0, %chk1
IC: Visiting:   %0 = and i1 %chk0, %chk1
test1: I=  %0 = and i1 %chk0, %chk1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add nuw i32 %x, 2
NextInst[0]   %chk2 = icmp ult i32 %x.inc2, %length
NextInst[1]   %x.inc3 = add nuw i32 %x, 3
NextInst[2]   %chk3 = icmp ult i32 %x.inc3, %length
Inst[end]:   %chk3 = icmp ult i32 %x.inc3, %length
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add nuw i32 %x, 2
chris-RemoveOne: return I  %x.inc2 = add nuw i32 %x, 2
run: WorkList:   %x.inc2 = add nuw i32 %x, 2
chris-run: I=  %x.inc2 = add nuw i32 %x, 2
chris-run: I-end=  %x.inc2 = add nuw i32 %x, 2
IC: Visiting:   %x.inc2 = add nuw i32 %x, 2
test1: I=  %x.inc2 = add nuw i32 %x, 2
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw i32 %x, 3
chris-RemoveOne: return I  %x.inc3 = add nuw i32 %x, 3
run: WorkList:   %x.inc3 = add nuw i32 %x, 3
chris-run: I=  %x.inc3 = add nuw i32 %x, 3
chris-run: I-end=  %x.inc3 = add nuw i32 %x, 3
IC: Visiting:   %x.inc3 = add nuw i32 %x, 3
test1: I=  %x.inc3 = add nuw i32 %x, 3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %1 = and i1 %chk2, %chk3
chris-RemoveOne: return I  %1 = and i1 %chk2, %chk3
run: WorkList:   %1 = and i1 %chk2, %chk3
chris-run: I=  %1 = and i1 %chk2, %chk3
chris-run: I-end=  %1 = and i1 %chk2, %chk3
IC: Visiting:   %1 = and i1 %chk2, %chk3
test1: I=  %1 = and i1 %chk2, %chk3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void
 ok, break
Inst[end]:   ret void
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void
chris-RemoveOne: return I  ret void
run: WorkList:   ret void
chris-run: I=  ret void
chris-run: I-end=  ret void
IC: Visiting:   ret void
test1: I=  ret void
visit: nullptr 
test3
test4
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !range !0
runOnFunction: I:  %chk0 = icmp ugt i32 %length, %x
runOnFunction: I:  %x.inc1 = add i32 %x, -1024
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length
runOnFunction: I:  %0 = and i1 %chk0, %chk1
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
runOnFunction: I:  %x.inc2 = add nuw i32 %x, 2
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length
runOnFunction: I:  %x.inc3 = add nuw i32 %x, 3
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length
runOnFunction: I:  %1 = and i1 %chk2, %chk3
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
runOnFunction: I:  ret void
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add i32 %x, -1024
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(start):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add nuw i32 %x, 2
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw i32 %x, 3
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(start):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  ret void


INSTCOMBINE ITERATION #1 on f_4
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add i32 %x, -1024
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(end):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add nuw i32 %x, 2
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw i32 %x, 3
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(end):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  ret void
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, -1024
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add nuw i32 %x, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add nuw i32 %x, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, -1024
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add nuw i32 %x, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add nuw i32 %x, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x
chris-worklist-bb: BB end:   %x.inc1 = add i32 %x, -1024
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length
chris-worklist-bb: BB end:   %0 = and i1 %chk0, %chk1
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc2 = add nuw i32 %x, 2
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length
chris-worklist-bb: BB end:   %x.inc3 = add nuw i32 %x, 3
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length
chris-worklist-bb: BB end:   %1 = and i1 %chk2, %chk3
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-worklist-bb: BB end:   ret void
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-AddInitialGroup: I:   %1 = and i1 %chk2, %chk3
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length
chris-AddInitialGroup: I:   %x.inc3 = add nuw i32 %x, 3
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length
chris-AddInitialGroup: I:   %x.inc2 = add nuw i32 %x, 2
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-AddInitialGroup: I:   %0 = and i1 %chk0, %chk1
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length
chris-AddInitialGroup: I:   %x.inc1 = add i32 %x, -1024
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !range !0
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !range !0
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !range !0
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !range !0
test1: I=  %length = load i32, i32* %length_buf, align 4, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x
run: WorkList:   %chk0 = icmp ugt i32 %length, %x
chris-run: I=  %chk0 = icmp ugt i32 %length, %x
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x
test1: I=  %chk0 = icmp ugt i32 %length, %x
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add i32 %x, -1024
chris-RemoveOne: return I  %x.inc1 = add i32 %x, -1024
run: WorkList:   %x.inc1 = add i32 %x, -1024
chris-run: I=  %x.inc1 = add i32 %x, -1024
chris-run: I-end=  %x.inc1 = add i32 %x, -1024
IC: Visiting:   %x.inc1 = add i32 %x, -1024
test1: I=  %x.inc1 = add i32 %x, -1024
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %0 = and i1 %chk0, %chk1
chris-RemoveOne: return I  %0 = and i1 %chk0, %chk1
run: WorkList:   %0 = and i1 %chk0, %chk1
chris-run: I=  %0 = and i1 %chk0, %chk1
chris-run: I-end=  %0 = and i1 %chk0, %chk1
IC: Visiting:   %0 = and i1 %chk0, %chk1
test1: I=  %0 = and i1 %chk0, %chk1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add nuw i32 %x, 2
NextInst[0]   %chk2 = icmp ult i32 %x.inc2, %length
NextInst[1]   %x.inc3 = add nuw i32 %x, 3
NextInst[2]   %chk3 = icmp ult i32 %x.inc3, %length
Inst[end]:   %chk3 = icmp ult i32 %x.inc3, %length
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add nuw i32 %x, 2
chris-RemoveOne: return I  %x.inc2 = add nuw i32 %x, 2
run: WorkList:   %x.inc2 = add nuw i32 %x, 2
chris-run: I=  %x.inc2 = add nuw i32 %x, 2
chris-run: I-end=  %x.inc2 = add nuw i32 %x, 2
IC: Visiting:   %x.inc2 = add nuw i32 %x, 2
test1: I=  %x.inc2 = add nuw i32 %x, 2
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw i32 %x, 3
chris-RemoveOne: return I  %x.inc3 = add nuw i32 %x, 3
run: WorkList:   %x.inc3 = add nuw i32 %x, 3
chris-run: I=  %x.inc3 = add nuw i32 %x, 3
chris-run: I-end=  %x.inc3 = add nuw i32 %x, 3
IC: Visiting:   %x.inc3 = add nuw i32 %x, 3
test1: I=  %x.inc3 = add nuw i32 %x, 3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %1 = and i1 %chk2, %chk3
chris-RemoveOne: return I  %1 = and i1 %chk2, %chk3
run: WorkList:   %1 = and i1 %chk2, %chk3
chris-run: I=  %1 = and i1 %chk2, %chk3
chris-run: I-end=  %1 = and i1 %chk2, %chk3
IC: Visiting:   %1 = and i1 %chk2, %chk3
test1: I=  %1 = and i1 %chk2, %chk3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void
 ok, break
Inst[end]:   ret void
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void
chris-RemoveOne: return I  ret void
run: WorkList:   ret void
chris-run: I=  ret void
chris-run: I-end=  ret void
IC: Visiting:   ret void
test1: I=  ret void
visit: nullptr 
test3
test4
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !range !0
runOnFunction: I:  %chk0 = icmp ugt i32 %length, %x
runOnFunction: I:  %x.inc1 = add i32 %x, 1
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length
runOnFunction: I:  %0 = and i1 %chk0, %chk1
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
runOnFunction: I:  %x.inc2 = add nsw i32 %x, -199
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length
runOnFunction: I:  %x.inc3 = add nsw i32 %x, -196
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length
runOnFunction: I:  %1 = and i1 %chk2, %chk3
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
runOnFunction: I:  ret void
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add i32 %x, 1
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(start):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add nsw i32 %x, -199
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nsw i32 %x, -196
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(start):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  ret void


INSTCOMBINE ITERATION #1 on f_5
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add i32 %x, 1
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(end):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add nsw i32 %x, -199
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nsw i32 %x, -196
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(end):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  ret void
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add nsw i32 %x, -199
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add nsw i32 %x, -196
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add nsw i32 %x, -199
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add nsw i32 %x, -196
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x
chris-worklist-bb: BB end:   %x.inc1 = add i32 %x, 1
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length
chris-worklist-bb: BB end:   %0 = and i1 %chk0, %chk1
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc2 = add nsw i32 %x, -199
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length
chris-worklist-bb: BB end:   %x.inc3 = add nsw i32 %x, -196
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length
chris-worklist-bb: BB end:   %1 = and i1 %chk2, %chk3
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-worklist-bb: BB end:   ret void
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-AddInitialGroup: I:   %1 = and i1 %chk2, %chk3
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length
chris-AddInitialGroup: I:   %x.inc3 = add nsw i32 %x, -196
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length
chris-AddInitialGroup: I:   %x.inc2 = add nsw i32 %x, -199
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-AddInitialGroup: I:   %0 = and i1 %chk0, %chk1
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length
chris-AddInitialGroup: I:   %x.inc1 = add i32 %x, 1
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !range !0
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !range !0
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !range !0
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !range !0
test1: I=  %length = load i32, i32* %length_buf, align 4, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x
run: WorkList:   %chk0 = icmp ugt i32 %length, %x
chris-run: I=  %chk0 = icmp ugt i32 %length, %x
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x
test1: I=  %chk0 = icmp ugt i32 %length, %x
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add i32 %x, 1
chris-RemoveOne: return I  %x.inc1 = add i32 %x, 1
run: WorkList:   %x.inc1 = add i32 %x, 1
chris-run: I=  %x.inc1 = add i32 %x, 1
chris-run: I-end=  %x.inc1 = add i32 %x, 1
IC: Visiting:   %x.inc1 = add i32 %x, 1
test1: I=  %x.inc1 = add i32 %x, 1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %0 = and i1 %chk0, %chk1
chris-RemoveOne: return I  %0 = and i1 %chk0, %chk1
run: WorkList:   %0 = and i1 %chk0, %chk1
chris-run: I=  %0 = and i1 %chk0, %chk1
chris-run: I-end=  %0 = and i1 %chk0, %chk1
IC: Visiting:   %0 = and i1 %chk0, %chk1
test1: I=  %0 = and i1 %chk0, %chk1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add nsw i32 %x, -199
NextInst[0]   %chk2 = icmp ult i32 %x.inc2, %length
NextInst[1]   %x.inc3 = add nsw i32 %x, -196
NextInst[2]   %chk3 = icmp ult i32 %x.inc3, %length
Inst[end]:   %chk3 = icmp ult i32 %x.inc3, %length
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add nsw i32 %x, -199
chris-RemoveOne: return I  %x.inc2 = add nsw i32 %x, -199
run: WorkList:   %x.inc2 = add nsw i32 %x, -199
chris-run: I=  %x.inc2 = add nsw i32 %x, -199
chris-run: I-end=  %x.inc2 = add nsw i32 %x, -199
IC: Visiting:   %x.inc2 = add nsw i32 %x, -199
test1: I=  %x.inc2 = add nsw i32 %x, -199
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nsw i32 %x, -196
chris-RemoveOne: return I  %x.inc3 = add nsw i32 %x, -196
run: WorkList:   %x.inc3 = add nsw i32 %x, -196
chris-run: I=  %x.inc3 = add nsw i32 %x, -196
chris-run: I-end=  %x.inc3 = add nsw i32 %x, -196
IC: Visiting:   %x.inc3 = add nsw i32 %x, -196
test1: I=  %x.inc3 = add nsw i32 %x, -196
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %1 = and i1 %chk2, %chk3
chris-RemoveOne: return I  %1 = and i1 %chk2, %chk3
run: WorkList:   %1 = and i1 %chk2, %chk3
chris-run: I=  %1 = and i1 %chk2, %chk3
chris-run: I-end=  %1 = and i1 %chk2, %chk3
IC: Visiting:   %1 = and i1 %chk2, %chk3
test1: I=  %1 = and i1 %chk2, %chk3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void
 ok, break
Inst[end]:   ret void
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void
chris-RemoveOne: return I  ret void
run: WorkList:   ret void
chris-run: I=  ret void
chris-run: I-end=  ret void
IC: Visiting:   ret void
test1: I=  ret void
visit: nullptr 
test3
test4
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !range !0
runOnFunction: I:  %chk0 = icmp ugt i32 %length, %x
runOnFunction: I:  %x.inc1 = add i32 %x, 1
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length
runOnFunction: I:  %0 = and i1 %chk0, %chk1
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
runOnFunction: I:  %x.inc2 = add nsw i32 %x, -199
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length
runOnFunction: I:  %x.inc3 = add nsw i32 %x, -196
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length
runOnFunction: I:  %1 = and i1 %chk2, %chk3
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
runOnFunction: I:  ret void
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add i32 %x, 1
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(start):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add nsw i32 %x, -199
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nsw i32 %x, -196
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(start):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  ret void


INSTCOMBINE ITERATION #1 on f_5
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add i32 %x, 1
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(end):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add nsw i32 %x, -199
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nsw i32 %x, -196
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(end):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  ret void
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add nsw i32 %x, -199
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add nsw i32 %x, -196
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add nsw i32 %x, -199
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add nsw i32 %x, -196
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x
chris-worklist-bb: BB end:   %x.inc1 = add i32 %x, 1
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length
chris-worklist-bb: BB end:   %0 = and i1 %chk0, %chk1
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc2 = add nsw i32 %x, -199
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length
chris-worklist-bb: BB end:   %x.inc3 = add nsw i32 %x, -196
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length
chris-worklist-bb: BB end:   %1 = and i1 %chk2, %chk3
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-worklist-bb: BB end:   ret void
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-AddInitialGroup: I:   %1 = and i1 %chk2, %chk3
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length
chris-AddInitialGroup: I:   %x.inc3 = add nsw i32 %x, -196
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length
chris-AddInitialGroup: I:   %x.inc2 = add nsw i32 %x, -199
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-AddInitialGroup: I:   %0 = and i1 %chk0, %chk1
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length
chris-AddInitialGroup: I:   %x.inc1 = add i32 %x, 1
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !range !0
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !range !0
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !range !0
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !range !0
test1: I=  %length = load i32, i32* %length_buf, align 4, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x
run: WorkList:   %chk0 = icmp ugt i32 %length, %x
chris-run: I=  %chk0 = icmp ugt i32 %length, %x
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x
test1: I=  %chk0 = icmp ugt i32 %length, %x
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add i32 %x, 1
chris-RemoveOne: return I  %x.inc1 = add i32 %x, 1
run: WorkList:   %x.inc1 = add i32 %x, 1
chris-run: I=  %x.inc1 = add i32 %x, 1
chris-run: I-end=  %x.inc1 = add i32 %x, 1
IC: Visiting:   %x.inc1 = add i32 %x, 1
test1: I=  %x.inc1 = add i32 %x, 1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %0 = and i1 %chk0, %chk1
chris-RemoveOne: return I  %0 = and i1 %chk0, %chk1
run: WorkList:   %0 = and i1 %chk0, %chk1
chris-run: I=  %0 = and i1 %chk0, %chk1
chris-run: I-end=  %0 = and i1 %chk0, %chk1
IC: Visiting:   %0 = and i1 %chk0, %chk1
test1: I=  %0 = and i1 %chk0, %chk1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add nsw i32 %x, -199
NextInst[0]   %chk2 = icmp ult i32 %x.inc2, %length
NextInst[1]   %x.inc3 = add nsw i32 %x, -196
NextInst[2]   %chk3 = icmp ult i32 %x.inc3, %length
Inst[end]:   %chk3 = icmp ult i32 %x.inc3, %length
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add nsw i32 %x, -199
chris-RemoveOne: return I  %x.inc2 = add nsw i32 %x, -199
run: WorkList:   %x.inc2 = add nsw i32 %x, -199
chris-run: I=  %x.inc2 = add nsw i32 %x, -199
chris-run: I-end=  %x.inc2 = add nsw i32 %x, -199
IC: Visiting:   %x.inc2 = add nsw i32 %x, -199
test1: I=  %x.inc2 = add nsw i32 %x, -199
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nsw i32 %x, -196
chris-RemoveOne: return I  %x.inc3 = add nsw i32 %x, -196
run: WorkList:   %x.inc3 = add nsw i32 %x, -196
chris-run: I=  %x.inc3 = add nsw i32 %x, -196
chris-run: I-end=  %x.inc3 = add nsw i32 %x, -196
IC: Visiting:   %x.inc3 = add nsw i32 %x, -196
test1: I=  %x.inc3 = add nsw i32 %x, -196
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %1 = and i1 %chk2, %chk3
chris-RemoveOne: return I  %1 = and i1 %chk2, %chk3
run: WorkList:   %1 = and i1 %chk2, %chk3
chris-run: I=  %1 = and i1 %chk2, %chk3
chris-run: I-end=  %1 = and i1 %chk2, %chk3
IC: Visiting:   %1 = and i1 %chk2, %chk3
test1: I=  %1 = and i1 %chk2, %chk3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void
 ok, break
Inst[end]:   ret void
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void
chris-RemoveOne: return I  ret void
run: WorkList:   ret void
chris-run: I=  ret void
chris-run: I-end=  ret void
IC: Visiting:   ret void
test1: I=  ret void
visit: nullptr 
test3
test4
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !range !0
runOnFunction: I:  %chk0 = icmp ugt i32 %length, %x
runOnFunction: I:  %x.inc1 = add i32 %x, 1
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length
runOnFunction: I:  %0 = and i1 %chk0, %chk1
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
runOnFunction: I:  %x.inc2 = add nsw i32 %x, -199
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length
runOnFunction: I:  %x.inc3 = add nsw i32 %x, -196
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length
runOnFunction: I:  %1 = and i1 %chk2, %chk3
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
runOnFunction: I:  ret void
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add i32 %x, 1
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(start):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add nsw i32 %x, -199
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nsw i32 %x, -196
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(start):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  ret void


INSTCOMBINE ITERATION #1 on f_5
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add i32 %x, 1
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(end):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add nsw i32 %x, -199
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nsw i32 %x, -196
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(end):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  ret void
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add nsw i32 %x, -199
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add nsw i32 %x, -196
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add nsw i32 %x, -199
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add nsw i32 %x, -196
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x
chris-worklist-bb: BB end:   %x.inc1 = add i32 %x, 1
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length
chris-worklist-bb: BB end:   %0 = and i1 %chk0, %chk1
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc2 = add nsw i32 %x, -199
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length
chris-worklist-bb: BB end:   %x.inc3 = add nsw i32 %x, -196
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length
chris-worklist-bb: BB end:   %1 = and i1 %chk2, %chk3
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-worklist-bb: BB end:   ret void
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-AddInitialGroup: I:   %1 = and i1 %chk2, %chk3
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length
chris-AddInitialGroup: I:   %x.inc3 = add nsw i32 %x, -196
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length
chris-AddInitialGroup: I:   %x.inc2 = add nsw i32 %x, -199
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-AddInitialGroup: I:   %0 = and i1 %chk0, %chk1
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length
chris-AddInitialGroup: I:   %x.inc1 = add i32 %x, 1
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !range !0
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !range !0
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !range !0
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !range !0
test1: I=  %length = load i32, i32* %length_buf, align 4, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x
run: WorkList:   %chk0 = icmp ugt i32 %length, %x
chris-run: I=  %chk0 = icmp ugt i32 %length, %x
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x
test1: I=  %chk0 = icmp ugt i32 %length, %x
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add i32 %x, 1
chris-RemoveOne: return I  %x.inc1 = add i32 %x, 1
run: WorkList:   %x.inc1 = add i32 %x, 1
chris-run: I=  %x.inc1 = add i32 %x, 1
chris-run: I-end=  %x.inc1 = add i32 %x, 1
IC: Visiting:   %x.inc1 = add i32 %x, 1
test1: I=  %x.inc1 = add i32 %x, 1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %0 = and i1 %chk0, %chk1
chris-RemoveOne: return I  %0 = and i1 %chk0, %chk1
run: WorkList:   %0 = and i1 %chk0, %chk1
chris-run: I=  %0 = and i1 %chk0, %chk1
chris-run: I-end=  %0 = and i1 %chk0, %chk1
IC: Visiting:   %0 = and i1 %chk0, %chk1
test1: I=  %0 = and i1 %chk0, %chk1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add nsw i32 %x, -199
NextInst[0]   %chk2 = icmp ult i32 %x.inc2, %length
NextInst[1]   %x.inc3 = add nsw i32 %x, -196
NextInst[2]   %chk3 = icmp ult i32 %x.inc3, %length
Inst[end]:   %chk3 = icmp ult i32 %x.inc3, %length
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add nsw i32 %x, -199
chris-RemoveOne: return I  %x.inc2 = add nsw i32 %x, -199
run: WorkList:   %x.inc2 = add nsw i32 %x, -199
chris-run: I=  %x.inc2 = add nsw i32 %x, -199
chris-run: I-end=  %x.inc2 = add nsw i32 %x, -199
IC: Visiting:   %x.inc2 = add nsw i32 %x, -199
test1: I=  %x.inc2 = add nsw i32 %x, -199
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nsw i32 %x, -196
chris-RemoveOne: return I  %x.inc3 = add nsw i32 %x, -196
run: WorkList:   %x.inc3 = add nsw i32 %x, -196
chris-run: I=  %x.inc3 = add nsw i32 %x, -196
chris-run: I-end=  %x.inc3 = add nsw i32 %x, -196
IC: Visiting:   %x.inc3 = add nsw i32 %x, -196
test1: I=  %x.inc3 = add nsw i32 %x, -196
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %1 = and i1 %chk2, %chk3
chris-RemoveOne: return I  %1 = and i1 %chk2, %chk3
run: WorkList:   %1 = and i1 %chk2, %chk3
chris-run: I=  %1 = and i1 %chk2, %chk3
chris-run: I-end=  %1 = and i1 %chk2, %chk3
IC: Visiting:   %1 = and i1 %chk2, %chk3
test1: I=  %1 = and i1 %chk2, %chk3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void
 ok, break
Inst[end]:   ret void
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void
chris-RemoveOne: return I  ret void
run: WorkList:   ret void
chris-run: I=  ret void
chris-run: I-end=  ret void
IC: Visiting:   ret void
test1: I=  ret void
visit: nullptr 
test3
test4
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !range !0
runOnFunction: I:  %chk0 = icmp ugt i32 %length, %x
runOnFunction: I:  %x.inc1 = add i32 %x, 1
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length
runOnFunction: I:  %0 = and i1 %chk0, %chk1
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
runOnFunction: I:  %x.inc2 = add nsw i32 %x, -199
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length
runOnFunction: I:  %x.inc3 = add nsw i32 %x, -196
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length
runOnFunction: I:  %1 = and i1 %chk2, %chk3
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
runOnFunction: I:  ret void
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add i32 %x, 1
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(start):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add nsw i32 %x, -199
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nsw i32 %x, -196
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(start):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  ret void


INSTCOMBINE ITERATION #1 on f_5
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add i32 %x, 1
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(end):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add nsw i32 %x, -199
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nsw i32 %x, -196
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(end):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  ret void
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add nsw i32 %x, -199
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add nsw i32 %x, -196
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add nsw i32 %x, -199
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add nsw i32 %x, -196
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x
chris-worklist-bb: BB end:   %x.inc1 = add i32 %x, 1
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length
chris-worklist-bb: BB end:   %0 = and i1 %chk0, %chk1
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc2 = add nsw i32 %x, -199
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length
chris-worklist-bb: BB end:   %x.inc3 = add nsw i32 %x, -196
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length
chris-worklist-bb: BB end:   %1 = and i1 %chk2, %chk3
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-worklist-bb: BB end:   ret void
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-AddInitialGroup: I:   %1 = and i1 %chk2, %chk3
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length
chris-AddInitialGroup: I:   %x.inc3 = add nsw i32 %x, -196
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length
chris-AddInitialGroup: I:   %x.inc2 = add nsw i32 %x, -199
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-AddInitialGroup: I:   %0 = and i1 %chk0, %chk1
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length
chris-AddInitialGroup: I:   %x.inc1 = add i32 %x, 1
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !range !0
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !range !0
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !range !0
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !range !0
test1: I=  %length = load i32, i32* %length_buf, align 4, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x
run: WorkList:   %chk0 = icmp ugt i32 %length, %x
chris-run: I=  %chk0 = icmp ugt i32 %length, %x
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x
test1: I=  %chk0 = icmp ugt i32 %length, %x
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add i32 %x, 1
chris-RemoveOne: return I  %x.inc1 = add i32 %x, 1
run: WorkList:   %x.inc1 = add i32 %x, 1
chris-run: I=  %x.inc1 = add i32 %x, 1
chris-run: I-end=  %x.inc1 = add i32 %x, 1
IC: Visiting:   %x.inc1 = add i32 %x, 1
test1: I=  %x.inc1 = add i32 %x, 1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %0 = and i1 %chk0, %chk1
chris-RemoveOne: return I  %0 = and i1 %chk0, %chk1
run: WorkList:   %0 = and i1 %chk0, %chk1
chris-run: I=  %0 = and i1 %chk0, %chk1
chris-run: I-end=  %0 = and i1 %chk0, %chk1
IC: Visiting:   %0 = and i1 %chk0, %chk1
test1: I=  %0 = and i1 %chk0, %chk1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add nsw i32 %x, -199
NextInst[0]   %chk2 = icmp ult i32 %x.inc2, %length
NextInst[1]   %x.inc3 = add nsw i32 %x, -196
NextInst[2]   %chk3 = icmp ult i32 %x.inc3, %length
Inst[end]:   %chk3 = icmp ult i32 %x.inc3, %length
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add nsw i32 %x, -199
chris-RemoveOne: return I  %x.inc2 = add nsw i32 %x, -199
run: WorkList:   %x.inc2 = add nsw i32 %x, -199
chris-run: I=  %x.inc2 = add nsw i32 %x, -199
chris-run: I-end=  %x.inc2 = add nsw i32 %x, -199
IC: Visiting:   %x.inc2 = add nsw i32 %x, -199
test1: I=  %x.inc2 = add nsw i32 %x, -199
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nsw i32 %x, -196
chris-RemoveOne: return I  %x.inc3 = add nsw i32 %x, -196
run: WorkList:   %x.inc3 = add nsw i32 %x, -196
chris-run: I=  %x.inc3 = add nsw i32 %x, -196
chris-run: I-end=  %x.inc3 = add nsw i32 %x, -196
IC: Visiting:   %x.inc3 = add nsw i32 %x, -196
test1: I=  %x.inc3 = add nsw i32 %x, -196
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %1 = and i1 %chk2, %chk3
chris-RemoveOne: return I  %1 = and i1 %chk2, %chk3
run: WorkList:   %1 = and i1 %chk2, %chk3
chris-run: I=  %1 = and i1 %chk2, %chk3
chris-run: I-end=  %1 = and i1 %chk2, %chk3
IC: Visiting:   %1 = and i1 %chk2, %chk3
test1: I=  %1 = and i1 %chk2, %chk3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void
 ok, break
Inst[end]:   ret void
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void
chris-RemoveOne: return I  ret void
run: WorkList:   ret void
chris-run: I=  ret void
chris-run: I-end=  ret void
IC: Visiting:   ret void
test1: I=  ret void
visit: nullptr 
test3
test4
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !range !0
runOnFunction: I:  %chk0 = icmp ugt i32 %length, %x
runOnFunction: I:  %x.inc1 = add i32 %x, -2147483647
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length
runOnFunction: I:  %0 = and i1 %chk0, %chk1
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
runOnFunction: I:  %x.inc2 = add i32 %x, 2
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length
runOnFunction: I:  %x.inc3 = add i32 %x, 3
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length
runOnFunction: I:  %1 = and i1 %chk2, %chk3
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
runOnFunction: I:  ret void
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add i32 %x, -2147483647
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(start):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add i32 %x, 2
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add i32 %x, 3
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(start):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  ret void


INSTCOMBINE ITERATION #1 on f_6
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add i32 %x, -2147483647
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(end):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add i32 %x, 2
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add i32 %x, 3
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(end):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  ret void
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, -2147483647
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add i32 %x, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add i32 %x, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, -2147483647
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add i32 %x, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add i32 %x, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x
chris-worklist-bb: BB end:   %x.inc1 = add i32 %x, -2147483647
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length
chris-worklist-bb: BB end:   %0 = and i1 %chk0, %chk1
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc2 = add i32 %x, 2
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length
chris-worklist-bb: BB end:   %x.inc3 = add i32 %x, 3
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length
chris-worklist-bb: BB end:   %1 = and i1 %chk2, %chk3
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-worklist-bb: BB end:   ret void
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-AddInitialGroup: I:   %1 = and i1 %chk2, %chk3
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length
chris-AddInitialGroup: I:   %x.inc3 = add i32 %x, 3
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length
chris-AddInitialGroup: I:   %x.inc2 = add i32 %x, 2
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-AddInitialGroup: I:   %0 = and i1 %chk0, %chk1
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length
chris-AddInitialGroup: I:   %x.inc1 = add i32 %x, -2147483647
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !range !0
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !range !0
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !range !0
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !range !0
test1: I=  %length = load i32, i32* %length_buf, align 4, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x
run: WorkList:   %chk0 = icmp ugt i32 %length, %x
chris-run: I=  %chk0 = icmp ugt i32 %length, %x
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x
test1: I=  %chk0 = icmp ugt i32 %length, %x
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add i32 %x, -2147483647
chris-RemoveOne: return I  %x.inc1 = add i32 %x, -2147483647
run: WorkList:   %x.inc1 = add i32 %x, -2147483647
chris-run: I=  %x.inc1 = add i32 %x, -2147483647
chris-run: I-end=  %x.inc1 = add i32 %x, -2147483647
IC: Visiting:   %x.inc1 = add i32 %x, -2147483647
test1: I=  %x.inc1 = add i32 %x, -2147483647
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %0 = and i1 %chk0, %chk1
chris-RemoveOne: return I  %0 = and i1 %chk0, %chk1
run: WorkList:   %0 = and i1 %chk0, %chk1
chris-run: I=  %0 = and i1 %chk0, %chk1
chris-run: I-end=  %0 = and i1 %chk0, %chk1
IC: Visiting:   %0 = and i1 %chk0, %chk1
test1: I=  %0 = and i1 %chk0, %chk1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add i32 %x, 2
NextInst[0]   %chk2 = icmp ult i32 %x.inc2, %length
NextInst[1]   %x.inc3 = add i32 %x, 3
NextInst[2]   %chk3 = icmp ult i32 %x.inc3, %length
Inst[end]:   %chk3 = icmp ult i32 %x.inc3, %length
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add i32 %x, 2
chris-RemoveOne: return I  %x.inc2 = add i32 %x, 2
run: WorkList:   %x.inc2 = add i32 %x, 2
chris-run: I=  %x.inc2 = add i32 %x, 2
chris-run: I-end=  %x.inc2 = add i32 %x, 2
IC: Visiting:   %x.inc2 = add i32 %x, 2
test1: I=  %x.inc2 = add i32 %x, 2
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add i32 %x, 3
chris-RemoveOne: return I  %x.inc3 = add i32 %x, 3
run: WorkList:   %x.inc3 = add i32 %x, 3
chris-run: I=  %x.inc3 = add i32 %x, 3
chris-run: I-end=  %x.inc3 = add i32 %x, 3
IC: Visiting:   %x.inc3 = add i32 %x, 3
test1: I=  %x.inc3 = add i32 %x, 3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %1 = and i1 %chk2, %chk3
chris-RemoveOne: return I  %1 = and i1 %chk2, %chk3
run: WorkList:   %1 = and i1 %chk2, %chk3
chris-run: I=  %1 = and i1 %chk2, %chk3
chris-run: I-end=  %1 = and i1 %chk2, %chk3
IC: Visiting:   %1 = and i1 %chk2, %chk3
test1: I=  %1 = and i1 %chk2, %chk3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void
 ok, break
Inst[end]:   ret void
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void
chris-RemoveOne: return I  ret void
run: WorkList:   ret void
chris-run: I=  ret void
chris-run: I-end=  ret void
IC: Visiting:   ret void
test1: I=  ret void
visit: nullptr 
test3
test4
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !range !0
runOnFunction: I:  %chk0 = icmp ugt i32 %length, %x
runOnFunction: I:  %x.inc1 = add i32 %x, -2147483647
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length
runOnFunction: I:  %0 = and i1 %chk0, %chk1
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
runOnFunction: I:  %x.inc2 = add i32 %x, 2
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length
runOnFunction: I:  %x.inc3 = add i32 %x, 3
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length
runOnFunction: I:  %1 = and i1 %chk2, %chk3
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
runOnFunction: I:  ret void
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add i32 %x, -2147483647
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(start):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add i32 %x, 2
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add i32 %x, 3
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(start):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  ret void


INSTCOMBINE ITERATION #1 on f_6
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add i32 %x, -2147483647
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(end):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add i32 %x, 2
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add i32 %x, 3
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(end):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  ret void
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, -2147483647
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add i32 %x, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add i32 %x, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, -2147483647
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add i32 %x, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add i32 %x, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x
chris-worklist-bb: BB end:   %x.inc1 = add i32 %x, -2147483647
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length
chris-worklist-bb: BB end:   %0 = and i1 %chk0, %chk1
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc2 = add i32 %x, 2
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length
chris-worklist-bb: BB end:   %x.inc3 = add i32 %x, 3
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length
chris-worklist-bb: BB end:   %1 = and i1 %chk2, %chk3
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-worklist-bb: BB end:   ret void
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-AddInitialGroup: I:   %1 = and i1 %chk2, %chk3
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length
chris-AddInitialGroup: I:   %x.inc3 = add i32 %x, 3
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length
chris-AddInitialGroup: I:   %x.inc2 = add i32 %x, 2
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-AddInitialGroup: I:   %0 = and i1 %chk0, %chk1
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length
chris-AddInitialGroup: I:   %x.inc1 = add i32 %x, -2147483647
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !range !0
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !range !0
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !range !0
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !range !0
test1: I=  %length = load i32, i32* %length_buf, align 4, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x
run: WorkList:   %chk0 = icmp ugt i32 %length, %x
chris-run: I=  %chk0 = icmp ugt i32 %length, %x
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x
test1: I=  %chk0 = icmp ugt i32 %length, %x
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add i32 %x, -2147483647
chris-RemoveOne: return I  %x.inc1 = add i32 %x, -2147483647
run: WorkList:   %x.inc1 = add i32 %x, -2147483647
chris-run: I=  %x.inc1 = add i32 %x, -2147483647
chris-run: I-end=  %x.inc1 = add i32 %x, -2147483647
IC: Visiting:   %x.inc1 = add i32 %x, -2147483647
test1: I=  %x.inc1 = add i32 %x, -2147483647
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %0 = and i1 %chk0, %chk1
chris-RemoveOne: return I  %0 = and i1 %chk0, %chk1
run: WorkList:   %0 = and i1 %chk0, %chk1
chris-run: I=  %0 = and i1 %chk0, %chk1
chris-run: I-end=  %0 = and i1 %chk0, %chk1
IC: Visiting:   %0 = and i1 %chk0, %chk1
test1: I=  %0 = and i1 %chk0, %chk1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add i32 %x, 2
NextInst[0]   %chk2 = icmp ult i32 %x.inc2, %length
NextInst[1]   %x.inc3 = add i32 %x, 3
NextInst[2]   %chk3 = icmp ult i32 %x.inc3, %length
Inst[end]:   %chk3 = icmp ult i32 %x.inc3, %length
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add i32 %x, 2
chris-RemoveOne: return I  %x.inc2 = add i32 %x, 2
run: WorkList:   %x.inc2 = add i32 %x, 2
chris-run: I=  %x.inc2 = add i32 %x, 2
chris-run: I-end=  %x.inc2 = add i32 %x, 2
IC: Visiting:   %x.inc2 = add i32 %x, 2
test1: I=  %x.inc2 = add i32 %x, 2
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add i32 %x, 3
chris-RemoveOne: return I  %x.inc3 = add i32 %x, 3
run: WorkList:   %x.inc3 = add i32 %x, 3
chris-run: I=  %x.inc3 = add i32 %x, 3
chris-run: I-end=  %x.inc3 = add i32 %x, 3
IC: Visiting:   %x.inc3 = add i32 %x, 3
test1: I=  %x.inc3 = add i32 %x, 3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %1 = and i1 %chk2, %chk3
chris-RemoveOne: return I  %1 = and i1 %chk2, %chk3
run: WorkList:   %1 = and i1 %chk2, %chk3
chris-run: I=  %1 = and i1 %chk2, %chk3
chris-run: I-end=  %1 = and i1 %chk2, %chk3
IC: Visiting:   %1 = and i1 %chk2, %chk3
test1: I=  %1 = and i1 %chk2, %chk3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void
 ok, break
Inst[end]:   ret void
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void
chris-RemoveOne: return I  ret void
run: WorkList:   ret void
chris-run: I=  ret void
chris-run: I-end=  ret void
IC: Visiting:   ret void
test1: I=  ret void
visit: nullptr 
test3
test4
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !range !0
runOnFunction: I:  %chk0 = icmp ugt i32 %length, %x
runOnFunction: I:  %x.inc1 = add i32 %x, -2147483647
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length
runOnFunction: I:  %0 = and i1 %chk0, %chk1
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
runOnFunction: I:  %x.inc2 = add i32 %x, 2
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length
runOnFunction: I:  %x.inc3 = add i32 %x, 3
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length
runOnFunction: I:  %1 = and i1 %chk2, %chk3
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
runOnFunction: I:  ret void
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add i32 %x, -2147483647
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(start):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add i32 %x, 2
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add i32 %x, 3
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(start):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  ret void


INSTCOMBINE ITERATION #1 on f_6
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add i32 %x, -2147483647
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(end):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add i32 %x, 2
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add i32 %x, 3
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(end):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  ret void
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, -2147483647
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add i32 %x, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add i32 %x, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, -2147483647
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add i32 %x, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add i32 %x, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x
chris-worklist-bb: BB end:   %x.inc1 = add i32 %x, -2147483647
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length
chris-worklist-bb: BB end:   %0 = and i1 %chk0, %chk1
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc2 = add i32 %x, 2
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length
chris-worklist-bb: BB end:   %x.inc3 = add i32 %x, 3
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length
chris-worklist-bb: BB end:   %1 = and i1 %chk2, %chk3
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-worklist-bb: BB end:   ret void
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-AddInitialGroup: I:   %1 = and i1 %chk2, %chk3
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length
chris-AddInitialGroup: I:   %x.inc3 = add i32 %x, 3
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length
chris-AddInitialGroup: I:   %x.inc2 = add i32 %x, 2
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-AddInitialGroup: I:   %0 = and i1 %chk0, %chk1
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length
chris-AddInitialGroup: I:   %x.inc1 = add i32 %x, -2147483647
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !range !0
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !range !0
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !range !0
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !range !0
test1: I=  %length = load i32, i32* %length_buf, align 4, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x
run: WorkList:   %chk0 = icmp ugt i32 %length, %x
chris-run: I=  %chk0 = icmp ugt i32 %length, %x
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x
test1: I=  %chk0 = icmp ugt i32 %length, %x
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add i32 %x, -2147483647
chris-RemoveOne: return I  %x.inc1 = add i32 %x, -2147483647
run: WorkList:   %x.inc1 = add i32 %x, -2147483647
chris-run: I=  %x.inc1 = add i32 %x, -2147483647
chris-run: I-end=  %x.inc1 = add i32 %x, -2147483647
IC: Visiting:   %x.inc1 = add i32 %x, -2147483647
test1: I=  %x.inc1 = add i32 %x, -2147483647
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %0 = and i1 %chk0, %chk1
chris-RemoveOne: return I  %0 = and i1 %chk0, %chk1
run: WorkList:   %0 = and i1 %chk0, %chk1
chris-run: I=  %0 = and i1 %chk0, %chk1
chris-run: I-end=  %0 = and i1 %chk0, %chk1
IC: Visiting:   %0 = and i1 %chk0, %chk1
test1: I=  %0 = and i1 %chk0, %chk1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add i32 %x, 2
NextInst[0]   %chk2 = icmp ult i32 %x.inc2, %length
NextInst[1]   %x.inc3 = add i32 %x, 3
NextInst[2]   %chk3 = icmp ult i32 %x.inc3, %length
Inst[end]:   %chk3 = icmp ult i32 %x.inc3, %length
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add i32 %x, 2
chris-RemoveOne: return I  %x.inc2 = add i32 %x, 2
run: WorkList:   %x.inc2 = add i32 %x, 2
chris-run: I=  %x.inc2 = add i32 %x, 2
chris-run: I-end=  %x.inc2 = add i32 %x, 2
IC: Visiting:   %x.inc2 = add i32 %x, 2
test1: I=  %x.inc2 = add i32 %x, 2
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add i32 %x, 3
chris-RemoveOne: return I  %x.inc3 = add i32 %x, 3
run: WorkList:   %x.inc3 = add i32 %x, 3
chris-run: I=  %x.inc3 = add i32 %x, 3
chris-run: I-end=  %x.inc3 = add i32 %x, 3
IC: Visiting:   %x.inc3 = add i32 %x, 3
test1: I=  %x.inc3 = add i32 %x, 3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %1 = and i1 %chk2, %chk3
chris-RemoveOne: return I  %1 = and i1 %chk2, %chk3
run: WorkList:   %1 = and i1 %chk2, %chk3
chris-run: I=  %1 = and i1 %chk2, %chk3
chris-run: I-end=  %1 = and i1 %chk2, %chk3
IC: Visiting:   %1 = and i1 %chk2, %chk3
test1: I=  %1 = and i1 %chk2, %chk3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void
 ok, break
Inst[end]:   ret void
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void
chris-RemoveOne: return I  ret void
run: WorkList:   ret void
chris-run: I=  ret void
chris-run: I-end=  ret void
IC: Visiting:   ret void
test1: I=  ret void
visit: nullptr 
test3
test4
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !range !0
runOnFunction: I:  %chk0 = icmp ugt i32 %length, %x
runOnFunction: I:  %x.inc1 = add i32 %x, -2147483647
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length
runOnFunction: I:  %0 = and i1 %chk0, %chk1
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
runOnFunction: I:  %x.inc2 = add i32 %x, 2
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length
runOnFunction: I:  %x.inc3 = add i32 %x, 3
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length
runOnFunction: I:  %1 = and i1 %chk2, %chk3
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
runOnFunction: I:  ret void
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add i32 %x, -2147483647
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(start):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add i32 %x, 2
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add i32 %x, 3
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(start):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  ret void


INSTCOMBINE ITERATION #1 on f_6
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add i32 %x, -2147483647
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(end):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add i32 %x, 2
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add i32 %x, 3
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(end):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  ret void
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, -2147483647
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add i32 %x, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add i32 %x, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, -2147483647
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add i32 %x, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add i32 %x, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x
chris-worklist-bb: BB end:   %x.inc1 = add i32 %x, -2147483647
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length
chris-worklist-bb: BB end:   %0 = and i1 %chk0, %chk1
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc2 = add i32 %x, 2
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length
chris-worklist-bb: BB end:   %x.inc3 = add i32 %x, 3
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length
chris-worklist-bb: BB end:   %1 = and i1 %chk2, %chk3
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-worklist-bb: BB end:   ret void
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-AddInitialGroup: I:   %1 = and i1 %chk2, %chk3
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length
chris-AddInitialGroup: I:   %x.inc3 = add i32 %x, 3
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length
chris-AddInitialGroup: I:   %x.inc2 = add i32 %x, 2
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-AddInitialGroup: I:   %0 = and i1 %chk0, %chk1
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length
chris-AddInitialGroup: I:   %x.inc1 = add i32 %x, -2147483647
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !range !0
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !range !0
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !range !0
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !range !0
test1: I=  %length = load i32, i32* %length_buf, align 4, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x
run: WorkList:   %chk0 = icmp ugt i32 %length, %x
chris-run: I=  %chk0 = icmp ugt i32 %length, %x
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x
test1: I=  %chk0 = icmp ugt i32 %length, %x
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add i32 %x, -2147483647
chris-RemoveOne: return I  %x.inc1 = add i32 %x, -2147483647
run: WorkList:   %x.inc1 = add i32 %x, -2147483647
chris-run: I=  %x.inc1 = add i32 %x, -2147483647
chris-run: I-end=  %x.inc1 = add i32 %x, -2147483647
IC: Visiting:   %x.inc1 = add i32 %x, -2147483647
test1: I=  %x.inc1 = add i32 %x, -2147483647
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %0 = and i1 %chk0, %chk1
chris-RemoveOne: return I  %0 = and i1 %chk0, %chk1
run: WorkList:   %0 = and i1 %chk0, %chk1
chris-run: I=  %0 = and i1 %chk0, %chk1
chris-run: I-end=  %0 = and i1 %chk0, %chk1
IC: Visiting:   %0 = and i1 %chk0, %chk1
test1: I=  %0 = and i1 %chk0, %chk1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add i32 %x, 2
NextInst[0]   %chk2 = icmp ult i32 %x.inc2, %length
NextInst[1]   %x.inc3 = add i32 %x, 3
NextInst[2]   %chk3 = icmp ult i32 %x.inc3, %length
Inst[end]:   %chk3 = icmp ult i32 %x.inc3, %length
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add i32 %x, 2
chris-RemoveOne: return I  %x.inc2 = add i32 %x, 2
run: WorkList:   %x.inc2 = add i32 %x, 2
chris-run: I=  %x.inc2 = add i32 %x, 2
chris-run: I-end=  %x.inc2 = add i32 %x, 2
IC: Visiting:   %x.inc2 = add i32 %x, 2
test1: I=  %x.inc2 = add i32 %x, 2
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add i32 %x, 3
chris-RemoveOne: return I  %x.inc3 = add i32 %x, 3
run: WorkList:   %x.inc3 = add i32 %x, 3
chris-run: I=  %x.inc3 = add i32 %x, 3
chris-run: I-end=  %x.inc3 = add i32 %x, 3
IC: Visiting:   %x.inc3 = add i32 %x, 3
test1: I=  %x.inc3 = add i32 %x, 3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %1 = and i1 %chk2, %chk3
chris-RemoveOne: return I  %1 = and i1 %chk2, %chk3
run: WorkList:   %1 = and i1 %chk2, %chk3
chris-run: I=  %1 = and i1 %chk2, %chk3
chris-run: I-end=  %1 = and i1 %chk2, %chk3
IC: Visiting:   %1 = and i1 %chk2, %chk3
test1: I=  %1 = and i1 %chk2, %chk3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void
 ok, break
Inst[end]:   ret void
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void
chris-RemoveOne: return I  ret void
run: WorkList:   ret void
chris-run: I=  ret void
chris-run: I-end=  ret void
IC: Visiting:   ret void
test1: I=  ret void
visit: nullptr 
test3
test4
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
runOnFunction: I:  %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
runOnFunction: I:  %chk0.a = icmp ugt i32 %length_a, %x
runOnFunction: I:  %chk0.b = icmp ugt i32 %length_b, %x
runOnFunction: I:  %chk0 = and i1 %chk0.a, %chk0.b
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
runOnFunction: I:  %x.inc1 = add nuw nsw i32 %x, 1
runOnFunction: I:  %chk1.a = icmp ult i32 %x.inc1, %length_a
runOnFunction: I:  %chk1.b = icmp ult i32 %x.inc1, %length_b
runOnFunction: I:  %chk1 = and i1 %chk1.a, %chk1.b
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
runOnFunction: I:  %x.inc2 = add nuw nsw i32 %x, 2
runOnFunction: I:  %chk2.a = icmp ult i32 %x.inc2, %length_a
runOnFunction: I:  %chk2.b = icmp ult i32 %x.inc2, %length_b
runOnFunction: I:  %chk2 = and i1 %chk2.a, %chk2.b
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
runOnFunction: I:  %x.inc3 = add nuw nsw i32 %x, 3
runOnFunction: I:  %chk3.a = icmp ult i32 %x.inc3, %length_a
runOnFunction: I:  %chk3.b = icmp ult i32 %x.inc3, %length_b
runOnFunction: I:  %chk3 = and i1 %chk3.a, %chk3.b
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
runOnFunction: I:  ret void
INSTCOMBINE ITERATION: Inst(start):  %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(start):  %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(start):  %chk0.a = icmp ugt i32 %length_a, %x
INSTCOMBINE ITERATION: Inst(start):  %chk0.b = icmp ugt i32 %length_b, %x
INSTCOMBINE ITERATION: Inst(start):  %chk0 = and i1 %chk0.a, %chk0.b
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add nuw nsw i32 %x, 1
INSTCOMBINE ITERATION: Inst(start):  %chk1.a = icmp ult i32 %x.inc1, %length_a
INSTCOMBINE ITERATION: Inst(start):  %chk1.b = icmp ult i32 %x.inc1, %length_b
INSTCOMBINE ITERATION: Inst(start):  %chk1 = and i1 %chk1.a, %chk1.b
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add nuw nsw i32 %x, 2
INSTCOMBINE ITERATION: Inst(start):  %chk2.a = icmp ult i32 %x.inc2, %length_a
INSTCOMBINE ITERATION: Inst(start):  %chk2.b = icmp ult i32 %x.inc2, %length_b
INSTCOMBINE ITERATION: Inst(start):  %chk2 = and i1 %chk2.a, %chk2.b
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw nsw i32 %x, 3
INSTCOMBINE ITERATION: Inst(start):  %chk3.a = icmp ult i32 %x.inc3, %length_a
INSTCOMBINE ITERATION: Inst(start):  %chk3.b = icmp ult i32 %x.inc3, %length_b
INSTCOMBINE ITERATION: Inst(start):  %chk3 = and i1 %chk3.a, %chk3.b
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  ret void


INSTCOMBINE ITERATION #1 on f_7
INSTCOMBINE ITERATION: Inst(end):  %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(end):  %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(end):  %chk0.a = icmp ugt i32 %length_a, %x
INSTCOMBINE ITERATION: Inst(end):  %chk0.b = icmp ugt i32 %length_b, %x
INSTCOMBINE ITERATION: Inst(end):  %chk0 = and i1 %chk0.a, %chk0.b
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add nuw nsw i32 %x, 1
INSTCOMBINE ITERATION: Inst(end):  %chk1.a = icmp ult i32 %x.inc1, %length_a
INSTCOMBINE ITERATION: Inst(end):  %chk1.b = icmp ult i32 %x.inc1, %length_b
INSTCOMBINE ITERATION: Inst(end):  %chk1 = and i1 %chk1.a, %chk1.b
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add nuw nsw i32 %x, 2
INSTCOMBINE ITERATION: Inst(end):  %chk2.a = icmp ult i32 %x.inc2, %length_a
INSTCOMBINE ITERATION: Inst(end):  %chk2.b = icmp ult i32 %x.inc2, %length_b
INSTCOMBINE ITERATION: Inst(end):  %chk2 = and i1 %chk2.a, %chk2.b
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw nsw i32 %x, 3
INSTCOMBINE ITERATION: Inst(end):  %chk3.a = icmp ult i32 %x.inc3, %length_a
INSTCOMBINE ITERATION: Inst(end):  %chk3.b = icmp ult i32 %x.inc3, %length_b
INSTCOMBINE ITERATION: Inst(end):  %chk3 = and i1 %chk3.a, %chk3.b
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  ret void
chris-worklist-bb: bb: 
entry:
  %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
  %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
  %chk0.a = icmp ugt i32 %length_a, %x
  %chk0.b = icmp ugt i32 %length_b, %x
  %chk0 = and i1 %chk0.a, %chk0.b
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
  %x.inc1 = add nuw nsw i32 %x, 1
  %chk1.a = icmp ult i32 %x.inc1, %length_a
  %chk1.b = icmp ult i32 %x.inc1, %length_b
  %chk1 = and i1 %chk1.a, %chk1.b
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
  %x.inc2 = add nuw nsw i32 %x, 2
  %chk2.a = icmp ult i32 %x.inc2, %length_a
  %chk2.b = icmp ult i32 %x.inc2, %length_b
  %chk2 = and i1 %chk2.a, %chk2.b
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
  %x.inc3 = add nuw nsw i32 %x, 3
  %chk3.a = icmp ult i32 %x.inc3, %length_a
  %chk3.b = icmp ult i32 %x.inc3, %length_b
  %chk3 = and i1 %chk3.a, %chk3.b
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
  ret void

chris-worklist-bb: BB: 
entry:
  %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
  %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
  %chk0.a = icmp ugt i32 %length_a, %x
  %chk0.b = icmp ugt i32 %length_b, %x
  %chk0 = and i1 %chk0.a, %chk0.b
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
  %x.inc1 = add nuw nsw i32 %x, 1
  %chk1.a = icmp ult i32 %x.inc1, %length_a
  %chk1.b = icmp ult i32 %x.inc1, %length_b
  %chk1 = and i1 %chk1.a, %chk1.b
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
  %x.inc2 = add nuw nsw i32 %x, 2
  %chk2.a = icmp ult i32 %x.inc2, %length_a
  %chk2.b = icmp ult i32 %x.inc2, %length_b
  %chk2 = and i1 %chk2.a, %chk2.b
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
  %x.inc3 = add nuw nsw i32 %x, 3
  %chk3.a = icmp ult i32 %x.inc3, %length_a
  %chk3.b = icmp ult i32 %x.inc3, %length_b
  %chk3 = and i1 %chk3.a, %chk3.b
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
  ret void

chris-worklist-bb: BB end:   %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
chris-worklist-bb: BB end:   %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
chris-worklist-bb: BB end:   %chk0.a = icmp ugt i32 %length_a, %x
chris-worklist-bb: BB end:   %chk0.b = icmp ugt i32 %length_b, %x
chris-worklist-bb: BB end:   %chk0 = and i1 %chk0.a, %chk0.b
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc1 = add nuw nsw i32 %x, 1
chris-worklist-bb: BB end:   %chk1.a = icmp ult i32 %x.inc1, %length_a
chris-worklist-bb: BB end:   %chk1.b = icmp ult i32 %x.inc1, %length_b
chris-worklist-bb: BB end:   %chk1 = and i1 %chk1.a, %chk1.b
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc2 = add nuw nsw i32 %x, 2
chris-worklist-bb: BB end:   %chk2.a = icmp ult i32 %x.inc2, %length_a
chris-worklist-bb: BB end:   %chk2.b = icmp ult i32 %x.inc2, %length_b
chris-worklist-bb: BB end:   %chk2 = and i1 %chk2.a, %chk2.b
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc3 = add nuw nsw i32 %x, 3
chris-worklist-bb: BB end:   %chk3.a = icmp ult i32 %x.inc3, %length_a
chris-worklist-bb: BB end:   %chk3.b = icmp ult i32 %x.inc3, %length_b
chris-worklist-bb: BB end:   %chk3 = and i1 %chk3.a, %chk3.b
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
chris-worklist-bb: BB end:   ret void
IC: ADDING: 22 instrs to worklist
chris-AddInitialGroup: I:   ret void
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
chris-AddInitialGroup: I:   %chk3 = and i1 %chk3.a, %chk3.b
chris-AddInitialGroup: I:   %chk3.b = icmp ult i32 %x.inc3, %length_b
chris-AddInitialGroup: I:   %chk3.a = icmp ult i32 %x.inc3, %length_a
chris-AddInitialGroup: I:   %x.inc3 = add nuw nsw i32 %x, 3
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-AddInitialGroup: I:   %chk2 = and i1 %chk2.a, %chk2.b
chris-AddInitialGroup: I:   %chk2.b = icmp ult i32 %x.inc2, %length_b
chris-AddInitialGroup: I:   %chk2.a = icmp ult i32 %x.inc2, %length_a
chris-AddInitialGroup: I:   %x.inc2 = add nuw nsw i32 %x, 2
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
chris-AddInitialGroup: I:   %chk1 = and i1 %chk1.a, %chk1.b
chris-AddInitialGroup: I:   %chk1.b = icmp ult i32 %x.inc1, %length_b
chris-AddInitialGroup: I:   %chk1.a = icmp ult i32 %x.inc1, %length_a
chris-AddInitialGroup: I:   %x.inc1 = add nuw nsw i32 %x, 1
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-AddInitialGroup: I:   %chk0 = and i1 %chk0.a, %chk0.b
chris-AddInitialGroup: I:   %chk0.b = icmp ugt i32 %length_b, %x
chris-AddInitialGroup: I:   %chk0.a = icmp ugt i32 %length_a, %x
chris-AddInitialGroup: I:   %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
chris-AddInitialGroup: I:   %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
RemoveOne!!!
chris-RemoveOne:   %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
chris-RemoveOne: return I  %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
run: WorkList:   %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
chris-run: I=  %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
chris-run: I-end=  %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
IC: Visiting:   %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
test1: I=  %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
chris-RemoveOne: return I  %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
run: WorkList:   %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
chris-run: I=  %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
chris-run: I-end=  %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
IC: Visiting:   %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
test1: I=  %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0.a = icmp ugt i32 %length_a, %x
chris-RemoveOne: return I  %chk0.a = icmp ugt i32 %length_a, %x
run: WorkList:   %chk0.a = icmp ugt i32 %length_a, %x
chris-run: I=  %chk0.a = icmp ugt i32 %length_a, %x
chris-run: I-end=  %chk0.a = icmp ugt i32 %length_a, %x
IC: Visiting:   %chk0.a = icmp ugt i32 %length_a, %x
test1: I=  %chk0.a = icmp ugt i32 %length_a, %x
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0.b = icmp ugt i32 %length_b, %x
chris-RemoveOne: return I  %chk0.b = icmp ugt i32 %length_b, %x
run: WorkList:   %chk0.b = icmp ugt i32 %length_b, %x
chris-run: I=  %chk0.b = icmp ugt i32 %length_b, %x
chris-run: I-end=  %chk0.b = icmp ugt i32 %length_b, %x
IC: Visiting:   %chk0.b = icmp ugt i32 %length_b, %x
test1: I=  %chk0.b = icmp ugt i32 %length_b, %x
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = and i1 %chk0.a, %chk0.b
chris-RemoveOne: return I  %chk0 = and i1 %chk0.a, %chk0.b
run: WorkList:   %chk0 = and i1 %chk0.a, %chk0.b
chris-run: I=  %chk0 = and i1 %chk0.a, %chk0.b
chris-run: I-end=  %chk0 = and i1 %chk0.a, %chk0.b
IC: Visiting:   %chk0 = and i1 %chk0.a, %chk0.b
test1: I=  %chk0 = and i1 %chk0.a, %chk0.b
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = add nuw nsw i32 %x, 1
NextInst[0]   %chk1.a = icmp ult i32 %x.inc1, %length_a
NextInst[1]   %chk1.b = icmp ult i32 %x.inc1, %length_b
NextInst[2]   %chk1 = and i1 %chk1.a, %chk1.b
Inst[end]:   %chk1 = and i1 %chk1.a, %chk1.b
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add nuw nsw i32 %x, 1
chris-RemoveOne: return I  %x.inc1 = add nuw nsw i32 %x, 1
run: WorkList:   %x.inc1 = add nuw nsw i32 %x, 1
chris-run: I=  %x.inc1 = add nuw nsw i32 %x, 1
chris-run: I-end=  %x.inc1 = add nuw nsw i32 %x, 1
IC: Visiting:   %x.inc1 = add nuw nsw i32 %x, 1
test1: I=  %x.inc1 = add nuw nsw i32 %x, 1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1.a = icmp ult i32 %x.inc1, %length_a
chris-RemoveOne: return I  %chk1.a = icmp ult i32 %x.inc1, %length_a
run: WorkList:   %chk1.a = icmp ult i32 %x.inc1, %length_a
chris-run: I=  %chk1.a = icmp ult i32 %x.inc1, %length_a
chris-run: I-end=  %chk1.a = icmp ult i32 %x.inc1, %length_a
IC: Visiting:   %chk1.a = icmp ult i32 %x.inc1, %length_a
test1: I=  %chk1.a = icmp ult i32 %x.inc1, %length_a
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1.b = icmp ult i32 %x.inc1, %length_b
chris-RemoveOne: return I  %chk1.b = icmp ult i32 %x.inc1, %length_b
run: WorkList:   %chk1.b = icmp ult i32 %x.inc1, %length_b
chris-run: I=  %chk1.b = icmp ult i32 %x.inc1, %length_b
chris-run: I-end=  %chk1.b = icmp ult i32 %x.inc1, %length_b
IC: Visiting:   %chk1.b = icmp ult i32 %x.inc1, %length_b
test1: I=  %chk1.b = icmp ult i32 %x.inc1, %length_b
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = and i1 %chk1.a, %chk1.b
chris-RemoveOne: return I  %chk1 = and i1 %chk1.a, %chk1.b
run: WorkList:   %chk1 = and i1 %chk1.a, %chk1.b
chris-run: I=  %chk1 = and i1 %chk1.a, %chk1.b
chris-run: I-end=  %chk1 = and i1 %chk1.a, %chk1.b
IC: Visiting:   %chk1 = and i1 %chk1.a, %chk1.b
test1: I=  %chk1 = and i1 %chk1.a, %chk1.b
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add nuw nsw i32 %x, 2
NextInst[0]   %chk2.a = icmp ult i32 %x.inc2, %length_a
NextInst[1]   %chk2.b = icmp ult i32 %x.inc2, %length_b
NextInst[2]   %chk2 = and i1 %chk2.a, %chk2.b
Inst[end]:   %chk2 = and i1 %chk2.a, %chk2.b
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add nuw nsw i32 %x, 2
chris-RemoveOne: return I  %x.inc2 = add nuw nsw i32 %x, 2
run: WorkList:   %x.inc2 = add nuw nsw i32 %x, 2
chris-run: I=  %x.inc2 = add nuw nsw i32 %x, 2
chris-run: I-end=  %x.inc2 = add nuw nsw i32 %x, 2
IC: Visiting:   %x.inc2 = add nuw nsw i32 %x, 2
test1: I=  %x.inc2 = add nuw nsw i32 %x, 2
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2.a = icmp ult i32 %x.inc2, %length_a
chris-RemoveOne: return I  %chk2.a = icmp ult i32 %x.inc2, %length_a
run: WorkList:   %chk2.a = icmp ult i32 %x.inc2, %length_a
chris-run: I=  %chk2.a = icmp ult i32 %x.inc2, %length_a
chris-run: I-end=  %chk2.a = icmp ult i32 %x.inc2, %length_a
IC: Visiting:   %chk2.a = icmp ult i32 %x.inc2, %length_a
test1: I=  %chk2.a = icmp ult i32 %x.inc2, %length_a
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2.b = icmp ult i32 %x.inc2, %length_b
chris-RemoveOne: return I  %chk2.b = icmp ult i32 %x.inc2, %length_b
run: WorkList:   %chk2.b = icmp ult i32 %x.inc2, %length_b
chris-run: I=  %chk2.b = icmp ult i32 %x.inc2, %length_b
chris-run: I-end=  %chk2.b = icmp ult i32 %x.inc2, %length_b
IC: Visiting:   %chk2.b = icmp ult i32 %x.inc2, %length_b
test1: I=  %chk2.b = icmp ult i32 %x.inc2, %length_b
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = and i1 %chk2.a, %chk2.b
chris-RemoveOne: return I  %chk2 = and i1 %chk2.a, %chk2.b
run: WorkList:   %chk2 = and i1 %chk2.a, %chk2.b
chris-run: I=  %chk2 = and i1 %chk2.a, %chk2.b
chris-run: I-end=  %chk2 = and i1 %chk2.a, %chk2.b
IC: Visiting:   %chk2 = and i1 %chk2.a, %chk2.b
test1: I=  %chk2 = and i1 %chk2.a, %chk2.b
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add nuw nsw i32 %x, 3
NextInst[0]   %chk3.a = icmp ult i32 %x.inc3, %length_a
NextInst[1]   %chk3.b = icmp ult i32 %x.inc3, %length_b
NextInst[2]   %chk3 = and i1 %chk3.a, %chk3.b
Inst[end]:   %chk3 = and i1 %chk3.a, %chk3.b
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw nsw i32 %x, 3
chris-RemoveOne: return I  %x.inc3 = add nuw nsw i32 %x, 3
run: WorkList:   %x.inc3 = add nuw nsw i32 %x, 3
chris-run: I=  %x.inc3 = add nuw nsw i32 %x, 3
chris-run: I-end=  %x.inc3 = add nuw nsw i32 %x, 3
IC: Visiting:   %x.inc3 = add nuw nsw i32 %x, 3
test1: I=  %x.inc3 = add nuw nsw i32 %x, 3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3.a = icmp ult i32 %x.inc3, %length_a
chris-RemoveOne: return I  %chk3.a = icmp ult i32 %x.inc3, %length_a
run: WorkList:   %chk3.a = icmp ult i32 %x.inc3, %length_a
chris-run: I=  %chk3.a = icmp ult i32 %x.inc3, %length_a
chris-run: I-end=  %chk3.a = icmp ult i32 %x.inc3, %length_a
IC: Visiting:   %chk3.a = icmp ult i32 %x.inc3, %length_a
test1: I=  %chk3.a = icmp ult i32 %x.inc3, %length_a
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3.b = icmp ult i32 %x.inc3, %length_b
chris-RemoveOne: return I  %chk3.b = icmp ult i32 %x.inc3, %length_b
run: WorkList:   %chk3.b = icmp ult i32 %x.inc3, %length_b
chris-run: I=  %chk3.b = icmp ult i32 %x.inc3, %length_b
chris-run: I-end=  %chk3.b = icmp ult i32 %x.inc3, %length_b
IC: Visiting:   %chk3.b = icmp ult i32 %x.inc3, %length_b
test1: I=  %chk3.b = icmp ult i32 %x.inc3, %length_b
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = and i1 %chk3.a, %chk3.b
chris-RemoveOne: return I  %chk3 = and i1 %chk3.a, %chk3.b
run: WorkList:   %chk3 = and i1 %chk3.a, %chk3.b
chris-run: I=  %chk3 = and i1 %chk3.a, %chk3.b
chris-run: I-end=  %chk3 = and i1 %chk3.a, %chk3.b
IC: Visiting:   %chk3 = and i1 %chk3.a, %chk3.b
test1: I=  %chk3 = and i1 %chk3.a, %chk3.b
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void
 ok, break
Inst[end]:   ret void
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void
chris-RemoveOne: return I  ret void
run: WorkList:   ret void
chris-run: I=  ret void
chris-run: I-end=  ret void
IC: Visiting:   ret void
test1: I=  ret void
visit: nullptr 
test3
test4
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
runOnFunction: I:  %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
runOnFunction: I:  %chk0.a = icmp ugt i32 %length_a, %x
runOnFunction: I:  %chk0.b = icmp ugt i32 %length_b, %x
runOnFunction: I:  %chk0 = and i1 %chk0.a, %chk0.b
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
runOnFunction: I:  %x.inc1 = add nuw nsw i32 %x, 1
runOnFunction: I:  %chk1.a = icmp ult i32 %x.inc1, %length_a
runOnFunction: I:  %chk1.b = icmp ult i32 %x.inc1, %length_b
runOnFunction: I:  %chk1 = and i1 %chk1.a, %chk1.b
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
runOnFunction: I:  %x.inc2 = add nuw nsw i32 %x, 2
runOnFunction: I:  %chk2.a = icmp ult i32 %x.inc2, %length_a
runOnFunction: I:  %chk2.b = icmp ult i32 %x.inc2, %length_b
runOnFunction: I:  %chk2 = and i1 %chk2.a, %chk2.b
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
runOnFunction: I:  %x.inc3 = add nuw nsw i32 %x, 3
runOnFunction: I:  %chk3.a = icmp ult i32 %x.inc3, %length_a
runOnFunction: I:  %chk3.b = icmp ult i32 %x.inc3, %length_b
runOnFunction: I:  %chk3 = and i1 %chk3.a, %chk3.b
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
runOnFunction: I:  ret void
INSTCOMBINE ITERATION: Inst(start):  %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(start):  %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(start):  %chk0.a = icmp ugt i32 %length_a, %x
INSTCOMBINE ITERATION: Inst(start):  %chk0.b = icmp ugt i32 %length_b, %x
INSTCOMBINE ITERATION: Inst(start):  %chk0 = and i1 %chk0.a, %chk0.b
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add nuw nsw i32 %x, 1
INSTCOMBINE ITERATION: Inst(start):  %chk1.a = icmp ult i32 %x.inc1, %length_a
INSTCOMBINE ITERATION: Inst(start):  %chk1.b = icmp ult i32 %x.inc1, %length_b
INSTCOMBINE ITERATION: Inst(start):  %chk1 = and i1 %chk1.a, %chk1.b
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add nuw nsw i32 %x, 2
INSTCOMBINE ITERATION: Inst(start):  %chk2.a = icmp ult i32 %x.inc2, %length_a
INSTCOMBINE ITERATION: Inst(start):  %chk2.b = icmp ult i32 %x.inc2, %length_b
INSTCOMBINE ITERATION: Inst(start):  %chk2 = and i1 %chk2.a, %chk2.b
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw nsw i32 %x, 3
INSTCOMBINE ITERATION: Inst(start):  %chk3.a = icmp ult i32 %x.inc3, %length_a
INSTCOMBINE ITERATION: Inst(start):  %chk3.b = icmp ult i32 %x.inc3, %length_b
INSTCOMBINE ITERATION: Inst(start):  %chk3 = and i1 %chk3.a, %chk3.b
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  ret void


INSTCOMBINE ITERATION #1 on f_7
INSTCOMBINE ITERATION: Inst(end):  %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(end):  %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(end):  %chk0.a = icmp ugt i32 %length_a, %x
INSTCOMBINE ITERATION: Inst(end):  %chk0.b = icmp ugt i32 %length_b, %x
INSTCOMBINE ITERATION: Inst(end):  %chk0 = and i1 %chk0.a, %chk0.b
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add nuw nsw i32 %x, 1
INSTCOMBINE ITERATION: Inst(end):  %chk1.a = icmp ult i32 %x.inc1, %length_a
INSTCOMBINE ITERATION: Inst(end):  %chk1.b = icmp ult i32 %x.inc1, %length_b
INSTCOMBINE ITERATION: Inst(end):  %chk1 = and i1 %chk1.a, %chk1.b
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add nuw nsw i32 %x, 2
INSTCOMBINE ITERATION: Inst(end):  %chk2.a = icmp ult i32 %x.inc2, %length_a
INSTCOMBINE ITERATION: Inst(end):  %chk2.b = icmp ult i32 %x.inc2, %length_b
INSTCOMBINE ITERATION: Inst(end):  %chk2 = and i1 %chk2.a, %chk2.b
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw nsw i32 %x, 3
INSTCOMBINE ITERATION: Inst(end):  %chk3.a = icmp ult i32 %x.inc3, %length_a
INSTCOMBINE ITERATION: Inst(end):  %chk3.b = icmp ult i32 %x.inc3, %length_b
INSTCOMBINE ITERATION: Inst(end):  %chk3 = and i1 %chk3.a, %chk3.b
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  ret void
chris-worklist-bb: bb: 
entry:
  %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
  %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
  %chk0.a = icmp ugt i32 %length_a, %x
  %chk0.b = icmp ugt i32 %length_b, %x
  %chk0 = and i1 %chk0.a, %chk0.b
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
  %x.inc1 = add nuw nsw i32 %x, 1
  %chk1.a = icmp ult i32 %x.inc1, %length_a
  %chk1.b = icmp ult i32 %x.inc1, %length_b
  %chk1 = and i1 %chk1.a, %chk1.b
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
  %x.inc2 = add nuw nsw i32 %x, 2
  %chk2.a = icmp ult i32 %x.inc2, %length_a
  %chk2.b = icmp ult i32 %x.inc2, %length_b
  %chk2 = and i1 %chk2.a, %chk2.b
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
  %x.inc3 = add nuw nsw i32 %x, 3
  %chk3.a = icmp ult i32 %x.inc3, %length_a
  %chk3.b = icmp ult i32 %x.inc3, %length_b
  %chk3 = and i1 %chk3.a, %chk3.b
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
  ret void

chris-worklist-bb: BB: 
entry:
  %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
  %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
  %chk0.a = icmp ugt i32 %length_a, %x
  %chk0.b = icmp ugt i32 %length_b, %x
  %chk0 = and i1 %chk0.a, %chk0.b
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
  %x.inc1 = add nuw nsw i32 %x, 1
  %chk1.a = icmp ult i32 %x.inc1, %length_a
  %chk1.b = icmp ult i32 %x.inc1, %length_b
  %chk1 = and i1 %chk1.a, %chk1.b
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
  %x.inc2 = add nuw nsw i32 %x, 2
  %chk2.a = icmp ult i32 %x.inc2, %length_a
  %chk2.b = icmp ult i32 %x.inc2, %length_b
  %chk2 = and i1 %chk2.a, %chk2.b
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
  %x.inc3 = add nuw nsw i32 %x, 3
  %chk3.a = icmp ult i32 %x.inc3, %length_a
  %chk3.b = icmp ult i32 %x.inc3, %length_b
  %chk3 = and i1 %chk3.a, %chk3.b
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
  ret void

chris-worklist-bb: BB end:   %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
chris-worklist-bb: BB end:   %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
chris-worklist-bb: BB end:   %chk0.a = icmp ugt i32 %length_a, %x
chris-worklist-bb: BB end:   %chk0.b = icmp ugt i32 %length_b, %x
chris-worklist-bb: BB end:   %chk0 = and i1 %chk0.a, %chk0.b
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc1 = add nuw nsw i32 %x, 1
chris-worklist-bb: BB end:   %chk1.a = icmp ult i32 %x.inc1, %length_a
chris-worklist-bb: BB end:   %chk1.b = icmp ult i32 %x.inc1, %length_b
chris-worklist-bb: BB end:   %chk1 = and i1 %chk1.a, %chk1.b
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc2 = add nuw nsw i32 %x, 2
chris-worklist-bb: BB end:   %chk2.a = icmp ult i32 %x.inc2, %length_a
chris-worklist-bb: BB end:   %chk2.b = icmp ult i32 %x.inc2, %length_b
chris-worklist-bb: BB end:   %chk2 = and i1 %chk2.a, %chk2.b
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc3 = add nuw nsw i32 %x, 3
chris-worklist-bb: BB end:   %chk3.a = icmp ult i32 %x.inc3, %length_a
chris-worklist-bb: BB end:   %chk3.b = icmp ult i32 %x.inc3, %length_b
chris-worklist-bb: BB end:   %chk3 = and i1 %chk3.a, %chk3.b
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
chris-worklist-bb: BB end:   ret void
IC: ADDING: 22 instrs to worklist
chris-AddInitialGroup: I:   ret void
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
chris-AddInitialGroup: I:   %chk3 = and i1 %chk3.a, %chk3.b
chris-AddInitialGroup: I:   %chk3.b = icmp ult i32 %x.inc3, %length_b
chris-AddInitialGroup: I:   %chk3.a = icmp ult i32 %x.inc3, %length_a
chris-AddInitialGroup: I:   %x.inc3 = add nuw nsw i32 %x, 3
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-AddInitialGroup: I:   %chk2 = and i1 %chk2.a, %chk2.b
chris-AddInitialGroup: I:   %chk2.b = icmp ult i32 %x.inc2, %length_b
chris-AddInitialGroup: I:   %chk2.a = icmp ult i32 %x.inc2, %length_a
chris-AddInitialGroup: I:   %x.inc2 = add nuw nsw i32 %x, 2
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
chris-AddInitialGroup: I:   %chk1 = and i1 %chk1.a, %chk1.b
chris-AddInitialGroup: I:   %chk1.b = icmp ult i32 %x.inc1, %length_b
chris-AddInitialGroup: I:   %chk1.a = icmp ult i32 %x.inc1, %length_a
chris-AddInitialGroup: I:   %x.inc1 = add nuw nsw i32 %x, 1
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-AddInitialGroup: I:   %chk0 = and i1 %chk0.a, %chk0.b
chris-AddInitialGroup: I:   %chk0.b = icmp ugt i32 %length_b, %x
chris-AddInitialGroup: I:   %chk0.a = icmp ugt i32 %length_a, %x
chris-AddInitialGroup: I:   %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
chris-AddInitialGroup: I:   %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
RemoveOne!!!
chris-RemoveOne:   %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
chris-RemoveOne: return I  %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
run: WorkList:   %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
chris-run: I=  %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
chris-run: I-end=  %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
IC: Visiting:   %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
test1: I=  %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
chris-RemoveOne: return I  %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
run: WorkList:   %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
chris-run: I=  %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
chris-run: I-end=  %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
IC: Visiting:   %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
test1: I=  %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0.a = icmp ugt i32 %length_a, %x
chris-RemoveOne: return I  %chk0.a = icmp ugt i32 %length_a, %x
run: WorkList:   %chk0.a = icmp ugt i32 %length_a, %x
chris-run: I=  %chk0.a = icmp ugt i32 %length_a, %x
chris-run: I-end=  %chk0.a = icmp ugt i32 %length_a, %x
IC: Visiting:   %chk0.a = icmp ugt i32 %length_a, %x
test1: I=  %chk0.a = icmp ugt i32 %length_a, %x
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0.b = icmp ugt i32 %length_b, %x
chris-RemoveOne: return I  %chk0.b = icmp ugt i32 %length_b, %x
run: WorkList:   %chk0.b = icmp ugt i32 %length_b, %x
chris-run: I=  %chk0.b = icmp ugt i32 %length_b, %x
chris-run: I-end=  %chk0.b = icmp ugt i32 %length_b, %x
IC: Visiting:   %chk0.b = icmp ugt i32 %length_b, %x
test1: I=  %chk0.b = icmp ugt i32 %length_b, %x
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = and i1 %chk0.a, %chk0.b
chris-RemoveOne: return I  %chk0 = and i1 %chk0.a, %chk0.b
run: WorkList:   %chk0 = and i1 %chk0.a, %chk0.b
chris-run: I=  %chk0 = and i1 %chk0.a, %chk0.b
chris-run: I-end=  %chk0 = and i1 %chk0.a, %chk0.b
IC: Visiting:   %chk0 = and i1 %chk0.a, %chk0.b
test1: I=  %chk0 = and i1 %chk0.a, %chk0.b
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = add nuw nsw i32 %x, 1
NextInst[0]   %chk1.a = icmp ult i32 %x.inc1, %length_a
NextInst[1]   %chk1.b = icmp ult i32 %x.inc1, %length_b
NextInst[2]   %chk1 = and i1 %chk1.a, %chk1.b
Inst[end]:   %chk1 = and i1 %chk1.a, %chk1.b
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add nuw nsw i32 %x, 1
chris-RemoveOne: return I  %x.inc1 = add nuw nsw i32 %x, 1
run: WorkList:   %x.inc1 = add nuw nsw i32 %x, 1
chris-run: I=  %x.inc1 = add nuw nsw i32 %x, 1
chris-run: I-end=  %x.inc1 = add nuw nsw i32 %x, 1
IC: Visiting:   %x.inc1 = add nuw nsw i32 %x, 1
test1: I=  %x.inc1 = add nuw nsw i32 %x, 1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1.a = icmp ult i32 %x.inc1, %length_a
chris-RemoveOne: return I  %chk1.a = icmp ult i32 %x.inc1, %length_a
run: WorkList:   %chk1.a = icmp ult i32 %x.inc1, %length_a
chris-run: I=  %chk1.a = icmp ult i32 %x.inc1, %length_a
chris-run: I-end=  %chk1.a = icmp ult i32 %x.inc1, %length_a
IC: Visiting:   %chk1.a = icmp ult i32 %x.inc1, %length_a
test1: I=  %chk1.a = icmp ult i32 %x.inc1, %length_a
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1.b = icmp ult i32 %x.inc1, %length_b
chris-RemoveOne: return I  %chk1.b = icmp ult i32 %x.inc1, %length_b
run: WorkList:   %chk1.b = icmp ult i32 %x.inc1, %length_b
chris-run: I=  %chk1.b = icmp ult i32 %x.inc1, %length_b
chris-run: I-end=  %chk1.b = icmp ult i32 %x.inc1, %length_b
IC: Visiting:   %chk1.b = icmp ult i32 %x.inc1, %length_b
test1: I=  %chk1.b = icmp ult i32 %x.inc1, %length_b
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = and i1 %chk1.a, %chk1.b
chris-RemoveOne: return I  %chk1 = and i1 %chk1.a, %chk1.b
run: WorkList:   %chk1 = and i1 %chk1.a, %chk1.b
chris-run: I=  %chk1 = and i1 %chk1.a, %chk1.b
chris-run: I-end=  %chk1 = and i1 %chk1.a, %chk1.b
IC: Visiting:   %chk1 = and i1 %chk1.a, %chk1.b
test1: I=  %chk1 = and i1 %chk1.a, %chk1.b
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add nuw nsw i32 %x, 2
NextInst[0]   %chk2.a = icmp ult i32 %x.inc2, %length_a
NextInst[1]   %chk2.b = icmp ult i32 %x.inc2, %length_b
NextInst[2]   %chk2 = and i1 %chk2.a, %chk2.b
Inst[end]:   %chk2 = and i1 %chk2.a, %chk2.b
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add nuw nsw i32 %x, 2
chris-RemoveOne: return I  %x.inc2 = add nuw nsw i32 %x, 2
run: WorkList:   %x.inc2 = add nuw nsw i32 %x, 2
chris-run: I=  %x.inc2 = add nuw nsw i32 %x, 2
chris-run: I-end=  %x.inc2 = add nuw nsw i32 %x, 2
IC: Visiting:   %x.inc2 = add nuw nsw i32 %x, 2
test1: I=  %x.inc2 = add nuw nsw i32 %x, 2
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2.a = icmp ult i32 %x.inc2, %length_a
chris-RemoveOne: return I  %chk2.a = icmp ult i32 %x.inc2, %length_a
run: WorkList:   %chk2.a = icmp ult i32 %x.inc2, %length_a
chris-run: I=  %chk2.a = icmp ult i32 %x.inc2, %length_a
chris-run: I-end=  %chk2.a = icmp ult i32 %x.inc2, %length_a
IC: Visiting:   %chk2.a = icmp ult i32 %x.inc2, %length_a
test1: I=  %chk2.a = icmp ult i32 %x.inc2, %length_a
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2.b = icmp ult i32 %x.inc2, %length_b
chris-RemoveOne: return I  %chk2.b = icmp ult i32 %x.inc2, %length_b
run: WorkList:   %chk2.b = icmp ult i32 %x.inc2, %length_b
chris-run: I=  %chk2.b = icmp ult i32 %x.inc2, %length_b
chris-run: I-end=  %chk2.b = icmp ult i32 %x.inc2, %length_b
IC: Visiting:   %chk2.b = icmp ult i32 %x.inc2, %length_b
test1: I=  %chk2.b = icmp ult i32 %x.inc2, %length_b
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = and i1 %chk2.a, %chk2.b
chris-RemoveOne: return I  %chk2 = and i1 %chk2.a, %chk2.b
run: WorkList:   %chk2 = and i1 %chk2.a, %chk2.b
chris-run: I=  %chk2 = and i1 %chk2.a, %chk2.b
chris-run: I-end=  %chk2 = and i1 %chk2.a, %chk2.b
IC: Visiting:   %chk2 = and i1 %chk2.a, %chk2.b
test1: I=  %chk2 = and i1 %chk2.a, %chk2.b
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add nuw nsw i32 %x, 3
NextInst[0]   %chk3.a = icmp ult i32 %x.inc3, %length_a
NextInst[1]   %chk3.b = icmp ult i32 %x.inc3, %length_b
NextInst[2]   %chk3 = and i1 %chk3.a, %chk3.b
Inst[end]:   %chk3 = and i1 %chk3.a, %chk3.b
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw nsw i32 %x, 3
chris-RemoveOne: return I  %x.inc3 = add nuw nsw i32 %x, 3
run: WorkList:   %x.inc3 = add nuw nsw i32 %x, 3
chris-run: I=  %x.inc3 = add nuw nsw i32 %x, 3
chris-run: I-end=  %x.inc3 = add nuw nsw i32 %x, 3
IC: Visiting:   %x.inc3 = add nuw nsw i32 %x, 3
test1: I=  %x.inc3 = add nuw nsw i32 %x, 3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3.a = icmp ult i32 %x.inc3, %length_a
chris-RemoveOne: return I  %chk3.a = icmp ult i32 %x.inc3, %length_a
run: WorkList:   %chk3.a = icmp ult i32 %x.inc3, %length_a
chris-run: I=  %chk3.a = icmp ult i32 %x.inc3, %length_a
chris-run: I-end=  %chk3.a = icmp ult i32 %x.inc3, %length_a
IC: Visiting:   %chk3.a = icmp ult i32 %x.inc3, %length_a
test1: I=  %chk3.a = icmp ult i32 %x.inc3, %length_a
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3.b = icmp ult i32 %x.inc3, %length_b
chris-RemoveOne: return I  %chk3.b = icmp ult i32 %x.inc3, %length_b
run: WorkList:   %chk3.b = icmp ult i32 %x.inc3, %length_b
chris-run: I=  %chk3.b = icmp ult i32 %x.inc3, %length_b
chris-run: I-end=  %chk3.b = icmp ult i32 %x.inc3, %length_b
IC: Visiting:   %chk3.b = icmp ult i32 %x.inc3, %length_b
test1: I=  %chk3.b = icmp ult i32 %x.inc3, %length_b
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = and i1 %chk3.a, %chk3.b
chris-RemoveOne: return I  %chk3 = and i1 %chk3.a, %chk3.b
run: WorkList:   %chk3 = and i1 %chk3.a, %chk3.b
chris-run: I=  %chk3 = and i1 %chk3.a, %chk3.b
chris-run: I-end=  %chk3 = and i1 %chk3.a, %chk3.b
IC: Visiting:   %chk3 = and i1 %chk3.a, %chk3.b
test1: I=  %chk3 = and i1 %chk3.a, %chk3.b
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void
 ok, break
Inst[end]:   ret void
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void
chris-RemoveOne: return I  ret void
run: WorkList:   ret void
chris-run: I=  ret void
chris-run: I-end=  ret void
IC: Visiting:   ret void
test1: I=  ret void
visit: nullptr 
test3
test4
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
runOnFunction: I:  %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
runOnFunction: I:  %chk0.a = icmp ugt i32 %length_a, %x
runOnFunction: I:  %chk0.b = icmp ugt i32 %length_b, %x
runOnFunction: I:  %chk0 = and i1 %chk0.a, %chk0.b
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
runOnFunction: I:  %x.inc1 = add nuw nsw i32 %x, 1
runOnFunction: I:  %chk1.a = icmp ult i32 %x.inc1, %length_a
runOnFunction: I:  %chk1.b = icmp ult i32 %x.inc1, %length_b
runOnFunction: I:  %chk1 = and i1 %chk1.a, %chk1.b
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
runOnFunction: I:  %x.inc2 = add nuw nsw i32 %x, 2
runOnFunction: I:  %chk2.a = icmp ult i32 %x.inc2, %length_a
runOnFunction: I:  %chk2.b = icmp ult i32 %x.inc2, %length_b
runOnFunction: I:  %chk2 = and i1 %chk2.a, %chk2.b
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
runOnFunction: I:  %x.inc3 = add nuw nsw i32 %x, 3
runOnFunction: I:  %chk3.a = icmp ult i32 %x.inc3, %length_a
runOnFunction: I:  %chk3.b = icmp ult i32 %x.inc3, %length_b
runOnFunction: I:  %chk3 = and i1 %chk3.a, %chk3.b
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
runOnFunction: I:  ret void
INSTCOMBINE ITERATION: Inst(start):  %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(start):  %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(start):  %chk0.a = icmp ugt i32 %length_a, %x
INSTCOMBINE ITERATION: Inst(start):  %chk0.b = icmp ugt i32 %length_b, %x
INSTCOMBINE ITERATION: Inst(start):  %chk0 = and i1 %chk0.a, %chk0.b
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add nuw nsw i32 %x, 1
INSTCOMBINE ITERATION: Inst(start):  %chk1.a = icmp ult i32 %x.inc1, %length_a
INSTCOMBINE ITERATION: Inst(start):  %chk1.b = icmp ult i32 %x.inc1, %length_b
INSTCOMBINE ITERATION: Inst(start):  %chk1 = and i1 %chk1.a, %chk1.b
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add nuw nsw i32 %x, 2
INSTCOMBINE ITERATION: Inst(start):  %chk2.a = icmp ult i32 %x.inc2, %length_a
INSTCOMBINE ITERATION: Inst(start):  %chk2.b = icmp ult i32 %x.inc2, %length_b
INSTCOMBINE ITERATION: Inst(start):  %chk2 = and i1 %chk2.a, %chk2.b
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw nsw i32 %x, 3
INSTCOMBINE ITERATION: Inst(start):  %chk3.a = icmp ult i32 %x.inc3, %length_a
INSTCOMBINE ITERATION: Inst(start):  %chk3.b = icmp ult i32 %x.inc3, %length_b
INSTCOMBINE ITERATION: Inst(start):  %chk3 = and i1 %chk3.a, %chk3.b
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  ret void


INSTCOMBINE ITERATION #1 on f_7
INSTCOMBINE ITERATION: Inst(end):  %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(end):  %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(end):  %chk0.a = icmp ugt i32 %length_a, %x
INSTCOMBINE ITERATION: Inst(end):  %chk0.b = icmp ugt i32 %length_b, %x
INSTCOMBINE ITERATION: Inst(end):  %chk0 = and i1 %chk0.a, %chk0.b
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add nuw nsw i32 %x, 1
INSTCOMBINE ITERATION: Inst(end):  %chk1.a = icmp ult i32 %x.inc1, %length_a
INSTCOMBINE ITERATION: Inst(end):  %chk1.b = icmp ult i32 %x.inc1, %length_b
INSTCOMBINE ITERATION: Inst(end):  %chk1 = and i1 %chk1.a, %chk1.b
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add nuw nsw i32 %x, 2
INSTCOMBINE ITERATION: Inst(end):  %chk2.a = icmp ult i32 %x.inc2, %length_a
INSTCOMBINE ITERATION: Inst(end):  %chk2.b = icmp ult i32 %x.inc2, %length_b
INSTCOMBINE ITERATION: Inst(end):  %chk2 = and i1 %chk2.a, %chk2.b
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw nsw i32 %x, 3
INSTCOMBINE ITERATION: Inst(end):  %chk3.a = icmp ult i32 %x.inc3, %length_a
INSTCOMBINE ITERATION: Inst(end):  %chk3.b = icmp ult i32 %x.inc3, %length_b
INSTCOMBINE ITERATION: Inst(end):  %chk3 = and i1 %chk3.a, %chk3.b
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  ret void
chris-worklist-bb: bb: 
entry:
  %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
  %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
  %chk0.a = icmp ugt i32 %length_a, %x
  %chk0.b = icmp ugt i32 %length_b, %x
  %chk0 = and i1 %chk0.a, %chk0.b
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
  %x.inc1 = add nuw nsw i32 %x, 1
  %chk1.a = icmp ult i32 %x.inc1, %length_a
  %chk1.b = icmp ult i32 %x.inc1, %length_b
  %chk1 = and i1 %chk1.a, %chk1.b
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
  %x.inc2 = add nuw nsw i32 %x, 2
  %chk2.a = icmp ult i32 %x.inc2, %length_a
  %chk2.b = icmp ult i32 %x.inc2, %length_b
  %chk2 = and i1 %chk2.a, %chk2.b
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
  %x.inc3 = add nuw nsw i32 %x, 3
  %chk3.a = icmp ult i32 %x.inc3, %length_a
  %chk3.b = icmp ult i32 %x.inc3, %length_b
  %chk3 = and i1 %chk3.a, %chk3.b
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
  ret void

chris-worklist-bb: BB: 
entry:
  %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
  %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
  %chk0.a = icmp ugt i32 %length_a, %x
  %chk0.b = icmp ugt i32 %length_b, %x
  %chk0 = and i1 %chk0.a, %chk0.b
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
  %x.inc1 = add nuw nsw i32 %x, 1
  %chk1.a = icmp ult i32 %x.inc1, %length_a
  %chk1.b = icmp ult i32 %x.inc1, %length_b
  %chk1 = and i1 %chk1.a, %chk1.b
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
  %x.inc2 = add nuw nsw i32 %x, 2
  %chk2.a = icmp ult i32 %x.inc2, %length_a
  %chk2.b = icmp ult i32 %x.inc2, %length_b
  %chk2 = and i1 %chk2.a, %chk2.b
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
  %x.inc3 = add nuw nsw i32 %x, 3
  %chk3.a = icmp ult i32 %x.inc3, %length_a
  %chk3.b = icmp ult i32 %x.inc3, %length_b
  %chk3 = and i1 %chk3.a, %chk3.b
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
  ret void

chris-worklist-bb: BB end:   %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
chris-worklist-bb: BB end:   %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
chris-worklist-bb: BB end:   %chk0.a = icmp ugt i32 %length_a, %x
chris-worklist-bb: BB end:   %chk0.b = icmp ugt i32 %length_b, %x
chris-worklist-bb: BB end:   %chk0 = and i1 %chk0.a, %chk0.b
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc1 = add nuw nsw i32 %x, 1
chris-worklist-bb: BB end:   %chk1.a = icmp ult i32 %x.inc1, %length_a
chris-worklist-bb: BB end:   %chk1.b = icmp ult i32 %x.inc1, %length_b
chris-worklist-bb: BB end:   %chk1 = and i1 %chk1.a, %chk1.b
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc2 = add nuw nsw i32 %x, 2
chris-worklist-bb: BB end:   %chk2.a = icmp ult i32 %x.inc2, %length_a
chris-worklist-bb: BB end:   %chk2.b = icmp ult i32 %x.inc2, %length_b
chris-worklist-bb: BB end:   %chk2 = and i1 %chk2.a, %chk2.b
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc3 = add nuw nsw i32 %x, 3
chris-worklist-bb: BB end:   %chk3.a = icmp ult i32 %x.inc3, %length_a
chris-worklist-bb: BB end:   %chk3.b = icmp ult i32 %x.inc3, %length_b
chris-worklist-bb: BB end:   %chk3 = and i1 %chk3.a, %chk3.b
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
chris-worklist-bb: BB end:   ret void
IC: ADDING: 22 instrs to worklist
chris-AddInitialGroup: I:   ret void
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
chris-AddInitialGroup: I:   %chk3 = and i1 %chk3.a, %chk3.b
chris-AddInitialGroup: I:   %chk3.b = icmp ult i32 %x.inc3, %length_b
chris-AddInitialGroup: I:   %chk3.a = icmp ult i32 %x.inc3, %length_a
chris-AddInitialGroup: I:   %x.inc3 = add nuw nsw i32 %x, 3
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-AddInitialGroup: I:   %chk2 = and i1 %chk2.a, %chk2.b
chris-AddInitialGroup: I:   %chk2.b = icmp ult i32 %x.inc2, %length_b
chris-AddInitialGroup: I:   %chk2.a = icmp ult i32 %x.inc2, %length_a
chris-AddInitialGroup: I:   %x.inc2 = add nuw nsw i32 %x, 2
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
chris-AddInitialGroup: I:   %chk1 = and i1 %chk1.a, %chk1.b
chris-AddInitialGroup: I:   %chk1.b = icmp ult i32 %x.inc1, %length_b
chris-AddInitialGroup: I:   %chk1.a = icmp ult i32 %x.inc1, %length_a
chris-AddInitialGroup: I:   %x.inc1 = add nuw nsw i32 %x, 1
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-AddInitialGroup: I:   %chk0 = and i1 %chk0.a, %chk0.b
chris-AddInitialGroup: I:   %chk0.b = icmp ugt i32 %length_b, %x
chris-AddInitialGroup: I:   %chk0.a = icmp ugt i32 %length_a, %x
chris-AddInitialGroup: I:   %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
chris-AddInitialGroup: I:   %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
RemoveOne!!!
chris-RemoveOne:   %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
chris-RemoveOne: return I  %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
run: WorkList:   %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
chris-run: I=  %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
chris-run: I-end=  %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
IC: Visiting:   %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
test1: I=  %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
chris-RemoveOne: return I  %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
run: WorkList:   %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
chris-run: I=  %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
chris-run: I-end=  %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
IC: Visiting:   %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
test1: I=  %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0.a = icmp ugt i32 %length_a, %x
chris-RemoveOne: return I  %chk0.a = icmp ugt i32 %length_a, %x
run: WorkList:   %chk0.a = icmp ugt i32 %length_a, %x
chris-run: I=  %chk0.a = icmp ugt i32 %length_a, %x
chris-run: I-end=  %chk0.a = icmp ugt i32 %length_a, %x
IC: Visiting:   %chk0.a = icmp ugt i32 %length_a, %x
test1: I=  %chk0.a = icmp ugt i32 %length_a, %x
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0.b = icmp ugt i32 %length_b, %x
chris-RemoveOne: return I  %chk0.b = icmp ugt i32 %length_b, %x
run: WorkList:   %chk0.b = icmp ugt i32 %length_b, %x
chris-run: I=  %chk0.b = icmp ugt i32 %length_b, %x
chris-run: I-end=  %chk0.b = icmp ugt i32 %length_b, %x
IC: Visiting:   %chk0.b = icmp ugt i32 %length_b, %x
test1: I=  %chk0.b = icmp ugt i32 %length_b, %x
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = and i1 %chk0.a, %chk0.b
chris-RemoveOne: return I  %chk0 = and i1 %chk0.a, %chk0.b
run: WorkList:   %chk0 = and i1 %chk0.a, %chk0.b
chris-run: I=  %chk0 = and i1 %chk0.a, %chk0.b
chris-run: I-end=  %chk0 = and i1 %chk0.a, %chk0.b
IC: Visiting:   %chk0 = and i1 %chk0.a, %chk0.b
test1: I=  %chk0 = and i1 %chk0.a, %chk0.b
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = add nuw nsw i32 %x, 1
NextInst[0]   %chk1.a = icmp ult i32 %x.inc1, %length_a
NextInst[1]   %chk1.b = icmp ult i32 %x.inc1, %length_b
NextInst[2]   %chk1 = and i1 %chk1.a, %chk1.b
Inst[end]:   %chk1 = and i1 %chk1.a, %chk1.b
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add nuw nsw i32 %x, 1
chris-RemoveOne: return I  %x.inc1 = add nuw nsw i32 %x, 1
run: WorkList:   %x.inc1 = add nuw nsw i32 %x, 1
chris-run: I=  %x.inc1 = add nuw nsw i32 %x, 1
chris-run: I-end=  %x.inc1 = add nuw nsw i32 %x, 1
IC: Visiting:   %x.inc1 = add nuw nsw i32 %x, 1
test1: I=  %x.inc1 = add nuw nsw i32 %x, 1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1.a = icmp ult i32 %x.inc1, %length_a
chris-RemoveOne: return I  %chk1.a = icmp ult i32 %x.inc1, %length_a
run: WorkList:   %chk1.a = icmp ult i32 %x.inc1, %length_a
chris-run: I=  %chk1.a = icmp ult i32 %x.inc1, %length_a
chris-run: I-end=  %chk1.a = icmp ult i32 %x.inc1, %length_a
IC: Visiting:   %chk1.a = icmp ult i32 %x.inc1, %length_a
test1: I=  %chk1.a = icmp ult i32 %x.inc1, %length_a
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1.b = icmp ult i32 %x.inc1, %length_b
chris-RemoveOne: return I  %chk1.b = icmp ult i32 %x.inc1, %length_b
run: WorkList:   %chk1.b = icmp ult i32 %x.inc1, %length_b
chris-run: I=  %chk1.b = icmp ult i32 %x.inc1, %length_b
chris-run: I-end=  %chk1.b = icmp ult i32 %x.inc1, %length_b
IC: Visiting:   %chk1.b = icmp ult i32 %x.inc1, %length_b
test1: I=  %chk1.b = icmp ult i32 %x.inc1, %length_b
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = and i1 %chk1.a, %chk1.b
chris-RemoveOne: return I  %chk1 = and i1 %chk1.a, %chk1.b
run: WorkList:   %chk1 = and i1 %chk1.a, %chk1.b
chris-run: I=  %chk1 = and i1 %chk1.a, %chk1.b
chris-run: I-end=  %chk1 = and i1 %chk1.a, %chk1.b
IC: Visiting:   %chk1 = and i1 %chk1.a, %chk1.b
test1: I=  %chk1 = and i1 %chk1.a, %chk1.b
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add nuw nsw i32 %x, 2
NextInst[0]   %chk2.a = icmp ult i32 %x.inc2, %length_a
NextInst[1]   %chk2.b = icmp ult i32 %x.inc2, %length_b
NextInst[2]   %chk2 = and i1 %chk2.a, %chk2.b
Inst[end]:   %chk2 = and i1 %chk2.a, %chk2.b
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add nuw nsw i32 %x, 2
chris-RemoveOne: return I  %x.inc2 = add nuw nsw i32 %x, 2
run: WorkList:   %x.inc2 = add nuw nsw i32 %x, 2
chris-run: I=  %x.inc2 = add nuw nsw i32 %x, 2
chris-run: I-end=  %x.inc2 = add nuw nsw i32 %x, 2
IC: Visiting:   %x.inc2 = add nuw nsw i32 %x, 2
test1: I=  %x.inc2 = add nuw nsw i32 %x, 2
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2.a = icmp ult i32 %x.inc2, %length_a
chris-RemoveOne: return I  %chk2.a = icmp ult i32 %x.inc2, %length_a
run: WorkList:   %chk2.a = icmp ult i32 %x.inc2, %length_a
chris-run: I=  %chk2.a = icmp ult i32 %x.inc2, %length_a
chris-run: I-end=  %chk2.a = icmp ult i32 %x.inc2, %length_a
IC: Visiting:   %chk2.a = icmp ult i32 %x.inc2, %length_a
test1: I=  %chk2.a = icmp ult i32 %x.inc2, %length_a
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2.b = icmp ult i32 %x.inc2, %length_b
chris-RemoveOne: return I  %chk2.b = icmp ult i32 %x.inc2, %length_b
run: WorkList:   %chk2.b = icmp ult i32 %x.inc2, %length_b
chris-run: I=  %chk2.b = icmp ult i32 %x.inc2, %length_b
chris-run: I-end=  %chk2.b = icmp ult i32 %x.inc2, %length_b
IC: Visiting:   %chk2.b = icmp ult i32 %x.inc2, %length_b
test1: I=  %chk2.b = icmp ult i32 %x.inc2, %length_b
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = and i1 %chk2.a, %chk2.b
chris-RemoveOne: return I  %chk2 = and i1 %chk2.a, %chk2.b
run: WorkList:   %chk2 = and i1 %chk2.a, %chk2.b
chris-run: I=  %chk2 = and i1 %chk2.a, %chk2.b
chris-run: I-end=  %chk2 = and i1 %chk2.a, %chk2.b
IC: Visiting:   %chk2 = and i1 %chk2.a, %chk2.b
test1: I=  %chk2 = and i1 %chk2.a, %chk2.b
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add nuw nsw i32 %x, 3
NextInst[0]   %chk3.a = icmp ult i32 %x.inc3, %length_a
NextInst[1]   %chk3.b = icmp ult i32 %x.inc3, %length_b
NextInst[2]   %chk3 = and i1 %chk3.a, %chk3.b
Inst[end]:   %chk3 = and i1 %chk3.a, %chk3.b
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw nsw i32 %x, 3
chris-RemoveOne: return I  %x.inc3 = add nuw nsw i32 %x, 3
run: WorkList:   %x.inc3 = add nuw nsw i32 %x, 3
chris-run: I=  %x.inc3 = add nuw nsw i32 %x, 3
chris-run: I-end=  %x.inc3 = add nuw nsw i32 %x, 3
IC: Visiting:   %x.inc3 = add nuw nsw i32 %x, 3
test1: I=  %x.inc3 = add nuw nsw i32 %x, 3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3.a = icmp ult i32 %x.inc3, %length_a
chris-RemoveOne: return I  %chk3.a = icmp ult i32 %x.inc3, %length_a
run: WorkList:   %chk3.a = icmp ult i32 %x.inc3, %length_a
chris-run: I=  %chk3.a = icmp ult i32 %x.inc3, %length_a
chris-run: I-end=  %chk3.a = icmp ult i32 %x.inc3, %length_a
IC: Visiting:   %chk3.a = icmp ult i32 %x.inc3, %length_a
test1: I=  %chk3.a = icmp ult i32 %x.inc3, %length_a
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3.b = icmp ult i32 %x.inc3, %length_b
chris-RemoveOne: return I  %chk3.b = icmp ult i32 %x.inc3, %length_b
run: WorkList:   %chk3.b = icmp ult i32 %x.inc3, %length_b
chris-run: I=  %chk3.b = icmp ult i32 %x.inc3, %length_b
chris-run: I-end=  %chk3.b = icmp ult i32 %x.inc3, %length_b
IC: Visiting:   %chk3.b = icmp ult i32 %x.inc3, %length_b
test1: I=  %chk3.b = icmp ult i32 %x.inc3, %length_b
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = and i1 %chk3.a, %chk3.b
chris-RemoveOne: return I  %chk3 = and i1 %chk3.a, %chk3.b
run: WorkList:   %chk3 = and i1 %chk3.a, %chk3.b
chris-run: I=  %chk3 = and i1 %chk3.a, %chk3.b
chris-run: I-end=  %chk3 = and i1 %chk3.a, %chk3.b
IC: Visiting:   %chk3 = and i1 %chk3.a, %chk3.b
test1: I=  %chk3 = and i1 %chk3.a, %chk3.b
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void
 ok, break
Inst[end]:   ret void
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void
chris-RemoveOne: return I  ret void
run: WorkList:   ret void
chris-run: I=  ret void
chris-run: I-end=  ret void
IC: Visiting:   ret void
test1: I=  ret void
visit: nullptr 
test3
test4
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
runOnFunction: I:  %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
runOnFunction: I:  %chk0.a = icmp ugt i32 %length_a, %x
runOnFunction: I:  %chk0.b = icmp ugt i32 %length_b, %x
runOnFunction: I:  %chk0 = and i1 %chk0.a, %chk0.b
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
runOnFunction: I:  %x.inc1 = add nuw nsw i32 %x, 1
runOnFunction: I:  %chk1.a = icmp ult i32 %x.inc1, %length_a
runOnFunction: I:  %chk1.b = icmp ult i32 %x.inc1, %length_b
runOnFunction: I:  %chk1 = and i1 %chk1.a, %chk1.b
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
runOnFunction: I:  %x.inc2 = add nuw nsw i32 %x, 2
runOnFunction: I:  %chk2.a = icmp ult i32 %x.inc2, %length_a
runOnFunction: I:  %chk2.b = icmp ult i32 %x.inc2, %length_b
runOnFunction: I:  %chk2 = and i1 %chk2.a, %chk2.b
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
runOnFunction: I:  %x.inc3 = add nuw nsw i32 %x, 3
runOnFunction: I:  %chk3.a = icmp ult i32 %x.inc3, %length_a
runOnFunction: I:  %chk3.b = icmp ult i32 %x.inc3, %length_b
runOnFunction: I:  %chk3 = and i1 %chk3.a, %chk3.b
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
runOnFunction: I:  ret void
INSTCOMBINE ITERATION: Inst(start):  %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(start):  %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(start):  %chk0.a = icmp ugt i32 %length_a, %x
INSTCOMBINE ITERATION: Inst(start):  %chk0.b = icmp ugt i32 %length_b, %x
INSTCOMBINE ITERATION: Inst(start):  %chk0 = and i1 %chk0.a, %chk0.b
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add nuw nsw i32 %x, 1
INSTCOMBINE ITERATION: Inst(start):  %chk1.a = icmp ult i32 %x.inc1, %length_a
INSTCOMBINE ITERATION: Inst(start):  %chk1.b = icmp ult i32 %x.inc1, %length_b
INSTCOMBINE ITERATION: Inst(start):  %chk1 = and i1 %chk1.a, %chk1.b
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add nuw nsw i32 %x, 2
INSTCOMBINE ITERATION: Inst(start):  %chk2.a = icmp ult i32 %x.inc2, %length_a
INSTCOMBINE ITERATION: Inst(start):  %chk2.b = icmp ult i32 %x.inc2, %length_b
INSTCOMBINE ITERATION: Inst(start):  %chk2 = and i1 %chk2.a, %chk2.b
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw nsw i32 %x, 3
INSTCOMBINE ITERATION: Inst(start):  %chk3.a = icmp ult i32 %x.inc3, %length_a
INSTCOMBINE ITERATION: Inst(start):  %chk3.b = icmp ult i32 %x.inc3, %length_b
INSTCOMBINE ITERATION: Inst(start):  %chk3 = and i1 %chk3.a, %chk3.b
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  ret void


INSTCOMBINE ITERATION #1 on f_7
INSTCOMBINE ITERATION: Inst(end):  %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(end):  %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(end):  %chk0.a = icmp ugt i32 %length_a, %x
INSTCOMBINE ITERATION: Inst(end):  %chk0.b = icmp ugt i32 %length_b, %x
INSTCOMBINE ITERATION: Inst(end):  %chk0 = and i1 %chk0.a, %chk0.b
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add nuw nsw i32 %x, 1
INSTCOMBINE ITERATION: Inst(end):  %chk1.a = icmp ult i32 %x.inc1, %length_a
INSTCOMBINE ITERATION: Inst(end):  %chk1.b = icmp ult i32 %x.inc1, %length_b
INSTCOMBINE ITERATION: Inst(end):  %chk1 = and i1 %chk1.a, %chk1.b
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add nuw nsw i32 %x, 2
INSTCOMBINE ITERATION: Inst(end):  %chk2.a = icmp ult i32 %x.inc2, %length_a
INSTCOMBINE ITERATION: Inst(end):  %chk2.b = icmp ult i32 %x.inc2, %length_b
INSTCOMBINE ITERATION: Inst(end):  %chk2 = and i1 %chk2.a, %chk2.b
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw nsw i32 %x, 3
INSTCOMBINE ITERATION: Inst(end):  %chk3.a = icmp ult i32 %x.inc3, %length_a
INSTCOMBINE ITERATION: Inst(end):  %chk3.b = icmp ult i32 %x.inc3, %length_b
INSTCOMBINE ITERATION: Inst(end):  %chk3 = and i1 %chk3.a, %chk3.b
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  ret void
chris-worklist-bb: bb: 
entry:
  %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
  %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
  %chk0.a = icmp ugt i32 %length_a, %x
  %chk0.b = icmp ugt i32 %length_b, %x
  %chk0 = and i1 %chk0.a, %chk0.b
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
  %x.inc1 = add nuw nsw i32 %x, 1
  %chk1.a = icmp ult i32 %x.inc1, %length_a
  %chk1.b = icmp ult i32 %x.inc1, %length_b
  %chk1 = and i1 %chk1.a, %chk1.b
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
  %x.inc2 = add nuw nsw i32 %x, 2
  %chk2.a = icmp ult i32 %x.inc2, %length_a
  %chk2.b = icmp ult i32 %x.inc2, %length_b
  %chk2 = and i1 %chk2.a, %chk2.b
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
  %x.inc3 = add nuw nsw i32 %x, 3
  %chk3.a = icmp ult i32 %x.inc3, %length_a
  %chk3.b = icmp ult i32 %x.inc3, %length_b
  %chk3 = and i1 %chk3.a, %chk3.b
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
  ret void

chris-worklist-bb: BB: 
entry:
  %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
  %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
  %chk0.a = icmp ugt i32 %length_a, %x
  %chk0.b = icmp ugt i32 %length_b, %x
  %chk0 = and i1 %chk0.a, %chk0.b
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
  %x.inc1 = add nuw nsw i32 %x, 1
  %chk1.a = icmp ult i32 %x.inc1, %length_a
  %chk1.b = icmp ult i32 %x.inc1, %length_b
  %chk1 = and i1 %chk1.a, %chk1.b
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
  %x.inc2 = add nuw nsw i32 %x, 2
  %chk2.a = icmp ult i32 %x.inc2, %length_a
  %chk2.b = icmp ult i32 %x.inc2, %length_b
  %chk2 = and i1 %chk2.a, %chk2.b
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
  %x.inc3 = add nuw nsw i32 %x, 3
  %chk3.a = icmp ult i32 %x.inc3, %length_a
  %chk3.b = icmp ult i32 %x.inc3, %length_b
  %chk3 = and i1 %chk3.a, %chk3.b
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
  ret void

chris-worklist-bb: BB end:   %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
chris-worklist-bb: BB end:   %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
chris-worklist-bb: BB end:   %chk0.a = icmp ugt i32 %length_a, %x
chris-worklist-bb: BB end:   %chk0.b = icmp ugt i32 %length_b, %x
chris-worklist-bb: BB end:   %chk0 = and i1 %chk0.a, %chk0.b
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc1 = add nuw nsw i32 %x, 1
chris-worklist-bb: BB end:   %chk1.a = icmp ult i32 %x.inc1, %length_a
chris-worklist-bb: BB end:   %chk1.b = icmp ult i32 %x.inc1, %length_b
chris-worklist-bb: BB end:   %chk1 = and i1 %chk1.a, %chk1.b
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc2 = add nuw nsw i32 %x, 2
chris-worklist-bb: BB end:   %chk2.a = icmp ult i32 %x.inc2, %length_a
chris-worklist-bb: BB end:   %chk2.b = icmp ult i32 %x.inc2, %length_b
chris-worklist-bb: BB end:   %chk2 = and i1 %chk2.a, %chk2.b
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc3 = add nuw nsw i32 %x, 3
chris-worklist-bb: BB end:   %chk3.a = icmp ult i32 %x.inc3, %length_a
chris-worklist-bb: BB end:   %chk3.b = icmp ult i32 %x.inc3, %length_b
chris-worklist-bb: BB end:   %chk3 = and i1 %chk3.a, %chk3.b
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
chris-worklist-bb: BB end:   ret void
IC: ADDING: 22 instrs to worklist
chris-AddInitialGroup: I:   ret void
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
chris-AddInitialGroup: I:   %chk3 = and i1 %chk3.a, %chk3.b
chris-AddInitialGroup: I:   %chk3.b = icmp ult i32 %x.inc3, %length_b
chris-AddInitialGroup: I:   %chk3.a = icmp ult i32 %x.inc3, %length_a
chris-AddInitialGroup: I:   %x.inc3 = add nuw nsw i32 %x, 3
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-AddInitialGroup: I:   %chk2 = and i1 %chk2.a, %chk2.b
chris-AddInitialGroup: I:   %chk2.b = icmp ult i32 %x.inc2, %length_b
chris-AddInitialGroup: I:   %chk2.a = icmp ult i32 %x.inc2, %length_a
chris-AddInitialGroup: I:   %x.inc2 = add nuw nsw i32 %x, 2
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
chris-AddInitialGroup: I:   %chk1 = and i1 %chk1.a, %chk1.b
chris-AddInitialGroup: I:   %chk1.b = icmp ult i32 %x.inc1, %length_b
chris-AddInitialGroup: I:   %chk1.a = icmp ult i32 %x.inc1, %length_a
chris-AddInitialGroup: I:   %x.inc1 = add nuw nsw i32 %x, 1
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-AddInitialGroup: I:   %chk0 = and i1 %chk0.a, %chk0.b
chris-AddInitialGroup: I:   %chk0.b = icmp ugt i32 %length_b, %x
chris-AddInitialGroup: I:   %chk0.a = icmp ugt i32 %length_a, %x
chris-AddInitialGroup: I:   %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
chris-AddInitialGroup: I:   %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
RemoveOne!!!
chris-RemoveOne:   %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
chris-RemoveOne: return I  %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
run: WorkList:   %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
chris-run: I=  %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
chris-run: I-end=  %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
IC: Visiting:   %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
test1: I=  %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
chris-RemoveOne: return I  %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
run: WorkList:   %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
chris-run: I=  %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
chris-run: I-end=  %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
IC: Visiting:   %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
test1: I=  %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0.a = icmp ugt i32 %length_a, %x
chris-RemoveOne: return I  %chk0.a = icmp ugt i32 %length_a, %x
run: WorkList:   %chk0.a = icmp ugt i32 %length_a, %x
chris-run: I=  %chk0.a = icmp ugt i32 %length_a, %x
chris-run: I-end=  %chk0.a = icmp ugt i32 %length_a, %x
IC: Visiting:   %chk0.a = icmp ugt i32 %length_a, %x
test1: I=  %chk0.a = icmp ugt i32 %length_a, %x
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0.b = icmp ugt i32 %length_b, %x
chris-RemoveOne: return I  %chk0.b = icmp ugt i32 %length_b, %x
run: WorkList:   %chk0.b = icmp ugt i32 %length_b, %x
chris-run: I=  %chk0.b = icmp ugt i32 %length_b, %x
chris-run: I-end=  %chk0.b = icmp ugt i32 %length_b, %x
IC: Visiting:   %chk0.b = icmp ugt i32 %length_b, %x
test1: I=  %chk0.b = icmp ugt i32 %length_b, %x
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = and i1 %chk0.a, %chk0.b
chris-RemoveOne: return I  %chk0 = and i1 %chk0.a, %chk0.b
run: WorkList:   %chk0 = and i1 %chk0.a, %chk0.b
chris-run: I=  %chk0 = and i1 %chk0.a, %chk0.b
chris-run: I-end=  %chk0 = and i1 %chk0.a, %chk0.b
IC: Visiting:   %chk0 = and i1 %chk0.a, %chk0.b
test1: I=  %chk0 = and i1 %chk0.a, %chk0.b
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = add nuw nsw i32 %x, 1
NextInst[0]   %chk1.a = icmp ult i32 %x.inc1, %length_a
NextInst[1]   %chk1.b = icmp ult i32 %x.inc1, %length_b
NextInst[2]   %chk1 = and i1 %chk1.a, %chk1.b
Inst[end]:   %chk1 = and i1 %chk1.a, %chk1.b
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add nuw nsw i32 %x, 1
chris-RemoveOne: return I  %x.inc1 = add nuw nsw i32 %x, 1
run: WorkList:   %x.inc1 = add nuw nsw i32 %x, 1
chris-run: I=  %x.inc1 = add nuw nsw i32 %x, 1
chris-run: I-end=  %x.inc1 = add nuw nsw i32 %x, 1
IC: Visiting:   %x.inc1 = add nuw nsw i32 %x, 1
test1: I=  %x.inc1 = add nuw nsw i32 %x, 1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1.a = icmp ult i32 %x.inc1, %length_a
chris-RemoveOne: return I  %chk1.a = icmp ult i32 %x.inc1, %length_a
run: WorkList:   %chk1.a = icmp ult i32 %x.inc1, %length_a
chris-run: I=  %chk1.a = icmp ult i32 %x.inc1, %length_a
chris-run: I-end=  %chk1.a = icmp ult i32 %x.inc1, %length_a
IC: Visiting:   %chk1.a = icmp ult i32 %x.inc1, %length_a
test1: I=  %chk1.a = icmp ult i32 %x.inc1, %length_a
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1.b = icmp ult i32 %x.inc1, %length_b
chris-RemoveOne: return I  %chk1.b = icmp ult i32 %x.inc1, %length_b
run: WorkList:   %chk1.b = icmp ult i32 %x.inc1, %length_b
chris-run: I=  %chk1.b = icmp ult i32 %x.inc1, %length_b
chris-run: I-end=  %chk1.b = icmp ult i32 %x.inc1, %length_b
IC: Visiting:   %chk1.b = icmp ult i32 %x.inc1, %length_b
test1: I=  %chk1.b = icmp ult i32 %x.inc1, %length_b
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = and i1 %chk1.a, %chk1.b
chris-RemoveOne: return I  %chk1 = and i1 %chk1.a, %chk1.b
run: WorkList:   %chk1 = and i1 %chk1.a, %chk1.b
chris-run: I=  %chk1 = and i1 %chk1.a, %chk1.b
chris-run: I-end=  %chk1 = and i1 %chk1.a, %chk1.b
IC: Visiting:   %chk1 = and i1 %chk1.a, %chk1.b
test1: I=  %chk1 = and i1 %chk1.a, %chk1.b
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add nuw nsw i32 %x, 2
NextInst[0]   %chk2.a = icmp ult i32 %x.inc2, %length_a
NextInst[1]   %chk2.b = icmp ult i32 %x.inc2, %length_b
NextInst[2]   %chk2 = and i1 %chk2.a, %chk2.b
Inst[end]:   %chk2 = and i1 %chk2.a, %chk2.b
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add nuw nsw i32 %x, 2
chris-RemoveOne: return I  %x.inc2 = add nuw nsw i32 %x, 2
run: WorkList:   %x.inc2 = add nuw nsw i32 %x, 2
chris-run: I=  %x.inc2 = add nuw nsw i32 %x, 2
chris-run: I-end=  %x.inc2 = add nuw nsw i32 %x, 2
IC: Visiting:   %x.inc2 = add nuw nsw i32 %x, 2
test1: I=  %x.inc2 = add nuw nsw i32 %x, 2
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2.a = icmp ult i32 %x.inc2, %length_a
chris-RemoveOne: return I  %chk2.a = icmp ult i32 %x.inc2, %length_a
run: WorkList:   %chk2.a = icmp ult i32 %x.inc2, %length_a
chris-run: I=  %chk2.a = icmp ult i32 %x.inc2, %length_a
chris-run: I-end=  %chk2.a = icmp ult i32 %x.inc2, %length_a
IC: Visiting:   %chk2.a = icmp ult i32 %x.inc2, %length_a
test1: I=  %chk2.a = icmp ult i32 %x.inc2, %length_a
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2.b = icmp ult i32 %x.inc2, %length_b
chris-RemoveOne: return I  %chk2.b = icmp ult i32 %x.inc2, %length_b
run: WorkList:   %chk2.b = icmp ult i32 %x.inc2, %length_b
chris-run: I=  %chk2.b = icmp ult i32 %x.inc2, %length_b
chris-run: I-end=  %chk2.b = icmp ult i32 %x.inc2, %length_b
IC: Visiting:   %chk2.b = icmp ult i32 %x.inc2, %length_b
test1: I=  %chk2.b = icmp ult i32 %x.inc2, %length_b
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = and i1 %chk2.a, %chk2.b
chris-RemoveOne: return I  %chk2 = and i1 %chk2.a, %chk2.b
run: WorkList:   %chk2 = and i1 %chk2.a, %chk2.b
chris-run: I=  %chk2 = and i1 %chk2.a, %chk2.b
chris-run: I-end=  %chk2 = and i1 %chk2.a, %chk2.b
IC: Visiting:   %chk2 = and i1 %chk2.a, %chk2.b
test1: I=  %chk2 = and i1 %chk2.a, %chk2.b
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add nuw nsw i32 %x, 3
NextInst[0]   %chk3.a = icmp ult i32 %x.inc3, %length_a
NextInst[1]   %chk3.b = icmp ult i32 %x.inc3, %length_b
NextInst[2]   %chk3 = and i1 %chk3.a, %chk3.b
Inst[end]:   %chk3 = and i1 %chk3.a, %chk3.b
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw nsw i32 %x, 3
chris-RemoveOne: return I  %x.inc3 = add nuw nsw i32 %x, 3
run: WorkList:   %x.inc3 = add nuw nsw i32 %x, 3
chris-run: I=  %x.inc3 = add nuw nsw i32 %x, 3
chris-run: I-end=  %x.inc3 = add nuw nsw i32 %x, 3
IC: Visiting:   %x.inc3 = add nuw nsw i32 %x, 3
test1: I=  %x.inc3 = add nuw nsw i32 %x, 3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3.a = icmp ult i32 %x.inc3, %length_a
chris-RemoveOne: return I  %chk3.a = icmp ult i32 %x.inc3, %length_a
run: WorkList:   %chk3.a = icmp ult i32 %x.inc3, %length_a
chris-run: I=  %chk3.a = icmp ult i32 %x.inc3, %length_a
chris-run: I-end=  %chk3.a = icmp ult i32 %x.inc3, %length_a
IC: Visiting:   %chk3.a = icmp ult i32 %x.inc3, %length_a
test1: I=  %chk3.a = icmp ult i32 %x.inc3, %length_a
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3.b = icmp ult i32 %x.inc3, %length_b
chris-RemoveOne: return I  %chk3.b = icmp ult i32 %x.inc3, %length_b
run: WorkList:   %chk3.b = icmp ult i32 %x.inc3, %length_b
chris-run: I=  %chk3.b = icmp ult i32 %x.inc3, %length_b
chris-run: I-end=  %chk3.b = icmp ult i32 %x.inc3, %length_b
IC: Visiting:   %chk3.b = icmp ult i32 %x.inc3, %length_b
test1: I=  %chk3.b = icmp ult i32 %x.inc3, %length_b
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = and i1 %chk3.a, %chk3.b
chris-RemoveOne: return I  %chk3 = and i1 %chk3.a, %chk3.b
run: WorkList:   %chk3 = and i1 %chk3.a, %chk3.b
chris-run: I=  %chk3 = and i1 %chk3.a, %chk3.b
chris-run: I-end=  %chk3 = and i1 %chk3.a, %chk3.b
IC: Visiting:   %chk3 = and i1 %chk3.a, %chk3.b
test1: I=  %chk3 = and i1 %chk3.a, %chk3.b
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void
 ok, break
Inst[end]:   ret void
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void
chris-RemoveOne: return I  ret void
run: WorkList:   ret void
chris-run: I=  ret void
chris-run: I-end=  ret void
IC: Visiting:   ret void
test1: I=  ret void
visit: nullptr 
test3
test4
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !range !0
runOnFunction: I:  %chk0 = icmp ugt i32 %length, %x
runOnFunction: I:  %x.inc1 = add i32 %x, 1
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length
runOnFunction: I:  %0 = and i1 %chk0, %chk1
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
runOnFunction: I:  %x.inc2 = add nuw nsw i32 %x, 2
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length
runOnFunction: I:  %x.inc3 = add nuw i32 %x, 3
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length
runOnFunction: I:  %1 = and i1 %chk2, %chk3
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
runOnFunction: I:  ret void
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add i32 %x, 1
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(start):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add nuw nsw i32 %x, 2
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw i32 %x, 3
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(start):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  ret void


INSTCOMBINE ITERATION #1 on f_0
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add i32 %x, 1
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(end):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add nuw nsw i32 %x, 2
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw i32 %x, 3
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(end):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  ret void
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add nuw nsw i32 %x, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add nuw i32 %x, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add nuw nsw i32 %x, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add nuw i32 %x, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x
chris-worklist-bb: BB end:   %x.inc1 = add i32 %x, 1
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length
chris-worklist-bb: BB end:   %0 = and i1 %chk0, %chk1
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc2 = add nuw nsw i32 %x, 2
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length
chris-worklist-bb: BB end:   %x.inc3 = add nuw i32 %x, 3
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length
chris-worklist-bb: BB end:   %1 = and i1 %chk2, %chk3
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-worklist-bb: BB end:   ret void
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-AddInitialGroup: I:   %1 = and i1 %chk2, %chk3
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length
chris-AddInitialGroup: I:   %x.inc3 = add nuw i32 %x, 3
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length
chris-AddInitialGroup: I:   %x.inc2 = add nuw nsw i32 %x, 2
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-AddInitialGroup: I:   %0 = and i1 %chk0, %chk1
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length
chris-AddInitialGroup: I:   %x.inc1 = add i32 %x, 1
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !range !0
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !range !0
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !range !0
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !range !0
test1: I=  %length = load i32, i32* %length_buf, align 4, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x
run: WorkList:   %chk0 = icmp ugt i32 %length, %x
chris-run: I=  %chk0 = icmp ugt i32 %length, %x
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x
test1: I=  %chk0 = icmp ugt i32 %length, %x
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add i32 %x, 1
chris-RemoveOne: return I  %x.inc1 = add i32 %x, 1
run: WorkList:   %x.inc1 = add i32 %x, 1
chris-run: I=  %x.inc1 = add i32 %x, 1
chris-run: I-end=  %x.inc1 = add i32 %x, 1
IC: Visiting:   %x.inc1 = add i32 %x, 1
test1: I=  %x.inc1 = add i32 %x, 1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %0 = and i1 %chk0, %chk1
chris-RemoveOne: return I  %0 = and i1 %chk0, %chk1
run: WorkList:   %0 = and i1 %chk0, %chk1
chris-run: I=  %0 = and i1 %chk0, %chk1
chris-run: I-end=  %0 = and i1 %chk0, %chk1
IC: Visiting:   %0 = and i1 %chk0, %chk1
test1: I=  %0 = and i1 %chk0, %chk1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add nuw nsw i32 %x, 2
NextInst[0]   %chk2 = icmp ult i32 %x.inc2, %length
NextInst[1]   %x.inc3 = add nuw i32 %x, 3
NextInst[2]   %chk3 = icmp ult i32 %x.inc3, %length
Inst[end]:   %chk3 = icmp ult i32 %x.inc3, %length
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add nuw nsw i32 %x, 2
chris-RemoveOne: return I  %x.inc2 = add nuw nsw i32 %x, 2
run: WorkList:   %x.inc2 = add nuw nsw i32 %x, 2
chris-run: I=  %x.inc2 = add nuw nsw i32 %x, 2
chris-run: I-end=  %x.inc2 = add nuw nsw i32 %x, 2
IC: Visiting:   %x.inc2 = add nuw nsw i32 %x, 2
test1: I=  %x.inc2 = add nuw nsw i32 %x, 2
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw i32 %x, 3
chris-RemoveOne: return I  %x.inc3 = add nuw i32 %x, 3
run: WorkList:   %x.inc3 = add nuw i32 %x, 3
chris-run: I=  %x.inc3 = add nuw i32 %x, 3
chris-run: I-end=  %x.inc3 = add nuw i32 %x, 3
IC: Visiting:   %x.inc3 = add nuw i32 %x, 3
test1: I=  %x.inc3 = add nuw i32 %x, 3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %1 = and i1 %chk2, %chk3
chris-RemoveOne: return I  %1 = and i1 %chk2, %chk3
run: WorkList:   %1 = and i1 %chk2, %chk3
chris-run: I=  %1 = and i1 %chk2, %chk3
chris-run: I-end=  %1 = and i1 %chk2, %chk3
IC: Visiting:   %1 = and i1 %chk2, %chk3
test1: I=  %1 = and i1 %chk2, %chk3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void
 ok, break
Inst[end]:   ret void
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void
chris-RemoveOne: return I  ret void
run: WorkList:   ret void
chris-run: I=  ret void
chris-run: I-end=  ret void
IC: Visiting:   ret void
test1: I=  ret void
visit: nullptr 
test3
test4
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !range !0
runOnFunction: I:  %chk0 = icmp ugt i32 %length, %x
runOnFunction: I:  %x.inc1 = add i32 %x, 1
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length
runOnFunction: I:  %0 = and i1 %chk0, %chk1
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
runOnFunction: I:  %x.inc2 = add nuw nsw i32 %x, 2
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length
runOnFunction: I:  %x.inc3 = add nuw i32 %x, 3
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length
runOnFunction: I:  %1 = and i1 %chk2, %chk3
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
runOnFunction: I:  ret void
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add i32 %x, 1
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(start):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add nuw nsw i32 %x, 2
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw i32 %x, 3
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(start):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  ret void


INSTCOMBINE ITERATION #1 on f_0
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add i32 %x, 1
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(end):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add nuw nsw i32 %x, 2
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw i32 %x, 3
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(end):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  ret void
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add nuw nsw i32 %x, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add nuw i32 %x, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add nuw nsw i32 %x, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add nuw i32 %x, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x
chris-worklist-bb: BB end:   %x.inc1 = add i32 %x, 1
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length
chris-worklist-bb: BB end:   %0 = and i1 %chk0, %chk1
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc2 = add nuw nsw i32 %x, 2
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length
chris-worklist-bb: BB end:   %x.inc3 = add nuw i32 %x, 3
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length
chris-worklist-bb: BB end:   %1 = and i1 %chk2, %chk3
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-worklist-bb: BB end:   ret void
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-AddInitialGroup: I:   %1 = and i1 %chk2, %chk3
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length
chris-AddInitialGroup: I:   %x.inc3 = add nuw i32 %x, 3
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length
chris-AddInitialGroup: I:   %x.inc2 = add nuw nsw i32 %x, 2
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-AddInitialGroup: I:   %0 = and i1 %chk0, %chk1
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length
chris-AddInitialGroup: I:   %x.inc1 = add i32 %x, 1
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !range !0
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !range !0
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !range !0
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !range !0
test1: I=  %length = load i32, i32* %length_buf, align 4, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x
run: WorkList:   %chk0 = icmp ugt i32 %length, %x
chris-run: I=  %chk0 = icmp ugt i32 %length, %x
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x
test1: I=  %chk0 = icmp ugt i32 %length, %x
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add i32 %x, 1
chris-RemoveOne: return I  %x.inc1 = add i32 %x, 1
run: WorkList:   %x.inc1 = add i32 %x, 1
chris-run: I=  %x.inc1 = add i32 %x, 1
chris-run: I-end=  %x.inc1 = add i32 %x, 1
IC: Visiting:   %x.inc1 = add i32 %x, 1
test1: I=  %x.inc1 = add i32 %x, 1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %0 = and i1 %chk0, %chk1
chris-RemoveOne: return I  %0 = and i1 %chk0, %chk1
run: WorkList:   %0 = and i1 %chk0, %chk1
chris-run: I=  %0 = and i1 %chk0, %chk1
chris-run: I-end=  %0 = and i1 %chk0, %chk1
IC: Visiting:   %0 = and i1 %chk0, %chk1
test1: I=  %0 = and i1 %chk0, %chk1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add nuw nsw i32 %x, 2
NextInst[0]   %chk2 = icmp ult i32 %x.inc2, %length
NextInst[1]   %x.inc3 = add nuw i32 %x, 3
NextInst[2]   %chk3 = icmp ult i32 %x.inc3, %length
Inst[end]:   %chk3 = icmp ult i32 %x.inc3, %length
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add nuw nsw i32 %x, 2
chris-RemoveOne: return I  %x.inc2 = add nuw nsw i32 %x, 2
run: WorkList:   %x.inc2 = add nuw nsw i32 %x, 2
chris-run: I=  %x.inc2 = add nuw nsw i32 %x, 2
chris-run: I-end=  %x.inc2 = add nuw nsw i32 %x, 2
IC: Visiting:   %x.inc2 = add nuw nsw i32 %x, 2
test1: I=  %x.inc2 = add nuw nsw i32 %x, 2
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw i32 %x, 3
chris-RemoveOne: return I  %x.inc3 = add nuw i32 %x, 3
run: WorkList:   %x.inc3 = add nuw i32 %x, 3
chris-run: I=  %x.inc3 = add nuw i32 %x, 3
chris-run: I-end=  %x.inc3 = add nuw i32 %x, 3
IC: Visiting:   %x.inc3 = add nuw i32 %x, 3
test1: I=  %x.inc3 = add nuw i32 %x, 3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %1 = and i1 %chk2, %chk3
chris-RemoveOne: return I  %1 = and i1 %chk2, %chk3
run: WorkList:   %1 = and i1 %chk2, %chk3
chris-run: I=  %1 = and i1 %chk2, %chk3
chris-run: I-end=  %1 = and i1 %chk2, %chk3
IC: Visiting:   %1 = and i1 %chk2, %chk3
test1: I=  %1 = and i1 %chk2, %chk3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void
 ok, break
Inst[end]:   ret void
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void
chris-RemoveOne: return I  ret void
run: WorkList:   ret void
chris-run: I=  ret void
chris-run: I-end=  ret void
IC: Visiting:   ret void
test1: I=  ret void
visit: nullptr 
test3
test4
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !range !0
runOnFunction: I:  %chk0 = icmp ugt i32 %length, %x
runOnFunction: I:  %x.inc1 = add i32 %x, 1
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length
runOnFunction: I:  %0 = and i1 %chk0, %chk1
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
runOnFunction: I:  %x.inc2 = add nuw nsw i32 %x, 2
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length
runOnFunction: I:  %x.inc3 = add nuw i32 %x, 3
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length
runOnFunction: I:  %1 = and i1 %chk2, %chk3
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
runOnFunction: I:  ret void
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add i32 %x, 1
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(start):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add nuw nsw i32 %x, 2
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw i32 %x, 3
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(start):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  ret void


INSTCOMBINE ITERATION #1 on f_0
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add i32 %x, 1
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(end):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add nuw nsw i32 %x, 2
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw i32 %x, 3
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(end):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  ret void
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add nuw nsw i32 %x, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add nuw i32 %x, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add nuw nsw i32 %x, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add nuw i32 %x, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x
chris-worklist-bb: BB end:   %x.inc1 = add i32 %x, 1
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length
chris-worklist-bb: BB end:   %0 = and i1 %chk0, %chk1
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc2 = add nuw nsw i32 %x, 2
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length
chris-worklist-bb: BB end:   %x.inc3 = add nuw i32 %x, 3
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length
chris-worklist-bb: BB end:   %1 = and i1 %chk2, %chk3
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-worklist-bb: BB end:   ret void
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-AddInitialGroup: I:   %1 = and i1 %chk2, %chk3
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length
chris-AddInitialGroup: I:   %x.inc3 = add nuw i32 %x, 3
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length
chris-AddInitialGroup: I:   %x.inc2 = add nuw nsw i32 %x, 2
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-AddInitialGroup: I:   %0 = and i1 %chk0, %chk1
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length
chris-AddInitialGroup: I:   %x.inc1 = add i32 %x, 1
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !range !0
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !range !0
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !range !0
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !range !0
test1: I=  %length = load i32, i32* %length_buf, align 4, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x
run: WorkList:   %chk0 = icmp ugt i32 %length, %x
chris-run: I=  %chk0 = icmp ugt i32 %length, %x
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x
test1: I=  %chk0 = icmp ugt i32 %length, %x
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add i32 %x, 1
chris-RemoveOne: return I  %x.inc1 = add i32 %x, 1
run: WorkList:   %x.inc1 = add i32 %x, 1
chris-run: I=  %x.inc1 = add i32 %x, 1
chris-run: I-end=  %x.inc1 = add i32 %x, 1
IC: Visiting:   %x.inc1 = add i32 %x, 1
test1: I=  %x.inc1 = add i32 %x, 1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %0 = and i1 %chk0, %chk1
chris-RemoveOne: return I  %0 = and i1 %chk0, %chk1
run: WorkList:   %0 = and i1 %chk0, %chk1
chris-run: I=  %0 = and i1 %chk0, %chk1
chris-run: I-end=  %0 = and i1 %chk0, %chk1
IC: Visiting:   %0 = and i1 %chk0, %chk1
test1: I=  %0 = and i1 %chk0, %chk1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add nuw nsw i32 %x, 2
NextInst[0]   %chk2 = icmp ult i32 %x.inc2, %length
NextInst[1]   %x.inc3 = add nuw i32 %x, 3
NextInst[2]   %chk3 = icmp ult i32 %x.inc3, %length
Inst[end]:   %chk3 = icmp ult i32 %x.inc3, %length
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add nuw nsw i32 %x, 2
chris-RemoveOne: return I  %x.inc2 = add nuw nsw i32 %x, 2
run: WorkList:   %x.inc2 = add nuw nsw i32 %x, 2
chris-run: I=  %x.inc2 = add nuw nsw i32 %x, 2
chris-run: I-end=  %x.inc2 = add nuw nsw i32 %x, 2
IC: Visiting:   %x.inc2 = add nuw nsw i32 %x, 2
test1: I=  %x.inc2 = add nuw nsw i32 %x, 2
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw i32 %x, 3
chris-RemoveOne: return I  %x.inc3 = add nuw i32 %x, 3
run: WorkList:   %x.inc3 = add nuw i32 %x, 3
chris-run: I=  %x.inc3 = add nuw i32 %x, 3
chris-run: I-end=  %x.inc3 = add nuw i32 %x, 3
IC: Visiting:   %x.inc3 = add nuw i32 %x, 3
test1: I=  %x.inc3 = add nuw i32 %x, 3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %1 = and i1 %chk2, %chk3
chris-RemoveOne: return I  %1 = and i1 %chk2, %chk3
run: WorkList:   %1 = and i1 %chk2, %chk3
chris-run: I=  %1 = and i1 %chk2, %chk3
chris-run: I-end=  %1 = and i1 %chk2, %chk3
IC: Visiting:   %1 = and i1 %chk2, %chk3
test1: I=  %1 = and i1 %chk2, %chk3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void
 ok, break
Inst[end]:   ret void
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void
chris-RemoveOne: return I  ret void
run: WorkList:   ret void
chris-run: I=  ret void
chris-run: I-end=  ret void
IC: Visiting:   ret void
test1: I=  ret void
visit: nullptr 
test3
test4
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !range !0
runOnFunction: I:  %chk0 = icmp ugt i32 %length, %x
runOnFunction: I:  %x.inc1 = add i32 %x, 1
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length
runOnFunction: I:  %0 = and i1 %chk0, %chk1
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
runOnFunction: I:  %x.inc2 = add nuw i32 %x, 3
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length
runOnFunction: I:  %x.inc3 = add nuw i32 %x, 6
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length
runOnFunction: I:  %1 = and i1 %chk2, %chk3
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
runOnFunction: I:  ret void
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add i32 %x, 1
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(start):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add nuw i32 %x, 3
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw i32 %x, 6
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(start):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  ret void


INSTCOMBINE ITERATION #1 on f_1
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add i32 %x, 1
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(end):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add nuw i32 %x, 3
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw i32 %x, 6
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(end):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  ret void
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add nuw i32 %x, 3
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add nuw i32 %x, 6
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add nuw i32 %x, 3
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add nuw i32 %x, 6
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x
chris-worklist-bb: BB end:   %x.inc1 = add i32 %x, 1
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length
chris-worklist-bb: BB end:   %0 = and i1 %chk0, %chk1
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc2 = add nuw i32 %x, 3
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length
chris-worklist-bb: BB end:   %x.inc3 = add nuw i32 %x, 6
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length
chris-worklist-bb: BB end:   %1 = and i1 %chk2, %chk3
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-worklist-bb: BB end:   ret void
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-AddInitialGroup: I:   %1 = and i1 %chk2, %chk3
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length
chris-AddInitialGroup: I:   %x.inc3 = add nuw i32 %x, 6
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length
chris-AddInitialGroup: I:   %x.inc2 = add nuw i32 %x, 3
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-AddInitialGroup: I:   %0 = and i1 %chk0, %chk1
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length
chris-AddInitialGroup: I:   %x.inc1 = add i32 %x, 1
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !range !0
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !range !0
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !range !0
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !range !0
test1: I=  %length = load i32, i32* %length_buf, align 4, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x
run: WorkList:   %chk0 = icmp ugt i32 %length, %x
chris-run: I=  %chk0 = icmp ugt i32 %length, %x
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x
test1: I=  %chk0 = icmp ugt i32 %length, %x
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add i32 %x, 1
chris-RemoveOne: return I  %x.inc1 = add i32 %x, 1
run: WorkList:   %x.inc1 = add i32 %x, 1
chris-run: I=  %x.inc1 = add i32 %x, 1
chris-run: I-end=  %x.inc1 = add i32 %x, 1
IC: Visiting:   %x.inc1 = add i32 %x, 1
test1: I=  %x.inc1 = add i32 %x, 1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %0 = and i1 %chk0, %chk1
chris-RemoveOne: return I  %0 = and i1 %chk0, %chk1
run: WorkList:   %0 = and i1 %chk0, %chk1
chris-run: I=  %0 = and i1 %chk0, %chk1
chris-run: I-end=  %0 = and i1 %chk0, %chk1
IC: Visiting:   %0 = and i1 %chk0, %chk1
test1: I=  %0 = and i1 %chk0, %chk1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add nuw i32 %x, 3
NextInst[0]   %chk2 = icmp ult i32 %x.inc2, %length
NextInst[1]   %x.inc3 = add nuw i32 %x, 6
NextInst[2]   %chk3 = icmp ult i32 %x.inc3, %length
Inst[end]:   %chk3 = icmp ult i32 %x.inc3, %length
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add nuw i32 %x, 3
chris-RemoveOne: return I  %x.inc2 = add nuw i32 %x, 3
run: WorkList:   %x.inc2 = add nuw i32 %x, 3
chris-run: I=  %x.inc2 = add nuw i32 %x, 3
chris-run: I-end=  %x.inc2 = add nuw i32 %x, 3
IC: Visiting:   %x.inc2 = add nuw i32 %x, 3
test1: I=  %x.inc2 = add nuw i32 %x, 3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw i32 %x, 6
chris-RemoveOne: return I  %x.inc3 = add nuw i32 %x, 6
run: WorkList:   %x.inc3 = add nuw i32 %x, 6
chris-run: I=  %x.inc3 = add nuw i32 %x, 6
chris-run: I-end=  %x.inc3 = add nuw i32 %x, 6
IC: Visiting:   %x.inc3 = add nuw i32 %x, 6
test1: I=  %x.inc3 = add nuw i32 %x, 6
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %1 = and i1 %chk2, %chk3
chris-RemoveOne: return I  %1 = and i1 %chk2, %chk3
run: WorkList:   %1 = and i1 %chk2, %chk3
chris-run: I=  %1 = and i1 %chk2, %chk3
chris-run: I-end=  %1 = and i1 %chk2, %chk3
IC: Visiting:   %1 = and i1 %chk2, %chk3
test1: I=  %1 = and i1 %chk2, %chk3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void
 ok, break
Inst[end]:   ret void
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void
chris-RemoveOne: return I  ret void
run: WorkList:   ret void
chris-run: I=  ret void
chris-run: I-end=  ret void
IC: Visiting:   ret void
test1: I=  ret void
visit: nullptr 
test3
test4
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !range !0
runOnFunction: I:  %chk0 = icmp ugt i32 %length, %x
runOnFunction: I:  %x.inc1 = add i32 %x, 1
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length
runOnFunction: I:  %0 = and i1 %chk0, %chk1
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
runOnFunction: I:  %x.inc2 = add nuw i32 %x, 3
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length
runOnFunction: I:  %x.inc3 = add nuw i32 %x, 6
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length
runOnFunction: I:  %1 = and i1 %chk2, %chk3
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
runOnFunction: I:  ret void
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add i32 %x, 1
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(start):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add nuw i32 %x, 3
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw i32 %x, 6
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(start):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  ret void


INSTCOMBINE ITERATION #1 on f_1
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add i32 %x, 1
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(end):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add nuw i32 %x, 3
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw i32 %x, 6
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(end):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  ret void
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add nuw i32 %x, 3
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add nuw i32 %x, 6
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add nuw i32 %x, 3
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add nuw i32 %x, 6
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x
chris-worklist-bb: BB end:   %x.inc1 = add i32 %x, 1
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length
chris-worklist-bb: BB end:   %0 = and i1 %chk0, %chk1
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc2 = add nuw i32 %x, 3
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length
chris-worklist-bb: BB end:   %x.inc3 = add nuw i32 %x, 6
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length
chris-worklist-bb: BB end:   %1 = and i1 %chk2, %chk3
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-worklist-bb: BB end:   ret void
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-AddInitialGroup: I:   %1 = and i1 %chk2, %chk3
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length
chris-AddInitialGroup: I:   %x.inc3 = add nuw i32 %x, 6
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length
chris-AddInitialGroup: I:   %x.inc2 = add nuw i32 %x, 3
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-AddInitialGroup: I:   %0 = and i1 %chk0, %chk1
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length
chris-AddInitialGroup: I:   %x.inc1 = add i32 %x, 1
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !range !0
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !range !0
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !range !0
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !range !0
test1: I=  %length = load i32, i32* %length_buf, align 4, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x
run: WorkList:   %chk0 = icmp ugt i32 %length, %x
chris-run: I=  %chk0 = icmp ugt i32 %length, %x
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x
test1: I=  %chk0 = icmp ugt i32 %length, %x
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add i32 %x, 1
chris-RemoveOne: return I  %x.inc1 = add i32 %x, 1
run: WorkList:   %x.inc1 = add i32 %x, 1
chris-run: I=  %x.inc1 = add i32 %x, 1
chris-run: I-end=  %x.inc1 = add i32 %x, 1
IC: Visiting:   %x.inc1 = add i32 %x, 1
test1: I=  %x.inc1 = add i32 %x, 1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %0 = and i1 %chk0, %chk1
chris-RemoveOne: return I  %0 = and i1 %chk0, %chk1
run: WorkList:   %0 = and i1 %chk0, %chk1
chris-run: I=  %0 = and i1 %chk0, %chk1
chris-run: I-end=  %0 = and i1 %chk0, %chk1
IC: Visiting:   %0 = and i1 %chk0, %chk1
test1: I=  %0 = and i1 %chk0, %chk1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add nuw i32 %x, 3
NextInst[0]   %chk2 = icmp ult i32 %x.inc2, %length
NextInst[1]   %x.inc3 = add nuw i32 %x, 6
NextInst[2]   %chk3 = icmp ult i32 %x.inc3, %length
Inst[end]:   %chk3 = icmp ult i32 %x.inc3, %length
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add nuw i32 %x, 3
chris-RemoveOne: return I  %x.inc2 = add nuw i32 %x, 3
run: WorkList:   %x.inc2 = add nuw i32 %x, 3
chris-run: I=  %x.inc2 = add nuw i32 %x, 3
chris-run: I-end=  %x.inc2 = add nuw i32 %x, 3
IC: Visiting:   %x.inc2 = add nuw i32 %x, 3
test1: I=  %x.inc2 = add nuw i32 %x, 3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw i32 %x, 6
chris-RemoveOne: return I  %x.inc3 = add nuw i32 %x, 6
run: WorkList:   %x.inc3 = add nuw i32 %x, 6
chris-run: I=  %x.inc3 = add nuw i32 %x, 6
chris-run: I-end=  %x.inc3 = add nuw i32 %x, 6
IC: Visiting:   %x.inc3 = add nuw i32 %x, 6
test1: I=  %x.inc3 = add nuw i32 %x, 6
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %1 = and i1 %chk2, %chk3
chris-RemoveOne: return I  %1 = and i1 %chk2, %chk3
run: WorkList:   %1 = and i1 %chk2, %chk3
chris-run: I=  %1 = and i1 %chk2, %chk3
chris-run: I-end=  %1 = and i1 %chk2, %chk3
IC: Visiting:   %1 = and i1 %chk2, %chk3
test1: I=  %1 = and i1 %chk2, %chk3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void
 ok, break
Inst[end]:   ret void
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void
chris-RemoveOne: return I  ret void
run: WorkList:   ret void
chris-run: I=  ret void
chris-run: I-end=  ret void
IC: Visiting:   ret void
test1: I=  ret void
visit: nullptr 
test3
test4
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !range !0
runOnFunction: I:  %chk0 = icmp ugt i32 %length, %x
runOnFunction: I:  %x.inc1 = add i32 %x, 1
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length
runOnFunction: I:  %0 = and i1 %chk0, %chk1
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
runOnFunction: I:  %x.inc2 = add nuw i32 %x, 3
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length
runOnFunction: I:  %x.inc3 = add nuw i32 %x, 6
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length
runOnFunction: I:  %1 = and i1 %chk2, %chk3
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
runOnFunction: I:  ret void
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add i32 %x, 1
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(start):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add nuw i32 %x, 3
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw i32 %x, 6
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(start):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  ret void


INSTCOMBINE ITERATION #1 on f_1
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add i32 %x, 1
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(end):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add nuw i32 %x, 3
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw i32 %x, 6
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(end):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  ret void
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add nuw i32 %x, 3
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add nuw i32 %x, 6
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add nuw i32 %x, 3
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add nuw i32 %x, 6
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x
chris-worklist-bb: BB end:   %x.inc1 = add i32 %x, 1
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length
chris-worklist-bb: BB end:   %0 = and i1 %chk0, %chk1
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc2 = add nuw i32 %x, 3
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length
chris-worklist-bb: BB end:   %x.inc3 = add nuw i32 %x, 6
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length
chris-worklist-bb: BB end:   %1 = and i1 %chk2, %chk3
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-worklist-bb: BB end:   ret void
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-AddInitialGroup: I:   %1 = and i1 %chk2, %chk3
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length
chris-AddInitialGroup: I:   %x.inc3 = add nuw i32 %x, 6
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length
chris-AddInitialGroup: I:   %x.inc2 = add nuw i32 %x, 3
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-AddInitialGroup: I:   %0 = and i1 %chk0, %chk1
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length
chris-AddInitialGroup: I:   %x.inc1 = add i32 %x, 1
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !range !0
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !range !0
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !range !0
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !range !0
test1: I=  %length = load i32, i32* %length_buf, align 4, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x
run: WorkList:   %chk0 = icmp ugt i32 %length, %x
chris-run: I=  %chk0 = icmp ugt i32 %length, %x
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x
test1: I=  %chk0 = icmp ugt i32 %length, %x
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add i32 %x, 1
chris-RemoveOne: return I  %x.inc1 = add i32 %x, 1
run: WorkList:   %x.inc1 = add i32 %x, 1
chris-run: I=  %x.inc1 = add i32 %x, 1
chris-run: I-end=  %x.inc1 = add i32 %x, 1
IC: Visiting:   %x.inc1 = add i32 %x, 1
test1: I=  %x.inc1 = add i32 %x, 1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %0 = and i1 %chk0, %chk1
chris-RemoveOne: return I  %0 = and i1 %chk0, %chk1
run: WorkList:   %0 = and i1 %chk0, %chk1
chris-run: I=  %0 = and i1 %chk0, %chk1
chris-run: I-end=  %0 = and i1 %chk0, %chk1
IC: Visiting:   %0 = and i1 %chk0, %chk1
test1: I=  %0 = and i1 %chk0, %chk1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add nuw i32 %x, 3
NextInst[0]   %chk2 = icmp ult i32 %x.inc2, %length
NextInst[1]   %x.inc3 = add nuw i32 %x, 6
NextInst[2]   %chk3 = icmp ult i32 %x.inc3, %length
Inst[end]:   %chk3 = icmp ult i32 %x.inc3, %length
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add nuw i32 %x, 3
chris-RemoveOne: return I  %x.inc2 = add nuw i32 %x, 3
run: WorkList:   %x.inc2 = add nuw i32 %x, 3
chris-run: I=  %x.inc2 = add nuw i32 %x, 3
chris-run: I-end=  %x.inc2 = add nuw i32 %x, 3
IC: Visiting:   %x.inc2 = add nuw i32 %x, 3
test1: I=  %x.inc2 = add nuw i32 %x, 3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw i32 %x, 6
chris-RemoveOne: return I  %x.inc3 = add nuw i32 %x, 6
run: WorkList:   %x.inc3 = add nuw i32 %x, 6
chris-run: I=  %x.inc3 = add nuw i32 %x, 6
chris-run: I-end=  %x.inc3 = add nuw i32 %x, 6
IC: Visiting:   %x.inc3 = add nuw i32 %x, 6
test1: I=  %x.inc3 = add nuw i32 %x, 6
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %1 = and i1 %chk2, %chk3
chris-RemoveOne: return I  %1 = and i1 %chk2, %chk3
run: WorkList:   %1 = and i1 %chk2, %chk3
chris-run: I=  %1 = and i1 %chk2, %chk3
chris-run: I-end=  %1 = and i1 %chk2, %chk3
IC: Visiting:   %1 = and i1 %chk2, %chk3
test1: I=  %1 = and i1 %chk2, %chk3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void
 ok, break
Inst[end]:   ret void
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void
chris-RemoveOne: return I  ret void
run: WorkList:   ret void
chris-run: I=  ret void
chris-run: I-end=  ret void
IC: Visiting:   ret void
test1: I=  ret void
visit: nullptr 
test3
test4
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %x = and i32 %a, -256
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !range !0
runOnFunction: I:  %chk0 = icmp ult i32 %x, %length
runOnFunction: I:  %x.inc1 = or i32 %x, 1
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length
runOnFunction: I:  %0 = and i1 %chk0, %chk1
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
runOnFunction: I:  %x.inc2 = or i32 %x, 2
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length
runOnFunction: I:  %x.inc3 = or i32 %x, 3
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length
runOnFunction: I:  %1 = and i1 %chk2, %chk3
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
runOnFunction: I:  ret void
INSTCOMBINE ITERATION: Inst(start):  %x = and i32 %a, -256
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ult i32 %x, %length
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = or i32 %x, 1
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(start):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = or i32 %x, 2
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = or i32 %x, 3
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(start):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  ret void


INSTCOMBINE ITERATION #1 on f_2
INSTCOMBINE ITERATION: Inst(end):  %x = and i32 %a, -256
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ult i32 %x, %length
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = or i32 %x, 1
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(end):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = or i32 %x, 2
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = or i32 %x, 3
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(end):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  ret void
chris-worklist-bb: bb: 
entry:
  %x = and i32 %a, -256
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ult i32 %x, %length
  %x.inc1 = or i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = or i32 %x, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = or i32 %x, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB: 
entry:
  %x = and i32 %a, -256
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ult i32 %x, %length
  %x.inc1 = or i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = or i32 %x, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = or i32 %x, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB end:   %x = and i32 %a, -256
chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-worklist-bb: BB end:   %chk0 = icmp ult i32 %x, %length
chris-worklist-bb: BB end:   %x.inc1 = or i32 %x, 1
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length
chris-worklist-bb: BB end:   %0 = and i1 %chk0, %chk1
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc2 = or i32 %x, 2
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length
chris-worklist-bb: BB end:   %x.inc3 = or i32 %x, 3
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length
chris-worklist-bb: BB end:   %1 = and i1 %chk2, %chk3
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-worklist-bb: BB end:   ret void
IC: ADDING: 14 instrs to worklist
chris-AddInitialGroup: I:   ret void
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-AddInitialGroup: I:   %1 = and i1 %chk2, %chk3
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length
chris-AddInitialGroup: I:   %x.inc3 = or i32 %x, 3
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length
chris-AddInitialGroup: I:   %x.inc2 = or i32 %x, 2
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-AddInitialGroup: I:   %0 = and i1 %chk0, %chk1
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length
chris-AddInitialGroup: I:   %x.inc1 = or i32 %x, 1
chris-AddInitialGroup: I:   %chk0 = icmp ult i32 %x, %length
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-AddInitialGroup: I:   %x = and i32 %a, -256
RemoveOne!!!
chris-RemoveOne:   %x = and i32 %a, -256
chris-RemoveOne: return I  %x = and i32 %a, -256
run: WorkList:   %x = and i32 %a, -256
chris-run: I=  %x = and i32 %a, -256
chris-run: I-end=  %x = and i32 %a, -256
IC: Visiting:   %x = and i32 %a, -256
test1: I=  %x = and i32 %a, -256
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !range !0
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !range !0
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !range !0
test1: I=  %length = load i32, i32* %length_buf, align 4, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ult i32 %x, %length
chris-RemoveOne: return I  %chk0 = icmp ult i32 %x, %length
run: WorkList:   %chk0 = icmp ult i32 %x, %length
chris-run: I=  %chk0 = icmp ult i32 %x, %length
chris-run: I-end=  %chk0 = icmp ult i32 %x, %length
IC: Visiting:   %chk0 = icmp ult i32 %x, %length
test1: I=  %chk0 = icmp ult i32 %x, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = or i32 %x, 1
chris-RemoveOne: return I  %x.inc1 = or i32 %x, 1
run: WorkList:   %x.inc1 = or i32 %x, 1
chris-run: I=  %x.inc1 = or i32 %x, 1
chris-run: I-end=  %x.inc1 = or i32 %x, 1
IC: Visiting:   %x.inc1 = or i32 %x, 1
test1: I=  %x.inc1 = or i32 %x, 1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %0 = and i1 %chk0, %chk1
chris-RemoveOne: return I  %0 = and i1 %chk0, %chk1
run: WorkList:   %0 = and i1 %chk0, %chk1
chris-run: I=  %0 = and i1 %chk0, %chk1
chris-run: I-end=  %0 = and i1 %chk0, %chk1
IC: Visiting:   %0 = and i1 %chk0, %chk1
test1: I=  %0 = and i1 %chk0, %chk1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = or i32 %x, 2
NextInst[0]   %chk2 = icmp ult i32 %x.inc2, %length
NextInst[1]   %x.inc3 = or i32 %x, 3
NextInst[2]   %chk3 = icmp ult i32 %x.inc3, %length
Inst[end]:   %chk3 = icmp ult i32 %x.inc3, %length
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = or i32 %x, 2
chris-RemoveOne: return I  %x.inc2 = or i32 %x, 2
run: WorkList:   %x.inc2 = or i32 %x, 2
chris-run: I=  %x.inc2 = or i32 %x, 2
chris-run: I-end=  %x.inc2 = or i32 %x, 2
IC: Visiting:   %x.inc2 = or i32 %x, 2
test1: I=  %x.inc2 = or i32 %x, 2
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = or i32 %x, 3
chris-RemoveOne: return I  %x.inc3 = or i32 %x, 3
run: WorkList:   %x.inc3 = or i32 %x, 3
chris-run: I=  %x.inc3 = or i32 %x, 3
chris-run: I-end=  %x.inc3 = or i32 %x, 3
IC: Visiting:   %x.inc3 = or i32 %x, 3
test1: I=  %x.inc3 = or i32 %x, 3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %1 = and i1 %chk2, %chk3
chris-RemoveOne: return I  %1 = and i1 %chk2, %chk3
run: WorkList:   %1 = and i1 %chk2, %chk3
chris-run: I=  %1 = and i1 %chk2, %chk3
chris-run: I-end=  %1 = and i1 %chk2, %chk3
IC: Visiting:   %1 = and i1 %chk2, %chk3
test1: I=  %1 = and i1 %chk2, %chk3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void
 ok, break
Inst[end]:   ret void
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void
chris-RemoveOne: return I  ret void
run: WorkList:   ret void
chris-run: I=  ret void
chris-run: I-end=  ret void
IC: Visiting:   ret void
test1: I=  ret void
visit: nullptr 
test3
test4
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %x = and i32 %a, -256
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !range !0
runOnFunction: I:  %chk0 = icmp ult i32 %x, %length
runOnFunction: I:  %x.inc1 = or i32 %x, 1
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length
runOnFunction: I:  %0 = and i1 %chk0, %chk1
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
runOnFunction: I:  %x.inc2 = or i32 %x, 2
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length
runOnFunction: I:  %x.inc3 = or i32 %x, 3
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length
runOnFunction: I:  %1 = and i1 %chk2, %chk3
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
runOnFunction: I:  ret void
INSTCOMBINE ITERATION: Inst(start):  %x = and i32 %a, -256
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ult i32 %x, %length
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = or i32 %x, 1
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(start):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = or i32 %x, 2
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = or i32 %x, 3
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(start):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  ret void


INSTCOMBINE ITERATION #1 on f_2
INSTCOMBINE ITERATION: Inst(end):  %x = and i32 %a, -256
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ult i32 %x, %length
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = or i32 %x, 1
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(end):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = or i32 %x, 2
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = or i32 %x, 3
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(end):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  ret void
chris-worklist-bb: bb: 
entry:
  %x = and i32 %a, -256
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ult i32 %x, %length
  %x.inc1 = or i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = or i32 %x, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = or i32 %x, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB: 
entry:
  %x = and i32 %a, -256
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ult i32 %x, %length
  %x.inc1 = or i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = or i32 %x, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = or i32 %x, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB end:   %x = and i32 %a, -256
chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-worklist-bb: BB end:   %chk0 = icmp ult i32 %x, %length
chris-worklist-bb: BB end:   %x.inc1 = or i32 %x, 1
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length
chris-worklist-bb: BB end:   %0 = and i1 %chk0, %chk1
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc2 = or i32 %x, 2
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length
chris-worklist-bb: BB end:   %x.inc3 = or i32 %x, 3
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length
chris-worklist-bb: BB end:   %1 = and i1 %chk2, %chk3
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-worklist-bb: BB end:   ret void
IC: ADDING: 14 instrs to worklist
chris-AddInitialGroup: I:   ret void
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-AddInitialGroup: I:   %1 = and i1 %chk2, %chk3
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length
chris-AddInitialGroup: I:   %x.inc3 = or i32 %x, 3
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length
chris-AddInitialGroup: I:   %x.inc2 = or i32 %x, 2
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-AddInitialGroup: I:   %0 = and i1 %chk0, %chk1
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length
chris-AddInitialGroup: I:   %x.inc1 = or i32 %x, 1
chris-AddInitialGroup: I:   %chk0 = icmp ult i32 %x, %length
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-AddInitialGroup: I:   %x = and i32 %a, -256
RemoveOne!!!
chris-RemoveOne:   %x = and i32 %a, -256
chris-RemoveOne: return I  %x = and i32 %a, -256
run: WorkList:   %x = and i32 %a, -256
chris-run: I=  %x = and i32 %a, -256
chris-run: I-end=  %x = and i32 %a, -256
IC: Visiting:   %x = and i32 %a, -256
test1: I=  %x = and i32 %a, -256
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !range !0
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !range !0
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !range !0
test1: I=  %length = load i32, i32* %length_buf, align 4, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ult i32 %x, %length
chris-RemoveOne: return I  %chk0 = icmp ult i32 %x, %length
run: WorkList:   %chk0 = icmp ult i32 %x, %length
chris-run: I=  %chk0 = icmp ult i32 %x, %length
chris-run: I-end=  %chk0 = icmp ult i32 %x, %length
IC: Visiting:   %chk0 = icmp ult i32 %x, %length
test1: I=  %chk0 = icmp ult i32 %x, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = or i32 %x, 1
chris-RemoveOne: return I  %x.inc1 = or i32 %x, 1
run: WorkList:   %x.inc1 = or i32 %x, 1
chris-run: I=  %x.inc1 = or i32 %x, 1
chris-run: I-end=  %x.inc1 = or i32 %x, 1
IC: Visiting:   %x.inc1 = or i32 %x, 1
test1: I=  %x.inc1 = or i32 %x, 1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %0 = and i1 %chk0, %chk1
chris-RemoveOne: return I  %0 = and i1 %chk0, %chk1
run: WorkList:   %0 = and i1 %chk0, %chk1
chris-run: I=  %0 = and i1 %chk0, %chk1
chris-run: I-end=  %0 = and i1 %chk0, %chk1
IC: Visiting:   %0 = and i1 %chk0, %chk1
test1: I=  %0 = and i1 %chk0, %chk1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = or i32 %x, 2
NextInst[0]   %chk2 = icmp ult i32 %x.inc2, %length
NextInst[1]   %x.inc3 = or i32 %x, 3
NextInst[2]   %chk3 = icmp ult i32 %x.inc3, %length
Inst[end]:   %chk3 = icmp ult i32 %x.inc3, %length
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = or i32 %x, 2
chris-RemoveOne: return I  %x.inc2 = or i32 %x, 2
run: WorkList:   %x.inc2 = or i32 %x, 2
chris-run: I=  %x.inc2 = or i32 %x, 2
chris-run: I-end=  %x.inc2 = or i32 %x, 2
IC: Visiting:   %x.inc2 = or i32 %x, 2
test1: I=  %x.inc2 = or i32 %x, 2
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = or i32 %x, 3
chris-RemoveOne: return I  %x.inc3 = or i32 %x, 3
run: WorkList:   %x.inc3 = or i32 %x, 3
chris-run: I=  %x.inc3 = or i32 %x, 3
chris-run: I-end=  %x.inc3 = or i32 %x, 3
IC: Visiting:   %x.inc3 = or i32 %x, 3
test1: I=  %x.inc3 = or i32 %x, 3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %1 = and i1 %chk2, %chk3
chris-RemoveOne: return I  %1 = and i1 %chk2, %chk3
run: WorkList:   %1 = and i1 %chk2, %chk3
chris-run: I=  %1 = and i1 %chk2, %chk3
chris-run: I-end=  %1 = and i1 %chk2, %chk3
IC: Visiting:   %1 = and i1 %chk2, %chk3
test1: I=  %1 = and i1 %chk2, %chk3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void
 ok, break
Inst[end]:   ret void
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void
chris-RemoveOne: return I  ret void
run: WorkList:   ret void
chris-run: I=  ret void
chris-run: I-end=  ret void
IC: Visiting:   ret void
test1: I=  ret void
visit: nullptr 
test3
test4
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %x = and i32 %a, -256
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !range !0
runOnFunction: I:  %chk0 = icmp ult i32 %x, %length
runOnFunction: I:  %x.inc1 = or i32 %x, 1
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length
runOnFunction: I:  %0 = and i1 %chk0, %chk1
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
runOnFunction: I:  %x.inc2 = or i32 %x, 2
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length
runOnFunction: I:  %x.inc3 = or i32 %x, 3
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length
runOnFunction: I:  %1 = and i1 %chk2, %chk3
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
runOnFunction: I:  ret void
INSTCOMBINE ITERATION: Inst(start):  %x = and i32 %a, -256
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ult i32 %x, %length
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = or i32 %x, 1
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(start):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = or i32 %x, 2
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = or i32 %x, 3
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(start):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  ret void


INSTCOMBINE ITERATION #1 on f_2
INSTCOMBINE ITERATION: Inst(end):  %x = and i32 %a, -256
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ult i32 %x, %length
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = or i32 %x, 1
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(end):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = or i32 %x, 2
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = or i32 %x, 3
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(end):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  ret void
chris-worklist-bb: bb: 
entry:
  %x = and i32 %a, -256
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ult i32 %x, %length
  %x.inc1 = or i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = or i32 %x, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = or i32 %x, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB: 
entry:
  %x = and i32 %a, -256
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ult i32 %x, %length
  %x.inc1 = or i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = or i32 %x, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = or i32 %x, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB end:   %x = and i32 %a, -256
chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-worklist-bb: BB end:   %chk0 = icmp ult i32 %x, %length
chris-worklist-bb: BB end:   %x.inc1 = or i32 %x, 1
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length
chris-worklist-bb: BB end:   %0 = and i1 %chk0, %chk1
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc2 = or i32 %x, 2
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length
chris-worklist-bb: BB end:   %x.inc3 = or i32 %x, 3
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length
chris-worklist-bb: BB end:   %1 = and i1 %chk2, %chk3
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-worklist-bb: BB end:   ret void
IC: ADDING: 14 instrs to worklist
chris-AddInitialGroup: I:   ret void
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-AddInitialGroup: I:   %1 = and i1 %chk2, %chk3
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length
chris-AddInitialGroup: I:   %x.inc3 = or i32 %x, 3
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length
chris-AddInitialGroup: I:   %x.inc2 = or i32 %x, 2
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-AddInitialGroup: I:   %0 = and i1 %chk0, %chk1
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length
chris-AddInitialGroup: I:   %x.inc1 = or i32 %x, 1
chris-AddInitialGroup: I:   %chk0 = icmp ult i32 %x, %length
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-AddInitialGroup: I:   %x = and i32 %a, -256
RemoveOne!!!
chris-RemoveOne:   %x = and i32 %a, -256
chris-RemoveOne: return I  %x = and i32 %a, -256
run: WorkList:   %x = and i32 %a, -256
chris-run: I=  %x = and i32 %a, -256
chris-run: I-end=  %x = and i32 %a, -256
IC: Visiting:   %x = and i32 %a, -256
test1: I=  %x = and i32 %a, -256
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !range !0
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !range !0
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !range !0
test1: I=  %length = load i32, i32* %length_buf, align 4, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ult i32 %x, %length
chris-RemoveOne: return I  %chk0 = icmp ult i32 %x, %length
run: WorkList:   %chk0 = icmp ult i32 %x, %length
chris-run: I=  %chk0 = icmp ult i32 %x, %length
chris-run: I-end=  %chk0 = icmp ult i32 %x, %length
IC: Visiting:   %chk0 = icmp ult i32 %x, %length
test1: I=  %chk0 = icmp ult i32 %x, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = or i32 %x, 1
chris-RemoveOne: return I  %x.inc1 = or i32 %x, 1
run: WorkList:   %x.inc1 = or i32 %x, 1
chris-run: I=  %x.inc1 = or i32 %x, 1
chris-run: I-end=  %x.inc1 = or i32 %x, 1
IC: Visiting:   %x.inc1 = or i32 %x, 1
test1: I=  %x.inc1 = or i32 %x, 1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %0 = and i1 %chk0, %chk1
chris-RemoveOne: return I  %0 = and i1 %chk0, %chk1
run: WorkList:   %0 = and i1 %chk0, %chk1
chris-run: I=  %0 = and i1 %chk0, %chk1
chris-run: I-end=  %0 = and i1 %chk0, %chk1
IC: Visiting:   %0 = and i1 %chk0, %chk1
test1: I=  %0 = and i1 %chk0, %chk1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = or i32 %x, 2
NextInst[0]   %chk2 = icmp ult i32 %x.inc2, %length
NextInst[1]   %x.inc3 = or i32 %x, 3
NextInst[2]   %chk3 = icmp ult i32 %x.inc3, %length
Inst[end]:   %chk3 = icmp ult i32 %x.inc3, %length
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = or i32 %x, 2
chris-RemoveOne: return I  %x.inc2 = or i32 %x, 2
run: WorkList:   %x.inc2 = or i32 %x, 2
chris-run: I=  %x.inc2 = or i32 %x, 2
chris-run: I-end=  %x.inc2 = or i32 %x, 2
IC: Visiting:   %x.inc2 = or i32 %x, 2
test1: I=  %x.inc2 = or i32 %x, 2
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = or i32 %x, 3
chris-RemoveOne: return I  %x.inc3 = or i32 %x, 3
run: WorkList:   %x.inc3 = or i32 %x, 3
chris-run: I=  %x.inc3 = or i32 %x, 3
chris-run: I-end=  %x.inc3 = or i32 %x, 3
IC: Visiting:   %x.inc3 = or i32 %x, 3
test1: I=  %x.inc3 = or i32 %x, 3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %1 = and i1 %chk2, %chk3
chris-RemoveOne: return I  %1 = and i1 %chk2, %chk3
run: WorkList:   %1 = and i1 %chk2, %chk3
chris-run: I=  %1 = and i1 %chk2, %chk3
chris-run: I-end=  %1 = and i1 %chk2, %chk3
IC: Visiting:   %1 = and i1 %chk2, %chk3
test1: I=  %1 = and i1 %chk2, %chk3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void
 ok, break
Inst[end]:   ret void
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void
chris-RemoveOne: return I  ret void
run: WorkList:   ret void
chris-run: I=  ret void
chris-run: I-end=  ret void
IC: Visiting:   ret void
test1: I=  ret void
visit: nullptr 
test3
test4
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %x = and i32 %a, -256
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !range !0
runOnFunction: I:  %chk0 = icmp ult i32 %x, %length
runOnFunction: I:  %x.inc1 = or i32 %x, 1
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length
runOnFunction: I:  %0 = and i1 %chk0, %chk1
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
runOnFunction: I:  %x.inc2 = or i32 %x, 3
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length
runOnFunction: I:  %x.inc3 = add nuw nsw i32 %x.inc2, 3
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length
runOnFunction: I:  %1 = and i1 %chk2, %chk3
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
runOnFunction: I:  ret void
INSTCOMBINE ITERATION: Inst(start):  %x = and i32 %a, -256
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ult i32 %x, %length
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = or i32 %x, 1
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(start):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = or i32 %x, 3
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw nsw i32 %x.inc2, 3
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(start):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  ret void


INSTCOMBINE ITERATION #1 on f_3
INSTCOMBINE ITERATION: Inst(end):  %x = and i32 %a, -256
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ult i32 %x, %length
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = or i32 %x, 1
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(end):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = or i32 %x, 3
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw nsw i32 %x.inc2, 3
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(end):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  ret void
chris-worklist-bb: bb: 
entry:
  %x = and i32 %a, -256
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ult i32 %x, %length
  %x.inc1 = or i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = or i32 %x, 3
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add nuw nsw i32 %x.inc2, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB: 
entry:
  %x = and i32 %a, -256
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ult i32 %x, %length
  %x.inc1 = or i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = or i32 %x, 3
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add nuw nsw i32 %x.inc2, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB end:   %x = and i32 %a, -256
chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-worklist-bb: BB end:   %chk0 = icmp ult i32 %x, %length
chris-worklist-bb: BB end:   %x.inc1 = or i32 %x, 1
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length
chris-worklist-bb: BB end:   %0 = and i1 %chk0, %chk1
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc2 = or i32 %x, 3
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length
chris-worklist-bb: BB end:   %x.inc3 = add nuw nsw i32 %x.inc2, 3
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length
chris-worklist-bb: BB end:   %1 = and i1 %chk2, %chk3
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-worklist-bb: BB end:   ret void
IC: ADDING: 14 instrs to worklist
chris-AddInitialGroup: I:   ret void
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-AddInitialGroup: I:   %1 = and i1 %chk2, %chk3
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length
chris-AddInitialGroup: I:   %x.inc3 = add nuw nsw i32 %x.inc2, 3
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length
chris-AddInitialGroup: I:   %x.inc2 = or i32 %x, 3
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-AddInitialGroup: I:   %0 = and i1 %chk0, %chk1
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length
chris-AddInitialGroup: I:   %x.inc1 = or i32 %x, 1
chris-AddInitialGroup: I:   %chk0 = icmp ult i32 %x, %length
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-AddInitialGroup: I:   %x = and i32 %a, -256
RemoveOne!!!
chris-RemoveOne:   %x = and i32 %a, -256
chris-RemoveOne: return I  %x = and i32 %a, -256
run: WorkList:   %x = and i32 %a, -256
chris-run: I=  %x = and i32 %a, -256
chris-run: I-end=  %x = and i32 %a, -256
IC: Visiting:   %x = and i32 %a, -256
test1: I=  %x = and i32 %a, -256
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !range !0
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !range !0
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !range !0
test1: I=  %length = load i32, i32* %length_buf, align 4, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ult i32 %x, %length
chris-RemoveOne: return I  %chk0 = icmp ult i32 %x, %length
run: WorkList:   %chk0 = icmp ult i32 %x, %length
chris-run: I=  %chk0 = icmp ult i32 %x, %length
chris-run: I-end=  %chk0 = icmp ult i32 %x, %length
IC: Visiting:   %chk0 = icmp ult i32 %x, %length
test1: I=  %chk0 = icmp ult i32 %x, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = or i32 %x, 1
chris-RemoveOne: return I  %x.inc1 = or i32 %x, 1
run: WorkList:   %x.inc1 = or i32 %x, 1
chris-run: I=  %x.inc1 = or i32 %x, 1
chris-run: I-end=  %x.inc1 = or i32 %x, 1
IC: Visiting:   %x.inc1 = or i32 %x, 1
test1: I=  %x.inc1 = or i32 %x, 1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %0 = and i1 %chk0, %chk1
chris-RemoveOne: return I  %0 = and i1 %chk0, %chk1
run: WorkList:   %0 = and i1 %chk0, %chk1
chris-run: I=  %0 = and i1 %chk0, %chk1
chris-run: I-end=  %0 = and i1 %chk0, %chk1
IC: Visiting:   %0 = and i1 %chk0, %chk1
test1: I=  %0 = and i1 %chk0, %chk1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = or i32 %x, 3
NextInst[0]   %chk2 = icmp ult i32 %x.inc2, %length
NextInst[1]   %x.inc3 = add nuw nsw i32 %x.inc2, 3
NextInst[2]   %chk3 = icmp ult i32 %x.inc3, %length
Inst[end]:   %chk3 = icmp ult i32 %x.inc3, %length
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = or i32 %x, 3
chris-RemoveOne: return I  %x.inc2 = or i32 %x, 3
run: WorkList:   %x.inc2 = or i32 %x, 3
chris-run: I=  %x.inc2 = or i32 %x, 3
chris-run: I-end=  %x.inc2 = or i32 %x, 3
IC: Visiting:   %x.inc2 = or i32 %x, 3
test1: I=  %x.inc2 = or i32 %x, 3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw nsw i32 %x.inc2, 3
chris-RemoveOne: return I  %x.inc3 = add nuw nsw i32 %x.inc2, 3
run: WorkList:   %x.inc3 = add nuw nsw i32 %x.inc2, 3
chris-run: I=  %x.inc3 = add nuw nsw i32 %x.inc2, 3
chris-run: I-end=  %x.inc3 = add nuw nsw i32 %x.inc2, 3
IC: Visiting:   %x.inc3 = add nuw nsw i32 %x.inc2, 3
test1: I=  %x.inc3 = add nuw nsw i32 %x.inc2, 3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %1 = and i1 %chk2, %chk3
chris-RemoveOne: return I  %1 = and i1 %chk2, %chk3
run: WorkList:   %1 = and i1 %chk2, %chk3
chris-run: I=  %1 = and i1 %chk2, %chk3
chris-run: I-end=  %1 = and i1 %chk2, %chk3
IC: Visiting:   %1 = and i1 %chk2, %chk3
test1: I=  %1 = and i1 %chk2, %chk3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void
 ok, break
Inst[end]:   ret void
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void
chris-RemoveOne: return I  ret void
run: WorkList:   ret void
chris-run: I=  ret void
chris-run: I-end=  ret void
IC: Visiting:   ret void
test1: I=  ret void
visit: nullptr 
test3
test4
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %x = and i32 %a, -256
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !range !0
runOnFunction: I:  %chk0 = icmp ult i32 %x, %length
runOnFunction: I:  %x.inc1 = or i32 %x, 1
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length
runOnFunction: I:  %0 = and i1 %chk0, %chk1
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
runOnFunction: I:  %x.inc2 = or i32 %x, 3
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length
runOnFunction: I:  %x.inc3 = add nuw nsw i32 %x.inc2, 3
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length
runOnFunction: I:  %1 = and i1 %chk2, %chk3
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
runOnFunction: I:  ret void
INSTCOMBINE ITERATION: Inst(start):  %x = and i32 %a, -256
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ult i32 %x, %length
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = or i32 %x, 1
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(start):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = or i32 %x, 3
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw nsw i32 %x.inc2, 3
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(start):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  ret void


INSTCOMBINE ITERATION #1 on f_3
INSTCOMBINE ITERATION: Inst(end):  %x = and i32 %a, -256
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ult i32 %x, %length
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = or i32 %x, 1
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(end):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = or i32 %x, 3
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw nsw i32 %x.inc2, 3
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(end):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  ret void
chris-worklist-bb: bb: 
entry:
  %x = and i32 %a, -256
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ult i32 %x, %length
  %x.inc1 = or i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = or i32 %x, 3
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add nuw nsw i32 %x.inc2, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB: 
entry:
  %x = and i32 %a, -256
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ult i32 %x, %length
  %x.inc1 = or i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = or i32 %x, 3
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add nuw nsw i32 %x.inc2, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB end:   %x = and i32 %a, -256
chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-worklist-bb: BB end:   %chk0 = icmp ult i32 %x, %length
chris-worklist-bb: BB end:   %x.inc1 = or i32 %x, 1
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length
chris-worklist-bb: BB end:   %0 = and i1 %chk0, %chk1
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc2 = or i32 %x, 3
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length
chris-worklist-bb: BB end:   %x.inc3 = add nuw nsw i32 %x.inc2, 3
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length
chris-worklist-bb: BB end:   %1 = and i1 %chk2, %chk3
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-worklist-bb: BB end:   ret void
IC: ADDING: 14 instrs to worklist
chris-AddInitialGroup: I:   ret void
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-AddInitialGroup: I:   %1 = and i1 %chk2, %chk3
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length
chris-AddInitialGroup: I:   %x.inc3 = add nuw nsw i32 %x.inc2, 3
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length
chris-AddInitialGroup: I:   %x.inc2 = or i32 %x, 3
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-AddInitialGroup: I:   %0 = and i1 %chk0, %chk1
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length
chris-AddInitialGroup: I:   %x.inc1 = or i32 %x, 1
chris-AddInitialGroup: I:   %chk0 = icmp ult i32 %x, %length
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-AddInitialGroup: I:   %x = and i32 %a, -256
RemoveOne!!!
chris-RemoveOne:   %x = and i32 %a, -256
chris-RemoveOne: return I  %x = and i32 %a, -256
run: WorkList:   %x = and i32 %a, -256
chris-run: I=  %x = and i32 %a, -256
chris-run: I-end=  %x = and i32 %a, -256
IC: Visiting:   %x = and i32 %a, -256
test1: I=  %x = and i32 %a, -256
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !range !0
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !range !0
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !range !0
test1: I=  %length = load i32, i32* %length_buf, align 4, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ult i32 %x, %length
chris-RemoveOne: return I  %chk0 = icmp ult i32 %x, %length
run: WorkList:   %chk0 = icmp ult i32 %x, %length
chris-run: I=  %chk0 = icmp ult i32 %x, %length
chris-run: I-end=  %chk0 = icmp ult i32 %x, %length
IC: Visiting:   %chk0 = icmp ult i32 %x, %length
test1: I=  %chk0 = icmp ult i32 %x, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = or i32 %x, 1
chris-RemoveOne: return I  %x.inc1 = or i32 %x, 1
run: WorkList:   %x.inc1 = or i32 %x, 1
chris-run: I=  %x.inc1 = or i32 %x, 1
chris-run: I-end=  %x.inc1 = or i32 %x, 1
IC: Visiting:   %x.inc1 = or i32 %x, 1
test1: I=  %x.inc1 = or i32 %x, 1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %0 = and i1 %chk0, %chk1
chris-RemoveOne: return I  %0 = and i1 %chk0, %chk1
run: WorkList:   %0 = and i1 %chk0, %chk1
chris-run: I=  %0 = and i1 %chk0, %chk1
chris-run: I-end=  %0 = and i1 %chk0, %chk1
IC: Visiting:   %0 = and i1 %chk0, %chk1
test1: I=  %0 = and i1 %chk0, %chk1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = or i32 %x, 3
NextInst[0]   %chk2 = icmp ult i32 %x.inc2, %length
NextInst[1]   %x.inc3 = add nuw nsw i32 %x.inc2, 3
NextInst[2]   %chk3 = icmp ult i32 %x.inc3, %length
Inst[end]:   %chk3 = icmp ult i32 %x.inc3, %length
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = or i32 %x, 3
chris-RemoveOne: return I  %x.inc2 = or i32 %x, 3
run: WorkList:   %x.inc2 = or i32 %x, 3
chris-run: I=  %x.inc2 = or i32 %x, 3
chris-run: I-end=  %x.inc2 = or i32 %x, 3
IC: Visiting:   %x.inc2 = or i32 %x, 3
test1: I=  %x.inc2 = or i32 %x, 3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw nsw i32 %x.inc2, 3
chris-RemoveOne: return I  %x.inc3 = add nuw nsw i32 %x.inc2, 3
run: WorkList:   %x.inc3 = add nuw nsw i32 %x.inc2, 3
chris-run: I=  %x.inc3 = add nuw nsw i32 %x.inc2, 3
chris-run: I-end=  %x.inc3 = add nuw nsw i32 %x.inc2, 3
IC: Visiting:   %x.inc3 = add nuw nsw i32 %x.inc2, 3
test1: I=  %x.inc3 = add nuw nsw i32 %x.inc2, 3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %1 = and i1 %chk2, %chk3
chris-RemoveOne: return I  %1 = and i1 %chk2, %chk3
run: WorkList:   %1 = and i1 %chk2, %chk3
chris-run: I=  %1 = and i1 %chk2, %chk3
chris-run: I-end=  %1 = and i1 %chk2, %chk3
IC: Visiting:   %1 = and i1 %chk2, %chk3
test1: I=  %1 = and i1 %chk2, %chk3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void
 ok, break
Inst[end]:   ret void
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void
chris-RemoveOne: return I  ret void
run: WorkList:   ret void
chris-run: I=  ret void
chris-run: I-end=  ret void
IC: Visiting:   ret void
test1: I=  ret void
visit: nullptr 
test3
test4
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %x = and i32 %a, -256
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !range !0
runOnFunction: I:  %chk0 = icmp ult i32 %x, %length
runOnFunction: I:  %x.inc1 = or i32 %x, 1
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length
runOnFunction: I:  %0 = and i1 %chk0, %chk1
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
runOnFunction: I:  %x.inc2 = or i32 %x, 3
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length
runOnFunction: I:  %x.inc3 = add nuw nsw i32 %x.inc2, 3
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length
runOnFunction: I:  %1 = and i1 %chk2, %chk3
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
runOnFunction: I:  ret void
INSTCOMBINE ITERATION: Inst(start):  %x = and i32 %a, -256
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ult i32 %x, %length
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = or i32 %x, 1
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(start):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = or i32 %x, 3
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw nsw i32 %x.inc2, 3
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(start):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  ret void


INSTCOMBINE ITERATION #1 on f_3
INSTCOMBINE ITERATION: Inst(end):  %x = and i32 %a, -256
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ult i32 %x, %length
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = or i32 %x, 1
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(end):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = or i32 %x, 3
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw nsw i32 %x.inc2, 3
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(end):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  ret void
chris-worklist-bb: bb: 
entry:
  %x = and i32 %a, -256
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ult i32 %x, %length
  %x.inc1 = or i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = or i32 %x, 3
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add nuw nsw i32 %x.inc2, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB: 
entry:
  %x = and i32 %a, -256
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ult i32 %x, %length
  %x.inc1 = or i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = or i32 %x, 3
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add nuw nsw i32 %x.inc2, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB end:   %x = and i32 %a, -256
chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-worklist-bb: BB end:   %chk0 = icmp ult i32 %x, %length
chris-worklist-bb: BB end:   %x.inc1 = or i32 %x, 1
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length
chris-worklist-bb: BB end:   %0 = and i1 %chk0, %chk1
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc2 = or i32 %x, 3
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length
chris-worklist-bb: BB end:   %x.inc3 = add nuw nsw i32 %x.inc2, 3
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length
chris-worklist-bb: BB end:   %1 = and i1 %chk2, %chk3
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-worklist-bb: BB end:   ret void
IC: ADDING: 14 instrs to worklist
chris-AddInitialGroup: I:   ret void
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-AddInitialGroup: I:   %1 = and i1 %chk2, %chk3
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length
chris-AddInitialGroup: I:   %x.inc3 = add nuw nsw i32 %x.inc2, 3
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length
chris-AddInitialGroup: I:   %x.inc2 = or i32 %x, 3
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-AddInitialGroup: I:   %0 = and i1 %chk0, %chk1
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length
chris-AddInitialGroup: I:   %x.inc1 = or i32 %x, 1
chris-AddInitialGroup: I:   %chk0 = icmp ult i32 %x, %length
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-AddInitialGroup: I:   %x = and i32 %a, -256
RemoveOne!!!
chris-RemoveOne:   %x = and i32 %a, -256
chris-RemoveOne: return I  %x = and i32 %a, -256
run: WorkList:   %x = and i32 %a, -256
chris-run: I=  %x = and i32 %a, -256
chris-run: I-end=  %x = and i32 %a, -256
IC: Visiting:   %x = and i32 %a, -256
test1: I=  %x = and i32 %a, -256
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !range !0
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !range !0
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !range !0
test1: I=  %length = load i32, i32* %length_buf, align 4, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ult i32 %x, %length
chris-RemoveOne: return I  %chk0 = icmp ult i32 %x, %length
run: WorkList:   %chk0 = icmp ult i32 %x, %length
chris-run: I=  %chk0 = icmp ult i32 %x, %length
chris-run: I-end=  %chk0 = icmp ult i32 %x, %length
IC: Visiting:   %chk0 = icmp ult i32 %x, %length
test1: I=  %chk0 = icmp ult i32 %x, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = or i32 %x, 1
chris-RemoveOne: return I  %x.inc1 = or i32 %x, 1
run: WorkList:   %x.inc1 = or i32 %x, 1
chris-run: I=  %x.inc1 = or i32 %x, 1
chris-run: I-end=  %x.inc1 = or i32 %x, 1
IC: Visiting:   %x.inc1 = or i32 %x, 1
test1: I=  %x.inc1 = or i32 %x, 1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %0 = and i1 %chk0, %chk1
chris-RemoveOne: return I  %0 = and i1 %chk0, %chk1
run: WorkList:   %0 = and i1 %chk0, %chk1
chris-run: I=  %0 = and i1 %chk0, %chk1
chris-run: I-end=  %0 = and i1 %chk0, %chk1
IC: Visiting:   %0 = and i1 %chk0, %chk1
test1: I=  %0 = and i1 %chk0, %chk1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = or i32 %x, 3
NextInst[0]   %chk2 = icmp ult i32 %x.inc2, %length
NextInst[1]   %x.inc3 = add nuw nsw i32 %x.inc2, 3
NextInst[2]   %chk3 = icmp ult i32 %x.inc3, %length
Inst[end]:   %chk3 = icmp ult i32 %x.inc3, %length
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = or i32 %x, 3
chris-RemoveOne: return I  %x.inc2 = or i32 %x, 3
run: WorkList:   %x.inc2 = or i32 %x, 3
chris-run: I=  %x.inc2 = or i32 %x, 3
chris-run: I-end=  %x.inc2 = or i32 %x, 3
IC: Visiting:   %x.inc2 = or i32 %x, 3
test1: I=  %x.inc2 = or i32 %x, 3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw nsw i32 %x.inc2, 3
chris-RemoveOne: return I  %x.inc3 = add nuw nsw i32 %x.inc2, 3
run: WorkList:   %x.inc3 = add nuw nsw i32 %x.inc2, 3
chris-run: I=  %x.inc3 = add nuw nsw i32 %x.inc2, 3
chris-run: I-end=  %x.inc3 = add nuw nsw i32 %x.inc2, 3
IC: Visiting:   %x.inc3 = add nuw nsw i32 %x.inc2, 3
test1: I=  %x.inc3 = add nuw nsw i32 %x.inc2, 3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %1 = and i1 %chk2, %chk3
chris-RemoveOne: return I  %1 = and i1 %chk2, %chk3
run: WorkList:   %1 = and i1 %chk2, %chk3
chris-run: I=  %1 = and i1 %chk2, %chk3
chris-run: I-end=  %1 = and i1 %chk2, %chk3
IC: Visiting:   %1 = and i1 %chk2, %chk3
test1: I=  %1 = and i1 %chk2, %chk3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void
 ok, break
Inst[end]:   ret void
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void
chris-RemoveOne: return I  ret void
run: WorkList:   ret void
chris-run: I=  ret void
chris-run: I-end=  ret void
IC: Visiting:   ret void
test1: I=  ret void
visit: nullptr 
test3
test4
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !range !0
runOnFunction: I:  %chk0 = icmp ugt i32 %length, %x
runOnFunction: I:  %x.inc1 = add i32 %x, -1024
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length
runOnFunction: I:  %0 = and i1 %chk0, %chk1
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
runOnFunction: I:  %x.inc2 = add nuw i32 %x, 2
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length
runOnFunction: I:  %x.inc3 = add nuw i32 %x, 3
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length
runOnFunction: I:  %1 = and i1 %chk2, %chk3
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
runOnFunction: I:  ret void
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add i32 %x, -1024
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(start):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add nuw i32 %x, 2
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw i32 %x, 3
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(start):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  ret void


INSTCOMBINE ITERATION #1 on f_4
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add i32 %x, -1024
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(end):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add nuw i32 %x, 2
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw i32 %x, 3
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(end):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  ret void
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, -1024
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add nuw i32 %x, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add nuw i32 %x, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, -1024
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add nuw i32 %x, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add nuw i32 %x, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x
chris-worklist-bb: BB end:   %x.inc1 = add i32 %x, -1024
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length
chris-worklist-bb: BB end:   %0 = and i1 %chk0, %chk1
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc2 = add nuw i32 %x, 2
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length
chris-worklist-bb: BB end:   %x.inc3 = add nuw i32 %x, 3
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length
chris-worklist-bb: BB end:   %1 = and i1 %chk2, %chk3
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-worklist-bb: BB end:   ret void
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-AddInitialGroup: I:   %1 = and i1 %chk2, %chk3
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length
chris-AddInitialGroup: I:   %x.inc3 = add nuw i32 %x, 3
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length
chris-AddInitialGroup: I:   %x.inc2 = add nuw i32 %x, 2
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-AddInitialGroup: I:   %0 = and i1 %chk0, %chk1
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length
chris-AddInitialGroup: I:   %x.inc1 = add i32 %x, -1024
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !range !0
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !range !0
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !range !0
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !range !0
test1: I=  %length = load i32, i32* %length_buf, align 4, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x
run: WorkList:   %chk0 = icmp ugt i32 %length, %x
chris-run: I=  %chk0 = icmp ugt i32 %length, %x
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x
test1: I=  %chk0 = icmp ugt i32 %length, %x
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add i32 %x, -1024
chris-RemoveOne: return I  %x.inc1 = add i32 %x, -1024
run: WorkList:   %x.inc1 = add i32 %x, -1024
chris-run: I=  %x.inc1 = add i32 %x, -1024
chris-run: I-end=  %x.inc1 = add i32 %x, -1024
IC: Visiting:   %x.inc1 = add i32 %x, -1024
test1: I=  %x.inc1 = add i32 %x, -1024
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %0 = and i1 %chk0, %chk1
chris-RemoveOne: return I  %0 = and i1 %chk0, %chk1
run: WorkList:   %0 = and i1 %chk0, %chk1
chris-run: I=  %0 = and i1 %chk0, %chk1
chris-run: I-end=  %0 = and i1 %chk0, %chk1
IC: Visiting:   %0 = and i1 %chk0, %chk1
test1: I=  %0 = and i1 %chk0, %chk1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add nuw i32 %x, 2
NextInst[0]   %chk2 = icmp ult i32 %x.inc2, %length
NextInst[1]   %x.inc3 = add nuw i32 %x, 3
NextInst[2]   %chk3 = icmp ult i32 %x.inc3, %length
Inst[end]:   %chk3 = icmp ult i32 %x.inc3, %length
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add nuw i32 %x, 2
chris-RemoveOne: return I  %x.inc2 = add nuw i32 %x, 2
run: WorkList:   %x.inc2 = add nuw i32 %x, 2
chris-run: I=  %x.inc2 = add nuw i32 %x, 2
chris-run: I-end=  %x.inc2 = add nuw i32 %x, 2
IC: Visiting:   %x.inc2 = add nuw i32 %x, 2
test1: I=  %x.inc2 = add nuw i32 %x, 2
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw i32 %x, 3
chris-RemoveOne: return I  %x.inc3 = add nuw i32 %x, 3
run: WorkList:   %x.inc3 = add nuw i32 %x, 3
chris-run: I=  %x.inc3 = add nuw i32 %x, 3
chris-run: I-end=  %x.inc3 = add nuw i32 %x, 3
IC: Visiting:   %x.inc3 = add nuw i32 %x, 3
test1: I=  %x.inc3 = add nuw i32 %x, 3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %1 = and i1 %chk2, %chk3
chris-RemoveOne: return I  %1 = and i1 %chk2, %chk3
run: WorkList:   %1 = and i1 %chk2, %chk3
chris-run: I=  %1 = and i1 %chk2, %chk3
chris-run: I-end=  %1 = and i1 %chk2, %chk3
IC: Visiting:   %1 = and i1 %chk2, %chk3
test1: I=  %1 = and i1 %chk2, %chk3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void
 ok, break
Inst[end]:   ret void
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void
chris-RemoveOne: return I  ret void
run: WorkList:   ret void
chris-run: I=  ret void
chris-run: I-end=  ret void
IC: Visiting:   ret void
test1: I=  ret void
visit: nullptr 
test3
test4
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !range !0
runOnFunction: I:  %chk0 = icmp ugt i32 %length, %x
runOnFunction: I:  %x.inc1 = add i32 %x, -1024
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length
runOnFunction: I:  %0 = and i1 %chk0, %chk1
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
runOnFunction: I:  %x.inc2 = add nuw i32 %x, 2
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length
runOnFunction: I:  %x.inc3 = add nuw i32 %x, 3
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length
runOnFunction: I:  %1 = and i1 %chk2, %chk3
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
runOnFunction: I:  ret void
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add i32 %x, -1024
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(start):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add nuw i32 %x, 2
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw i32 %x, 3
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(start):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  ret void


INSTCOMBINE ITERATION #1 on f_4
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add i32 %x, -1024
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(end):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add nuw i32 %x, 2
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw i32 %x, 3
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(end):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  ret void
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, -1024
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add nuw i32 %x, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add nuw i32 %x, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, -1024
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add nuw i32 %x, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add nuw i32 %x, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x
chris-worklist-bb: BB end:   %x.inc1 = add i32 %x, -1024
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length
chris-worklist-bb: BB end:   %0 = and i1 %chk0, %chk1
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc2 = add nuw i32 %x, 2
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length
chris-worklist-bb: BB end:   %x.inc3 = add nuw i32 %x, 3
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length
chris-worklist-bb: BB end:   %1 = and i1 %chk2, %chk3
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-worklist-bb: BB end:   ret void
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-AddInitialGroup: I:   %1 = and i1 %chk2, %chk3
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length
chris-AddInitialGroup: I:   %x.inc3 = add nuw i32 %x, 3
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length
chris-AddInitialGroup: I:   %x.inc2 = add nuw i32 %x, 2
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-AddInitialGroup: I:   %0 = and i1 %chk0, %chk1
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length
chris-AddInitialGroup: I:   %x.inc1 = add i32 %x, -1024
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !range !0
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !range !0
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !range !0
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !range !0
test1: I=  %length = load i32, i32* %length_buf, align 4, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x
run: WorkList:   %chk0 = icmp ugt i32 %length, %x
chris-run: I=  %chk0 = icmp ugt i32 %length, %x
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x
test1: I=  %chk0 = icmp ugt i32 %length, %x
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add i32 %x, -1024
chris-RemoveOne: return I  %x.inc1 = add i32 %x, -1024
run: WorkList:   %x.inc1 = add i32 %x, -1024
chris-run: I=  %x.inc1 = add i32 %x, -1024
chris-run: I-end=  %x.inc1 = add i32 %x, -1024
IC: Visiting:   %x.inc1 = add i32 %x, -1024
test1: I=  %x.inc1 = add i32 %x, -1024
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %0 = and i1 %chk0, %chk1
chris-RemoveOne: return I  %0 = and i1 %chk0, %chk1
run: WorkList:   %0 = and i1 %chk0, %chk1
chris-run: I=  %0 = and i1 %chk0, %chk1
chris-run: I-end=  %0 = and i1 %chk0, %chk1
IC: Visiting:   %0 = and i1 %chk0, %chk1
test1: I=  %0 = and i1 %chk0, %chk1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add nuw i32 %x, 2
NextInst[0]   %chk2 = icmp ult i32 %x.inc2, %length
NextInst[1]   %x.inc3 = add nuw i32 %x, 3
NextInst[2]   %chk3 = icmp ult i32 %x.inc3, %length
Inst[end]:   %chk3 = icmp ult i32 %x.inc3, %length
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add nuw i32 %x, 2
chris-RemoveOne: return I  %x.inc2 = add nuw i32 %x, 2
run: WorkList:   %x.inc2 = add nuw i32 %x, 2
chris-run: I=  %x.inc2 = add nuw i32 %x, 2
chris-run: I-end=  %x.inc2 = add nuw i32 %x, 2
IC: Visiting:   %x.inc2 = add nuw i32 %x, 2
test1: I=  %x.inc2 = add nuw i32 %x, 2
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw i32 %x, 3
chris-RemoveOne: return I  %x.inc3 = add nuw i32 %x, 3
run: WorkList:   %x.inc3 = add nuw i32 %x, 3
chris-run: I=  %x.inc3 = add nuw i32 %x, 3
chris-run: I-end=  %x.inc3 = add nuw i32 %x, 3
IC: Visiting:   %x.inc3 = add nuw i32 %x, 3
test1: I=  %x.inc3 = add nuw i32 %x, 3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %1 = and i1 %chk2, %chk3
chris-RemoveOne: return I  %1 = and i1 %chk2, %chk3
run: WorkList:   %1 = and i1 %chk2, %chk3
chris-run: I=  %1 = and i1 %chk2, %chk3
chris-run: I-end=  %1 = and i1 %chk2, %chk3
IC: Visiting:   %1 = and i1 %chk2, %chk3
test1: I=  %1 = and i1 %chk2, %chk3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void
 ok, break
Inst[end]:   ret void
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void
chris-RemoveOne: return I  ret void
run: WorkList:   ret void
chris-run: I=  ret void
chris-run: I-end=  ret void
IC: Visiting:   ret void
test1: I=  ret void
visit: nullptr 
test3
test4
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !range !0
runOnFunction: I:  %chk0 = icmp ugt i32 %length, %x
runOnFunction: I:  %x.inc1 = add i32 %x, -1024
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length
runOnFunction: I:  %0 = and i1 %chk0, %chk1
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
runOnFunction: I:  %x.inc2 = add nuw i32 %x, 2
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length
runOnFunction: I:  %x.inc3 = add nuw i32 %x, 3
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length
runOnFunction: I:  %1 = and i1 %chk2, %chk3
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
runOnFunction: I:  ret void
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add i32 %x, -1024
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(start):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add nuw i32 %x, 2
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw i32 %x, 3
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(start):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  ret void


INSTCOMBINE ITERATION #1 on f_4
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add i32 %x, -1024
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(end):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add nuw i32 %x, 2
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw i32 %x, 3
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(end):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  ret void
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, -1024
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add nuw i32 %x, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add nuw i32 %x, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, -1024
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add nuw i32 %x, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add nuw i32 %x, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x
chris-worklist-bb: BB end:   %x.inc1 = add i32 %x, -1024
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length
chris-worklist-bb: BB end:   %0 = and i1 %chk0, %chk1
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc2 = add nuw i32 %x, 2
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length
chris-worklist-bb: BB end:   %x.inc3 = add nuw i32 %x, 3
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length
chris-worklist-bb: BB end:   %1 = and i1 %chk2, %chk3
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-worklist-bb: BB end:   ret void
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-AddInitialGroup: I:   %1 = and i1 %chk2, %chk3
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length
chris-AddInitialGroup: I:   %x.inc3 = add nuw i32 %x, 3
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length
chris-AddInitialGroup: I:   %x.inc2 = add nuw i32 %x, 2
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-AddInitialGroup: I:   %0 = and i1 %chk0, %chk1
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length
chris-AddInitialGroup: I:   %x.inc1 = add i32 %x, -1024
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !range !0
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !range !0
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !range !0
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !range !0
test1: I=  %length = load i32, i32* %length_buf, align 4, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x
run: WorkList:   %chk0 = icmp ugt i32 %length, %x
chris-run: I=  %chk0 = icmp ugt i32 %length, %x
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x
test1: I=  %chk0 = icmp ugt i32 %length, %x
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add i32 %x, -1024
chris-RemoveOne: return I  %x.inc1 = add i32 %x, -1024
run: WorkList:   %x.inc1 = add i32 %x, -1024
chris-run: I=  %x.inc1 = add i32 %x, -1024
chris-run: I-end=  %x.inc1 = add i32 %x, -1024
IC: Visiting:   %x.inc1 = add i32 %x, -1024
test1: I=  %x.inc1 = add i32 %x, -1024
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %0 = and i1 %chk0, %chk1
chris-RemoveOne: return I  %0 = and i1 %chk0, %chk1
run: WorkList:   %0 = and i1 %chk0, %chk1
chris-run: I=  %0 = and i1 %chk0, %chk1
chris-run: I-end=  %0 = and i1 %chk0, %chk1
IC: Visiting:   %0 = and i1 %chk0, %chk1
test1: I=  %0 = and i1 %chk0, %chk1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add nuw i32 %x, 2
NextInst[0]   %chk2 = icmp ult i32 %x.inc2, %length
NextInst[1]   %x.inc3 = add nuw i32 %x, 3
NextInst[2]   %chk3 = icmp ult i32 %x.inc3, %length
Inst[end]:   %chk3 = icmp ult i32 %x.inc3, %length
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add nuw i32 %x, 2
chris-RemoveOne: return I  %x.inc2 = add nuw i32 %x, 2
run: WorkList:   %x.inc2 = add nuw i32 %x, 2
chris-run: I=  %x.inc2 = add nuw i32 %x, 2
chris-run: I-end=  %x.inc2 = add nuw i32 %x, 2
IC: Visiting:   %x.inc2 = add nuw i32 %x, 2
test1: I=  %x.inc2 = add nuw i32 %x, 2
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw i32 %x, 3
chris-RemoveOne: return I  %x.inc3 = add nuw i32 %x, 3
run: WorkList:   %x.inc3 = add nuw i32 %x, 3
chris-run: I=  %x.inc3 = add nuw i32 %x, 3
chris-run: I-end=  %x.inc3 = add nuw i32 %x, 3
IC: Visiting:   %x.inc3 = add nuw i32 %x, 3
test1: I=  %x.inc3 = add nuw i32 %x, 3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %1 = and i1 %chk2, %chk3
chris-RemoveOne: return I  %1 = and i1 %chk2, %chk3
run: WorkList:   %1 = and i1 %chk2, %chk3
chris-run: I=  %1 = and i1 %chk2, %chk3
chris-run: I-end=  %1 = and i1 %chk2, %chk3
IC: Visiting:   %1 = and i1 %chk2, %chk3
test1: I=  %1 = and i1 %chk2, %chk3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void
 ok, break
Inst[end]:   ret void
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void
chris-RemoveOne: return I  ret void
run: WorkList:   ret void
chris-run: I=  ret void
chris-run: I-end=  ret void
IC: Visiting:   ret void
test1: I=  ret void
visit: nullptr 
test3
test4
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !range !0
runOnFunction: I:  %chk0 = icmp ugt i32 %length, %x
runOnFunction: I:  %x.inc1 = add i32 %x, 1
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length
runOnFunction: I:  %0 = and i1 %chk0, %chk1
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
runOnFunction: I:  %x.inc2 = add nsw i32 %x, -199
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length
runOnFunction: I:  %x.inc3 = add nsw i32 %x, -196
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length
runOnFunction: I:  %1 = and i1 %chk2, %chk3
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
runOnFunction: I:  ret void
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add i32 %x, 1
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(start):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add nsw i32 %x, -199
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nsw i32 %x, -196
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(start):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  ret void


INSTCOMBINE ITERATION #1 on f_5
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add i32 %x, 1
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(end):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add nsw i32 %x, -199
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nsw i32 %x, -196
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(end):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  ret void
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add nsw i32 %x, -199
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add nsw i32 %x, -196
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add nsw i32 %x, -199
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add nsw i32 %x, -196
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x
chris-worklist-bb: BB end:   %x.inc1 = add i32 %x, 1
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length
chris-worklist-bb: BB end:   %0 = and i1 %chk0, %chk1
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc2 = add nsw i32 %x, -199
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length
chris-worklist-bb: BB end:   %x.inc3 = add nsw i32 %x, -196
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length
chris-worklist-bb: BB end:   %1 = and i1 %chk2, %chk3
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-worklist-bb: BB end:   ret void
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-AddInitialGroup: I:   %1 = and i1 %chk2, %chk3
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length
chris-AddInitialGroup: I:   %x.inc3 = add nsw i32 %x, -196
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length
chris-AddInitialGroup: I:   %x.inc2 = add nsw i32 %x, -199
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-AddInitialGroup: I:   %0 = and i1 %chk0, %chk1
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length
chris-AddInitialGroup: I:   %x.inc1 = add i32 %x, 1
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !range !0
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !range !0
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !range !0
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !range !0
test1: I=  %length = load i32, i32* %length_buf, align 4, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x
run: WorkList:   %chk0 = icmp ugt i32 %length, %x
chris-run: I=  %chk0 = icmp ugt i32 %length, %x
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x
test1: I=  %chk0 = icmp ugt i32 %length, %x
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add i32 %x, 1
chris-RemoveOne: return I  %x.inc1 = add i32 %x, 1
run: WorkList:   %x.inc1 = add i32 %x, 1
chris-run: I=  %x.inc1 = add i32 %x, 1
chris-run: I-end=  %x.inc1 = add i32 %x, 1
IC: Visiting:   %x.inc1 = add i32 %x, 1
test1: I=  %x.inc1 = add i32 %x, 1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %0 = and i1 %chk0, %chk1
chris-RemoveOne: return I  %0 = and i1 %chk0, %chk1
run: WorkList:   %0 = and i1 %chk0, %chk1
chris-run: I=  %0 = and i1 %chk0, %chk1
chris-run: I-end=  %0 = and i1 %chk0, %chk1
IC: Visiting:   %0 = and i1 %chk0, %chk1
test1: I=  %0 = and i1 %chk0, %chk1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add nsw i32 %x, -199
NextInst[0]   %chk2 = icmp ult i32 %x.inc2, %length
NextInst[1]   %x.inc3 = add nsw i32 %x, -196
NextInst[2]   %chk3 = icmp ult i32 %x.inc3, %length
Inst[end]:   %chk3 = icmp ult i32 %x.inc3, %length
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add nsw i32 %x, -199
chris-RemoveOne: return I  %x.inc2 = add nsw i32 %x, -199
run: WorkList:   %x.inc2 = add nsw i32 %x, -199
chris-run: I=  %x.inc2 = add nsw i32 %x, -199
chris-run: I-end=  %x.inc2 = add nsw i32 %x, -199
IC: Visiting:   %x.inc2 = add nsw i32 %x, -199
test1: I=  %x.inc2 = add nsw i32 %x, -199
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nsw i32 %x, -196
chris-RemoveOne: return I  %x.inc3 = add nsw i32 %x, -196
run: WorkList:   %x.inc3 = add nsw i32 %x, -196
chris-run: I=  %x.inc3 = add nsw i32 %x, -196
chris-run: I-end=  %x.inc3 = add nsw i32 %x, -196
IC: Visiting:   %x.inc3 = add nsw i32 %x, -196
test1: I=  %x.inc3 = add nsw i32 %x, -196
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %1 = and i1 %chk2, %chk3
chris-RemoveOne: return I  %1 = and i1 %chk2, %chk3
run: WorkList:   %1 = and i1 %chk2, %chk3
chris-run: I=  %1 = and i1 %chk2, %chk3
chris-run: I-end=  %1 = and i1 %chk2, %chk3
IC: Visiting:   %1 = and i1 %chk2, %chk3
test1: I=  %1 = and i1 %chk2, %chk3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void
 ok, break
Inst[end]:   ret void
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void
chris-RemoveOne: return I  ret void
run: WorkList:   ret void
chris-run: I=  ret void
chris-run: I-end=  ret void
IC: Visiting:   ret void
test1: I=  ret void
visit: nullptr 
test3
test4
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !range !0
runOnFunction: I:  %chk0 = icmp ugt i32 %length, %x
runOnFunction: I:  %x.inc1 = add i32 %x, 1
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length
runOnFunction: I:  %0 = and i1 %chk0, %chk1
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
runOnFunction: I:  %x.inc2 = add nsw i32 %x, -199
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length
runOnFunction: I:  %x.inc3 = add nsw i32 %x, -196
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length
runOnFunction: I:  %1 = and i1 %chk2, %chk3
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
runOnFunction: I:  ret void
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add i32 %x, 1
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(start):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add nsw i32 %x, -199
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nsw i32 %x, -196
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(start):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  ret void


INSTCOMBINE ITERATION #1 on f_5
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add i32 %x, 1
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(end):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add nsw i32 %x, -199
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nsw i32 %x, -196
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(end):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  ret void
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add nsw i32 %x, -199
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add nsw i32 %x, -196
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add nsw i32 %x, -199
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add nsw i32 %x, -196
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x
chris-worklist-bb: BB end:   %x.inc1 = add i32 %x, 1
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length
chris-worklist-bb: BB end:   %0 = and i1 %chk0, %chk1
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc2 = add nsw i32 %x, -199
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length
chris-worklist-bb: BB end:   %x.inc3 = add nsw i32 %x, -196
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length
chris-worklist-bb: BB end:   %1 = and i1 %chk2, %chk3
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-worklist-bb: BB end:   ret void
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-AddInitialGroup: I:   %1 = and i1 %chk2, %chk3
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length
chris-AddInitialGroup: I:   %x.inc3 = add nsw i32 %x, -196
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length
chris-AddInitialGroup: I:   %x.inc2 = add nsw i32 %x, -199
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-AddInitialGroup: I:   %0 = and i1 %chk0, %chk1
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length
chris-AddInitialGroup: I:   %x.inc1 = add i32 %x, 1
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !range !0
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !range !0
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !range !0
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !range !0
test1: I=  %length = load i32, i32* %length_buf, align 4, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x
run: WorkList:   %chk0 = icmp ugt i32 %length, %x
chris-run: I=  %chk0 = icmp ugt i32 %length, %x
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x
test1: I=  %chk0 = icmp ugt i32 %length, %x
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add i32 %x, 1
chris-RemoveOne: return I  %x.inc1 = add i32 %x, 1
run: WorkList:   %x.inc1 = add i32 %x, 1
chris-run: I=  %x.inc1 = add i32 %x, 1
chris-run: I-end=  %x.inc1 = add i32 %x, 1
IC: Visiting:   %x.inc1 = add i32 %x, 1
test1: I=  %x.inc1 = add i32 %x, 1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %0 = and i1 %chk0, %chk1
chris-RemoveOne: return I  %0 = and i1 %chk0, %chk1
run: WorkList:   %0 = and i1 %chk0, %chk1
chris-run: I=  %0 = and i1 %chk0, %chk1
chris-run: I-end=  %0 = and i1 %chk0, %chk1
IC: Visiting:   %0 = and i1 %chk0, %chk1
test1: I=  %0 = and i1 %chk0, %chk1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add nsw i32 %x, -199
NextInst[0]   %chk2 = icmp ult i32 %x.inc2, %length
NextInst[1]   %x.inc3 = add nsw i32 %x, -196
NextInst[2]   %chk3 = icmp ult i32 %x.inc3, %length
Inst[end]:   %chk3 = icmp ult i32 %x.inc3, %length
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add nsw i32 %x, -199
chris-RemoveOne: return I  %x.inc2 = add nsw i32 %x, -199
run: WorkList:   %x.inc2 = add nsw i32 %x, -199
chris-run: I=  %x.inc2 = add nsw i32 %x, -199
chris-run: I-end=  %x.inc2 = add nsw i32 %x, -199
IC: Visiting:   %x.inc2 = add nsw i32 %x, -199
test1: I=  %x.inc2 = add nsw i32 %x, -199
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nsw i32 %x, -196
chris-RemoveOne: return I  %x.inc3 = add nsw i32 %x, -196
run: WorkList:   %x.inc3 = add nsw i32 %x, -196
chris-run: I=  %x.inc3 = add nsw i32 %x, -196
chris-run: I-end=  %x.inc3 = add nsw i32 %x, -196
IC: Visiting:   %x.inc3 = add nsw i32 %x, -196
test1: I=  %x.inc3 = add nsw i32 %x, -196
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %1 = and i1 %chk2, %chk3
chris-RemoveOne: return I  %1 = and i1 %chk2, %chk3
run: WorkList:   %1 = and i1 %chk2, %chk3
chris-run: I=  %1 = and i1 %chk2, %chk3
chris-run: I-end=  %1 = and i1 %chk2, %chk3
IC: Visiting:   %1 = and i1 %chk2, %chk3
test1: I=  %1 = and i1 %chk2, %chk3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void
 ok, break
Inst[end]:   ret void
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void
chris-RemoveOne: return I  ret void
run: WorkList:   ret void
chris-run: I=  ret void
chris-run: I-end=  ret void
IC: Visiting:   ret void
test1: I=  ret void
visit: nullptr 
test3
test4
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !range !0
runOnFunction: I:  %chk0 = icmp ugt i32 %length, %x
runOnFunction: I:  %x.inc1 = add i32 %x, 1
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length
runOnFunction: I:  %0 = and i1 %chk0, %chk1
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
runOnFunction: I:  %x.inc2 = add nsw i32 %x, -199
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length
runOnFunction: I:  %x.inc3 = add nsw i32 %x, -196
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length
runOnFunction: I:  %1 = and i1 %chk2, %chk3
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
runOnFunction: I:  ret void
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add i32 %x, 1
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(start):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add nsw i32 %x, -199
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nsw i32 %x, -196
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(start):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  ret void


INSTCOMBINE ITERATION #1 on f_5
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add i32 %x, 1
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(end):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add nsw i32 %x, -199
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nsw i32 %x, -196
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(end):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  ret void
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add nsw i32 %x, -199
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add nsw i32 %x, -196
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, 1
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add nsw i32 %x, -199
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add nsw i32 %x, -196
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x
chris-worklist-bb: BB end:   %x.inc1 = add i32 %x, 1
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length
chris-worklist-bb: BB end:   %0 = and i1 %chk0, %chk1
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc2 = add nsw i32 %x, -199
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length
chris-worklist-bb: BB end:   %x.inc3 = add nsw i32 %x, -196
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length
chris-worklist-bb: BB end:   %1 = and i1 %chk2, %chk3
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-worklist-bb: BB end:   ret void
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-AddInitialGroup: I:   %1 = and i1 %chk2, %chk3
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length
chris-AddInitialGroup: I:   %x.inc3 = add nsw i32 %x, -196
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length
chris-AddInitialGroup: I:   %x.inc2 = add nsw i32 %x, -199
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-AddInitialGroup: I:   %0 = and i1 %chk0, %chk1
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length
chris-AddInitialGroup: I:   %x.inc1 = add i32 %x, 1
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !range !0
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !range !0
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !range !0
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !range !0
test1: I=  %length = load i32, i32* %length_buf, align 4, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x
run: WorkList:   %chk0 = icmp ugt i32 %length, %x
chris-run: I=  %chk0 = icmp ugt i32 %length, %x
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x
test1: I=  %chk0 = icmp ugt i32 %length, %x
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add i32 %x, 1
chris-RemoveOne: return I  %x.inc1 = add i32 %x, 1
run: WorkList:   %x.inc1 = add i32 %x, 1
chris-run: I=  %x.inc1 = add i32 %x, 1
chris-run: I-end=  %x.inc1 = add i32 %x, 1
IC: Visiting:   %x.inc1 = add i32 %x, 1
test1: I=  %x.inc1 = add i32 %x, 1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %0 = and i1 %chk0, %chk1
chris-RemoveOne: return I  %0 = and i1 %chk0, %chk1
run: WorkList:   %0 = and i1 %chk0, %chk1
chris-run: I=  %0 = and i1 %chk0, %chk1
chris-run: I-end=  %0 = and i1 %chk0, %chk1
IC: Visiting:   %0 = and i1 %chk0, %chk1
test1: I=  %0 = and i1 %chk0, %chk1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add nsw i32 %x, -199
NextInst[0]   %chk2 = icmp ult i32 %x.inc2, %length
NextInst[1]   %x.inc3 = add nsw i32 %x, -196
NextInst[2]   %chk3 = icmp ult i32 %x.inc3, %length
Inst[end]:   %chk3 = icmp ult i32 %x.inc3, %length
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add nsw i32 %x, -199
chris-RemoveOne: return I  %x.inc2 = add nsw i32 %x, -199
run: WorkList:   %x.inc2 = add nsw i32 %x, -199
chris-run: I=  %x.inc2 = add nsw i32 %x, -199
chris-run: I-end=  %x.inc2 = add nsw i32 %x, -199
IC: Visiting:   %x.inc2 = add nsw i32 %x, -199
test1: I=  %x.inc2 = add nsw i32 %x, -199
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nsw i32 %x, -196
chris-RemoveOne: return I  %x.inc3 = add nsw i32 %x, -196
run: WorkList:   %x.inc3 = add nsw i32 %x, -196
chris-run: I=  %x.inc3 = add nsw i32 %x, -196
chris-run: I-end=  %x.inc3 = add nsw i32 %x, -196
IC: Visiting:   %x.inc3 = add nsw i32 %x, -196
test1: I=  %x.inc3 = add nsw i32 %x, -196
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %1 = and i1 %chk2, %chk3
chris-RemoveOne: return I  %1 = and i1 %chk2, %chk3
run: WorkList:   %1 = and i1 %chk2, %chk3
chris-run: I=  %1 = and i1 %chk2, %chk3
chris-run: I-end=  %1 = and i1 %chk2, %chk3
IC: Visiting:   %1 = and i1 %chk2, %chk3
test1: I=  %1 = and i1 %chk2, %chk3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void
 ok, break
Inst[end]:   ret void
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void
chris-RemoveOne: return I  ret void
run: WorkList:   ret void
chris-run: I=  ret void
chris-run: I-end=  ret void
IC: Visiting:   ret void
test1: I=  ret void
visit: nullptr 
test3
test4
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !range !0
runOnFunction: I:  %chk0 = icmp ugt i32 %length, %x
runOnFunction: I:  %x.inc1 = add i32 %x, -2147483647
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length
runOnFunction: I:  %0 = and i1 %chk0, %chk1
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
runOnFunction: I:  %x.inc2 = add i32 %x, 2
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length
runOnFunction: I:  %x.inc3 = add i32 %x, 3
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length
runOnFunction: I:  %1 = and i1 %chk2, %chk3
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
runOnFunction: I:  ret void
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add i32 %x, -2147483647
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(start):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add i32 %x, 2
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add i32 %x, 3
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(start):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  ret void


INSTCOMBINE ITERATION #1 on f_6
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add i32 %x, -2147483647
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(end):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add i32 %x, 2
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add i32 %x, 3
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(end):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  ret void
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, -2147483647
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add i32 %x, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add i32 %x, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, -2147483647
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add i32 %x, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add i32 %x, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x
chris-worklist-bb: BB end:   %x.inc1 = add i32 %x, -2147483647
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length
chris-worklist-bb: BB end:   %0 = and i1 %chk0, %chk1
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc2 = add i32 %x, 2
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length
chris-worklist-bb: BB end:   %x.inc3 = add i32 %x, 3
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length
chris-worklist-bb: BB end:   %1 = and i1 %chk2, %chk3
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-worklist-bb: BB end:   ret void
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-AddInitialGroup: I:   %1 = and i1 %chk2, %chk3
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length
chris-AddInitialGroup: I:   %x.inc3 = add i32 %x, 3
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length
chris-AddInitialGroup: I:   %x.inc2 = add i32 %x, 2
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-AddInitialGroup: I:   %0 = and i1 %chk0, %chk1
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length
chris-AddInitialGroup: I:   %x.inc1 = add i32 %x, -2147483647
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !range !0
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !range !0
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !range !0
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !range !0
test1: I=  %length = load i32, i32* %length_buf, align 4, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x
run: WorkList:   %chk0 = icmp ugt i32 %length, %x
chris-run: I=  %chk0 = icmp ugt i32 %length, %x
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x
test1: I=  %chk0 = icmp ugt i32 %length, %x
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add i32 %x, -2147483647
chris-RemoveOne: return I  %x.inc1 = add i32 %x, -2147483647
run: WorkList:   %x.inc1 = add i32 %x, -2147483647
chris-run: I=  %x.inc1 = add i32 %x, -2147483647
chris-run: I-end=  %x.inc1 = add i32 %x, -2147483647
IC: Visiting:   %x.inc1 = add i32 %x, -2147483647
test1: I=  %x.inc1 = add i32 %x, -2147483647
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %0 = and i1 %chk0, %chk1
chris-RemoveOne: return I  %0 = and i1 %chk0, %chk1
run: WorkList:   %0 = and i1 %chk0, %chk1
chris-run: I=  %0 = and i1 %chk0, %chk1
chris-run: I-end=  %0 = and i1 %chk0, %chk1
IC: Visiting:   %0 = and i1 %chk0, %chk1
test1: I=  %0 = and i1 %chk0, %chk1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add i32 %x, 2
NextInst[0]   %chk2 = icmp ult i32 %x.inc2, %length
NextInst[1]   %x.inc3 = add i32 %x, 3
NextInst[2]   %chk3 = icmp ult i32 %x.inc3, %length
Inst[end]:   %chk3 = icmp ult i32 %x.inc3, %length
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add i32 %x, 2
chris-RemoveOne: return I  %x.inc2 = add i32 %x, 2
run: WorkList:   %x.inc2 = add i32 %x, 2
chris-run: I=  %x.inc2 = add i32 %x, 2
chris-run: I-end=  %x.inc2 = add i32 %x, 2
IC: Visiting:   %x.inc2 = add i32 %x, 2
test1: I=  %x.inc2 = add i32 %x, 2
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add i32 %x, 3
chris-RemoveOne: return I  %x.inc3 = add i32 %x, 3
run: WorkList:   %x.inc3 = add i32 %x, 3
chris-run: I=  %x.inc3 = add i32 %x, 3
chris-run: I-end=  %x.inc3 = add i32 %x, 3
IC: Visiting:   %x.inc3 = add i32 %x, 3
test1: I=  %x.inc3 = add i32 %x, 3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %1 = and i1 %chk2, %chk3
chris-RemoveOne: return I  %1 = and i1 %chk2, %chk3
run: WorkList:   %1 = and i1 %chk2, %chk3
chris-run: I=  %1 = and i1 %chk2, %chk3
chris-run: I-end=  %1 = and i1 %chk2, %chk3
IC: Visiting:   %1 = and i1 %chk2, %chk3
test1: I=  %1 = and i1 %chk2, %chk3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void
 ok, break
Inst[end]:   ret void
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void
chris-RemoveOne: return I  ret void
run: WorkList:   ret void
chris-run: I=  ret void
chris-run: I-end=  ret void
IC: Visiting:   ret void
test1: I=  ret void
visit: nullptr 
test3
test4
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !range !0
runOnFunction: I:  %chk0 = icmp ugt i32 %length, %x
runOnFunction: I:  %x.inc1 = add i32 %x, -2147483647
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length
runOnFunction: I:  %0 = and i1 %chk0, %chk1
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
runOnFunction: I:  %x.inc2 = add i32 %x, 2
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length
runOnFunction: I:  %x.inc3 = add i32 %x, 3
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length
runOnFunction: I:  %1 = and i1 %chk2, %chk3
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
runOnFunction: I:  ret void
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add i32 %x, -2147483647
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(start):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add i32 %x, 2
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add i32 %x, 3
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(start):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  ret void


INSTCOMBINE ITERATION #1 on f_6
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add i32 %x, -2147483647
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(end):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add i32 %x, 2
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add i32 %x, 3
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(end):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  ret void
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, -2147483647
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add i32 %x, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add i32 %x, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, -2147483647
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add i32 %x, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add i32 %x, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x
chris-worklist-bb: BB end:   %x.inc1 = add i32 %x, -2147483647
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length
chris-worklist-bb: BB end:   %0 = and i1 %chk0, %chk1
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc2 = add i32 %x, 2
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length
chris-worklist-bb: BB end:   %x.inc3 = add i32 %x, 3
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length
chris-worklist-bb: BB end:   %1 = and i1 %chk2, %chk3
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-worklist-bb: BB end:   ret void
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-AddInitialGroup: I:   %1 = and i1 %chk2, %chk3
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length
chris-AddInitialGroup: I:   %x.inc3 = add i32 %x, 3
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length
chris-AddInitialGroup: I:   %x.inc2 = add i32 %x, 2
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-AddInitialGroup: I:   %0 = and i1 %chk0, %chk1
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length
chris-AddInitialGroup: I:   %x.inc1 = add i32 %x, -2147483647
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !range !0
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !range !0
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !range !0
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !range !0
test1: I=  %length = load i32, i32* %length_buf, align 4, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x
run: WorkList:   %chk0 = icmp ugt i32 %length, %x
chris-run: I=  %chk0 = icmp ugt i32 %length, %x
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x
test1: I=  %chk0 = icmp ugt i32 %length, %x
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add i32 %x, -2147483647
chris-RemoveOne: return I  %x.inc1 = add i32 %x, -2147483647
run: WorkList:   %x.inc1 = add i32 %x, -2147483647
chris-run: I=  %x.inc1 = add i32 %x, -2147483647
chris-run: I-end=  %x.inc1 = add i32 %x, -2147483647
IC: Visiting:   %x.inc1 = add i32 %x, -2147483647
test1: I=  %x.inc1 = add i32 %x, -2147483647
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %0 = and i1 %chk0, %chk1
chris-RemoveOne: return I  %0 = and i1 %chk0, %chk1
run: WorkList:   %0 = and i1 %chk0, %chk1
chris-run: I=  %0 = and i1 %chk0, %chk1
chris-run: I-end=  %0 = and i1 %chk0, %chk1
IC: Visiting:   %0 = and i1 %chk0, %chk1
test1: I=  %0 = and i1 %chk0, %chk1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add i32 %x, 2
NextInst[0]   %chk2 = icmp ult i32 %x.inc2, %length
NextInst[1]   %x.inc3 = add i32 %x, 3
NextInst[2]   %chk3 = icmp ult i32 %x.inc3, %length
Inst[end]:   %chk3 = icmp ult i32 %x.inc3, %length
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add i32 %x, 2
chris-RemoveOne: return I  %x.inc2 = add i32 %x, 2
run: WorkList:   %x.inc2 = add i32 %x, 2
chris-run: I=  %x.inc2 = add i32 %x, 2
chris-run: I-end=  %x.inc2 = add i32 %x, 2
IC: Visiting:   %x.inc2 = add i32 %x, 2
test1: I=  %x.inc2 = add i32 %x, 2
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add i32 %x, 3
chris-RemoveOne: return I  %x.inc3 = add i32 %x, 3
run: WorkList:   %x.inc3 = add i32 %x, 3
chris-run: I=  %x.inc3 = add i32 %x, 3
chris-run: I-end=  %x.inc3 = add i32 %x, 3
IC: Visiting:   %x.inc3 = add i32 %x, 3
test1: I=  %x.inc3 = add i32 %x, 3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %1 = and i1 %chk2, %chk3
chris-RemoveOne: return I  %1 = and i1 %chk2, %chk3
run: WorkList:   %1 = and i1 %chk2, %chk3
chris-run: I=  %1 = and i1 %chk2, %chk3
chris-run: I-end=  %1 = and i1 %chk2, %chk3
IC: Visiting:   %1 = and i1 %chk2, %chk3
test1: I=  %1 = and i1 %chk2, %chk3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void
 ok, break
Inst[end]:   ret void
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void
chris-RemoveOne: return I  ret void
run: WorkList:   ret void
chris-run: I=  ret void
chris-run: I-end=  ret void
IC: Visiting:   ret void
test1: I=  ret void
visit: nullptr 
test3
test4
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length = load i32, i32* %length_buf, align 4, !range !0
runOnFunction: I:  %chk0 = icmp ugt i32 %length, %x
runOnFunction: I:  %x.inc1 = add i32 %x, -2147483647
runOnFunction: I:  %chk1 = icmp ult i32 %x.inc1, %length
runOnFunction: I:  %0 = and i1 %chk0, %chk1
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
runOnFunction: I:  %x.inc2 = add i32 %x, 2
runOnFunction: I:  %chk2 = icmp ult i32 %x.inc2, %length
runOnFunction: I:  %x.inc3 = add i32 %x, 3
runOnFunction: I:  %chk3 = icmp ult i32 %x.inc3, %length
runOnFunction: I:  %1 = and i1 %chk2, %chk3
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
runOnFunction: I:  ret void
INSTCOMBINE ITERATION: Inst(start):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(start):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add i32 %x, -2147483647
INSTCOMBINE ITERATION: Inst(start):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(start):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add i32 %x, 2
INSTCOMBINE ITERATION: Inst(start):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add i32 %x, 3
INSTCOMBINE ITERATION: Inst(start):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(start):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  ret void


INSTCOMBINE ITERATION #1 on f_6
INSTCOMBINE ITERATION: Inst(end):  %length = load i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(end):  %chk0 = icmp ugt i32 %length, %x
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add i32 %x, -2147483647
INSTCOMBINE ITERATION: Inst(end):  %chk1 = icmp ult i32 %x.inc1, %length
INSTCOMBINE ITERATION: Inst(end):  %0 = and i1 %chk0, %chk1
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add i32 %x, 2
INSTCOMBINE ITERATION: Inst(end):  %chk2 = icmp ult i32 %x.inc2, %length
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add i32 %x, 3
INSTCOMBINE ITERATION: Inst(end):  %chk3 = icmp ult i32 %x.inc3, %length
INSTCOMBINE ITERATION: Inst(end):  %1 = and i1 %chk2, %chk3
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  ret void
chris-worklist-bb: bb: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, -2147483647
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add i32 %x, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add i32 %x, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB: 
entry:
  %length = load i32, i32* %length_buf, align 4, !range !0
  %chk0 = icmp ugt i32 %length, %x
  %x.inc1 = add i32 %x, -2147483647
  %chk1 = icmp ult i32 %x.inc1, %length
  %0 = and i1 %chk0, %chk1
  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  %x.inc2 = add i32 %x, 2
  %chk2 = icmp ult i32 %x.inc2, %length
  %x.inc3 = add i32 %x, 3
  %chk3 = icmp ult i32 %x.inc3, %length
  %1 = and i1 %chk2, %chk3
  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  ret void

chris-worklist-bb: BB end:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-worklist-bb: BB end:   %chk0 = icmp ugt i32 %length, %x
chris-worklist-bb: BB end:   %x.inc1 = add i32 %x, -2147483647
chris-worklist-bb: BB end:   %chk1 = icmp ult i32 %x.inc1, %length
chris-worklist-bb: BB end:   %0 = and i1 %chk0, %chk1
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc2 = add i32 %x, 2
chris-worklist-bb: BB end:   %chk2 = icmp ult i32 %x.inc2, %length
chris-worklist-bb: BB end:   %x.inc3 = add i32 %x, 3
chris-worklist-bb: BB end:   %chk3 = icmp ult i32 %x.inc3, %length
chris-worklist-bb: BB end:   %1 = and i1 %chk2, %chk3
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-worklist-bb: BB end:   ret void
IC: ADDING: 13 instrs to worklist
chris-AddInitialGroup: I:   ret void
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-AddInitialGroup: I:   %1 = and i1 %chk2, %chk3
chris-AddInitialGroup: I:   %chk3 = icmp ult i32 %x.inc3, %length
chris-AddInitialGroup: I:   %x.inc3 = add i32 %x, 3
chris-AddInitialGroup: I:   %chk2 = icmp ult i32 %x.inc2, %length
chris-AddInitialGroup: I:   %x.inc2 = add i32 %x, 2
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-AddInitialGroup: I:   %0 = and i1 %chk0, %chk1
chris-AddInitialGroup: I:   %chk1 = icmp ult i32 %x.inc1, %length
chris-AddInitialGroup: I:   %x.inc1 = add i32 %x, -2147483647
chris-AddInitialGroup: I:   %chk0 = icmp ugt i32 %length, %x
chris-AddInitialGroup: I:   %length = load i32, i32* %length_buf, align 4, !range !0
RemoveOne!!!
chris-RemoveOne:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-RemoveOne: return I  %length = load i32, i32* %length_buf, align 4, !range !0
run: WorkList:   %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I=  %length = load i32, i32* %length_buf, align 4, !range !0
chris-run: I-end=  %length = load i32, i32* %length_buf, align 4, !range !0
IC: Visiting:   %length = load i32, i32* %length_buf, align 4, !range !0
test1: I=  %length = load i32, i32* %length_buf, align 4, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = icmp ugt i32 %length, %x
chris-RemoveOne: return I  %chk0 = icmp ugt i32 %length, %x
run: WorkList:   %chk0 = icmp ugt i32 %length, %x
chris-run: I=  %chk0 = icmp ugt i32 %length, %x
chris-run: I-end=  %chk0 = icmp ugt i32 %length, %x
IC: Visiting:   %chk0 = icmp ugt i32 %length, %x
test1: I=  %chk0 = icmp ugt i32 %length, %x
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add i32 %x, -2147483647
chris-RemoveOne: return I  %x.inc1 = add i32 %x, -2147483647
run: WorkList:   %x.inc1 = add i32 %x, -2147483647
chris-run: I=  %x.inc1 = add i32 %x, -2147483647
chris-run: I-end=  %x.inc1 = add i32 %x, -2147483647
IC: Visiting:   %x.inc1 = add i32 %x, -2147483647
test1: I=  %x.inc1 = add i32 %x, -2147483647
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = icmp ult i32 %x.inc1, %length
chris-RemoveOne: return I  %chk1 = icmp ult i32 %x.inc1, %length
run: WorkList:   %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I=  %chk1 = icmp ult i32 %x.inc1, %length
chris-run: I-end=  %chk1 = icmp ult i32 %x.inc1, %length
IC: Visiting:   %chk1 = icmp ult i32 %x.inc1, %length
test1: I=  %chk1 = icmp ult i32 %x.inc1, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %0 = and i1 %chk0, %chk1
chris-RemoveOne: return I  %0 = and i1 %chk0, %chk1
run: WorkList:   %0 = and i1 %chk0, %chk1
chris-run: I=  %0 = and i1 %chk0, %chk1
chris-run: I-end=  %0 = and i1 %chk0, %chk1
IC: Visiting:   %0 = and i1 %chk0, %chk1
test1: I=  %0 = and i1 %chk0, %chk1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %0) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add i32 %x, 2
NextInst[0]   %chk2 = icmp ult i32 %x.inc2, %length
NextInst[1]   %x.inc3 = add i32 %x, 3
NextInst[2]   %chk3 = icmp ult i32 %x.inc3, %length
Inst[end]:   %chk3 = icmp ult i32 %x.inc3, %length
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add i32 %x, 2
chris-RemoveOne: return I  %x.inc2 = add i32 %x, 2
run: WorkList:   %x.inc2 = add i32 %x, 2
chris-run: I=  %x.inc2 = add i32 %x, 2
chris-run: I-end=  %x.inc2 = add i32 %x, 2
IC: Visiting:   %x.inc2 = add i32 %x, 2
test1: I=  %x.inc2 = add i32 %x, 2
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = icmp ult i32 %x.inc2, %length
chris-RemoveOne: return I  %chk2 = icmp ult i32 %x.inc2, %length
run: WorkList:   %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I=  %chk2 = icmp ult i32 %x.inc2, %length
chris-run: I-end=  %chk2 = icmp ult i32 %x.inc2, %length
IC: Visiting:   %chk2 = icmp ult i32 %x.inc2, %length
test1: I=  %chk2 = icmp ult i32 %x.inc2, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add i32 %x, 3
chris-RemoveOne: return I  %x.inc3 = add i32 %x, 3
run: WorkList:   %x.inc3 = add i32 %x, 3
chris-run: I=  %x.inc3 = add i32 %x, 3
chris-run: I-end=  %x.inc3 = add i32 %x, 3
IC: Visiting:   %x.inc3 = add i32 %x, 3
test1: I=  %x.inc3 = add i32 %x, 3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = icmp ult i32 %x.inc3, %length
chris-RemoveOne: return I  %chk3 = icmp ult i32 %x.inc3, %length
run: WorkList:   %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I=  %chk3 = icmp ult i32 %x.inc3, %length
chris-run: I-end=  %chk3 = icmp ult i32 %x.inc3, %length
IC: Visiting:   %chk3 = icmp ult i32 %x.inc3, %length
test1: I=  %chk3 = icmp ult i32 %x.inc3, %length
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %1 = and i1 %chk2, %chk3
chris-RemoveOne: return I  %1 = and i1 %chk2, %chk3
run: WorkList:   %1 = and i1 %chk2, %chk3
chris-run: I=  %1 = and i1 %chk2, %chk3
chris-run: I-end=  %1 = and i1 %chk2, %chk3
IC: Visiting:   %1 = and i1 %chk2, %chk3
test1: I=  %1 = and i1 %chk2, %chk3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %1) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void
 ok, break
Inst[end]:   ret void
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void
chris-RemoveOne: return I  ret void
run: WorkList:   ret void
chris-run: I=  ret void
chris-run: I-end=  ret void
IC: Visiting:   ret void
test1: I=  ret void
visit: nullptr 
test3
test4
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
runOnFunction: I:  %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
runOnFunction: I:  %chk0.a = icmp ugt i32 %length_a, %x
runOnFunction: I:  %chk0.b = icmp ugt i32 %length_b, %x
runOnFunction: I:  %chk0 = and i1 %chk0.a, %chk0.b
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
runOnFunction: I:  %x.inc1 = add nuw nsw i32 %x, 1
runOnFunction: I:  %chk1.a = icmp ult i32 %x.inc1, %length_a
runOnFunction: I:  %chk1.b = icmp ult i32 %x.inc1, %length_b
runOnFunction: I:  %chk1 = and i1 %chk1.a, %chk1.b
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
runOnFunction: I:  %x.inc2 = add nuw nsw i32 %x, 2
runOnFunction: I:  %chk2.a = icmp ult i32 %x.inc2, %length_a
runOnFunction: I:  %chk2.b = icmp ult i32 %x.inc2, %length_b
runOnFunction: I:  %chk2 = and i1 %chk2.a, %chk2.b
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
runOnFunction: I:  %x.inc3 = add nuw nsw i32 %x, 3
runOnFunction: I:  %chk3.a = icmp ult i32 %x.inc3, %length_a
runOnFunction: I:  %chk3.b = icmp ult i32 %x.inc3, %length_b
runOnFunction: I:  %chk3 = and i1 %chk3.a, %chk3.b
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
runOnFunction: I:  ret void
INSTCOMBINE ITERATION: Inst(start):  %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(start):  %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(start):  %chk0.a = icmp ugt i32 %length_a, %x
INSTCOMBINE ITERATION: Inst(start):  %chk0.b = icmp ugt i32 %length_b, %x
INSTCOMBINE ITERATION: Inst(start):  %chk0 = and i1 %chk0.a, %chk0.b
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add nuw nsw i32 %x, 1
INSTCOMBINE ITERATION: Inst(start):  %chk1.a = icmp ult i32 %x.inc1, %length_a
INSTCOMBINE ITERATION: Inst(start):  %chk1.b = icmp ult i32 %x.inc1, %length_b
INSTCOMBINE ITERATION: Inst(start):  %chk1 = and i1 %chk1.a, %chk1.b
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add nuw nsw i32 %x, 2
INSTCOMBINE ITERATION: Inst(start):  %chk2.a = icmp ult i32 %x.inc2, %length_a
INSTCOMBINE ITERATION: Inst(start):  %chk2.b = icmp ult i32 %x.inc2, %length_b
INSTCOMBINE ITERATION: Inst(start):  %chk2 = and i1 %chk2.a, %chk2.b
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw nsw i32 %x, 3
INSTCOMBINE ITERATION: Inst(start):  %chk3.a = icmp ult i32 %x.inc3, %length_a
INSTCOMBINE ITERATION: Inst(start):  %chk3.b = icmp ult i32 %x.inc3, %length_b
INSTCOMBINE ITERATION: Inst(start):  %chk3 = and i1 %chk3.a, %chk3.b
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  ret void


INSTCOMBINE ITERATION #1 on f_7
INSTCOMBINE ITERATION: Inst(end):  %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(end):  %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(end):  %chk0.a = icmp ugt i32 %length_a, %x
INSTCOMBINE ITERATION: Inst(end):  %chk0.b = icmp ugt i32 %length_b, %x
INSTCOMBINE ITERATION: Inst(end):  %chk0 = and i1 %chk0.a, %chk0.b
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add nuw nsw i32 %x, 1
INSTCOMBINE ITERATION: Inst(end):  %chk1.a = icmp ult i32 %x.inc1, %length_a
INSTCOMBINE ITERATION: Inst(end):  %chk1.b = icmp ult i32 %x.inc1, %length_b
INSTCOMBINE ITERATION: Inst(end):  %chk1 = and i1 %chk1.a, %chk1.b
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add nuw nsw i32 %x, 2
INSTCOMBINE ITERATION: Inst(end):  %chk2.a = icmp ult i32 %x.inc2, %length_a
INSTCOMBINE ITERATION: Inst(end):  %chk2.b = icmp ult i32 %x.inc2, %length_b
INSTCOMBINE ITERATION: Inst(end):  %chk2 = and i1 %chk2.a, %chk2.b
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw nsw i32 %x, 3
INSTCOMBINE ITERATION: Inst(end):  %chk3.a = icmp ult i32 %x.inc3, %length_a
INSTCOMBINE ITERATION: Inst(end):  %chk3.b = icmp ult i32 %x.inc3, %length_b
INSTCOMBINE ITERATION: Inst(end):  %chk3 = and i1 %chk3.a, %chk3.b
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  ret void
chris-worklist-bb: bb: 
entry:
  %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
  %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
  %chk0.a = icmp ugt i32 %length_a, %x
  %chk0.b = icmp ugt i32 %length_b, %x
  %chk0 = and i1 %chk0.a, %chk0.b
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
  %x.inc1 = add nuw nsw i32 %x, 1
  %chk1.a = icmp ult i32 %x.inc1, %length_a
  %chk1.b = icmp ult i32 %x.inc1, %length_b
  %chk1 = and i1 %chk1.a, %chk1.b
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
  %x.inc2 = add nuw nsw i32 %x, 2
  %chk2.a = icmp ult i32 %x.inc2, %length_a
  %chk2.b = icmp ult i32 %x.inc2, %length_b
  %chk2 = and i1 %chk2.a, %chk2.b
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
  %x.inc3 = add nuw nsw i32 %x, 3
  %chk3.a = icmp ult i32 %x.inc3, %length_a
  %chk3.b = icmp ult i32 %x.inc3, %length_b
  %chk3 = and i1 %chk3.a, %chk3.b
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
  ret void

chris-worklist-bb: BB: 
entry:
  %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
  %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
  %chk0.a = icmp ugt i32 %length_a, %x
  %chk0.b = icmp ugt i32 %length_b, %x
  %chk0 = and i1 %chk0.a, %chk0.b
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
  %x.inc1 = add nuw nsw i32 %x, 1
  %chk1.a = icmp ult i32 %x.inc1, %length_a
  %chk1.b = icmp ult i32 %x.inc1, %length_b
  %chk1 = and i1 %chk1.a, %chk1.b
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
  %x.inc2 = add nuw nsw i32 %x, 2
  %chk2.a = icmp ult i32 %x.inc2, %length_a
  %chk2.b = icmp ult i32 %x.inc2, %length_b
  %chk2 = and i1 %chk2.a, %chk2.b
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
  %x.inc3 = add nuw nsw i32 %x, 3
  %chk3.a = icmp ult i32 %x.inc3, %length_a
  %chk3.b = icmp ult i32 %x.inc3, %length_b
  %chk3 = and i1 %chk3.a, %chk3.b
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
  ret void

chris-worklist-bb: BB end:   %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
chris-worklist-bb: BB end:   %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
chris-worklist-bb: BB end:   %chk0.a = icmp ugt i32 %length_a, %x
chris-worklist-bb: BB end:   %chk0.b = icmp ugt i32 %length_b, %x
chris-worklist-bb: BB end:   %chk0 = and i1 %chk0.a, %chk0.b
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc1 = add nuw nsw i32 %x, 1
chris-worklist-bb: BB end:   %chk1.a = icmp ult i32 %x.inc1, %length_a
chris-worklist-bb: BB end:   %chk1.b = icmp ult i32 %x.inc1, %length_b
chris-worklist-bb: BB end:   %chk1 = and i1 %chk1.a, %chk1.b
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc2 = add nuw nsw i32 %x, 2
chris-worklist-bb: BB end:   %chk2.a = icmp ult i32 %x.inc2, %length_a
chris-worklist-bb: BB end:   %chk2.b = icmp ult i32 %x.inc2, %length_b
chris-worklist-bb: BB end:   %chk2 = and i1 %chk2.a, %chk2.b
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc3 = add nuw nsw i32 %x, 3
chris-worklist-bb: BB end:   %chk3.a = icmp ult i32 %x.inc3, %length_a
chris-worklist-bb: BB end:   %chk3.b = icmp ult i32 %x.inc3, %length_b
chris-worklist-bb: BB end:   %chk3 = and i1 %chk3.a, %chk3.b
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
chris-worklist-bb: BB end:   ret void
IC: ADDING: 22 instrs to worklist
chris-AddInitialGroup: I:   ret void
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
chris-AddInitialGroup: I:   %chk3 = and i1 %chk3.a, %chk3.b
chris-AddInitialGroup: I:   %chk3.b = icmp ult i32 %x.inc3, %length_b
chris-AddInitialGroup: I:   %chk3.a = icmp ult i32 %x.inc3, %length_a
chris-AddInitialGroup: I:   %x.inc3 = add nuw nsw i32 %x, 3
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-AddInitialGroup: I:   %chk2 = and i1 %chk2.a, %chk2.b
chris-AddInitialGroup: I:   %chk2.b = icmp ult i32 %x.inc2, %length_b
chris-AddInitialGroup: I:   %chk2.a = icmp ult i32 %x.inc2, %length_a
chris-AddInitialGroup: I:   %x.inc2 = add nuw nsw i32 %x, 2
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
chris-AddInitialGroup: I:   %chk1 = and i1 %chk1.a, %chk1.b
chris-AddInitialGroup: I:   %chk1.b = icmp ult i32 %x.inc1, %length_b
chris-AddInitialGroup: I:   %chk1.a = icmp ult i32 %x.inc1, %length_a
chris-AddInitialGroup: I:   %x.inc1 = add nuw nsw i32 %x, 1
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-AddInitialGroup: I:   %chk0 = and i1 %chk0.a, %chk0.b
chris-AddInitialGroup: I:   %chk0.b = icmp ugt i32 %length_b, %x
chris-AddInitialGroup: I:   %chk0.a = icmp ugt i32 %length_a, %x
chris-AddInitialGroup: I:   %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
chris-AddInitialGroup: I:   %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
RemoveOne!!!
chris-RemoveOne:   %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
chris-RemoveOne: return I  %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
run: WorkList:   %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
chris-run: I=  %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
chris-run: I-end=  %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
IC: Visiting:   %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
test1: I=  %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
chris-RemoveOne: return I  %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
run: WorkList:   %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
chris-run: I=  %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
chris-run: I-end=  %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
IC: Visiting:   %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
test1: I=  %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0.a = icmp ugt i32 %length_a, %x
chris-RemoveOne: return I  %chk0.a = icmp ugt i32 %length_a, %x
run: WorkList:   %chk0.a = icmp ugt i32 %length_a, %x
chris-run: I=  %chk0.a = icmp ugt i32 %length_a, %x
chris-run: I-end=  %chk0.a = icmp ugt i32 %length_a, %x
IC: Visiting:   %chk0.a = icmp ugt i32 %length_a, %x
test1: I=  %chk0.a = icmp ugt i32 %length_a, %x
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0.b = icmp ugt i32 %length_b, %x
chris-RemoveOne: return I  %chk0.b = icmp ugt i32 %length_b, %x
run: WorkList:   %chk0.b = icmp ugt i32 %length_b, %x
chris-run: I=  %chk0.b = icmp ugt i32 %length_b, %x
chris-run: I-end=  %chk0.b = icmp ugt i32 %length_b, %x
IC: Visiting:   %chk0.b = icmp ugt i32 %length_b, %x
test1: I=  %chk0.b = icmp ugt i32 %length_b, %x
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = and i1 %chk0.a, %chk0.b
chris-RemoveOne: return I  %chk0 = and i1 %chk0.a, %chk0.b
run: WorkList:   %chk0 = and i1 %chk0.a, %chk0.b
chris-run: I=  %chk0 = and i1 %chk0.a, %chk0.b
chris-run: I-end=  %chk0 = and i1 %chk0.a, %chk0.b
IC: Visiting:   %chk0 = and i1 %chk0.a, %chk0.b
test1: I=  %chk0 = and i1 %chk0.a, %chk0.b
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = add nuw nsw i32 %x, 1
NextInst[0]   %chk1.a = icmp ult i32 %x.inc1, %length_a
NextInst[1]   %chk1.b = icmp ult i32 %x.inc1, %length_b
NextInst[2]   %chk1 = and i1 %chk1.a, %chk1.b
Inst[end]:   %chk1 = and i1 %chk1.a, %chk1.b
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add nuw nsw i32 %x, 1
chris-RemoveOne: return I  %x.inc1 = add nuw nsw i32 %x, 1
run: WorkList:   %x.inc1 = add nuw nsw i32 %x, 1
chris-run: I=  %x.inc1 = add nuw nsw i32 %x, 1
chris-run: I-end=  %x.inc1 = add nuw nsw i32 %x, 1
IC: Visiting:   %x.inc1 = add nuw nsw i32 %x, 1
test1: I=  %x.inc1 = add nuw nsw i32 %x, 1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1.a = icmp ult i32 %x.inc1, %length_a
chris-RemoveOne: return I  %chk1.a = icmp ult i32 %x.inc1, %length_a
run: WorkList:   %chk1.a = icmp ult i32 %x.inc1, %length_a
chris-run: I=  %chk1.a = icmp ult i32 %x.inc1, %length_a
chris-run: I-end=  %chk1.a = icmp ult i32 %x.inc1, %length_a
IC: Visiting:   %chk1.a = icmp ult i32 %x.inc1, %length_a
test1: I=  %chk1.a = icmp ult i32 %x.inc1, %length_a
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1.b = icmp ult i32 %x.inc1, %length_b
chris-RemoveOne: return I  %chk1.b = icmp ult i32 %x.inc1, %length_b
run: WorkList:   %chk1.b = icmp ult i32 %x.inc1, %length_b
chris-run: I=  %chk1.b = icmp ult i32 %x.inc1, %length_b
chris-run: I-end=  %chk1.b = icmp ult i32 %x.inc1, %length_b
IC: Visiting:   %chk1.b = icmp ult i32 %x.inc1, %length_b
test1: I=  %chk1.b = icmp ult i32 %x.inc1, %length_b
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = and i1 %chk1.a, %chk1.b
chris-RemoveOne: return I  %chk1 = and i1 %chk1.a, %chk1.b
run: WorkList:   %chk1 = and i1 %chk1.a, %chk1.b
chris-run: I=  %chk1 = and i1 %chk1.a, %chk1.b
chris-run: I-end=  %chk1 = and i1 %chk1.a, %chk1.b
IC: Visiting:   %chk1 = and i1 %chk1.a, %chk1.b
test1: I=  %chk1 = and i1 %chk1.a, %chk1.b
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add nuw nsw i32 %x, 2
NextInst[0]   %chk2.a = icmp ult i32 %x.inc2, %length_a
NextInst[1]   %chk2.b = icmp ult i32 %x.inc2, %length_b
NextInst[2]   %chk2 = and i1 %chk2.a, %chk2.b
Inst[end]:   %chk2 = and i1 %chk2.a, %chk2.b
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add nuw nsw i32 %x, 2
chris-RemoveOne: return I  %x.inc2 = add nuw nsw i32 %x, 2
run: WorkList:   %x.inc2 = add nuw nsw i32 %x, 2
chris-run: I=  %x.inc2 = add nuw nsw i32 %x, 2
chris-run: I-end=  %x.inc2 = add nuw nsw i32 %x, 2
IC: Visiting:   %x.inc2 = add nuw nsw i32 %x, 2
test1: I=  %x.inc2 = add nuw nsw i32 %x, 2
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2.a = icmp ult i32 %x.inc2, %length_a
chris-RemoveOne: return I  %chk2.a = icmp ult i32 %x.inc2, %length_a
run: WorkList:   %chk2.a = icmp ult i32 %x.inc2, %length_a
chris-run: I=  %chk2.a = icmp ult i32 %x.inc2, %length_a
chris-run: I-end=  %chk2.a = icmp ult i32 %x.inc2, %length_a
IC: Visiting:   %chk2.a = icmp ult i32 %x.inc2, %length_a
test1: I=  %chk2.a = icmp ult i32 %x.inc2, %length_a
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2.b = icmp ult i32 %x.inc2, %length_b
chris-RemoveOne: return I  %chk2.b = icmp ult i32 %x.inc2, %length_b
run: WorkList:   %chk2.b = icmp ult i32 %x.inc2, %length_b
chris-run: I=  %chk2.b = icmp ult i32 %x.inc2, %length_b
chris-run: I-end=  %chk2.b = icmp ult i32 %x.inc2, %length_b
IC: Visiting:   %chk2.b = icmp ult i32 %x.inc2, %length_b
test1: I=  %chk2.b = icmp ult i32 %x.inc2, %length_b
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = and i1 %chk2.a, %chk2.b
chris-RemoveOne: return I  %chk2 = and i1 %chk2.a, %chk2.b
run: WorkList:   %chk2 = and i1 %chk2.a, %chk2.b
chris-run: I=  %chk2 = and i1 %chk2.a, %chk2.b
chris-run: I-end=  %chk2 = and i1 %chk2.a, %chk2.b
IC: Visiting:   %chk2 = and i1 %chk2.a, %chk2.b
test1: I=  %chk2 = and i1 %chk2.a, %chk2.b
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add nuw nsw i32 %x, 3
NextInst[0]   %chk3.a = icmp ult i32 %x.inc3, %length_a
NextInst[1]   %chk3.b = icmp ult i32 %x.inc3, %length_b
NextInst[2]   %chk3 = and i1 %chk3.a, %chk3.b
Inst[end]:   %chk3 = and i1 %chk3.a, %chk3.b
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw nsw i32 %x, 3
chris-RemoveOne: return I  %x.inc3 = add nuw nsw i32 %x, 3
run: WorkList:   %x.inc3 = add nuw nsw i32 %x, 3
chris-run: I=  %x.inc3 = add nuw nsw i32 %x, 3
chris-run: I-end=  %x.inc3 = add nuw nsw i32 %x, 3
IC: Visiting:   %x.inc3 = add nuw nsw i32 %x, 3
test1: I=  %x.inc3 = add nuw nsw i32 %x, 3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3.a = icmp ult i32 %x.inc3, %length_a
chris-RemoveOne: return I  %chk3.a = icmp ult i32 %x.inc3, %length_a
run: WorkList:   %chk3.a = icmp ult i32 %x.inc3, %length_a
chris-run: I=  %chk3.a = icmp ult i32 %x.inc3, %length_a
chris-run: I-end=  %chk3.a = icmp ult i32 %x.inc3, %length_a
IC: Visiting:   %chk3.a = icmp ult i32 %x.inc3, %length_a
test1: I=  %chk3.a = icmp ult i32 %x.inc3, %length_a
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3.b = icmp ult i32 %x.inc3, %length_b
chris-RemoveOne: return I  %chk3.b = icmp ult i32 %x.inc3, %length_b
run: WorkList:   %chk3.b = icmp ult i32 %x.inc3, %length_b
chris-run: I=  %chk3.b = icmp ult i32 %x.inc3, %length_b
chris-run: I-end=  %chk3.b = icmp ult i32 %x.inc3, %length_b
IC: Visiting:   %chk3.b = icmp ult i32 %x.inc3, %length_b
test1: I=  %chk3.b = icmp ult i32 %x.inc3, %length_b
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = and i1 %chk3.a, %chk3.b
chris-RemoveOne: return I  %chk3 = and i1 %chk3.a, %chk3.b
run: WorkList:   %chk3 = and i1 %chk3.a, %chk3.b
chris-run: I=  %chk3 = and i1 %chk3.a, %chk3.b
chris-run: I-end=  %chk3 = and i1 %chk3.a, %chk3.b
IC: Visiting:   %chk3 = and i1 %chk3.a, %chk3.b
test1: I=  %chk3 = and i1 %chk3.a, %chk3.b
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void
 ok, break
Inst[end]:   ret void
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void
chris-RemoveOne: return I  ret void
run: WorkList:   ret void
chris-run: I=  ret void
chris-run: I-end=  ret void
IC: Visiting:   ret void
test1: I=  ret void
visit: nullptr 
test3
test4
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
runOnFunction: I:  %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
runOnFunction: I:  %chk0.a = icmp ugt i32 %length_a, %x
runOnFunction: I:  %chk0.b = icmp ugt i32 %length_b, %x
runOnFunction: I:  %chk0 = and i1 %chk0.a, %chk0.b
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
runOnFunction: I:  %x.inc1 = add nuw nsw i32 %x, 1
runOnFunction: I:  %chk1.a = icmp ult i32 %x.inc1, %length_a
runOnFunction: I:  %chk1.b = icmp ult i32 %x.inc1, %length_b
runOnFunction: I:  %chk1 = and i1 %chk1.a, %chk1.b
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
runOnFunction: I:  %x.inc2 = add nuw nsw i32 %x, 2
runOnFunction: I:  %chk2.a = icmp ult i32 %x.inc2, %length_a
runOnFunction: I:  %chk2.b = icmp ult i32 %x.inc2, %length_b
runOnFunction: I:  %chk2 = and i1 %chk2.a, %chk2.b
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
runOnFunction: I:  %x.inc3 = add nuw nsw i32 %x, 3
runOnFunction: I:  %chk3.a = icmp ult i32 %x.inc3, %length_a
runOnFunction: I:  %chk3.b = icmp ult i32 %x.inc3, %length_b
runOnFunction: I:  %chk3 = and i1 %chk3.a, %chk3.b
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
runOnFunction: I:  ret void
INSTCOMBINE ITERATION: Inst(start):  %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(start):  %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(start):  %chk0.a = icmp ugt i32 %length_a, %x
INSTCOMBINE ITERATION: Inst(start):  %chk0.b = icmp ugt i32 %length_b, %x
INSTCOMBINE ITERATION: Inst(start):  %chk0 = and i1 %chk0.a, %chk0.b
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add nuw nsw i32 %x, 1
INSTCOMBINE ITERATION: Inst(start):  %chk1.a = icmp ult i32 %x.inc1, %length_a
INSTCOMBINE ITERATION: Inst(start):  %chk1.b = icmp ult i32 %x.inc1, %length_b
INSTCOMBINE ITERATION: Inst(start):  %chk1 = and i1 %chk1.a, %chk1.b
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add nuw nsw i32 %x, 2
INSTCOMBINE ITERATION: Inst(start):  %chk2.a = icmp ult i32 %x.inc2, %length_a
INSTCOMBINE ITERATION: Inst(start):  %chk2.b = icmp ult i32 %x.inc2, %length_b
INSTCOMBINE ITERATION: Inst(start):  %chk2 = and i1 %chk2.a, %chk2.b
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw nsw i32 %x, 3
INSTCOMBINE ITERATION: Inst(start):  %chk3.a = icmp ult i32 %x.inc3, %length_a
INSTCOMBINE ITERATION: Inst(start):  %chk3.b = icmp ult i32 %x.inc3, %length_b
INSTCOMBINE ITERATION: Inst(start):  %chk3 = and i1 %chk3.a, %chk3.b
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  ret void


INSTCOMBINE ITERATION #1 on f_7
INSTCOMBINE ITERATION: Inst(end):  %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(end):  %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(end):  %chk0.a = icmp ugt i32 %length_a, %x
INSTCOMBINE ITERATION: Inst(end):  %chk0.b = icmp ugt i32 %length_b, %x
INSTCOMBINE ITERATION: Inst(end):  %chk0 = and i1 %chk0.a, %chk0.b
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add nuw nsw i32 %x, 1
INSTCOMBINE ITERATION: Inst(end):  %chk1.a = icmp ult i32 %x.inc1, %length_a
INSTCOMBINE ITERATION: Inst(end):  %chk1.b = icmp ult i32 %x.inc1, %length_b
INSTCOMBINE ITERATION: Inst(end):  %chk1 = and i1 %chk1.a, %chk1.b
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add nuw nsw i32 %x, 2
INSTCOMBINE ITERATION: Inst(end):  %chk2.a = icmp ult i32 %x.inc2, %length_a
INSTCOMBINE ITERATION: Inst(end):  %chk2.b = icmp ult i32 %x.inc2, %length_b
INSTCOMBINE ITERATION: Inst(end):  %chk2 = and i1 %chk2.a, %chk2.b
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw nsw i32 %x, 3
INSTCOMBINE ITERATION: Inst(end):  %chk3.a = icmp ult i32 %x.inc3, %length_a
INSTCOMBINE ITERATION: Inst(end):  %chk3.b = icmp ult i32 %x.inc3, %length_b
INSTCOMBINE ITERATION: Inst(end):  %chk3 = and i1 %chk3.a, %chk3.b
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  ret void
chris-worklist-bb: bb: 
entry:
  %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
  %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
  %chk0.a = icmp ugt i32 %length_a, %x
  %chk0.b = icmp ugt i32 %length_b, %x
  %chk0 = and i1 %chk0.a, %chk0.b
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
  %x.inc1 = add nuw nsw i32 %x, 1
  %chk1.a = icmp ult i32 %x.inc1, %length_a
  %chk1.b = icmp ult i32 %x.inc1, %length_b
  %chk1 = and i1 %chk1.a, %chk1.b
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
  %x.inc2 = add nuw nsw i32 %x, 2
  %chk2.a = icmp ult i32 %x.inc2, %length_a
  %chk2.b = icmp ult i32 %x.inc2, %length_b
  %chk2 = and i1 %chk2.a, %chk2.b
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
  %x.inc3 = add nuw nsw i32 %x, 3
  %chk3.a = icmp ult i32 %x.inc3, %length_a
  %chk3.b = icmp ult i32 %x.inc3, %length_b
  %chk3 = and i1 %chk3.a, %chk3.b
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
  ret void

chris-worklist-bb: BB: 
entry:
  %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
  %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
  %chk0.a = icmp ugt i32 %length_a, %x
  %chk0.b = icmp ugt i32 %length_b, %x
  %chk0 = and i1 %chk0.a, %chk0.b
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
  %x.inc1 = add nuw nsw i32 %x, 1
  %chk1.a = icmp ult i32 %x.inc1, %length_a
  %chk1.b = icmp ult i32 %x.inc1, %length_b
  %chk1 = and i1 %chk1.a, %chk1.b
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
  %x.inc2 = add nuw nsw i32 %x, 2
  %chk2.a = icmp ult i32 %x.inc2, %length_a
  %chk2.b = icmp ult i32 %x.inc2, %length_b
  %chk2 = and i1 %chk2.a, %chk2.b
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
  %x.inc3 = add nuw nsw i32 %x, 3
  %chk3.a = icmp ult i32 %x.inc3, %length_a
  %chk3.b = icmp ult i32 %x.inc3, %length_b
  %chk3 = and i1 %chk3.a, %chk3.b
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
  ret void

chris-worklist-bb: BB end:   %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
chris-worklist-bb: BB end:   %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
chris-worklist-bb: BB end:   %chk0.a = icmp ugt i32 %length_a, %x
chris-worklist-bb: BB end:   %chk0.b = icmp ugt i32 %length_b, %x
chris-worklist-bb: BB end:   %chk0 = and i1 %chk0.a, %chk0.b
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc1 = add nuw nsw i32 %x, 1
chris-worklist-bb: BB end:   %chk1.a = icmp ult i32 %x.inc1, %length_a
chris-worklist-bb: BB end:   %chk1.b = icmp ult i32 %x.inc1, %length_b
chris-worklist-bb: BB end:   %chk1 = and i1 %chk1.a, %chk1.b
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc2 = add nuw nsw i32 %x, 2
chris-worklist-bb: BB end:   %chk2.a = icmp ult i32 %x.inc2, %length_a
chris-worklist-bb: BB end:   %chk2.b = icmp ult i32 %x.inc2, %length_b
chris-worklist-bb: BB end:   %chk2 = and i1 %chk2.a, %chk2.b
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc3 = add nuw nsw i32 %x, 3
chris-worklist-bb: BB end:   %chk3.a = icmp ult i32 %x.inc3, %length_a
chris-worklist-bb: BB end:   %chk3.b = icmp ult i32 %x.inc3, %length_b
chris-worklist-bb: BB end:   %chk3 = and i1 %chk3.a, %chk3.b
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
chris-worklist-bb: BB end:   ret void
IC: ADDING: 22 instrs to worklist
chris-AddInitialGroup: I:   ret void
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
chris-AddInitialGroup: I:   %chk3 = and i1 %chk3.a, %chk3.b
chris-AddInitialGroup: I:   %chk3.b = icmp ult i32 %x.inc3, %length_b
chris-AddInitialGroup: I:   %chk3.a = icmp ult i32 %x.inc3, %length_a
chris-AddInitialGroup: I:   %x.inc3 = add nuw nsw i32 %x, 3
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-AddInitialGroup: I:   %chk2 = and i1 %chk2.a, %chk2.b
chris-AddInitialGroup: I:   %chk2.b = icmp ult i32 %x.inc2, %length_b
chris-AddInitialGroup: I:   %chk2.a = icmp ult i32 %x.inc2, %length_a
chris-AddInitialGroup: I:   %x.inc2 = add nuw nsw i32 %x, 2
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
chris-AddInitialGroup: I:   %chk1 = and i1 %chk1.a, %chk1.b
chris-AddInitialGroup: I:   %chk1.b = icmp ult i32 %x.inc1, %length_b
chris-AddInitialGroup: I:   %chk1.a = icmp ult i32 %x.inc1, %length_a
chris-AddInitialGroup: I:   %x.inc1 = add nuw nsw i32 %x, 1
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-AddInitialGroup: I:   %chk0 = and i1 %chk0.a, %chk0.b
chris-AddInitialGroup: I:   %chk0.b = icmp ugt i32 %length_b, %x
chris-AddInitialGroup: I:   %chk0.a = icmp ugt i32 %length_a, %x
chris-AddInitialGroup: I:   %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
chris-AddInitialGroup: I:   %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
RemoveOne!!!
chris-RemoveOne:   %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
chris-RemoveOne: return I  %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
run: WorkList:   %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
chris-run: I=  %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
chris-run: I-end=  %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
IC: Visiting:   %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
test1: I=  %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
chris-RemoveOne: return I  %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
run: WorkList:   %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
chris-run: I=  %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
chris-run: I-end=  %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
IC: Visiting:   %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
test1: I=  %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0.a = icmp ugt i32 %length_a, %x
chris-RemoveOne: return I  %chk0.a = icmp ugt i32 %length_a, %x
run: WorkList:   %chk0.a = icmp ugt i32 %length_a, %x
chris-run: I=  %chk0.a = icmp ugt i32 %length_a, %x
chris-run: I-end=  %chk0.a = icmp ugt i32 %length_a, %x
IC: Visiting:   %chk0.a = icmp ugt i32 %length_a, %x
test1: I=  %chk0.a = icmp ugt i32 %length_a, %x
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0.b = icmp ugt i32 %length_b, %x
chris-RemoveOne: return I  %chk0.b = icmp ugt i32 %length_b, %x
run: WorkList:   %chk0.b = icmp ugt i32 %length_b, %x
chris-run: I=  %chk0.b = icmp ugt i32 %length_b, %x
chris-run: I-end=  %chk0.b = icmp ugt i32 %length_b, %x
IC: Visiting:   %chk0.b = icmp ugt i32 %length_b, %x
test1: I=  %chk0.b = icmp ugt i32 %length_b, %x
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = and i1 %chk0.a, %chk0.b
chris-RemoveOne: return I  %chk0 = and i1 %chk0.a, %chk0.b
run: WorkList:   %chk0 = and i1 %chk0.a, %chk0.b
chris-run: I=  %chk0 = and i1 %chk0.a, %chk0.b
chris-run: I-end=  %chk0 = and i1 %chk0.a, %chk0.b
IC: Visiting:   %chk0 = and i1 %chk0.a, %chk0.b
test1: I=  %chk0 = and i1 %chk0.a, %chk0.b
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = add nuw nsw i32 %x, 1
NextInst[0]   %chk1.a = icmp ult i32 %x.inc1, %length_a
NextInst[1]   %chk1.b = icmp ult i32 %x.inc1, %length_b
NextInst[2]   %chk1 = and i1 %chk1.a, %chk1.b
Inst[end]:   %chk1 = and i1 %chk1.a, %chk1.b
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add nuw nsw i32 %x, 1
chris-RemoveOne: return I  %x.inc1 = add nuw nsw i32 %x, 1
run: WorkList:   %x.inc1 = add nuw nsw i32 %x, 1
chris-run: I=  %x.inc1 = add nuw nsw i32 %x, 1
chris-run: I-end=  %x.inc1 = add nuw nsw i32 %x, 1
IC: Visiting:   %x.inc1 = add nuw nsw i32 %x, 1
test1: I=  %x.inc1 = add nuw nsw i32 %x, 1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1.a = icmp ult i32 %x.inc1, %length_a
chris-RemoveOne: return I  %chk1.a = icmp ult i32 %x.inc1, %length_a
run: WorkList:   %chk1.a = icmp ult i32 %x.inc1, %length_a
chris-run: I=  %chk1.a = icmp ult i32 %x.inc1, %length_a
chris-run: I-end=  %chk1.a = icmp ult i32 %x.inc1, %length_a
IC: Visiting:   %chk1.a = icmp ult i32 %x.inc1, %length_a
test1: I=  %chk1.a = icmp ult i32 %x.inc1, %length_a
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1.b = icmp ult i32 %x.inc1, %length_b
chris-RemoveOne: return I  %chk1.b = icmp ult i32 %x.inc1, %length_b
run: WorkList:   %chk1.b = icmp ult i32 %x.inc1, %length_b
chris-run: I=  %chk1.b = icmp ult i32 %x.inc1, %length_b
chris-run: I-end=  %chk1.b = icmp ult i32 %x.inc1, %length_b
IC: Visiting:   %chk1.b = icmp ult i32 %x.inc1, %length_b
test1: I=  %chk1.b = icmp ult i32 %x.inc1, %length_b
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = and i1 %chk1.a, %chk1.b
chris-RemoveOne: return I  %chk1 = and i1 %chk1.a, %chk1.b
run: WorkList:   %chk1 = and i1 %chk1.a, %chk1.b
chris-run: I=  %chk1 = and i1 %chk1.a, %chk1.b
chris-run: I-end=  %chk1 = and i1 %chk1.a, %chk1.b
IC: Visiting:   %chk1 = and i1 %chk1.a, %chk1.b
test1: I=  %chk1 = and i1 %chk1.a, %chk1.b
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add nuw nsw i32 %x, 2
NextInst[0]   %chk2.a = icmp ult i32 %x.inc2, %length_a
NextInst[1]   %chk2.b = icmp ult i32 %x.inc2, %length_b
NextInst[2]   %chk2 = and i1 %chk2.a, %chk2.b
Inst[end]:   %chk2 = and i1 %chk2.a, %chk2.b
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add nuw nsw i32 %x, 2
chris-RemoveOne: return I  %x.inc2 = add nuw nsw i32 %x, 2
run: WorkList:   %x.inc2 = add nuw nsw i32 %x, 2
chris-run: I=  %x.inc2 = add nuw nsw i32 %x, 2
chris-run: I-end=  %x.inc2 = add nuw nsw i32 %x, 2
IC: Visiting:   %x.inc2 = add nuw nsw i32 %x, 2
test1: I=  %x.inc2 = add nuw nsw i32 %x, 2
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2.a = icmp ult i32 %x.inc2, %length_a
chris-RemoveOne: return I  %chk2.a = icmp ult i32 %x.inc2, %length_a
run: WorkList:   %chk2.a = icmp ult i32 %x.inc2, %length_a
chris-run: I=  %chk2.a = icmp ult i32 %x.inc2, %length_a
chris-run: I-end=  %chk2.a = icmp ult i32 %x.inc2, %length_a
IC: Visiting:   %chk2.a = icmp ult i32 %x.inc2, %length_a
test1: I=  %chk2.a = icmp ult i32 %x.inc2, %length_a
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2.b = icmp ult i32 %x.inc2, %length_b
chris-RemoveOne: return I  %chk2.b = icmp ult i32 %x.inc2, %length_b
run: WorkList:   %chk2.b = icmp ult i32 %x.inc2, %length_b
chris-run: I=  %chk2.b = icmp ult i32 %x.inc2, %length_b
chris-run: I-end=  %chk2.b = icmp ult i32 %x.inc2, %length_b
IC: Visiting:   %chk2.b = icmp ult i32 %x.inc2, %length_b
test1: I=  %chk2.b = icmp ult i32 %x.inc2, %length_b
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = and i1 %chk2.a, %chk2.b
chris-RemoveOne: return I  %chk2 = and i1 %chk2.a, %chk2.b
run: WorkList:   %chk2 = and i1 %chk2.a, %chk2.b
chris-run: I=  %chk2 = and i1 %chk2.a, %chk2.b
chris-run: I-end=  %chk2 = and i1 %chk2.a, %chk2.b
IC: Visiting:   %chk2 = and i1 %chk2.a, %chk2.b
test1: I=  %chk2 = and i1 %chk2.a, %chk2.b
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add nuw nsw i32 %x, 3
NextInst[0]   %chk3.a = icmp ult i32 %x.inc3, %length_a
NextInst[1]   %chk3.b = icmp ult i32 %x.inc3, %length_b
NextInst[2]   %chk3 = and i1 %chk3.a, %chk3.b
Inst[end]:   %chk3 = and i1 %chk3.a, %chk3.b
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw nsw i32 %x, 3
chris-RemoveOne: return I  %x.inc3 = add nuw nsw i32 %x, 3
run: WorkList:   %x.inc3 = add nuw nsw i32 %x, 3
chris-run: I=  %x.inc3 = add nuw nsw i32 %x, 3
chris-run: I-end=  %x.inc3 = add nuw nsw i32 %x, 3
IC: Visiting:   %x.inc3 = add nuw nsw i32 %x, 3
test1: I=  %x.inc3 = add nuw nsw i32 %x, 3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3.a = icmp ult i32 %x.inc3, %length_a
chris-RemoveOne: return I  %chk3.a = icmp ult i32 %x.inc3, %length_a
run: WorkList:   %chk3.a = icmp ult i32 %x.inc3, %length_a
chris-run: I=  %chk3.a = icmp ult i32 %x.inc3, %length_a
chris-run: I-end=  %chk3.a = icmp ult i32 %x.inc3, %length_a
IC: Visiting:   %chk3.a = icmp ult i32 %x.inc3, %length_a
test1: I=  %chk3.a = icmp ult i32 %x.inc3, %length_a
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3.b = icmp ult i32 %x.inc3, %length_b
chris-RemoveOne: return I  %chk3.b = icmp ult i32 %x.inc3, %length_b
run: WorkList:   %chk3.b = icmp ult i32 %x.inc3, %length_b
chris-run: I=  %chk3.b = icmp ult i32 %x.inc3, %length_b
chris-run: I-end=  %chk3.b = icmp ult i32 %x.inc3, %length_b
IC: Visiting:   %chk3.b = icmp ult i32 %x.inc3, %length_b
test1: I=  %chk3.b = icmp ult i32 %x.inc3, %length_b
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = and i1 %chk3.a, %chk3.b
chris-RemoveOne: return I  %chk3 = and i1 %chk3.a, %chk3.b
run: WorkList:   %chk3 = and i1 %chk3.a, %chk3.b
chris-run: I=  %chk3 = and i1 %chk3.a, %chk3.b
chris-run: I-end=  %chk3 = and i1 %chk3.a, %chk3.b
IC: Visiting:   %chk3 = and i1 %chk3.a, %chk3.b
test1: I=  %chk3 = and i1 %chk3.a, %chk3.b
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void
 ok, break
Inst[end]:   ret void
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void
chris-RemoveOne: return I  ret void
run: WorkList:   ret void
chris-run: I=  ret void
chris-run: I-end=  ret void
IC: Visiting:   ret void
test1: I=  ret void
visit: nullptr 
test3
test4
chris-InstructionCombiningPass::runOnFunction
runOnFunction: I:  %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
runOnFunction: I:  %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
runOnFunction: I:  %chk0.a = icmp ugt i32 %length_a, %x
runOnFunction: I:  %chk0.b = icmp ugt i32 %length_b, %x
runOnFunction: I:  %chk0 = and i1 %chk0.a, %chk0.b
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
runOnFunction: I:  %x.inc1 = add nuw nsw i32 %x, 1
runOnFunction: I:  %chk1.a = icmp ult i32 %x.inc1, %length_a
runOnFunction: I:  %chk1.b = icmp ult i32 %x.inc1, %length_b
runOnFunction: I:  %chk1 = and i1 %chk1.a, %chk1.b
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
runOnFunction: I:  %x.inc2 = add nuw nsw i32 %x, 2
runOnFunction: I:  %chk2.a = icmp ult i32 %x.inc2, %length_a
runOnFunction: I:  %chk2.b = icmp ult i32 %x.inc2, %length_b
runOnFunction: I:  %chk2 = and i1 %chk2.a, %chk2.b
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
runOnFunction: I:  %x.inc3 = add nuw nsw i32 %x, 3
runOnFunction: I:  %chk3.a = icmp ult i32 %x.inc3, %length_a
runOnFunction: I:  %chk3.b = icmp ult i32 %x.inc3, %length_b
runOnFunction: I:  %chk3 = and i1 %chk3.a, %chk3.b
runOnFunction: I:  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
runOnFunction: I:  ret void
INSTCOMBINE ITERATION: Inst(start):  %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(start):  %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(start):  %chk0.a = icmp ugt i32 %length_a, %x
INSTCOMBINE ITERATION: Inst(start):  %chk0.b = icmp ugt i32 %length_b, %x
INSTCOMBINE ITERATION: Inst(start):  %chk0 = and i1 %chk0.a, %chk0.b
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc1 = add nuw nsw i32 %x, 1
INSTCOMBINE ITERATION: Inst(start):  %chk1.a = icmp ult i32 %x.inc1, %length_a
INSTCOMBINE ITERATION: Inst(start):  %chk1.b = icmp ult i32 %x.inc1, %length_b
INSTCOMBINE ITERATION: Inst(start):  %chk1 = and i1 %chk1.a, %chk1.b
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc2 = add nuw nsw i32 %x, 2
INSTCOMBINE ITERATION: Inst(start):  %chk2.a = icmp ult i32 %x.inc2, %length_a
INSTCOMBINE ITERATION: Inst(start):  %chk2.b = icmp ult i32 %x.inc2, %length_b
INSTCOMBINE ITERATION: Inst(start):  %chk2 = and i1 %chk2.a, %chk2.b
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  %x.inc3 = add nuw nsw i32 %x, 3
INSTCOMBINE ITERATION: Inst(start):  %chk3.a = icmp ult i32 %x.inc3, %length_a
INSTCOMBINE ITERATION: Inst(start):  %chk3.b = icmp ult i32 %x.inc3, %length_b
INSTCOMBINE ITERATION: Inst(start):  %chk3 = and i1 %chk3.a, %chk3.b
INSTCOMBINE ITERATION: Inst(start):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(start):  ret void


INSTCOMBINE ITERATION #1 on f_7
INSTCOMBINE ITERATION: Inst(end):  %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(end):  %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
INSTCOMBINE ITERATION: Inst(end):  %chk0.a = icmp ugt i32 %length_a, %x
INSTCOMBINE ITERATION: Inst(end):  %chk0.b = icmp ugt i32 %length_b, %x
INSTCOMBINE ITERATION: Inst(end):  %chk0 = and i1 %chk0.a, %chk0.b
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc1 = add nuw nsw i32 %x, 1
INSTCOMBINE ITERATION: Inst(end):  %chk1.a = icmp ult i32 %x.inc1, %length_a
INSTCOMBINE ITERATION: Inst(end):  %chk1.b = icmp ult i32 %x.inc1, %length_b
INSTCOMBINE ITERATION: Inst(end):  %chk1 = and i1 %chk1.a, %chk1.b
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc2 = add nuw nsw i32 %x, 2
INSTCOMBINE ITERATION: Inst(end):  %chk2.a = icmp ult i32 %x.inc2, %length_a
INSTCOMBINE ITERATION: Inst(end):  %chk2.b = icmp ult i32 %x.inc2, %length_b
INSTCOMBINE ITERATION: Inst(end):  %chk2 = and i1 %chk2.a, %chk2.b
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  %x.inc3 = add nuw nsw i32 %x, 3
INSTCOMBINE ITERATION: Inst(end):  %chk3.a = icmp ult i32 %x.inc3, %length_a
INSTCOMBINE ITERATION: Inst(end):  %chk3.b = icmp ult i32 %x.inc3, %length_b
INSTCOMBINE ITERATION: Inst(end):  %chk3 = and i1 %chk3.a, %chk3.b
INSTCOMBINE ITERATION: Inst(end):  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
INSTCOMBINE ITERATION: Inst(end):  ret void
chris-worklist-bb: bb: 
entry:
  %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
  %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
  %chk0.a = icmp ugt i32 %length_a, %x
  %chk0.b = icmp ugt i32 %length_b, %x
  %chk0 = and i1 %chk0.a, %chk0.b
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
  %x.inc1 = add nuw nsw i32 %x, 1
  %chk1.a = icmp ult i32 %x.inc1, %length_a
  %chk1.b = icmp ult i32 %x.inc1, %length_b
  %chk1 = and i1 %chk1.a, %chk1.b
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
  %x.inc2 = add nuw nsw i32 %x, 2
  %chk2.a = icmp ult i32 %x.inc2, %length_a
  %chk2.b = icmp ult i32 %x.inc2, %length_b
  %chk2 = and i1 %chk2.a, %chk2.b
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
  %x.inc3 = add nuw nsw i32 %x, 3
  %chk3.a = icmp ult i32 %x.inc3, %length_a
  %chk3.b = icmp ult i32 %x.inc3, %length_b
  %chk3 = and i1 %chk3.a, %chk3.b
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
  ret void

chris-worklist-bb: BB: 
entry:
  %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
  %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
  %chk0.a = icmp ugt i32 %length_a, %x
  %chk0.b = icmp ugt i32 %length_b, %x
  %chk0 = and i1 %chk0.a, %chk0.b
  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
  %x.inc1 = add nuw nsw i32 %x, 1
  %chk1.a = icmp ult i32 %x.inc1, %length_a
  %chk1.b = icmp ult i32 %x.inc1, %length_b
  %chk1 = and i1 %chk1.a, %chk1.b
  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
  %x.inc2 = add nuw nsw i32 %x, 2
  %chk2.a = icmp ult i32 %x.inc2, %length_a
  %chk2.b = icmp ult i32 %x.inc2, %length_b
  %chk2 = and i1 %chk2.a, %chk2.b
  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
  %x.inc3 = add nuw nsw i32 %x, 3
  %chk3.a = icmp ult i32 %x.inc3, %length_a
  %chk3.b = icmp ult i32 %x.inc3, %length_b
  %chk3 = and i1 %chk3.a, %chk3.b
  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
  ret void

chris-worklist-bb: BB end:   %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
chris-worklist-bb: BB end:   %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
chris-worklist-bb: BB end:   %chk0.a = icmp ugt i32 %length_a, %x
chris-worklist-bb: BB end:   %chk0.b = icmp ugt i32 %length_b, %x
chris-worklist-bb: BB end:   %chk0 = and i1 %chk0.a, %chk0.b
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc1 = add nuw nsw i32 %x, 1
chris-worklist-bb: BB end:   %chk1.a = icmp ult i32 %x.inc1, %length_a
chris-worklist-bb: BB end:   %chk1.b = icmp ult i32 %x.inc1, %length_b
chris-worklist-bb: BB end:   %chk1 = and i1 %chk1.a, %chk1.b
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc2 = add nuw nsw i32 %x, 2
chris-worklist-bb: BB end:   %chk2.a = icmp ult i32 %x.inc2, %length_a
chris-worklist-bb: BB end:   %chk2.b = icmp ult i32 %x.inc2, %length_b
chris-worklist-bb: BB end:   %chk2 = and i1 %chk2.a, %chk2.b
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-worklist-bb: BB end:   %x.inc3 = add nuw nsw i32 %x, 3
chris-worklist-bb: BB end:   %chk3.a = icmp ult i32 %x.inc3, %length_a
chris-worklist-bb: BB end:   %chk3.b = icmp ult i32 %x.inc3, %length_b
chris-worklist-bb: BB end:   %chk3 = and i1 %chk3.a, %chk3.b
chris-worklist-bb: BB end:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
chris-worklist-bb: BB end:   ret void
IC: ADDING: 22 instrs to worklist
chris-AddInitialGroup: I:   ret void
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
chris-AddInitialGroup: I:   %chk3 = and i1 %chk3.a, %chk3.b
chris-AddInitialGroup: I:   %chk3.b = icmp ult i32 %x.inc3, %length_b
chris-AddInitialGroup: I:   %chk3.a = icmp ult i32 %x.inc3, %length_a
chris-AddInitialGroup: I:   %x.inc3 = add nuw nsw i32 %x, 3
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-AddInitialGroup: I:   %chk2 = and i1 %chk2.a, %chk2.b
chris-AddInitialGroup: I:   %chk2.b = icmp ult i32 %x.inc2, %length_b
chris-AddInitialGroup: I:   %chk2.a = icmp ult i32 %x.inc2, %length_a
chris-AddInitialGroup: I:   %x.inc2 = add nuw nsw i32 %x, 2
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
chris-AddInitialGroup: I:   %chk1 = and i1 %chk1.a, %chk1.b
chris-AddInitialGroup: I:   %chk1.b = icmp ult i32 %x.inc1, %length_b
chris-AddInitialGroup: I:   %chk1.a = icmp ult i32 %x.inc1, %length_a
chris-AddInitialGroup: I:   %x.inc1 = add nuw nsw i32 %x, 1
chris-AddInitialGroup: I:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-AddInitialGroup: I:   %chk0 = and i1 %chk0.a, %chk0.b
chris-AddInitialGroup: I:   %chk0.b = icmp ugt i32 %length_b, %x
chris-AddInitialGroup: I:   %chk0.a = icmp ugt i32 %length_a, %x
chris-AddInitialGroup: I:   %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
chris-AddInitialGroup: I:   %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
RemoveOne!!!
chris-RemoveOne:   %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
chris-RemoveOne: return I  %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
run: WorkList:   %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
chris-run: I=  %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
chris-run: I-end=  %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
IC: Visiting:   %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
test1: I=  %length_a = load volatile i32, i32* %length_buf, align 4, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
chris-RemoveOne: return I  %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
run: WorkList:   %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
chris-run: I=  %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
chris-run: I-end=  %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
IC: Visiting:   %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
test1: I=  %length_b = load volatile i32, i32* %length_buf, align 4, !range !0
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0.a = icmp ugt i32 %length_a, %x
chris-RemoveOne: return I  %chk0.a = icmp ugt i32 %length_a, %x
run: WorkList:   %chk0.a = icmp ugt i32 %length_a, %x
chris-run: I=  %chk0.a = icmp ugt i32 %length_a, %x
chris-run: I-end=  %chk0.a = icmp ugt i32 %length_a, %x
IC: Visiting:   %chk0.a = icmp ugt i32 %length_a, %x
test1: I=  %chk0.a = icmp ugt i32 %length_a, %x
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0.b = icmp ugt i32 %length_b, %x
chris-RemoveOne: return I  %chk0.b = icmp ugt i32 %length_b, %x
run: WorkList:   %chk0.b = icmp ugt i32 %length_b, %x
chris-run: I=  %chk0.b = icmp ugt i32 %length_b, %x
chris-run: I-end=  %chk0.b = icmp ugt i32 %length_b, %x
IC: Visiting:   %chk0.b = icmp ugt i32 %length_b, %x
test1: I=  %chk0.b = icmp ugt i32 %length_b, %x
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk0 = and i1 %chk0.a, %chk0.b
chris-RemoveOne: return I  %chk0 = and i1 %chk0.a, %chk0.b
run: WorkList:   %chk0 = and i1 %chk0.a, %chk0.b
chris-run: I=  %chk0 = and i1 %chk0.a, %chk0.b
chris-run: I-end=  %chk0 = and i1 %chk0.a, %chk0.b
IC: Visiting:   %chk0 = and i1 %chk0.a, %chk0.b
test1: I=  %chk0 = and i1 %chk0.a, %chk0.b
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk0) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc1 = add nuw nsw i32 %x, 1
NextInst[0]   %chk1.a = icmp ult i32 %x.inc1, %length_a
NextInst[1]   %chk1.b = icmp ult i32 %x.inc1, %length_b
NextInst[2]   %chk1 = and i1 %chk1.a, %chk1.b
Inst[end]:   %chk1 = and i1 %chk1.a, %chk1.b
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc1 = add nuw nsw i32 %x, 1
chris-RemoveOne: return I  %x.inc1 = add nuw nsw i32 %x, 1
run: WorkList:   %x.inc1 = add nuw nsw i32 %x, 1
chris-run: I=  %x.inc1 = add nuw nsw i32 %x, 1
chris-run: I-end=  %x.inc1 = add nuw nsw i32 %x, 1
IC: Visiting:   %x.inc1 = add nuw nsw i32 %x, 1
test1: I=  %x.inc1 = add nuw nsw i32 %x, 1
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1.a = icmp ult i32 %x.inc1, %length_a
chris-RemoveOne: return I  %chk1.a = icmp ult i32 %x.inc1, %length_a
run: WorkList:   %chk1.a = icmp ult i32 %x.inc1, %length_a
chris-run: I=  %chk1.a = icmp ult i32 %x.inc1, %length_a
chris-run: I-end=  %chk1.a = icmp ult i32 %x.inc1, %length_a
IC: Visiting:   %chk1.a = icmp ult i32 %x.inc1, %length_a
test1: I=  %chk1.a = icmp ult i32 %x.inc1, %length_a
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1.b = icmp ult i32 %x.inc1, %length_b
chris-RemoveOne: return I  %chk1.b = icmp ult i32 %x.inc1, %length_b
run: WorkList:   %chk1.b = icmp ult i32 %x.inc1, %length_b
chris-run: I=  %chk1.b = icmp ult i32 %x.inc1, %length_b
chris-run: I-end=  %chk1.b = icmp ult i32 %x.inc1, %length_b
IC: Visiting:   %chk1.b = icmp ult i32 %x.inc1, %length_b
test1: I=  %chk1.b = icmp ult i32 %x.inc1, %length_b
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk1 = and i1 %chk1.a, %chk1.b
chris-RemoveOne: return I  %chk1 = and i1 %chk1.a, %chk1.b
run: WorkList:   %chk1 = and i1 %chk1.a, %chk1.b
chris-run: I=  %chk1 = and i1 %chk1.a, %chk1.b
chris-run: I-end=  %chk1 = and i1 %chk1.a, %chk1.b
IC: Visiting:   %chk1 = and i1 %chk1.a, %chk1.b
test1: I=  %chk1 = and i1 %chk1.a, %chk1.b
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk1) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc2 = add nuw nsw i32 %x, 2
NextInst[0]   %chk2.a = icmp ult i32 %x.inc2, %length_a
NextInst[1]   %chk2.b = icmp ult i32 %x.inc2, %length_b
NextInst[2]   %chk2 = and i1 %chk2.a, %chk2.b
Inst[end]:   %chk2 = and i1 %chk2.a, %chk2.b
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc2 = add nuw nsw i32 %x, 2
chris-RemoveOne: return I  %x.inc2 = add nuw nsw i32 %x, 2
run: WorkList:   %x.inc2 = add nuw nsw i32 %x, 2
chris-run: I=  %x.inc2 = add nuw nsw i32 %x, 2
chris-run: I-end=  %x.inc2 = add nuw nsw i32 %x, 2
IC: Visiting:   %x.inc2 = add nuw nsw i32 %x, 2
test1: I=  %x.inc2 = add nuw nsw i32 %x, 2
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2.a = icmp ult i32 %x.inc2, %length_a
chris-RemoveOne: return I  %chk2.a = icmp ult i32 %x.inc2, %length_a
run: WorkList:   %chk2.a = icmp ult i32 %x.inc2, %length_a
chris-run: I=  %chk2.a = icmp ult i32 %x.inc2, %length_a
chris-run: I-end=  %chk2.a = icmp ult i32 %x.inc2, %length_a
IC: Visiting:   %chk2.a = icmp ult i32 %x.inc2, %length_a
test1: I=  %chk2.a = icmp ult i32 %x.inc2, %length_a
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2.b = icmp ult i32 %x.inc2, %length_b
chris-RemoveOne: return I  %chk2.b = icmp ult i32 %x.inc2, %length_b
run: WorkList:   %chk2.b = icmp ult i32 %x.inc2, %length_b
chris-run: I=  %chk2.b = icmp ult i32 %x.inc2, %length_b
chris-run: I-end=  %chk2.b = icmp ult i32 %x.inc2, %length_b
IC: Visiting:   %chk2.b = icmp ult i32 %x.inc2, %length_b
test1: I=  %chk2.b = icmp ult i32 %x.inc2, %length_b
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk2 = and i1 %chk2.a, %chk2.b
chris-RemoveOne: return I  %chk2 = and i1 %chk2.a, %chk2.b
run: WorkList:   %chk2 = and i1 %chk2.a, %chk2.b
chris-run: I=  %chk2 = and i1 %chk2.a, %chk2.b
chris-run: I-end=  %chk2 = and i1 %chk2.a, %chk2.b
IC: Visiting:   %chk2 = and i1 %chk2.a, %chk2.b
test1: I=  %chk2 = and i1 %chk2.a, %chk2.b
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk2) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  %x.inc3 = add nuw nsw i32 %x, 3
NextInst[0]   %chk3.a = icmp ult i32 %x.inc3, %length_a
NextInst[1]   %chk3.b = icmp ult i32 %x.inc3, %length_b
NextInst[2]   %chk3 = and i1 %chk3.a, %chk3.b
Inst[end]:   %chk3 = and i1 %chk3.a, %chk3.b
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %x.inc3 = add nuw nsw i32 %x, 3
chris-RemoveOne: return I  %x.inc3 = add nuw nsw i32 %x, 3
run: WorkList:   %x.inc3 = add nuw nsw i32 %x, 3
chris-run: I=  %x.inc3 = add nuw nsw i32 %x, 3
chris-run: I-end=  %x.inc3 = add nuw nsw i32 %x, 3
IC: Visiting:   %x.inc3 = add nuw nsw i32 %x, 3
test1: I=  %x.inc3 = add nuw nsw i32 %x, 3
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3.a = icmp ult i32 %x.inc3, %length_a
chris-RemoveOne: return I  %chk3.a = icmp ult i32 %x.inc3, %length_a
run: WorkList:   %chk3.a = icmp ult i32 %x.inc3, %length_a
chris-run: I=  %chk3.a = icmp ult i32 %x.inc3, %length_a
chris-run: I-end=  %chk3.a = icmp ult i32 %x.inc3, %length_a
IC: Visiting:   %chk3.a = icmp ult i32 %x.inc3, %length_a
test1: I=  %chk3.a = icmp ult i32 %x.inc3, %length_a
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3.b = icmp ult i32 %x.inc3, %length_b
chris-RemoveOne: return I  %chk3.b = icmp ult i32 %x.inc3, %length_b
run: WorkList:   %chk3.b = icmp ult i32 %x.inc3, %length_b
chris-run: I=  %chk3.b = icmp ult i32 %x.inc3, %length_b
chris-run: I-end=  %chk3.b = icmp ult i32 %x.inc3, %length_b
IC: Visiting:   %chk3.b = icmp ult i32 %x.inc3, %length_b
test1: I=  %chk3.b = icmp ult i32 %x.inc3, %length_b
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   %chk3 = and i1 %chk3.a, %chk3.b
chris-RemoveOne: return I  %chk3 = and i1 %chk3.a, %chk3.b
run: WorkList:   %chk3 = and i1 %chk3.a, %chk3.b
chris-run: I=  %chk3 = and i1 %chk3.a, %chk3.b
chris-run: I-end=  %chk3 = and i1 %chk3.a, %chk3.b
IC: Visiting:   %chk3 = and i1 %chk3.a, %chk3.b
test1: I=  %chk3 = and i1 %chk3.a, %chk3.b
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
chris-RemoveOne: return I  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
run: WorkList:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
chris-run: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
chris-run: I-end=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
IC: Visiting:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
test1: I=  call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
chris-debug7
  II:   call void (i1, ...) @llvm.experimental.guard(i1 %chk3) [ "deopt"() ]
  IID: 96
  experimental_guard: 96
GuardWideningWindow: 3
Inst[start]:  ret void
 ok, break
Inst[end]:   ret void
chris-debug7-8
chris-debug4
visit: nullptr 
test3
RemoveOne!!!
chris-RemoveOne:   ret void
chris-RemoveOne: return I  ret void
run: WorkList:   ret void
chris-run: I=  ret void
chris-run: I-end=  ret void
IC: Visiting:   ret void
test1: I=  ret void
visit: nullptr 
test3
test4
